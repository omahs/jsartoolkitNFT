(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ARToolkitNFT"] = factory();
	else
		root["ARToolkitNFT"] = factory();
})(typeof self !== 'undefined' ? self : this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./build/artoolkitNFT_ES6_wasm.js":
/*!****************************************!*\
  !*** ./build/artoolkitNFT_ES6_wasm.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
var __filename = "/index.js";
var __dirname = "/";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });

var Module = (() => {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (true) _scriptDir = _scriptDir || __filename;
  return (
function(Module) {
  Module = Module || {};

var Module=typeof Module!="undefined"?Module:{};var readyPromiseResolve,readyPromiseReject;Module["ready"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides=Object.assign({},Module);var arguments_=[];var thisProgram="./this.program";var quit_=(status,toThrow)=>{throw toThrow};var ENVIRONMENT_IS_WEB=typeof window=="object";var ENVIRONMENT_IS_WORKER=typeof importScripts=="function";var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;function logExceptionOnExit(e){if(e instanceof ExitStatus)return;let toLog=e;err("exiting due to exception: "+toLog)}var fs;var nodePath;var requireNodeFS;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=(__webpack_require__(/*! path */ "?f955").dirname)(scriptDirectory)+"/"}else{scriptDirectory=__dirname+"/"}requireNodeFS=(()=>{if(!nodePath){fs=__webpack_require__(/*! fs */ "?4dea");nodePath=__webpack_require__(/*! path */ "?f955")}});read_=function shell_read(filename,binary){var ret=tryParseAsDataURI(filename);if(ret){return binary?ret:ret.toString()}requireNodeFS();filename=nodePath["normalize"](filename);return fs.readFileSync(filename,binary?undefined:"utf8")};readBinary=(filename=>{var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}return ret});readAsync=((filename,onload,onerror)=>{var ret=tryParseAsDataURI(filename);if(ret){onload(ret)}requireNodeFS();filename=nodePath["normalize"](filename);fs.readFile(filename,function(err,data){if(err)onerror(err);else onload(data.buffer)})});if(process["argv"].length>1){thisProgram=process["argv"][1].replace(/\\/g,"/")}arguments_=process["argv"].slice(2);process["on"]("uncaughtException",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process["on"]("unhandledRejection",function(reason){throw reason});quit_=((status,toThrow)=>{if(keepRuntimeAlive()){process["exitCode"]=status;throw toThrow}logExceptionOnExit(toThrow);process["exit"](status)});Module["inspect"]=function(){return"[Emscripten Module object]"}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!="undefined"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,"").lastIndexOf("/")+1)}else{scriptDirectory=""}{read_=(url=>{try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText}catch(err){var data=tryParseAsDataURI(url);if(data){return intArrayToString(data)}throw err}});if(ENVIRONMENT_IS_WORKER){readBinary=(url=>{try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}catch(err){var data=tryParseAsDataURI(url);if(data){return data}throw err}})}readAsync=((url,onload,onerror)=>{var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=(()=>{if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}var data=tryParseAsDataURI(url);if(data){onload(data.buffer);return}onerror()});xhr.onerror=onerror;xhr.send(null)})}setWindowTitle=(title=>document.title=title)}else{}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.warn.bind(console);Object.assign(Module,moduleOverrides);moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(Module["quit"])quit_=Module["quit"];var tempRet0=0;var setTempRet0=value=>{tempRet0=value};var getTempRet0=()=>tempRet0;var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];var noExitRuntime=Module["noExitRuntime"]||true;if(typeof WebAssembly!="object"){abort("no native wasm support detected")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(text)}}var UTF8Decoder=typeof TextDecoder!="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(heapOrArray,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heapOrArray[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heapOrArray.buffer&&UTF8Decoder){return UTF8Decoder.decode(heapOrArray.subarray(idx,endPtr))}else{var str="";while(idx<endPtr){var u0=heapOrArray[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heapOrArray[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heapOrArray[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heapOrArray[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}var UTF16Decoder=typeof TextDecoder!="undefined"?new TextDecoder("utf-16le"):undefined;function UTF16ToString(ptr,maxBytesToRead){var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&HEAPU16[idx])++idx;endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder){return UTF16Decoder.decode(HEAPU8.subarray(ptr,endPtr))}else{var str="";for(var i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)break;str+=String.fromCharCode(codeUnit)}return str}}function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr}function lengthBytesUTF16(str){return str.length*2}function UTF32ToString(ptr,maxBytesToRead){var i=0;var str="";while(!(i>=maxBytesToRead/4)){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}return str}function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr}function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len}function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module["HEAP8"]=HEAP8=new Int8Array(buf);Module["HEAP16"]=HEAP16=new Int16Array(buf);Module["HEAP32"]=HEAP32=new Int32Array(buf);Module["HEAPU8"]=HEAPU8=new Uint8Array(buf);Module["HEAPU16"]=HEAPU16=new Uint16Array(buf);Module["HEAPU32"]=HEAPU32=new Uint32Array(buf);Module["HEAPF32"]=HEAPF32=new Float32Array(buf);Module["HEAPF64"]=HEAPF64=new Float64Array(buf)}var INITIAL_MEMORY=Module["INITIAL_MEMORY"]||268435456;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function keepRuntimeAlive(){return noExitRuntime}function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;if(!Module["noFSInit"]&&!FS.init.initialized)FS.init();FS.ignorePermissions=false;TTY.init();callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}function abort(what){{if(Module["onAbort"]){Module["onAbort"](what)}}what="Aborted("+what+")";err(what);ABORT=true;EXITSTATUS=1;what+=". Build with -sASSERTIONS for more info.";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith("file://")}var wasmBinaryFile;wasmBinaryFile="data:application/octet-stream;base64,";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}var binary=tryParseAsDataURI(file);if(binary){return binary}if(readBinary){return readBinary(file)}else{throw"both async and sync fetching of the wasm failed"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch=="function"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()}).catch(function(){return getBinary(wasmBinaryFile)})}else{if(readAsync){return new Promise(function(resolve,reject){readAsync(wasmBinaryFile,function(response){resolve(new Uint8Array(response))},reject)})}}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={"a":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;wasmMemory=Module["asm"]["Y"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module["asm"]["ba"];addOnInit(Module["asm"]["Z"]);removeRunDependency("wasm-instantiate")}addRunDependency("wasm-instantiate");function receiveInstantiationResult(result){receiveInstance(result["instance"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(function(instance){return instance}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming=="function"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch=="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiationResult,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");return instantiateArrayBuffer(receiveInstantiationResult)})})}else{return instantiateArrayBuffer(receiveInstantiationResult)}}if(Module["instantiateWasm"]){try{var exports=Module["instantiateWasm"](info,receiveInstance);return exports}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}instantiateAsync().catch(readyPromiseReject);return{}}var tempDouble;var tempI64;var ASM_CONSTS={63616:function($0,$1,$2){var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);console.log(infoHead+message,style)},63755:function($0,$1,$2,$3){var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.log(infoHead+message,style,format)},63933:function($0,$1,$2,$3){var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.log(infoHead+message,style,format)},64111:function($0,$1,$2,$3){var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.log(infoHead+message,style,format)},64289:function($0,$1,$2,$3){var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.log(infoHead+message,style,format)},64467:function($0,$1,$2,$3){var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);console.log(infoHead+message,style,$3)},64610:function($0,$1,$2){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);console.error(errorHead+message,style)},64753:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.error(errorHead+message,style,format)},64935:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.error(errorHead+message,style,format)},65117:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.error(errorHead+message,style,format)},65299:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.error(errorHead+message,style,format)},65481:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);console.error(errorHead+message,style,$3)},65628:function($0,$1,$2){var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);console.warn(infoHead+message,style)},65768:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.warn(errorHead+message,style,format)},65949:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.warn(errorHead+message,style,format)},66130:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.warn(errorHead+message,style,format)},66311:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.warn(errorHead+message,style,format)},66492:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);console.warn(errorHead+message,style,$3)},66638:function(){var $a=arguments;var i=0;if(!artoolkitNFT["NFTMarkerInfo"]){artoolkitNFT["NFTMarkerInfo"]={id:0,error:-1,found:0,pose:[0,0,0,0,0,0,0,0,0,0,0,0]}}var markerInfo=artoolkitNFT["NFTMarkerInfo"];markerInfo["id"]=$a[i++];markerInfo["error"]=$a[i++];markerInfo["found"]=1;markerInfo["pose"][0]=$a[i++];markerInfo["pose"][1]=$a[i++];markerInfo["pose"][2]=$a[i++];markerInfo["pose"][3]=$a[i++];markerInfo["pose"][4]=$a[i++];markerInfo["pose"][5]=$a[i++];markerInfo["pose"][6]=$a[i++];markerInfo["pose"][7]=$a[i++];markerInfo["pose"][8]=$a[i++];markerInfo["pose"][9]=$a[i++];markerInfo["pose"][10]=$a[i++];markerInfo["pose"][11]=$a[i++]},67344:function(){var $a=arguments;var i=0;if(!artoolkitNFT["NFTMarkerInfo"]){artoolkitNFT["NFTMarkerInfo"]={id:0,error:-1,found:0,pose:[0,0,0,0,0,0,0,0,0,0,0,0]}}var markerInfo=artoolkitNFT["NFTMarkerInfo"];markerInfo["id"]=$a[i++];markerInfo["error"]=-1;markerInfo["found"]=0;markerInfo["pose"][0]=0;markerInfo["pose"][1]=0;markerInfo["pose"][2]=0;markerInfo["pose"][3]=0;markerInfo["pose"][4]=0;markerInfo["pose"][5]=0;markerInfo["pose"][6]=0;markerInfo["pose"][7]=0;markerInfo["pose"][8]=0;markerInfo["pose"][9]=0;markerInfo["pose"][10]=0;markerInfo["pose"][11]=0},67973:function($0,$1,$2,$3,$4,$5){if(!artoolkitNFT["frameMalloc"]){artoolkitNFT["frameMalloc"]={}}var frameMalloc=artoolkitNFT["frameMalloc"];frameMalloc["framepointer"]=$1;frameMalloc["framesize"]=$2;frameMalloc["camera"]=$3;frameMalloc["transform"]=$4;frameMalloc["videoLumaPointer"]=$5}};function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback(Module);continue}var func=callback.func;if(typeof func=="number"){if(callback.arg===undefined){getWasmTableEntry(func)()}else{getWasmTableEntry(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}function getWasmTableEntry(funcPtr){return wasmTable.get(funcPtr)}function ___cxa_allocate_exception(size){return _malloc(size+24)+24}function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-24;this.set_type=function(type){HEAP32[this.ptr+4>>2]=type};this.get_type=function(){return HEAP32[this.ptr+4>>2]};this.set_destructor=function(destructor){HEAP32[this.ptr+8>>2]=destructor};this.get_destructor=function(){return HEAP32[this.ptr+8>>2]};this.set_refcount=function(refcount){HEAP32[this.ptr>>2]=refcount};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+12>>0]=caught};this.get_caught=function(){return HEAP8[this.ptr+12>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+13>>0]=rethrown};this.get_rethrown=function(){return HEAP8[this.ptr+13>>0]!=0};this.init=function(type,destructor){this.set_adjusted_ptr(0);this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false)};this.add_ref=function(){var value=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=value+1};this.release_ref=function(){var prev=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=prev-1;return prev===1};this.set_adjusted_ptr=function(adjustedPtr){HEAP32[this.ptr+16>>2]=adjustedPtr};this.get_adjusted_ptr=function(){return HEAP32[this.ptr+16>>2]};this.get_exception_ptr=function(){var isPointer=___cxa_is_pointer_type(this.get_type());if(isPointer){return HEAP32[this.excPtr>>2]}var adjusted=this.get_adjusted_ptr();if(adjusted!==0)return adjusted;return this.excPtr}}var exceptionLast=0;var uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw ptr}function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value}var PATH={isAbs:path=>path.charAt(0)==="/",splitPath:filename=>{var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:(parts,allowAboveRoot)=>{var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift("..")}}return parts},normalize:path=>{var isAbsolute=PATH.isAbs(path),trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(p=>!!p),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path},dirname:path=>{var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:path=>{if(path==="/")return"/";path=PATH.normalize(path);path=path.replace(/\/$/,"");var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))},join2:(l,r)=>{return PATH.normalize(l+"/"+r)}};function getRandomDevice(){if(typeof crypto=="object"&&typeof crypto["getRandomValues"]=="function"){var randomBuffer=new Uint8Array(1);return function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]}}else if(ENVIRONMENT_IS_NODE){try{var crypto_module=__webpack_require__(/*! crypto */ "?deb7");return function(){return crypto_module["randomBytes"](1)[0]}}catch(e){}}return function(){abort("randomDevice")}}var PATH_FS={resolve:function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=PATH.isAbs(path)}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(p=>!!p),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."},relative:(from,to)=>{from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")}};var TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false},close:function(stream){stream.tty.ops.flush(stream.tty)},flush:function(stream){stream.tty.ops.flush(stream.tty)},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i])}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now()}return i}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=Buffer.alloc(BUFSIZE);var bytesRead=0;try{bytesRead=fs.readSync(process.stdin.fd,buf,0,BUFSIZE,-1)}catch(e){if(e.toString().includes("EOF"))bytesRead=0;else throw e}if(bytesRead>0){result=buf.slice(0,bytesRead).toString("utf-8")}else{result=null}}else if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n"}}if(!result){return null}tty.input=intArrayFromString(result,true)}return tty.input.shift()},put_char:function(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[]}}},default_tty1_ops:{put_char:function(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[]}}}};function mmapAlloc(size){abort()}var MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,"/",16384|511,0)},createNode:function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node;parent.timestamp=node.timestamp}return node},getFileDataAsTypedArray:function(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage:function(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0)},resizeFileStorage:function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0}else{var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize}},node_ops:{getattr:function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr:function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}},lookup:function(parent,name){throw FS.genericErrors[44]},mknod:function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.parent.timestamp=Date.now();old_node.name=new_name;new_dir.contents[new_name]=old_node;new_dir.timestamp=old_node.parent.timestamp;old_node.parent=new_dir},unlink:function(parent,name){delete parent.contents[name];parent.timestamp=Date.now()},rmdir:function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name];parent.timestamp=Date.now()},readdir:function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink:function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read:function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size},write:function(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===HEAP8.buffer){canOwn=false}if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=buffer.slice(offset,offset+length);node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray){node.contents.set(buffer.subarray(offset,offset+length),position)}else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap:function(stream,address,length,position,prot,flags){if(address!==0){throw new FS.ErrnoError(28)}if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents.buffer===buffer){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}HEAP8.set(contents,ptr)}return{ptr:ptr,allocated:allocated}},msync:function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};function asyncLoad(url,onload,onerror,noRunDep){var dep=!noRunDep?getUniqueRunDependency("al "+url):"";readAsync(url,function(arrayBuffer){assert(arrayBuffer,'Loading data file "'+url+'" failed (no arrayBuffer).');onload(new Uint8Array(arrayBuffer));if(dep)removeRunDependency(dep)},function(event){if(onerror){onerror()}else{throw'Loading data file "'+url+'" failed.'}});if(dep)addRunDependency(dep)}var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(path,opts={})=>{path=PATH_FS.resolve(FS.cwd(),path);if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};opts=Object.assign(defaults,opts);if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=PATH.normalizeArray(path.split("/").filter(p=>!!p),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count+1});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return{path:current_path,node:current}},getPath:node=>{var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent}},hashName:(parentid,name)=>{var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:node=>{var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node},hashRemoveNode:node=>{var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}},lookupNode:(parent,name)=>{var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode:(parent,name,mode,rdev)=>{var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode:node=>{FS.hashRemoveNode(node)},isRoot:node=>{return node===node.parent},isMountpoint:node=>{return!!node.mounted},isFile:mode=>{return(mode&61440)===32768},isDir:mode=>{return(mode&61440)===16384},isLink:mode=>{return(mode&61440)===40960},isChrdev:mode=>{return(mode&61440)===8192},isBlkdev:mode=>{return(mode&61440)===24576},isFIFO:mode=>{return(mode&61440)===4096},isSocket:mode=>{return(mode&49152)===49152},flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:str=>{var flags=FS.flagModes[str];if(typeof flags=="undefined"){throw new Error("Unknown file open mode: "+str)}return flags},flagsToPermissionString:flag=>{var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w"}return perms},nodePermissions:(node,perms)=>{if(FS.ignorePermissions){return 0}if(perms.includes("r")&&!(node.mode&292)){return 2}else if(perms.includes("w")&&!(node.mode&146)){return 2}else if(perms.includes("x")&&!(node.mode&73)){return 2}return 0},mayLookup:dir=>{var errCode=FS.nodePermissions(dir,"x");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0},mayCreate:(dir,name)=>{try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:(dir,name,isdir)=>{var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,"wx");if(errCode){return errCode}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else{if(FS.isDir(node.mode)){return 31}}return 0},mayOpen:(node,flags)=>{if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd:(fd_start=0,fd_end=FS.MAX_OPEN_FDS)=>{for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStream:fd=>FS.streams[fd],createStream:(stream,fd_start,fd_end)=>{if(!FS.FSStream){FS.FSStream=function(){this.shared={}};FS.FSStream.prototype={object:{get:function(){return this.node},set:function(val){this.node=val}},isRead:{get:function(){return(this.flags&2097155)!==1}},isWrite:{get:function(){return(this.flags&2097155)!==0}},isAppend:{get:function(){return this.flags&1024}},flags:{get:function(){return this.shared.flags},set:function(val){this.shared.flags=val}},position:{get function(){return this.shared.position},set:function(val){this.shared.position=val}}}}stream=Object.assign(new FS.FSStream,stream);var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream:fd=>{FS.streams[fd]=null},chrdev_stream_ops:{open:stream=>{var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}},llseek:()=>{throw new FS.ErrnoError(70)}},major:dev=>dev>>8,minor:dev=>dev&255,makedev:(ma,mi)=>ma<<8|mi,registerDevice:(dev,ops)=>{FS.devices[dev]={stream_ops:ops}},getDevice:dev=>FS.devices[dev],getMounts:mount=>{var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts},syncfs:(populate,callback)=>{if(typeof populate=="function"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){err("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work")}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode)}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach(mount=>{if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)})},mount:(type,opts,mountpoint)=>{var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot},unmount:mountpoint=>{var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(hash=>{var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.includes(current.mount)){FS.destroyNode(current)}current=next}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1)},lookup:(parent,name)=>{return parent.node_ops.lookup(parent,name)},mknod:(path,mode,dev)=>{var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(28)}var errCode=FS.mayCreate(parent,name);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create:(path,mode)=>{mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir:(path,mode)=>{mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree:(path,mode)=>{var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=20)throw e}}},mkdev:(path,mode,dev)=>{if(typeof dev=="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)},symlink:(oldpath,newpath)=>{if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename:(old_path,new_path)=>{var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode)}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,"w");if(errCode){throw new FS.ErrnoError(errCode)}}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}},rmdir:path=>{var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,true);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node)},readdir:path=>{var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink:path=>{var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,false);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}parent.node_ops.unlink(parent,name);FS.destroyNode(node)},readlink:path=>{var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat:(path,dontFollow)=>{var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat:path=>{return FS.stat(path,true)},chmod:(path,mode,dontFollow)=>{var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})},lchmod:(path,mode)=>{FS.chmod(path,mode,true)},fchmod:(fd,mode)=>{var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chmod(stream.node,mode)},chown:(path,uid,gid,dontFollow)=>{var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()})},lchown:(path,uid,gid)=>{FS.chown(path,uid,gid,true)},fchown:(fd,uid,gid)=>{var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chown(stream.node,uid,gid)},truncate:(path,len)=>{if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var errCode=FS.nodePermissions(node,"w");if(errCode){throw new FS.ErrnoError(errCode)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate:(fd,len)=>{var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len)},utime:(path,atime,mtime)=>{var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open:(path,flags,mode,fd_start,fd_end)=>{if(path===""){throw new FS.ErrnoError(44)}flags=typeof flags=="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode=="undefined"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path=="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode)}}if(flags&512){FS.truncate(node,0)}flags&=~(128|512|131072);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1}}return stream},close:stream=>{if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:stream=>{return stream.fd===null},llseek:(stream,offset,whence)=>{if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read:(stream,buffer,offset,length,position)=>{if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write:(stream,buffer,offset,length,position,canOwn)=>{if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;return bytesWritten},allocate:(stream,offset,length)=>{if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length)},mmap:(stream,address,length,position,prot,flags)=>{if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}return stream.stream_ops.mmap(stream,address,length,position,prot,flags)},msync:(stream,buffer,offset,length,mmapFlags)=>{if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},munmap:stream=>0,ioctl:(stream,cmd,arg)=>{if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile:(path,opts={})=>{opts.flags=opts.flags||0;opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret},writeFile:(path,data,opts={})=>{opts.flags=opts.flags||577;var stream=FS.open(path,opts.flags,opts.mode);if(typeof data=="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error("Unsupported data type")}FS.close(stream)},cwd:()=>FS.currentPath,chdir:path=>{var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var errCode=FS.nodePermissions(lookup.node,"x");if(errCode){throw new FS.ErrnoError(errCode)}FS.currentPath=lookup.path},createDefaultDirectories:()=>{FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")},createDefaultDevices:()=>{FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:()=>0,write:(stream,buffer,offset,length,pos)=>length});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device=getRandomDevice();FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:()=>{FS.mkdir("/proc");var proc_self=FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:()=>{var node=FS.createNode(proc_self,"fd",16384|511,73);node.node_ops={lookup:(parent,name)=>{var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>stream.path}};ret.parent=ret;return ret}};return node}},{},"/proc/self/fd")},createStandardStreams:()=>{if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"])}else{FS.symlink("/dev/tty","/dev/stdin")}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"])}else{FS.symlink("/dev/tty","/dev/stdout")}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"])}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin",0);var stdout=FS.open("/dev/stdout",1);var stderr=FS.open("/dev/stderr",1)},ensureErrnoError:()=>{if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=function(errno){this.errno=errno};this.setErrno(errno);this.message="FS error"};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[44].forEach(code=>{FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"})},staticInit:()=>{FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS}},init:(input,output,error)=>{FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams()},quit:()=>{FS.init.initialized=false;for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}},getMode:(canRead,canWrite)=>{var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode},findObject:(path,dontResolveLastLink)=>{var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else{return null}},analyzePath:(path,dontResolveLastLink)=>{try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret},createPath:(parent,path,canRead,canWrite)=>{parent=typeof parent=="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current},createFile:(parent,name,properties,canRead,canWrite)=>{var path=PATH.join2(typeof parent=="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile:(parent,name,data,canRead,canWrite,canOwn)=>{var path=name;if(parent){parent=typeof parent=="string"?parent:FS.getPath(parent);path=name?PATH.join2(parent,name):parent}var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data=="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,577);FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node},createDevice:(parent,name,input,output)=>{var path=PATH.join2(typeof parent=="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:stream=>{stream.seekable=false},close:stream=>{if(output&&output.buffer&&output.buffer.length){output(10)}},read:(stream,buffer,offset,length,pos)=>{var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:(stream,buffer,offset,length,pos)=>{for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now()}return i}});return FS.mkdev(path,mode,dev)},forceLoadFile:obj=>{if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;if(typeof XMLHttpRequest!="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(read_){try{obj.contents=intArrayFromString(read_(obj.url),true);obj.usedBytes=obj.contents.length}catch(e){throw new FS.ErrnoError(29)}}else{throw new Error("Cannot load without read() or XMLHttpRequest.")}},createLazyFile:(parent,name,url,canRead,canWrite)=>{function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=(from,to)=>{if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else{return intArrayFromString(xhr.responseText||"",true)}};var lazyArray=this;lazyArray.setDataGetter(chunkNum=>{var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]=="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]=="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out("LazyFiles on gzip forces download of the whole file when length is accessed")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._length}},chunkSize:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize}}});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(key=>{var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){FS.forceLoadFile(node);return fn.apply(null,arguments)}});stream_ops.read=((stream,buffer,offset,length,position)=>{FS.forceLoadFile(node);var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size});node.stream_ops=stream_ops;return node},createPreloadedFile:(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish)=>{var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}if(Browser.handledByPreloadPlugin(byteArray,fullname,finish,()=>{if(onerror)onerror();removeRunDependency(dep)})){return}finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){asyncLoad(url,byteArray=>processData(byteArray),onerror)}else{processData(url)}},indexedDB:()=>{return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:()=>{return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(paths,onload,onerror)=>{onload=onload||(()=>{});onerror=onerror||(()=>{});var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=(()=>{out("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME)});openRequest.onsuccess=(()=>{var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(path=>{var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=(()=>{ok++;if(ok+fail==total)finish()});putRequest.onerror=(()=>{fail++;if(ok+fail==total)finish()})});transaction.onerror=onerror});openRequest.onerror=onerror},loadFilesFromDB:(paths,onload,onerror)=>{onload=onload||(()=>{});onerror=onerror||(()=>{});var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=(()=>{var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(path=>{var getRequest=files.get(path);getRequest.onsuccess=(()=>{if(FS.analyzePath(path).exists){FS.unlink(path)}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish()});getRequest.onerror=(()=>{fail++;if(ok+fail==total)finish()})});transaction.onerror=onerror});openRequest.onerror=onerror}};var SYSCALLS={DEFAULT_POLLMASK:5,calculateAt:function(dirfd,path,allowEmpty){if(PATH.isAbs(path)){return path}var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(8);dir=dirstream.path}if(path.length==0){if(!allowEmpty){throw new FS.ErrnoError(44)}return dir}return PATH.join2(dir,path)},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-54}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAP32[buf+48>>2]=4096;HEAP32[buf+52>>2]=stat.blocks;HEAP32[buf+56>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+76>>2]=0;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+80>>2]=tempI64[0],HEAP32[buf+84>>2]=tempI64[1];return 0},doMsync:function(addr,stream,len,flags,offset){var buffer=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer,offset,len,flags)},doMknod:function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28}FS.mknod(path,mode,dev);return 0},doReadlink:function(path,buf,bufsize){if(bufsize<=0)return-28;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len},doAccess:function(path,amode){if(amode&~7){return-28}var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node){return-44}var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return-2}return 0},doReadv:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov>>2];var len=HEAP32[iov+4>>2];iov+=8;var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break}return ret},doWritev:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov>>2];var len=HEAP32[iov+4>>2];iov+=8;var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr}return ret},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},getStreamFromFD:function(fd){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);return stream}};function ___syscall_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return-28}var newStream;newStream=FS.createStream(stream,arg);return newStream.fd}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0}case 5:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>1]=2;return 0}case 6:case 7:return 0;case 16:case 8:return-28;case 9:setErrNo(28);return-1;default:{return-28}}}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return-e.errno}}function ___syscall_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(op){case 21509:case 21505:{if(!stream.tty)return-59;return 0}case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:{if(!stream.tty)return-59;return 0}case 21519:{if(!stream.tty)return-59;var argp=SYSCALLS.get();HEAP32[argp>>2]=0;return 0}case 21520:{if(!stream.tty)return-59;return-28}case 21531:{var argp=SYSCALLS.get();return FS.ioctl(stream,op,argp)}case 21523:{if(!stream.tty)return-59;return 0}case 21524:{if(!stream.tty)return-59;return 0}default:abort("bad ioctl syscall "+op)}}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return-e.errno}}function ___syscall_openat(dirfd,path,flags,varargs){SYSCALLS.varargs=varargs;try{path=SYSCALLS.getStr(path);path=SYSCALLS.calculateAt(dirfd,path);var mode=varargs?SYSCALLS.get():0;return FS.open(path,flags,mode).fd}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return-e.errno}}var structRegistrations={};function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr)}}function simpleReadValueFromPointer(pointer){return this["fromWireType"](HEAPU32[pointer>>2])}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name){if(undefined===name){return"_unknown"}name=name.replace(/[^a-zA-Z0-9_]/g,"$");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return"_"+name}return name}function createNamedFunction(name,body){name=makeLegalFunctionName(name);return new Function("body","return function "+name+"() {\n"+'    "use strict";'+"    return body.apply(this, arguments);\n"+"};\n")(body)}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==undefined){this.stack=this.toString()+"\n"+stack.replace(/^Error(:[^\n]*)?\n/,"")}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===undefined){return this.name}else{return this.name+": "+this.message}};return errorClass}var InternalError=undefined;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach(function(type){typeDependencies[type]=dependentTypes});function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError("Mismatched type converter count")}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i])}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach((dt,i)=>{if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt]}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[]}awaitingDependencies[dt].push(()=>{typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters)}})}});if(0===unregisteredTypes.length){onComplete(typeConverters)}}function __embind_finalize_value_object(structType){var reg=structRegistrations[structType];delete structRegistrations[structType];var rawConstructor=reg.rawConstructor;var rawDestructor=reg.rawDestructor;var fieldRecords=reg.fields;var fieldTypes=fieldRecords.map(field=>field.getterReturnType).concat(fieldRecords.map(field=>field.setterArgumentType));whenDependentTypesAreResolved([structType],fieldTypes,fieldTypes=>{var fields={};fieldRecords.forEach((field,i)=>{var fieldName=field.fieldName;var getterReturnType=fieldTypes[i];var getter=field.getter;var getterContext=field.getterContext;var setterArgumentType=fieldTypes[i+fieldRecords.length];var setter=field.setter;var setterContext=field.setterContext;fields[fieldName]={read:ptr=>{return getterReturnType["fromWireType"](getter(getterContext,ptr))},write:(ptr,o)=>{var destructors=[];setter(setterContext,ptr,setterArgumentType["toWireType"](destructors,o));runDestructors(destructors)}}});return[{name:reg.name,"fromWireType":function(ptr){var rv={};for(var i in fields){rv[i]=fields[i].read(ptr)}rawDestructor(ptr);return rv},"toWireType":function(destructors,o){for(var fieldName in fields){if(!(fieldName in o)){throw new TypeError('Missing field:  "'+fieldName+'"')}}var ptr=rawConstructor();for(fieldName in fields){fields[fieldName].write(ptr,o[fieldName])}if(destructors!==null){destructors.push(rawDestructor,ptr)}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:rawDestructor}]})}function __embind_register_bigint(primitiveType,name,size,minRange,maxRange){}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size)}}function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes}var embind_charCodes=undefined;function readLatin1String(ptr){var ret="";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]]}return ret}var BindingError=undefined;function throwBindingError(message){throw new BindingError(message)}function registerType(rawType,registeredInstance,options={}){if(!("argPackAdvance"in registeredInstance)){throw new TypeError("registerType registeredInstance requires argPackAdvance")}var name=registeredInstance.name;if(!rawType){throwBindingError('type "'+name+'" must have a positive integer typeid pointer')}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError("Cannot register type '"+name+"' twice")}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(cb=>cb())}}function __embind_register_bool(rawType,name,size,trueValue,falseValue){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(wt){return!!wt},"toWireType":function(destructors,o){return o?trueValue:falseValue},"argPackAdvance":8,"readValueFromPointer":function(pointer){var heap;if(size===1){heap=HEAP8}else if(size===2){heap=HEAP16}else if(size===4){heap=HEAP32}else{throw new TypeError("Unknown boolean type size: "+name)}return this["fromWireType"](heap[pointer>>shift])},destructorFunction:null})}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle)){return false}if(!(other instanceof ClassHandle)){return false}var leftClass=this.$$.ptrType.registeredClass;var left=this.$$.ptr;var rightClass=other.$$.ptrType.registeredClass;var right=other.$$.ptr;while(leftClass.baseClass){left=leftClass.upcast(left);leftClass=leftClass.baseClass}while(rightClass.baseClass){right=rightClass.upcast(right);rightClass=rightClass.baseClass}return leftClass===rightClass&&left===right}function shallowCopyInternalPointer(o){return{count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType}}function throwInstanceAlreadyDeleted(obj){function getInstanceTypeName(handle){return handle.$$.ptrType.registeredClass.name}throwBindingError(getInstanceTypeName(obj)+" instance already deleted")}var finalizationRegistry=false;function detachFinalizer(handle){}function runDestructor($$){if($$.smartPtr){$$.smartPtrType.rawDestructor($$.smartPtr)}else{$$.ptrType.registeredClass.rawDestructor($$.ptr)}}function releaseClassHandle($$){$$.count.value-=1;var toDelete=0===$$.count.value;if(toDelete){runDestructor($$)}}function downcastPointer(ptr,ptrClass,desiredClass){if(ptrClass===desiredClass){return ptr}if(undefined===desiredClass.baseClass){return null}var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);if(rv===null){return null}return desiredClass.downcast(rv)}var registeredPointers={};function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var rv=[];for(var k in registeredInstances){if(registeredInstances.hasOwnProperty(k)){rv.push(registeredInstances[k])}}return rv}var deletionQueue=[];function flushPendingDeletes(){while(deletionQueue.length){var obj=deletionQueue.pop();obj.$$.deleteScheduled=false;obj["delete"]()}}var delayFunction=undefined;function setDelayFunction(fn){delayFunction=fn;if(deletionQueue.length&&delayFunction){delayFunction(flushPendingDeletes)}}function init_embind(){Module["getInheritedInstanceCount"]=getInheritedInstanceCount;Module["getLiveInheritedInstances"]=getLiveInheritedInstances;Module["flushPendingDeletes"]=flushPendingDeletes;Module["setDelayFunction"]=setDelayFunction}var registeredInstances={};function getBasestPointer(class_,ptr){if(ptr===undefined){throwBindingError("ptr should not be undefined")}while(class_.baseClass){ptr=class_.upcast(ptr);class_=class_.baseClass}return ptr}function getInheritedInstance(class_,ptr){ptr=getBasestPointer(class_,ptr);return registeredInstances[ptr]}function makeClassHandle(prototype,record){if(!record.ptrType||!record.ptr){throwInternalError("makeClassHandle requires ptr and ptrType")}var hasSmartPtrType=!!record.smartPtrType;var hasSmartPtr=!!record.smartPtr;if(hasSmartPtrType!==hasSmartPtr){throwInternalError("Both smartPtrType and smartPtr must be specified")}record.count={value:1};return attachFinalizer(Object.create(prototype,{$$:{value:record}}))}function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer){this.destructor(ptr);return null}var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(undefined!==registeredInstance){if(0===registeredInstance.$$.count.value){registeredInstance.$$.ptr=rawPointer;registeredInstance.$$.smartPtr=ptr;return registeredInstance["clone"]()}else{var rv=registeredInstance["clone"]();this.destructor(ptr);return rv}}function makeDefaultHandle(){if(this.isSmartPointer){return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var actualType=this.registeredClass.getActualType(rawPointer);var registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord){return makeDefaultHandle.call(this)}var toType;if(this.isConst){toType=registeredPointerRecord.constPointerType}else{toType=registeredPointerRecord.pointerType}var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);if(dp===null){return makeDefaultHandle.call(this)}if(this.isSmartPointer){return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}}function attachFinalizer(handle){if("undefined"===typeof FinalizationRegistry){attachFinalizer=(handle=>handle);return handle}finalizationRegistry=new FinalizationRegistry(info=>{releaseClassHandle(info.$$)});attachFinalizer=(handle=>{var $$=handle.$$;var hasSmartPtr=!!$$.smartPtr;if(hasSmartPtr){var info={$$:$$};finalizationRegistry.register(handle,info,handle)}return handle});detachFinalizer=(handle=>finalizationRegistry.unregister(handle));return attachFinalizer(handle)}function ClassHandle_clone(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.preservePointerOnDelete){this.$$.count.value+=1;return this}else{var clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}}));clone.$$.count.value+=1;clone.$$.deleteScheduled=false;return clone}}function ClassHandle_delete(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion")}detachFinalizer(this);releaseClassHandle(this.$$);if(!this.$$.preservePointerOnDelete){this.$$.smartPtr=undefined;this.$$.ptr=undefined}}function ClassHandle_isDeleted(){return!this.$$.ptr}function ClassHandle_deleteLater(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion")}deletionQueue.push(this);if(deletionQueue.length===1&&delayFunction){delayFunction(flushPendingDeletes)}this.$$.deleteScheduled=true;return this}function init_ClassHandle(){ClassHandle.prototype["isAliasOf"]=ClassHandle_isAliasOf;ClassHandle.prototype["clone"]=ClassHandle_clone;ClassHandle.prototype["delete"]=ClassHandle_delete;ClassHandle.prototype["isDeleted"]=ClassHandle_isDeleted;ClassHandle.prototype["deleteLater"]=ClassHandle_deleteLater}function ClassHandle(){}function ensureOverloadTable(proto,methodName,humanName){if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError("Function '"+humanName+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+proto[methodName].overloadTable+")!")}return proto[methodName].overloadTable[arguments.length].apply(this,arguments)};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}}function exposePublicSymbol(name,value,numArguments){if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError("Cannot register public name '"+name+"' twice")}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError("Cannot register multiple overloads of a function with the same number of arguments ("+numArguments+")!")}Module[name].overloadTable[numArguments]=value}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments}}}function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name;this.constructor=constructor;this.instancePrototype=instancePrototype;this.rawDestructor=rawDestructor;this.baseClass=baseClass;this.getActualType=getActualType;this.upcast=upcast;this.downcast=downcast;this.pureVirtualFunctions=[]}function upcastPointer(ptr,ptrClass,desiredClass){while(ptrClass!==desiredClass){if(!ptrClass.upcast){throwBindingError("Expected null or instance of "+desiredClass.name+", got an instance of "+ptrClass.name)}ptr=ptrClass.upcast(ptr);ptrClass=ptrClass.baseClass}return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function genericPointerToWireType(destructors,handle){var ptr;if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}if(this.isSmartPointer){ptr=this.rawConstructor();if(destructors!==null){destructors.push(this.rawDestructor,ptr)}return ptr}else{return 0}}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}if(!this.isConst&&handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);if(this.isSmartPointer){if(undefined===handle.$$.smartPtr){throwBindingError("Passing raw pointer to smart pointer is illegal")}switch(this.sharingPolicy){case 0:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name)}break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{var clonedHandle=handle["clone"]();ptr=this.rawShare(ptr,Emval.toHandle(function(){clonedHandle["delete"]()}));if(destructors!==null){destructors.push(this.rawDestructor,ptr)}}break;default:throwBindingError("Unsupporting sharing policy")}}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}if(handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+handle.$$.ptrType.name+" to parameter type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function RegisteredPointer_getPointee(ptr){if(this.rawGetPointee){ptr=this.rawGetPointee(ptr)}return ptr}function RegisteredPointer_destructor(ptr){if(this.rawDestructor){this.rawDestructor(ptr)}}function RegisteredPointer_deleteObject(handle){if(handle!==null){handle["delete"]()}}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee;RegisteredPointer.prototype.destructor=RegisteredPointer_destructor;RegisteredPointer.prototype["argPackAdvance"]=8;RegisteredPointer.prototype["readValueFromPointer"]=simpleReadValueFromPointer;RegisteredPointer.prototype["deleteObject"]=RegisteredPointer_deleteObject;RegisteredPointer.prototype["fromWireType"]=RegisteredPointer_fromWireType}function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name;this.registeredClass=registeredClass;this.isReference=isReference;this.isConst=isConst;this.isSmartPointer=isSmartPointer;this.pointeeType=pointeeType;this.sharingPolicy=sharingPolicy;this.rawGetPointee=rawGetPointee;this.rawConstructor=rawConstructor;this.rawShare=rawShare;this.rawDestructor=rawDestructor;if(!isSmartPointer&&registeredClass.baseClass===undefined){if(isConst){this["toWireType"]=constNoSmartPtrRawPointerToWireType;this.destructorFunction=null}else{this["toWireType"]=nonConstNoSmartPtrRawPointerToWireType;this.destructorFunction=null}}else{this["toWireType"]=genericPointerToWireType}}function replacePublicSymbol(name,value,numArguments){if(!Module.hasOwnProperty(name)){throwInternalError("Replacing nonexistant public symbol")}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value}else{Module[name]=value;Module[name].argCount=numArguments}}function dynCallLegacy(sig,ptr,args){var f=Module["dynCall_"+sig];return args&&args.length?f.apply(null,[ptr].concat(args)):f.call(null,ptr)}function dynCall(sig,ptr,args){if(sig.includes("j")){return dynCallLegacy(sig,ptr,args)}return getWasmTableEntry(ptr).apply(null,args)}function getDynCaller(sig,ptr){var argCache=[];return function(){argCache.length=0;Object.assign(argCache,arguments);return dynCall(sig,ptr,argCache)}}function embind__requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(){if(signature.includes("j")){return getDynCaller(signature,rawFunction)}return getWasmTableEntry(rawFunction)}var fp=makeDynCaller();if(typeof fp!="function"){throwBindingError("unknown function pointer with signature "+signature+": "+rawFunction)}return fp}var UnboundTypeError=undefined;function getTypeName(type){var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv}function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true}types.forEach(visit);throw new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]))}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){name=readLatin1String(name);getActualType=embind__requireFunction(getActualTypeSignature,getActualType);if(upcast){upcast=embind__requireFunction(upcastSignature,upcast)}if(downcast){downcast=embind__requireFunction(downcastSignature,downcast)}rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError("Cannot construct "+name+" due to unbound types",[baseClassRawType])});whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],function(base){base=base[0];var baseClass;var basePrototype;if(baseClassRawType){baseClass=base.registeredClass;basePrototype=baseClass.instancePrototype}else{basePrototype=ClassHandle.prototype}var constructor=createNamedFunction(legalFunctionName,function(){if(Object.getPrototypeOf(this)!==instancePrototype){throw new BindingError("Use 'new' to construct "+name)}if(undefined===registeredClass.constructor_body){throw new BindingError(name+" has no accessible constructor")}var body=registeredClass.constructor_body[arguments.length];if(undefined===body){throw new BindingError("Tried to invoke ctor of "+name+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(registeredClass.constructor_body).toString()+") parameters instead!")}return body.apply(this,arguments)});var instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast);var referenceConverter=new RegisteredPointer(name,registeredClass,true,false,false);var pointerConverter=new RegisteredPointer(name+"*",registeredClass,false,false,false);var constPointerConverter=new RegisteredPointer(name+" const*",registeredClass,false,true,false);registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter};replacePublicSymbol(legalFunctionName,constructor);return[referenceConverter,pointerConverter,constPointerConverter]})}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAP32[(firstElement>>2)+i])}return array}function __embind_register_class_constructor(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){assert(argCount>0);var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=embind__requireFunction(invokerSignature,invoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName="constructor "+classType.name;if(undefined===classType.registeredClass.constructor_body){classType.registeredClass.constructor_body=[]}if(undefined!==classType.registeredClass.constructor_body[argCount-1]){throw new BindingError("Cannot register multiple constructors with identical number of parameters ("+(argCount-1)+") for class '"+classType.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!")}classType.registeredClass.constructor_body[argCount-1]=(()=>{throwUnboundTypeError("Cannot construct "+classType.name+" due to unbound types",rawArgTypes)});whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){argTypes.splice(1,0,null);classType.registeredClass.constructor_body[argCount-1]=craftInvokerFunction(humanName,argTypes,null,invoker,rawConstructor);return[]});return[]})}function new_(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError("new_ called with constructor type "+typeof constructor+" which is not a function")}var dummy=createNamedFunction(constructor.name||"unknownFunctionName",function(){});dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!")}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break}}var returns=argTypes[0].name!=="void";var argsList="";var argsListWired="";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?", ":"")+"arg"+i;argsListWired+=(i!==0?", ":"")+"arg"+i+"Wired"}var invokerFnBody="return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n"+"if (arguments.length !== "+(argCount-2)+") {\n"+"throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount-2)+" args!');\n"+"}\n";if(needsDestructorStack){invokerFnBody+="var destructors = [];\n"}var dtorStack=needsDestructorStack?"destructors":"null";var args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n"}for(var i=0;i<argCount-2;++i){invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";args1.push("argType"+i);args2.push(argTypes[i+2])}if(isClassMethodFunc){argsListWired="thisWired"+(argsListWired.length>0?", ":"")+argsListWired}invokerFnBody+=(returns?"var rv = ":"")+"invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";if(needsDestructorStack){invokerFnBody+="runDestructors(destructors);\n"}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?"thisWired":"arg"+(i-2)+"Wired";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";args1.push(paramName+"_dtor");args2.push(argTypes[i].destructorFunction)}}}if(returns){invokerFnBody+="var ret = retType.fromWireType(rv);\n"+"return ret;\n"}else{}invokerFnBody+="}\n";args1.push(invokerFnBody);var invokerFunction=new_(Function,args1).apply(null,args2);return invokerFunction}function __embind_register_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName);rawInvoker=embind__requireFunction(invokerSignature,rawInvoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName=classType.name+"."+methodName;if(methodName.startsWith("@@")){methodName=Symbol[methodName.substring(2)]}if(isPureVirtual){classType.registeredClass.pureVirtualFunctions.push(methodName)}function unboundTypesHandler(){throwUnboundTypeError("Cannot call "+humanName+" due to unbound types",rawArgTypes)}var proto=classType.registeredClass.instancePrototype;var method=proto[methodName];if(undefined===method||undefined===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2){unboundTypesHandler.argCount=argCount-2;unboundTypesHandler.className=classType.name;proto[methodName]=unboundTypesHandler}else{ensureOverloadTable(proto,methodName,humanName);proto[methodName].overloadTable[argCount-2]=unboundTypesHandler}whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context);if(undefined===proto[methodName].overloadTable){memberFunction.argCount=argCount-2;proto[methodName]=memberFunction}else{proto[methodName].overloadTable[argCount-2]=memberFunction}return[]});return[]})}function __embind_register_constant(name,type,value){name=readLatin1String(name);whenDependentTypesAreResolved([],[type],function(type){type=type[0];Module[name]=type["fromWireType"](value);return[]})}var emval_free_list=[];var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&0===--emval_handle_array[handle].refcount){emval_handle_array[handle]=undefined;emval_free_list.push(handle)}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){++count}}return count}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){return emval_handle_array[i]}}return null}function init_emval(){Module["count_emval_handles"]=count_emval_handles;Module["get_first_emval"]=get_first_emval}var Emval={toValue:handle=>{if(!handle){throwBindingError("Cannot use deleted val. handle = "+handle)}return emval_handle_array[handle].value},toHandle:value=>{switch(value){case undefined:return 1;case null:return 2;case true:return 3;case false:return 4;default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value:value};return handle}}}};function __embind_register_emval(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(handle){var rv=Emval.toValue(handle);__emval_decref(handle);return rv},"toWireType":function(destructors,value){return Emval.toHandle(value)},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:null})}function _embind_repr(v){if(v===null){return"null"}var t=typeof v;if(t==="object"||t==="array"||t==="function"){return v.toString()}else{return""+v}}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this["fromWireType"](HEAPF32[pointer>>2])};case 3:return function(pointer){return this["fromWireType"](HEAPF64[pointer>>3])};default:throw new TypeError("Unknown float type: "+name)}}function __embind_register_float(rawType,name,size){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(value){return value},"toWireType":function(destructors,value){return value},"argPackAdvance":8,"readValueFromPointer":floatReadValueFromPointer(name,shift),destructorFunction:null})}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name=readLatin1String(name);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name,function(){throwUnboundTypeError("Cannot call "+name+" due to unbound types",argTypes)},argCount-1);whenDependentTypesAreResolved([],argTypes,function(argTypes){var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));replacePublicSymbol(name,craftInvokerFunction(name,invokerArgsArray,null,rawInvoker,fn),argCount-1);return[]})}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer]}:function readU8FromPointer(pointer){return HEAPU8[pointer]};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>1]}:function readU16FromPointer(pointer){return HEAPU16[pointer>>1]};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>2]}:function readU32FromPointer(pointer){return HEAPU32[pointer>>2]};default:throw new TypeError("Unknown integer type: "+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var shift=getShiftFromSize(size);var fromWireType=value=>value;if(minRange===0){var bitshift=32-8*size;fromWireType=(value=>value<<bitshift>>>bitshift)}var isUnsignedType=name.includes("unsigned");var checkAssertions=(value,toTypeName)=>{};var toWireType;if(isUnsignedType){toWireType=function(destructors,value){checkAssertions(value,this.name);return value>>>0}}else{toWireType=function(destructors,value){checkAssertions(value,this.name);return value}}registerType(primitiveType,{name:name,"fromWireType":fromWireType,"toWireType":toWireType,"argPackAdvance":8,"readValueFromPointer":integerReadValueFromPointer(name,shift,minRange!==0),destructorFunction:null})}function __embind_register_memory_view(rawType,dataTypeIndex,name){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle];var data=heap[handle+1];return new TA(buffer,data,size)}name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":decodeMemoryView,"argPackAdvance":8,"readValueFromPointer":decodeMemoryView},{ignoreDuplicateRegistrations:true})}function __embind_register_std_string(rawType,name){name=readLatin1String(name);var stdStringIsUTF8=name==="std::string";registerType(rawType,{name:name,"fromWireType":function(value){var length=HEAPU32[value>>2];var str;if(stdStringIsUTF8){var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i;if(i==length||HEAPU8[currentBytePtr]==0){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+1}}}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[value+4+i])}str=a.join("")}_free(value);return str},"toWireType":function(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}var getLength;var valueIsOfTypeString=typeof value=="string";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError("Cannot pass non-string to std::string")}if(stdStringIsUTF8&&valueIsOfTypeString){getLength=(()=>lengthBytesUTF8(value))}else{getLength=(()=>value.length)}var length=getLength();var ptr=_malloc(4+length+1);HEAPU32[ptr>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr+4,length+1)}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError("String has UTF-16 code units that do not fit in 8 bits")}HEAPU8[ptr+4+i]=charCode}}else{for(var i=0;i<length;++i){HEAPU8[ptr+4+i]=value[i]}}}if(destructors!==null){destructors.push(_free,ptr)}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_std_wstring(rawType,charSize,name){name=readLatin1String(name);var decodeString,encodeString,getHeap,lengthBytesUTF,shift;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;getHeap=(()=>HEAPU16);shift=1}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;getHeap=(()=>HEAPU32);shift=2}registerType(rawType,{name:name,"fromWireType":function(value){var length=HEAPU32[value>>2];var HEAP=getHeap();var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||HEAP[currentBytePtr>>shift]==0){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+charSize}}_free(value);return str},"toWireType":function(destructors,value){if(!(typeof value=="string")){throwBindingError("Cannot pass non-string to C++ string type "+name)}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);HEAPU32[ptr>>2]=length>>shift;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr)}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_value_object(rawType,name,constructorSignature,rawConstructor,destructorSignature,rawDestructor){structRegistrations[rawType]={name:readLatin1String(name),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),fields:[]}}function __embind_register_value_object_field(structType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){structRegistrations[structType].fields.push({fieldName:readLatin1String(fieldName),getterReturnType:getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext:getterContext,setterArgumentType:setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext:setterContext})}function __embind_register_void(rawType,name){name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,"argPackAdvance":0,"fromWireType":function(){return undefined},"toWireType":function(destructors,o){return undefined}})}function __emscripten_date_now(){return Date.now()}function __emscripten_throw_longjmp(){throw Infinity}function __emval_incref(handle){if(handle>4){emval_handle_array[handle].refcount+=1}}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];if(undefined===impl){throwBindingError(humanName+" has unknown type "+getTypeName(rawType))}return impl}function __emval_take_value(type,argv){type=requireRegisteredType(type,"_emval_take_value");var v=type["readValueFromPointer"](argv);return Emval.toHandle(v)}function __localtime_js(time,tmPtr){var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();HEAP32[tmPtr+20>>2]=date.getFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getDay();var start=new Date(date.getFullYear(),0,1);var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+36>>2]=-(date.getTimezoneOffset()*60);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=(summerOffset!=winterOffset&&date.getTimezoneOffset()==Math.min(winterOffset,summerOffset))|0;HEAP32[tmPtr+32>>2]=dst}function _tzset_impl(timezone,daylight,tzname){var currentYear=(new Date).getFullYear();var winter=new Date(currentYear,0,1);var summer=new Date(currentYear,6,1);var winterOffset=winter.getTimezoneOffset();var summerOffset=summer.getTimezoneOffset();var stdTimezoneOffset=Math.max(winterOffset,summerOffset);HEAP32[timezone>>2]=stdTimezoneOffset*60;HEAP32[daylight>>2]=Number(winterOffset!=summerOffset);function extractZone(date){var match=date.toTimeString().match(/\(([A-Za-z ]+)\)$/);return match?match[1]:"GMT"}var winterName=extractZone(winter);var summerName=extractZone(summer);var winterNamePtr=allocateUTF8(winterName);var summerNamePtr=allocateUTF8(summerName);if(summerOffset<winterOffset){HEAP32[tzname>>2]=winterNamePtr;HEAP32[tzname+4>>2]=summerNamePtr}else{HEAP32[tzname>>2]=summerNamePtr;HEAP32[tzname+4>>2]=winterNamePtr}}function __tzset_js(timezone,daylight,tzname){if(__tzset_js.called)return;__tzset_js.called=true;_tzset_impl(timezone,daylight,tzname)}function _abort(){abort("")}var readAsmConstArgsArray=[];function readAsmConstArgs(sigPtr,buf){readAsmConstArgsArray.length=0;var ch;buf>>=2;while(ch=HEAPU8[sigPtr++]){var readAsmConstArgsDouble=ch<105;if(readAsmConstArgsDouble&&buf&1)buf++;readAsmConstArgsArray.push(readAsmConstArgsDouble?HEAPF64[buf++>>1]:HEAP32[buf]);++buf}return readAsmConstArgsArray}function _emscripten_asm_const_int(code,sigPtr,argbuf){var args=readAsmConstArgs(sigPtr,argbuf);return ASM_CONSTS[code].apply(null,args)}function _emscripten_get_heap_max(){return 2147483648}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;var maxHeapSize=_emscripten_get_heap_max();if(requestedSize>maxHeapSize){return false}let alignUp=(x,multiple)=>x+(multiple-x%multiple)%multiple;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var ENV={};function getExecutableName(){return thisProgram||"./this.program"}function getEnvStrings(){if(!getEnvStrings.strings){var lang=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8";var env={"USER":"web_user","LOGNAME":"web_user","PATH":"/","PWD":"/","HOME":"/home/web_user","LANG":lang,"_":getExecutableName()};for(var x in ENV){if(ENV[x]===undefined)delete env[x];else env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(x+"="+env[x])}getEnvStrings.strings=strings}return getEnvStrings.strings}function _environ_get(__environ,environ_buf){var bufSize=0;getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1});return 0}function _environ_sizes_get(penviron_count,penviron_buf_size){var strings=getEnvStrings();HEAP32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1});HEAP32[penviron_buf_size>>2]=bufSize;return 0}function _exit(status){exit(status)}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return e.errno}}function _fd_read(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){try{var stream=SYSCALLS.getStreamFromFD(fd);var HIGH_OFFSET=4294967296;var offset=offset_high*HIGH_OFFSET+(offset_low>>>0);var DOUBLE_LIMIT=9007199254740992;if(offset<=-DOUBLE_LIMIT||offset>=DOUBLE_LIMIT){return-61}FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>2]=tempI64[0],HEAP32[newOffset+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return e.errno}}function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doWritev(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return e.errno}}function _getTempRet0(){return getTempRet0()}function _setTempRet0(val){setTempRet0(val)}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule])}var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){var str=typeof value=="number"?value.toString():value||"";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={"%a":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},"%A":function(date){return WEEKDAYS[date.tm_wday]},"%b":function(date){return MONTHS[date.tm_mon].substring(0,3)},"%B":function(date){return MONTHS[date.tm_mon]},"%C":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},"%d":function(date){return leadingNulls(date.tm_mday,2)},"%e":function(date){return leadingSomething(date.tm_mday,2," ")},"%g":function(date){return getWeekBasedYear(date).toString().substring(2)},"%G":function(date){return getWeekBasedYear(date)},"%H":function(date){return leadingNulls(date.tm_hour,2)},"%I":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},"%j":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},"%m":function(date){return leadingNulls(date.tm_mon+1,2)},"%M":function(date){return leadingNulls(date.tm_min,2)},"%n":function(){return"\n"},"%p":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return"AM"}else{return"PM"}},"%S":function(date){return leadingNulls(date.tm_sec,2)},"%t":function(){return"\t"},"%u":function(date){return date.tm_wday||7},"%U":function(date){var days=date.tm_yday+7-date.tm_wday;return leadingNulls(Math.floor(days/7),2)},"%V":function(date){var val=Math.floor((date.tm_yday+7-(date.tm_wday+6)%7)/7);if((date.tm_wday+371-date.tm_yday-2)%7<=2){val++}if(!val){val=52;var dec31=(date.tm_wday+7-date.tm_yday-1)%7;if(dec31==4||dec31==5&&__isLeapYear(date.tm_year%400-1)){val++}}else if(val==53){var jan1=(date.tm_wday+371-date.tm_yday)%7;if(jan1!=4&&(jan1!=3||!__isLeapYear(date.tm_year)))val=1}return leadingNulls(val,2)},"%w":function(date){return date.tm_wday},"%W":function(date){var days=date.tm_yday+7-(date.tm_wday+6)%7;return leadingNulls(Math.floor(days/7),2)},"%y":function(date){return(date.tm_year+1900).toString().substring(2)},"%Y":function(date){return date.tm_year+1900},"%z":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?"+":"-")+String("0000"+off).slice(-4)},"%Z":function(date){return date.tm_zone},"%%":function(){return"%"}};pattern=pattern.replace(/%%/g,"\0\0");for(var rule in EXPANSION_RULES_2){if(pattern.includes(rule)){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date))}}pattern=pattern.replace(/\0\0/g,"%");var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}var FSNode=function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev};var readMode=292|73;var writeMode=146;Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}});FS.FSNode=FSNode;FS.staticInit();InternalError=Module["InternalError"]=extendError(Error,"InternalError");embind_init_charCodes();BindingError=Module["BindingError"]=extendError(Error,"BindingError");init_ClassHandle();init_embind();init_RegisteredPointer();UnboundTypeError=Module["UnboundTypeError"]=extendError(Error,"UnboundTypeError");init_emval();var ASSERTIONS=false;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){if(ASSERTIONS){assert(false,"Character code "+chr+" ("+String.fromCharCode(chr)+")  at offset "+i+" not in 0x00-0xFF.")}chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}var decodeBase64=typeof atob=="function"?atob:function(input){var keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));enc4=keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!==64){output=output+String.fromCharCode(chr2)}if(enc4!==64){output=output+String.fromCharCode(chr3)}}while(i<input.length);return output};function intArrayFromBase64(s){if(typeof ENVIRONMENT_IS_NODE=="boolean"&&ENVIRONMENT_IS_NODE){var buf=Buffer.from(s,"base64");return new Uint8Array(buf["buffer"],buf["byteOffset"],buf["byteLength"])}try{var decoded=decodeBase64(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i)}return bytes}catch(_){throw new Error("Converting base64 string to bytes failed.")}}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}var asmLibraryArg={"k":___cxa_allocate_exception,"j":___cxa_throw,"t":___syscall_fcntl64,"L":___syscall_ioctl,"M":___syscall_openat,"U":__embind_finalize_value_object,"E":__embind_register_bigint,"Q":__embind_register_bool,"q":__embind_register_class,"p":__embind_register_class_constructor,"f":__embind_register_class_function,"x":__embind_register_constant,"P":__embind_register_emval,"w":__embind_register_float,"g":__embind_register_function,"h":__embind_register_integer,"b":__embind_register_memory_view,"v":__embind_register_std_string,"n":__embind_register_std_wstring,"W":__embind_register_value_object,"V":__embind_register_value_object_field,"R":__embind_register_void,"u":__emscripten_date_now,"G":__emscripten_throw_longjmp,"S":__emval_decref,"T":__emval_incref,"o":__emval_take_value,"N":__localtime_js,"O":__tzset_js,"a":_abort,"i":_emscripten_asm_const_int,"H":_emscripten_resize_heap,"I":_environ_get,"J":_environ_sizes_get,"d":_exit,"r":_fd_close,"K":_fd_read,"D":_fd_seek,"s":_fd_write,"e":_getTempRet0,"y":invoke_ii,"A":invoke_iii,"z":invoke_iiii,"l":invoke_vi,"B":invoke_vii,"C":invoke_viii,"m":invoke_viiii,"c":_setTempRet0,"X":_strftime,"F":_strftime_l};var asm=createWasm();var ___wasm_call_ctors=Module["___wasm_call_ctors"]=function(){return(___wasm_call_ctors=Module["___wasm_call_ctors"]=Module["asm"]["Z"]).apply(null,arguments)};var _malloc=Module["_malloc"]=function(){return(_malloc=Module["_malloc"]=Module["asm"]["_"]).apply(null,arguments)};var _free=Module["_free"]=function(){return(_free=Module["_free"]=Module["asm"]["$"]).apply(null,arguments)};var ___errno_location=Module["___errno_location"]=function(){return(___errno_location=Module["___errno_location"]=Module["asm"]["aa"]).apply(null,arguments)};var ___getTypeName=Module["___getTypeName"]=function(){return(___getTypeName=Module["___getTypeName"]=Module["asm"]["ca"]).apply(null,arguments)};var ___embind_register_native_and_builtin_types=Module["___embind_register_native_and_builtin_types"]=function(){return(___embind_register_native_and_builtin_types=Module["___embind_register_native_and_builtin_types"]=Module["asm"]["da"]).apply(null,arguments)};var _setThrew=Module["_setThrew"]=function(){return(_setThrew=Module["_setThrew"]=Module["asm"]["ea"]).apply(null,arguments)};var stackSave=Module["stackSave"]=function(){return(stackSave=Module["stackSave"]=Module["asm"]["fa"]).apply(null,arguments)};var stackRestore=Module["stackRestore"]=function(){return(stackRestore=Module["stackRestore"]=Module["asm"]["ga"]).apply(null,arguments)};var ___cxa_is_pointer_type=Module["___cxa_is_pointer_type"]=function(){return(___cxa_is_pointer_type=Module["___cxa_is_pointer_type"]=Module["asm"]["ha"]).apply(null,arguments)};var dynCall_jiji=Module["dynCall_jiji"]=function(){return(dynCall_jiji=Module["dynCall_jiji"]=Module["asm"]["ia"]).apply(null,arguments)};var dynCall_viijii=Module["dynCall_viijii"]=function(){return(dynCall_viijii=Module["dynCall_viijii"]=Module["asm"]["ja"]).apply(null,arguments)};var dynCall_iiiiij=Module["dynCall_iiiiij"]=function(){return(dynCall_iiiiij=Module["dynCall_iiiiij"]=Module["asm"]["ka"]).apply(null,arguments)};var dynCall_iiiiijj=Module["dynCall_iiiiijj"]=function(){return(dynCall_iiiiijj=Module["dynCall_iiiiijj"]=Module["asm"]["la"]).apply(null,arguments)};var dynCall_iiiiiijj=Module["dynCall_iiiiiijj"]=function(){return(dynCall_iiiiiijj=Module["dynCall_iiiiiijj"]=Module["asm"]["ma"]).apply(null,arguments)};function invoke_ii(index,a1){var sp=stackSave();try{return getWasmTableEntry(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_vi(index,a1){var sp=stackSave();try{getWasmTableEntry(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_viiii(index,a1,a2,a3,a4){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_viii(index,a1,a2,a3){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_vii(index,a1,a2){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_iii(index,a1,a2){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_iiii(index,a1,a2,a3){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}Module["FS"]=FS;var calledRun;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();readyPromiseResolve(Module);if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("")},1);doRun()},1)}else{doRun()}}Module["run"]=run;function exit(status,implicit){EXITSTATUS=status;procExit(status)}function procExit(code){EXITSTATUS=code;if(!keepRuntimeAlive()){if(Module["onExit"])Module["onExit"](code);ABORT=true}quit_(code,new ExitStatus(code))}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}run();


  return Module.ready
}
);
})();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Module);

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");
var transitionalDefaults = __webpack_require__(/*! ../defaults/transitional */ "./node_modules/axios/lib/defaults/transitional.js");
var Cancel = __webpack_require__(/*! ../cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || transitionalDefaults;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (!request) {
          return;
        }
        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults/index.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
axios.VERSION = (__webpack_require__(/*! ./env/data */ "./node_modules/axios/lib/env/data.js").version);

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./node_modules/axios/lib/helpers/isAxiosError.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports["default"] = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;

  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;

  // eslint-disable-next-line func-names
  this.promise.then(function(cancel) {
    if (!token._listeners) return;

    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }
    token._listeners = null;
  });

  // eslint-disable-next-line func-names
  this.promise.then = function(onfulfilled) {
    var _resolve;
    // eslint-disable-next-line func-names
    var promise = new Promise(function(resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Subscribe to the cancel signal
 */

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

/**
 * Unsubscribe from the cancel signal
 */

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }
  var index = this._listeners.indexOf(listener);
  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var validator = __webpack_require__(/*! ../helpers/validator */ "./node_modules/axios/lib/helpers/validator.js");

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults/index.js");
var Cancel = __webpack_require__(/*! ../cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new Cancel('canceled');
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };

  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults/index.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/defaults/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ../helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");
var enhanceError = __webpack_require__(/*! ../core/enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");
var transitionalDefaults = __webpack_require__(/*! ./transitional */ "./node_modules/axios/lib/defaults/transitional.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ../adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ../adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: transitionalDefaults,

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),

/***/ "./node_modules/axios/lib/defaults/transitional.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/defaults/transitional.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


module.exports = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};


/***/ }),

/***/ "./node_modules/axios/lib/env/data.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/
/***/ ((module) => {

module.exports = {
  "version": "0.26.1"
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return utils.isObject(payload) && (payload.isAxiosError === true);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var VERSION = (__webpack_require__(/*! ../env/data */ "./node_modules/axios/lib/env/data.js").version);

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return Array.isArray(val);
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return toString.call(val) === '[object FormData]';
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return toString.call(val) === '[object URLSearchParams]';
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),

/***/ "./src/ARControllerNFT.ts":
/*!********************************!*\
  !*** ./src/ARControllerNFT.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ARControllerNFT)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ARToolkitNFT */ "./src/ARToolkitNFT.ts");







var ARControllerNFT = /*#__PURE__*/function () {
  function ARControllerNFT(width, height, cameraParam) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__["default"])(this, ARControllerNFT);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "id", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "width", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "height", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "cameraParam", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "cameraId", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "cameraLoaded", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "artoolkitNFT", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "listeners", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "nftMarkers", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "transform_mat", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "marker_transform_mat", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "transformGL_RH", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "videoWidth", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "videoHeight", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "videoSize", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "framepointer", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "framesize", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "dataHeap", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "videoLuma", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "camera_mat", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "videoLumaPointer", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "nftMarkerFound", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "nftMarkerFoundTime", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "nftMarkerCount", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "defaultMarkerWidth", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "_bwpointer", void 0);

    this.id = -1;
    this.width = width;
    this.height = height;
    this.cameraParam = cameraParam;
    this.cameraId = -1;
    this.cameraLoaded = false;
    this.artoolkitNFT;
    this.listeners = {};
    this.nftMarkers = {};
    this.transform_mat = new Float64Array(16);
    this.transformGL_RH = new Float64Array(16);
    this.marker_transform_mat = null;
    this.videoWidth = width;
    this.videoHeight = height;
    this.videoSize = this.videoWidth * this.videoHeight;
    this.framepointer = null;
    this.framesize = null;
    this.dataHeap = null;
    this.videoLuma = null;
    this.camera_mat = null;
    this.videoLumaPointer = null;
    this.nftMarkerFound = false;
    this.nftMarkerFoundTime = 0;
    this.nftMarkerCount = 0;
    this._bwpointer = null;
    this.defaultMarkerWidth = 1;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(ARControllerNFT, [{
    key: "process",
    value: function process(image) {
      var result = this.detectMarker(image);

      if (result != 0) {
        console.error("[ARControllerNFT]", "detectMarker error:", result);
      }

      var k, o;

      for (k in this.nftMarkers) {
        o = this.converter().nftMarkers[k];
        o.inPrevious = o.inCurrent;
        o.inCurrent = false;
      }

      var nftMarkerCount = this.nftMarkerCount;
      this.detectNFTMarker();
      var MARKER_LOST_TIME = 200;

      for (var i = 0; i < nftMarkerCount; i++) {
        var nftMarkerInfo = this.getNFTMarker(i);
        var markerType = _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_5__["default"].NFT_MARKER;

        if (nftMarkerInfo.found) {
          this.nftMarkerFound = i;
          this.nftMarkerFoundTime = Date.now();
          var visible = this.trackNFTMarkerId(i);
          visible.matrix.set(nftMarkerInfo.pose);
          visible.inCurrent = true;
          this.transMatToGLMat(visible.matrix, this.transform_mat);
          this.transformGL_RH = this.arglCameraViewRHf(this.transform_mat);
          this.dispatchEvent({
            name: "getNFTMarker",
            target: this,
            data: {
              index: i,
              type: markerType,
              marker: nftMarkerInfo,
              matrix: this.transform_mat,
              matrixGL_RH: this.transformGL_RH
            }
          });
        } else if (self.nftMarkerFound === i) {
          if (Date.now() - this.nftMarkerFoundTime > MARKER_LOST_TIME) {
            this.nftMarkerFound = false;
            this.dispatchEvent({
              name: "lostNFTMarker",
              target: this,
              data: {
                index: i,
                type: markerType,
                marker: nftMarkerInfo,
                matrix: this.transform_mat,
                matrixGL_RH: this.transformGL_RH
              }
            });
          }
        }
      }
    }
  }, {
    key: "detectNFTMarker",
    value: function detectNFTMarker() {
      this.artoolkitNFT.detectNFTMarker(this.id);
    }
  }, {
    key: "trackNFTMarkerId",
    value: function trackNFTMarkerId(id, markerWidth) {
      var obj = this.converter().nftMarkers[id];

      if (!obj) {
        this.converter().nftMarkers[id] = obj = {
          inPrevious: false,
          inCurrent: false,
          matrix: new Float64Array(12),
          matrixGL_RH: new Float64Array(12),
          markerWidth: markerWidth || this.defaultMarkerWidth
        };
      }

      if (markerWidth) {
        obj.markerWidth = markerWidth;
      }

      return obj;
    }
  }, {
    key: "detectMarker",
    value: function detectMarker(image) {
      if (this._copyImageToHeap(image)) {
        return this.artoolkitNFT.detectMarker(this.id);
      }

      return -99;
    }
  }, {
    key: "getNFTMarker",
    value: function getNFTMarker(markerIndex) {
      if (0 === this.artoolkitNFT.getNFTMarker(this.id, markerIndex)) {
        return this.artoolkitNFT.NFTMarkerInfo;
      }
    }
  }, {
    key: "getNFTData",
    value: function getNFTData(id, index) {
      return this.artoolkitNFT.getNFTData(id, index);
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(name, callback) {
      if (!this.converter().listeners[name]) {
        this.converter().listeners[name] = [];
      }

      this.converter().listeners[name].push(callback);
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(name, callback) {
      if (this.converter().listeners[name]) {
        var index = this.converter().listeners[name].indexOf(callback);

        if (index > -1) {
          this.converter().listeners[name].splice(index, 1);
        }
      }
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(event) {
      var listeners = this.converter().listeners[event.name];

      if (listeners) {
        for (var i = 0; i < listeners.length; i++) {
          listeners[i].call(this, event);
        }
      }
    }
  }, {
    key: "debugSetup",
    value: function debugSetup() {
      this.setDebugMode(true);
      this._bwpointer = this.getProcessingImage();
    }
  }, {
    key: "transMatToGLMat",
    value: function transMatToGLMat(transMat, glMat, scale) {
      if (glMat == undefined) {
        glMat = new Float64Array(16);
      }

      glMat[0 + 0 * 4] = transMat[0];
      glMat[0 + 1 * 4] = transMat[1];
      glMat[0 + 2 * 4] = transMat[2];
      glMat[0 + 3 * 4] = transMat[3];
      glMat[1 + 0 * 4] = transMat[4];
      glMat[1 + 1 * 4] = transMat[5];
      glMat[1 + 2 * 4] = transMat[6];
      glMat[1 + 3 * 4] = transMat[7];
      glMat[2 + 0 * 4] = transMat[8];
      glMat[2 + 1 * 4] = transMat[9];
      glMat[2 + 2 * 4] = transMat[10];
      glMat[2 + 3 * 4] = transMat[11];
      glMat[3 + 0 * 4] = 0.0;
      glMat[3 + 1 * 4] = 0.0;
      glMat[3 + 2 * 4] = 0.0;
      glMat[3 + 3 * 4] = 1.0;

      if (scale != undefined && scale !== 0.0) {
        glMat[12] *= scale;
        glMat[13] *= scale;
        glMat[14] *= scale;
      }

      return glMat;
    }
  }, {
    key: "arglCameraViewRHf",
    value: function arglCameraViewRHf(glMatrix, glRhMatrix, scale) {
      var m_modelview;

      if (glRhMatrix == undefined) {
        m_modelview = new Float64Array(16);
      } else {
        m_modelview = glRhMatrix;
      }

      m_modelview[0] = glMatrix[0];
      m_modelview[4] = glMatrix[4];
      m_modelview[8] = glMatrix[8];
      m_modelview[12] = glMatrix[12];
      m_modelview[1] = -glMatrix[1];
      m_modelview[5] = -glMatrix[5];
      m_modelview[9] = -glMatrix[9];
      m_modelview[13] = -glMatrix[13];
      m_modelview[2] = -glMatrix[2];
      m_modelview[6] = -glMatrix[6];
      m_modelview[10] = -glMatrix[10];
      m_modelview[14] = -glMatrix[14];
      m_modelview[3] = 0;
      m_modelview[7] = 0;
      m_modelview[11] = 0;
      m_modelview[15] = 1;

      if (scale != undefined && scale !== 0.0) {
        m_modelview[12] *= scale;
        m_modelview[13] *= scale;
        m_modelview[14] *= scale;
      }

      glRhMatrix = m_modelview;
      return glRhMatrix;
    }
  }, {
    key: "getTransformationMatrix",
    value: function getTransformationMatrix() {
      return this.transform_mat;
    }
  }, {
    key: "getCameraMatrix",
    value: function getCameraMatrix() {
      return this.camera_mat;
    }
  }, {
    key: "setDebugMode",
    value: function setDebugMode(mode) {
      return this.artoolkitNFT.setDebugMode(this.id, mode);
    }
  }, {
    key: "getDebugMode",
    value: function getDebugMode() {
      return this.artoolkitNFT.getDebugMode(this.id);
    }
  }, {
    key: "getProcessingImage",
    value: function getProcessingImage() {
      return this.artoolkitNFT.getProcessingImage(this.id);
    }
  }, {
    key: "setLogLevel",
    value: function setLogLevel(mode) {
      return this.artoolkitNFT.setLogLevel(mode);
    }
  }, {
    key: "getLogLevel",
    value: function getLogLevel() {
      return this.artoolkitNFT.getLogLevel();
    }
  }, {
    key: "setProjectionNearPlane",
    value: function setProjectionNearPlane(value) {
      return this.artoolkitNFT.setProjectionNearPlane(this.id, value);
    }
  }, {
    key: "getProjectionNearPlane",
    value: function getProjectionNearPlane() {
      return this.artoolkitNFT.getProjectionNearPlane(this.id);
    }
  }, {
    key: "setProjectionFarPlane",
    value: function setProjectionFarPlane(value) {
      return this.artoolkitNFT.setProjectionFarPlane(this.id, value);
    }
  }, {
    key: "getProjectionFarPlane",
    value: function getProjectionFarPlane() {
      return this.artoolkitNFT.getProjectionFarPlane(this.id);
    }
  }, {
    key: "setThresholdMode",
    value: function setThresholdMode(mode) {
      return this.artoolkitNFT.setThresholdMode(this.id, mode);
    }
  }, {
    key: "getThresholdMode",
    value: function getThresholdMode() {
      return this.artoolkitNFT.getThresholdMode(this.id);
    }
  }, {
    key: "setThreshold",
    value: function setThreshold(threshold) {
      return this.artoolkitNFT.setThreshold(this.id, threshold);
    }
  }, {
    key: "getThreshold",
    value: function getThreshold() {
      return this.artoolkitNFT.getThreshold(this.id);
    }
  }, {
    key: "loadNFTMarker",
    value: function () {
      var _loadNFTMarker = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee(urlOrData, onSuccess, onError) {
        var _this = this;

        var nft;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.artoolkitNFT.addNFTMarkers(this.id, [urlOrData], function (ids) {
                  _this.nftMarkerCount += ids.length;
                  onSuccess(ids);
                }, onError);

              case 2:
                nft = _context.sent;
                return _context.abrupt("return", nft);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function loadNFTMarker(_x, _x2, _x3) {
        return _loadNFTMarker.apply(this, arguments);
      }

      return loadNFTMarker;
    }()
  }, {
    key: "loadNFTMarkers",
    value: function () {
      var _loadNFTMarkers = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee2(urlOrData, onSuccess, onError) {
        var _this2 = this;

        var nft;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.artoolkitNFT.addNFTMarkers(this.id, urlOrData, function (ids) {
                  _this2.nftMarkerCount += ids.length;
                  onSuccess(ids);
                }, onError);

              case 2:
                nft = _context2.sent;
                return _context2.abrupt("return", nft);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function loadNFTMarkers(_x4, _x5, _x6) {
        return _loadNFTMarkers.apply(this, arguments);
      }

      return loadNFTMarkers;
    }()
  }, {
    key: "setImageProcMode",
    value: function setImageProcMode(mode) {
      return this.artoolkitNFT.setImageProcMode(this.id, mode);
    }
  }, {
    key: "getImageProcMode",
    value: function getImageProcMode() {
      return this.artoolkitNFT.getImageProcMode(this.id);
    }
  }, {
    key: "converter",
    value: function converter() {
      return this;
    }
  }, {
    key: "_initialize",
    value: function () {
      var _initialize2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee3() {
        var _this3 = this;

        var params;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return new _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_5__["default"]().init();

              case 2:
                this.artoolkitNFT = _context3.sent;
                console.log("[ARControllerNFT]", "ARToolkitNFT initialized");
                _context3.next = 6;
                return this.artoolkitNFT.loadCamera(this.cameraParam);

              case 6:
                this.cameraId = _context3.sent;
                console.log("[ARControllerNFT]", "Camera params loaded with ID", this.cameraId);
                this.id = this.artoolkitNFT.setup(this.width, this.height, this.cameraId);
                console.log("[ARControllerNFT]", "Got ID from setup", this.id);

                this._initNFT();

                params = this.artoolkitNFT.frameMalloc;
                this.framepointer = params.framepointer;
                this.framesize = params.framesize;
                this.videoLumaPointer = params.videoLumaPointer;
                this.dataHeap = new Uint8Array(this.artoolkitNFT.instance.HEAPU8.buffer, this.framepointer, this.framesize);
                this.videoLuma = new Uint8Array(this.artoolkitNFT.instance.HEAPU8.buffer, this.videoLumaPointer, this.framesize / 4);
                this.camera_mat = new Float64Array(this.artoolkitNFT.instance.HEAPU8.buffer, params.camera, 16);
                this.marker_transform_mat = new Float64Array(this.artoolkitNFT.instance.HEAPU8.buffer, params.transform, 12);
                this.setProjectionNearPlane(0.1);
                this.setProjectionFarPlane(1000);
                setTimeout(function () {
                  _this3.dispatchEvent({
                    name: "load",
                    target: _this3
                  });
                }, 1);
                return _context3.abrupt("return", this);

              case 23:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _initialize() {
        return _initialize2.apply(this, arguments);
      }

      return _initialize;
    }()
  }, {
    key: "_initNFT",
    value: function _initNFT() {
      this.artoolkitNFT.setupAR2(this.id);
    }
  }, {
    key: "_copyImageToHeap",
    value: function _copyImageToHeap(sourceImage) {
      if (!sourceImage) {
        console.error("Error: no provided imageData to ARControllerNFT");
        return;
      }

      var data;

      if (sourceImage.data) {
        data = sourceImage.data;
      }

      if (this.videoLuma) {
        var q = 0;

        for (var p = 0; p < this.videoSize; p++) {
          var r = data[q + 0],
              g = data[q + 1],
              b = data[q + 2];
          this.videoLuma[p] = r + r + r + b + g + g + g + g >> 3;
          q += 4;
        }
      }

      if (this.dataHeap) {
        this.dataHeap.set(data);
        return true;
      }

      return false;
    }
  }], [{
    key: "initWithDimensions",
    value: function () {
      var _initWithDimensions = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee4(width, height, cameraParam) {
        var arControllerNFT;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                arControllerNFT = new ARControllerNFT(width, height, cameraParam);
                _context4.next = 3;
                return arControllerNFT._initialize();

              case 3:
                return _context4.abrupt("return", _context4.sent);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function initWithDimensions(_x7, _x8, _x9) {
        return _initWithDimensions.apply(this, arguments);
      }

      return initWithDimensions;
    }()
  }, {
    key: "initWithImage",
    value: function () {
      var _initWithImage = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee5(image, cameraParam) {
        var width, height, arControllerNFT;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                width = image.videoWidth || image.width;
                height = image.videoHeight || image.height;
                arControllerNFT = new ARControllerNFT(width, height, cameraParam);
                _context5.next = 5;
                return arControllerNFT._initialize();

              case 5:
                return _context5.abrupt("return", _context5.sent);

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function initWithImage(_x10, _x11) {
        return _initWithImage.apply(this, arguments);
      }

      return initWithImage;
    }()
  }]);

  return ARControllerNFT;
}();



/***/ }),

/***/ "./src/ARToolkitNFT.ts":
/*!*****************************!*\
  !*** ./src/ARToolkitNFT.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ARToolkitNFT)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _build_artoolkitNFT_ES6_wasm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../build/artoolkitNFT_ES6_wasm */ "./build/artoolkitNFT_ES6_wasm.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Utils */ "./src/Utils.ts");







var UNKNOWN_MARKER = -1;
var NFT_MARKER = 0;

var ARToolkitNFT = /*#__PURE__*/function () {
  function ARToolkitNFT() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__["default"])(this, ARToolkitNFT);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "instance", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "markerNFTCount", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "cameraCount", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "version", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setup", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "teardown", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setupAR2", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setDebugMode", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getDebugMode", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getProcessingImage", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "detectMarker", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "detectNFTMarker", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getNFTMarker", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getNFTData", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setLogLevel", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getLogLevel", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "frameMalloc", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "NFTMarkerInfo", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setProjectionNearPlane", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getProjectionNearPlane", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setProjectionFarPlane", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getProjectionFarPlane", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setThresholdMode", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getThresholdMode", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setThreshold", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getThreshold", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setImageProcMode", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getImageProcMode", void 0);

    this.instance;
    this.markerNFTCount = 0;
    this.cameraCount = 0;
    this.version = "1.1.1";
    console.info("ARToolkitNFT ", this.version);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(ARToolkitNFT, [{
    key: "init",
    value: function () {
      var _init = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee() {
        var scope;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0,_build_artoolkitNFT_ES6_wasm__WEBPACK_IMPORTED_MODULE_5__["default"])();

              case 2:
                this.instance = _context.sent;

                this._decorate();

                scope = typeof window !== "undefined" ? window : __webpack_require__.g;
                scope.artoolkitNFT = this;
                return _context.abrupt("return", this);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "_decorate",
    value: function _decorate() {
      var _this = this;

      ["setup", "teardown", "setupAR2", "setLogLevel", "getLogLevel", "setDebugMode", "getDebugMode", "getProcessingImage", "detectMarker", "detectNFTMarker", "getNFTMarker", "getNFTData", "frameMalloc", "NFTMarkerInfo", "setProjectionNearPlane", "getProjectionNearPlane", "setProjectionFarPlane", "getProjectionFarPlane", "setThresholdMode", "getThresholdMode", "setThreshold", "getThreshold", "setImageProcMode", "getImageProcMode", "StringList"].forEach(function (method) {
        _this.converter()[method] = _this.instance[method];
      });

      for (var co in this.instance) {
        if (co.match(/^AR/)) {
          this.converter()[co] = this.instance[co];
        }
      }
    }
  }, {
    key: "converter",
    value: function converter() {
      return this;
    }
  }, {
    key: "loadCamera",
    value: function () {
      var _loadCamera = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee2(urlOrData) {
        var target, data;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                target = "/camera_param_" + this.cameraCount++;

                if (!(urlOrData instanceof Uint8Array)) {
                  _context2.next = 5;
                  break;
                }

                data = urlOrData;
                _context2.next = 14;
                break;

              case 5:
                _context2.prev = 5;
                _context2.next = 8;
                return _Utils__WEBPACK_IMPORTED_MODULE_6__["default"].fetchRemoteData(urlOrData);

              case 8:
                data = _context2.sent;
                _context2.next = 14;
                break;

              case 11:
                _context2.prev = 11;
                _context2.t0 = _context2["catch"](5);
                throw _context2.t0;

              case 14:
                this._storeDataFile(data, target);

                return _context2.abrupt("return", this.instance._loadCamera(target));

              case 16:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[5, 11]]);
      }));

      function loadCamera(_x) {
        return _loadCamera.apply(this, arguments);
      }

      return loadCamera;
    }()
  }, {
    key: "addNFTMarkers",
    value: function addNFTMarkers(arId, urls, callback, onError2) {
      var _this2 = this;

      var prefixes = [];
      var pending = urls.length * 3;

      var onSuccess = function onSuccess(filename) {
        pending -= 1;

        if (pending === 0) {
          var vec = new _this2.instance.StringList();
          var markerIds = [];

          for (var _i = 0; _i < prefixes.length; _i++) {
            vec.push_back(prefixes[_i]);
          }

          var ret = _this2.instance._addNFTMarkers(arId, vec);

          for (var _i2 = 0; _i2 < ret.size(); _i2++) {
            markerIds.push(ret.get(_i2));
          }

          console.log("add nft marker ids: ", markerIds);
          if (callback) callback(markerIds);
        }
      };

      var onError = function onError(filename, errorNumber) {
        console.log("failed to load: ", filename);
        onError2(errorNumber);
      };

      for (var i = 0; i < urls.length; i++) {
        var url = urls[i];
        var prefix = "/markerNFT_" + this.markerNFTCount;
        prefixes.push(prefix);
        var filename1 = prefix + ".fset";
        var filename2 = prefix + ".iset";
        var filename3 = prefix + ".fset3";
        this.ajax(url + ".fset", filename1, onSuccess.bind(filename1), onError.bind(filename1));
        this.ajax(url + ".iset", filename2, onSuccess.bind(filename2), onError.bind(filename2));
        this.ajax(url + ".fset3", filename3, onSuccess.bind(filename3), onError.bind(filename3));
        this.markerNFTCount += 1;
      }

      var Ids = [];

      for (var i = 0; i < urls.length; ++i) {
        Ids.push(i);
      }

      return Ids;
    }
  }, {
    key: "_storeDataFile",
    value: function _storeDataFile(data, target) {
      this.instance.FS.writeFile(target, data, {
        encoding: "binary"
      });
    }
  }, {
    key: "ajax",
    value: function ajax(url, target, callback, errorCallback) {
      var _this3 = this;

      var oReq = new XMLHttpRequest();
      oReq.open("GET", url, true);
      oReq.responseType = "arraybuffer";

      var writeByteArrayToFS = function writeByteArrayToFS(target, byteArray, callback) {
        _this3.instance.FS.writeFile(target, byteArray, {
          encoding: "binary"
        });

        callback(byteArray);
      };

      oReq.onload = function () {
        if (this.status == 200) {
          var arrayBuffer = oReq.response;
          var byteArray = new Uint8Array(arrayBuffer);
          writeByteArrayToFS(target, byteArray, callback);
        } else {
          errorCallback(this.status);
        }
      };

      oReq.send();
    }
  }], [{
    key: "UNKNOWN_MARKER",
    get: function get() {
      return UNKNOWN_MARKER;
    }
  }, {
    key: "NFT_MARKER",
    get: function get() {
      return NFT_MARKER;
    }
  }]);

  return ARToolkitNFT;
}();



/***/ }),

/***/ "./src/Utils.ts":
/*!**********************!*\
  !*** ./src/Utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Utils)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_4__);






var Utils = /*#__PURE__*/function () {
  function Utils() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__["default"])(this, Utils);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(Utils, null, [{
    key: "fetchRemoteData",
    value: function () {
      var _fetchRemoteData = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee(url) {
        var response;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return axios__WEBPACK_IMPORTED_MODULE_4___default().get(url, {
                  responseType: "arraybuffer"
                });

              case 3:
                response = _context.sent;
                return _context.abrupt("return", new Uint8Array(response.data));

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);
                throw _context.t0;

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 7]]);
      }));

      function fetchRemoteData(_x) {
        return _fetchRemoteData.apply(this, arguments);
      }

      return fetchRemoteData;
    }()
  }, {
    key: "fetchRemoteDataCallback",
    value: function () {
      var _fetchRemoteDataCallback = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee2(url, callback) {
        var response;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return axios__WEBPACK_IMPORTED_MODULE_4___default().get(url, {
                  responseType: "arraybuffer"
                }).then(function (response) {
                  var data = new Uint8Array(response.data);
                  console.log(data);
                  callback(response);
                });

              case 3:
                response = _context2.sent;
                return _context2.abrupt("return", response);

              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2["catch"](0);
                throw _context2.t0;

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[0, 7]]);
      }));

      function fetchRemoteDataCallback(_x2, _x3) {
        return _fetchRemoteDataCallback.apply(this, arguments);
      }

      return fetchRemoteDataCallback;
    }()
  }, {
    key: "string2Uint8Data",
    value: function string2Uint8Data(string) {
      var data = new Uint8Array(string.length);

      for (var i = 0; i < data.length; i++) {
        data[i] = string.charCodeAt(i) & 0xff;
      }

      return data;
    }
  }]);

  return Utils;
}();



/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ ((module) => {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : 0
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "?deb7":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?4dea":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?f955":
/*!**********************!*\
  !*** path (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _asyncToGenerator)
/* harmony export */ });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _classCallCheck)
/* harmony export */ });
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _createClass)
/* harmony export */ });
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _defineProperty)
/* harmony export */ });
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ARToolkitNFT */ "./src/ARToolkitNFT.ts");
/* harmony import */ var _ARControllerNFT__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ARControllerNFT */ "./src/ARControllerNFT.ts");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  ARToolkitNFT: _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_0__["default"],
  ARControllerNFT: _ARControllerNFT__WEBPACK_IMPORTED_MODULE_1__["default"]
});
})();

__webpack_exports__ = __webpack_exports__["default"];
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QywyQkFBMkIsbUJBQU8sQ0FBQyxtRkFBMEI7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLG1FQUFrQjs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2Q0FBNkM7QUFDN0M7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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LEdBQW1CRCxRQUFRLENBQUMsQ0FBRCxDQUEzQjtNQUNBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQVQsQ0FBTCxHQUFtQkQsUUFBUSxDQUFDLENBQUQsQ0FBM0I7TUFDQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUJELFFBQVEsQ0FBQyxDQUFELENBQTNCO01BQ0FDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBVCxDQUFMLEdBQW1CRCxRQUFRLENBQUMsQ0FBRCxDQUEzQjtNQUNBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQVQsQ0FBTCxHQUFtQkQsUUFBUSxDQUFDLENBQUQsQ0FBM0I7TUFDQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUJELFFBQVEsQ0FBQyxDQUFELENBQTNCO01BQ0FDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBVCxDQUFMLEdBQW1CRCxRQUFRLENBQUMsQ0FBRCxDQUEzQjtNQUNBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQVQsQ0FBTCxHQUFtQkQsUUFBUSxDQUFDLENBQUQsQ0FBM0I7TUFDQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUJELFFBQVEsQ0FBQyxDQUFELENBQTNCO01BQ0FDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBVCxDQUFMLEdBQW1CRCxRQUFRLENBQUMsRUFBRCxDQUEzQjtNQUNBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQVQsQ0FBTCxHQUFtQkQsUUFBUSxDQUFDLEVBQUQsQ0FBM0I7TUFDQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUIsR0FBbkI7TUFDQUEsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUIsR0FBbkI7TUFDQUEsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUIsR0FBbkI7TUFDQUEsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUIsR0FBbkI7O01BRUEsSUFBSUMsS0FBSyxJQUFJQyxTQUFULElBQXNCRCxLQUFLLEtBQUssR0FBcEMsRUFBeUM7UUFDdkNELEtBQUssQ0FBQyxFQUFELENBQUwsSUFBYUMsS0FBYjtRQUNBRCxLQUFLLENBQUMsRUFBRCxDQUFMLElBQWFDLEtBQWI7UUFDQUQsS0FBSyxDQUFDLEVBQUQsQ0FBTCxJQUFhQyxLQUFiO01BQ0Q7O01BQ0QsT0FBT0QsS0FBUDtJQUNEOzs7V0FVRCwyQkFDRUcsUUFERixFQUVFQyxVQUZGLEVBR0VILEtBSEYsRUFHZ0I7TUFFZCxJQUFJSSxXQUFKOztNQUNBLElBQUlELFVBQVUsSUFBSUYsU0FBbEIsRUFBNkI7UUFDM0JHLFdBQVcsR0FBRyxJQUFJMUUsWUFBSixDQUFpQixFQUFqQixDQUFkO01BQ0QsQ0FGRCxNQUVPO1FBQ0wwRSxXQUFXLEdBQUdELFVBQWQ7TUFDRDs7TUFHREMsV0FBVyxDQUFDLENBQUQsQ0FBWCxHQUFpQkYsUUFBUSxDQUFDLENBQUQsQ0FBekI7TUFDQUUsV0FBVyxDQUFDLENBQUQsQ0FBWCxHQUFpQkYsUUFBUSxDQUFDLENBQUQsQ0FBekI7TUFDQUUsV0FBVyxDQUFDLENBQUQsQ0FBWCxHQUFpQkYsUUFBUSxDQUFDLENBQUQsQ0FBekI7TUFDQUUsV0FBVyxDQUFDLEVBQUQsQ0FBWCxHQUFrQkYsUUFBUSxDQUFDLEVBQUQsQ0FBMUI7TUFFQUUsV0FBVyxDQUFDLENBQUQsQ0FBWCxHQUFpQixDQUFDRixRQUFRLENBQUMsQ0FBRCxDQUExQjtNQUNBRSxXQUFXLENBQUMsQ0FBRCxDQUFYLEdBQWlCLENBQUNGLFFBQVEsQ0FBQyxDQUFELENBQTFCO01BQ0FFLFdBQVcsQ0FBQyxDQUFELENBQVgsR0FBaUIsQ0FBQ0YsUUFBUSxDQUFDLENBQUQsQ0FBMUI7TUFDQUUsV0FBVyxDQUFDLEVBQUQsQ0FBWCxHQUFrQixDQUFDRixRQUFRLENBQUMsRUFBRCxDQUEzQjtNQUVBRSxXQUFXLENBQUMsQ0FBRCxDQUFYLEdBQWlCLENBQUNGLFFBQVEsQ0FBQyxDQUFELENBQTFCO01BQ0FFLFdBQVcsQ0FBQyxDQUFELENBQVgsR0FBaUIsQ0FBQ0YsUUFBUSxDQUFDLENBQUQsQ0FBMUI7TUFDQUUsV0FBVyxDQUFDLEVBQUQsQ0FBWCxHQUFrQixDQUFDRixRQUFRLENBQUMsRUFBRCxDQUEzQjtNQUNBRSxXQUFXLENBQUMsRUFBRCxDQUFYLEdBQWtCLENBQUNGLFFBQVEsQ0FBQyxFQUFELENBQTNCO01BR0FFLFdBQVcsQ0FBQyxDQUFELENBQVgsR0FBaUIsQ0FBakI7TUFDQUEsV0FBVyxDQUFDLENBQUQsQ0FBWCxHQUFpQixDQUFqQjtNQUNBQSxXQUFXLENBQUMsRUFBRCxDQUFYLEdBQWtCLENBQWxCO01BQ0FBLFdBQVcsQ0FBQyxFQUFELENBQVgsR0FBa0IsQ0FBbEI7O01BRUEsSUFBSUosS0FBSyxJQUFJQyxTQUFULElBQXNCRCxLQUFLLEtBQUssR0FBcEMsRUFBeUM7UUFDdkNJLFdBQVcsQ0FBQyxFQUFELENBQVgsSUFBbUJKLEtBQW5CO1FBQ0FJLFdBQVcsQ0FBQyxFQUFELENBQVgsSUFBbUJKLEtBQW5CO1FBQ0FJLFdBQVcsQ0FBQyxFQUFELENBQVgsSUFBbUJKLEtBQW5CO01BQ0Q7O01BRURHLFVBQVUsR0FBR0MsV0FBYjtNQUVBLE9BQU9ELFVBQVA7SUFDRDs7O1dBUUQsbUNBQXVCO01BQ3JCLE9BQU8sS0FBSzFFLGFBQVo7SUFDRDs7O1dBTUQsMkJBQWU7TUFDYixPQUFPLEtBQUtXLFVBQVo7SUFDRDs7O1dBWUQsc0JBQWFpRSxJQUFiLEVBQTBCO01BQ3hCLE9BQU8sS0FBSy9FLFlBQUwsQ0FBa0JzRSxZQUFsQixDQUErQixLQUFLekUsRUFBcEMsRUFBd0NrRixJQUF4QyxDQUFQO0lBQ0Q7OztXQU9ELHdCQUFZO01BQ1YsT0FBTyxLQUFLL0UsWUFBTCxDQUFrQmdGLFlBQWxCLENBQStCLEtBQUtuRixFQUFwQyxDQUFQO0lBQ0Q7OztXQU1ELDhCQUFrQjtNQUNoQixPQUFPLEtBQUtHLFlBQUwsQ0FBa0J1RSxrQkFBbEIsQ0FBcUMsS0FBSzFFLEVBQTFDLENBQVA7SUFDRDs7O1dBTUQscUJBQVlrRixJQUFaLEVBQXlCO01BQ3ZCLE9BQU8sS0FBSy9FLFlBQUwsQ0FBa0JpRixXQUFsQixDQUE4QkYsSUFBOUIsQ0FBUDtJQUNEOzs7V0FNRCx1QkFBVztNQUNULE9BQU8sS0FBSy9FLFlBQUwsQ0FBa0JrRixXQUFsQixFQUFQO0lBQ0Q7OztXQU9ELGdDQUF1QkMsS0FBdkIsRUFBb0M7TUFDbEMsT0FBTyxLQUFLbkYsWUFBTCxDQUFrQm9GLHNCQUFsQixDQUF5QyxLQUFLdkYsRUFBOUMsRUFBa0RzRixLQUFsRCxDQUFQO0lBQ0Q7OztXQU1ELGtDQUFzQjtNQUNwQixPQUFPLEtBQUtuRixZQUFMLENBQWtCcUYsc0JBQWxCLENBQXlDLEtBQUt4RixFQUE5QyxDQUFQO0lBQ0Q7OztXQU9ELCtCQUFzQnNGLEtBQXRCLEVBQW1DO01BQ2pDLE9BQU8sS0FBS25GLFlBQUwsQ0FBa0JzRixxQkFBbEIsQ0FBd0MsS0FBS3pGLEVBQTdDLEVBQWlEc0YsS0FBakQsQ0FBUDtJQUNEOzs7V0FNRCxpQ0FBcUI7TUFDbkIsT0FBTyxLQUFLbkYsWUFBTCxDQUFrQnVGLHFCQUFsQixDQUF3QyxLQUFLMUYsRUFBN0MsQ0FBUDtJQUNEOzs7V0FXRCwwQkFBaUJrRixJQUFqQixFQUE2QjtNQUMzQixPQUFPLEtBQUsvRSxZQUFMLENBQWtCd0YsZ0JBQWxCLENBQW1DLEtBQUszRixFQUF4QyxFQUE0Q2tGLElBQTVDLENBQVA7SUFDRDs7O1dBT0QsNEJBQWdCO01BQ2QsT0FBTyxLQUFLL0UsWUFBTCxDQUFrQnlGLGdCQUFsQixDQUFtQyxLQUFLNUYsRUFBeEMsQ0FBUDtJQUNEOzs7V0FxQkQsc0JBQWE2RixTQUFiLEVBQThCO01BQzVCLE9BQU8sS0FBSzFGLFlBQUwsQ0FBa0IyRixZQUFsQixDQUErQixLQUFLOUYsRUFBcEMsRUFBd0M2RixTQUF4QyxDQUFQO0lBQ0Q7OztXQWFELHdCQUFZO01BQ1YsT0FBTyxLQUFLMUYsWUFBTCxDQUFrQjRGLFlBQWxCLENBQStCLEtBQUsvRixFQUFwQyxDQUFQO0lBQ0Q7Ozs7b01BTUQsaUJBQ0VnRyxTQURGLEVBRUVDLFNBRkYsRUFHRUMsT0FIRjtRQUFBOztRQUFBO1FBQUE7VUFBQTtZQUFBO2NBQUE7Z0JBQUE7Z0JBQUEsT0FLa0IsS0FBSy9GLFlBQUwsQ0FBa0JnRyxhQUFsQixDQUNkLEtBQUtuRyxFQURTLEVBRWQsQ0FBQ2dHLFNBQUQsQ0FGYyxFQUdkLFVBQUNJLEdBQUQsRUFBYTtrQkFDWCxLQUFJLENBQUMvRSxjQUFMLElBQXVCK0UsR0FBRyxDQUFDN0IsTUFBM0I7a0JBQ0EwQixTQUFTLENBQUNHLEdBQUQsQ0FBVDtnQkFDRCxDQU5hLEVBT2RGLE9BUGMsQ0FMbEI7O2NBQUE7Z0JBS01HLEdBTE47Z0JBQUEsaUNBY1NBLEdBZFQ7O2NBQUE7Y0FBQTtnQkFBQTtZQUFBO1VBQUE7UUFBQTtNQUFBOzs7Ozs7Ozs7OztxTUFxQkEsa0JBQ0VMLFNBREYsRUFFRUMsU0FGRixFQUdFQyxPQUhGO1FBQUE7O1FBQUE7UUFBQTtVQUFBO1lBQUE7Y0FBQTtnQkFBQTtnQkFBQSxPQUtrQixLQUFLL0YsWUFBTCxDQUFrQmdHLGFBQWxCLENBQ2QsS0FBS25HLEVBRFMsRUFFZGdHLFNBRmMsRUFHZCxVQUFDSSxHQUFELEVBQWE7a0JBQ1gsTUFBSSxDQUFDL0UsY0FBTCxJQUF1QitFLEdBQUcsQ0FBQzdCLE1BQTNCO2tCQUNBMEIsU0FBUyxDQUFDRyxHQUFELENBQVQ7Z0JBQ0QsQ0FOYSxFQU9kRixPQVBjLENBTGxCOztjQUFBO2dCQUtNRyxHQUxOO2dCQUFBLGtDQWNTQSxHQWRUOztjQUFBO2NBQUE7Z0JBQUE7WUFBQTtVQUFBO1FBQUE7TUFBQTs7Ozs7Ozs7OztXQW9DQSwwQkFBaUJuQixJQUFqQixFQUE2QjtNQUMzQixPQUFPLEtBQUsvRSxZQUFMLENBQWtCbUcsZ0JBQWxCLENBQW1DLEtBQUt0RyxFQUF4QyxFQUE0Q2tGLElBQTVDLENBQVA7SUFDRDs7O1dBT0QsNEJBQWdCO01BQ2QsT0FBTyxLQUFLL0UsWUFBTCxDQUFrQm9HLGdCQUFsQixDQUFtQyxLQUFLdkcsRUFBeEMsQ0FBUDtJQUNEOzs7V0FRTyxxQkFBUztNQUNmLE9BQU8sSUFBUDtJQUNEOzs7O2tNQU9PO1FBQUE7O1FBQUE7UUFBQTtVQUFBO1lBQUE7Y0FBQTtnQkFBQTtnQkFBQSxPQUVvQixJQUFJTCxxREFBSixHQUFtQjZHLElBQW5CLEVBRnBCOztjQUFBO2dCQUVOLEtBQUtyRyxZQUZDO2dCQUdOd0IsT0FBTyxDQUFDOEUsR0FBUixDQUFZLG1CQUFaLEVBQWlDLDBCQUFqQztnQkFITTtnQkFBQSxPQU1nQixLQUFLdEcsWUFBTCxDQUFrQnVHLFVBQWxCLENBQTZCLEtBQUszRyxXQUFsQyxDQU5oQjs7Y0FBQTtnQkFNTixLQUFLRSxRQU5DO2dCQU9OMEIsT0FBTyxDQUFDOEUsR0FBUixDQUNFLG1CQURGLEVBRUUsOEJBRkYsRUFHRSxLQUFLeEcsUUFIUDtnQkFPQSxLQUFLRCxFQUFMLEdBQVUsS0FBS0csWUFBTCxDQUFrQndHLEtBQWxCLENBQXdCLEtBQUs5RyxLQUE3QixFQUFvQyxLQUFLQyxNQUF6QyxFQUFpRCxLQUFLRyxRQUF0RCxDQUFWO2dCQUNBMEIsT0FBTyxDQUFDOEUsR0FBUixDQUFZLG1CQUFaLEVBQWlDLG1CQUFqQyxFQUFzRCxLQUFLekcsRUFBM0Q7O2dCQUVBLEtBQUs0RyxRQUFMOztnQkFFTUMsTUFuQkEsR0FvQkosS0FBSzFHLFlBQUwsQ0FBa0IyRyxXQXBCZDtnQkFxQk4sS0FBS2pHLFlBQUwsR0FBb0JnRyxNQUFNLENBQUNoRyxZQUEzQjtnQkFDQSxLQUFLQyxTQUFMLEdBQWlCK0YsTUFBTSxDQUFDL0YsU0FBeEI7Z0JBQ0EsS0FBS0ksZ0JBQUwsR0FBd0IyRixNQUFNLENBQUMzRixnQkFBL0I7Z0JBRUEsS0FBS0gsUUFBTCxHQUFnQixJQUFJZ0csVUFBSixDQUNkLEtBQUs1RyxZQUFMLENBQWtCNkcsUUFBbEIsQ0FBMkJDLE1BQTNCLENBQWtDQyxNQURwQixFQUVkLEtBQUtyRyxZQUZTLEVBR2QsS0FBS0MsU0FIUyxDQUFoQjtnQkFLQSxLQUFLRSxTQUFMLEdBQWlCLElBQUkrRixVQUFKLENBQ2YsS0FBSzVHLFlBQUwsQ0FBa0I2RyxRQUFsQixDQUEyQkMsTUFBM0IsQ0FBa0NDLE1BRG5CLEVBRWYsS0FBS2hHLGdCQUZVLEVBR2YsS0FBS0osU0FBTCxHQUFpQixDQUhGLENBQWpCO2dCQU1BLEtBQUtHLFVBQUwsR0FBa0IsSUFBSVYsWUFBSixDQUNoQixLQUFLSixZQUFMLENBQWtCNkcsUUFBbEIsQ0FBMkJDLE1BQTNCLENBQWtDQyxNQURsQixFQUVoQkwsTUFBTSxDQUFDTSxNQUZTLEVBR2hCLEVBSGdCLENBQWxCO2dCQUtBLEtBQUsxRyxvQkFBTCxHQUE0QixJQUFJRixZQUFKLENBQzFCLEtBQUtKLFlBQUwsQ0FBa0I2RyxRQUFsQixDQUEyQkMsTUFBM0IsQ0FBa0NDLE1BRFIsRUFFMUJMLE1BQU0sQ0FBQ08sU0FGbUIsRUFHMUIsRUFIMEIsQ0FBNUI7Z0JBTUEsS0FBSzdCLHNCQUFMLENBQTRCLEdBQTVCO2dCQUNBLEtBQUtFLHFCQUFMLENBQTJCLElBQTNCO2dCQUVBNEIsVUFBVSxDQUFDLFlBQUs7a0JBQ2QsTUFBSSxDQUFDbEUsYUFBTCxDQUFtQjtvQkFDakJDLElBQUksRUFBRSxNQURXO29CQUVqQkMsTUFBTSxFQUFFO2tCQUZTLENBQW5CO2dCQUlELENBTFMsRUFLUCxDQUxPLENBQVY7Z0JBbERNLGtDQXlEQyxJQXpERDs7Y0FBQTtjQUFBO2dCQUFBO1lBQUE7VUFBQTtRQUFBO01BQUE7Ozs7Ozs7Ozs7V0FnRUEsb0JBQVE7TUFDZCxLQUFLbEQsWUFBTCxDQUFrQm1ILFFBQWxCLENBQTJCLEtBQUt0SCxFQUFoQztJQUNEOzs7V0FNTywwQkFBaUJ1SCxXQUFqQixFQUFzQztNQUM1QyxJQUFJLENBQUNBLFdBQUwsRUFBa0I7UUFFaEI1RixPQUFPLENBQUNDLEtBQVIsQ0FBYyxpREFBZDtRQUNBO01BQ0Q7O01BTUQsSUFBSTBCLElBQUo7O01BRUEsSUFBSWlFLFdBQVcsQ0FBQ2pFLElBQWhCLEVBQXNCO1FBRXBCQSxJQUFJLEdBQUdpRSxXQUFXLENBQUNqRSxJQUFuQjtNQUNEOztNQUdELElBQUksS0FBS3RDLFNBQVQsRUFBb0I7UUFDbEIsSUFBSXdHLENBQUMsR0FBRyxDQUFSOztRQUlBLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxLQUFLN0csU0FBekIsRUFBb0M2RyxDQUFDLEVBQXJDLEVBQXlDO1VBQ3ZDLElBQUlDLENBQUMsR0FBR3BFLElBQUksQ0FBQ2tFLENBQUMsR0FBRyxDQUFMLENBQVo7VUFBQSxJQUNFRyxDQUFDLEdBQUdyRSxJQUFJLENBQUNrRSxDQUFDLEdBQUcsQ0FBTCxDQURWO1VBQUEsSUFFRUksQ0FBQyxHQUFHdEUsSUFBSSxDQUFDa0UsQ0FBQyxHQUFHLENBQUwsQ0FGVjtVQUlBLEtBQUt4RyxTQUFMLENBQWV5RyxDQUFmLElBQXFCQyxDQUFDLEdBQUdBLENBQUosR0FBUUEsQ0FBUixHQUFZRSxDQUFaLEdBQWdCRCxDQUFoQixHQUFvQkEsQ0FBcEIsR0FBd0JBLENBQXhCLEdBQTRCQSxDQUE3QixJQUFtQyxDQUF2RDtVQUNBSCxDQUFDLElBQUksQ0FBTDtRQUNEO01BQ0Y7O01BRUQsSUFBSSxLQUFLekcsUUFBVCxFQUFtQjtRQUNqQixLQUFLQSxRQUFMLENBQWNnQyxHQUFkLENBQWtCTyxJQUFsQjtRQUNBLE9BQU8sSUFBUDtNQUNEOztNQUVELE9BQU8sS0FBUDtJQUNEOzs7O3lNQTFxQkQsa0JBQ0V6RCxLQURGLEVBRUVDLE1BRkYsRUFHRUMsV0FIRjtRQUFBO1FBQUE7VUFBQTtZQUFBO2NBQUE7Z0JBTVE4SCxlQU5SLEdBTTBCLElBQUlqSSxlQUFKLENBQW9CQyxLQUFwQixFQUEyQkMsTUFBM0IsRUFBbUNDLFdBQW5DLENBTjFCO2dCQUFBO2dCQUFBLE9BT2U4SCxlQUFlLENBQUNDLFdBQWhCLEVBUGY7O2NBQUE7Z0JBQUE7O2NBQUE7Y0FBQTtnQkFBQTtZQUFBO1VBQUE7UUFBQTtNQUFBOzs7Ozs7Ozs7OztvTUFVQSxrQkFBMkJ0RyxLQUEzQixFQUE0Q3pCLFdBQTVDO1FBQUE7UUFBQTtVQUFBO1lBQUE7Y0FBQTtnQkFDUUYsS0FEUixHQUNnQjJCLEtBQUssQ0FBQ2QsVUFBTixJQUFvQmMsS0FBSyxDQUFDM0IsS0FEMUM7Z0JBRVFDLE1BRlIsR0FFaUIwQixLQUFLLENBQUNiLFdBQU4sSUFBcUJhLEtBQUssQ0FBQzFCLE1BRjVDO2dCQUdRK0gsZUFIUixHQUcwQixJQUFJakksZUFBSixDQUFvQkMsS0FBcEIsRUFBMkJDLE1BQTNCLEVBQW1DQyxXQUFuQyxDQUgxQjtnQkFBQTtnQkFBQSxPQUllOEgsZUFBZSxDQUFDQyxXQUFoQixFQUpmOztjQUFBO2dCQUFBOztjQUFBO2NBQUE7Z0JBQUE7WUFBQTtVQUFBO1FBQUE7TUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM5S0Y7QUFDQTtBQUVBLElBQU1FLGNBQWMsR0FBRyxDQUFDLENBQXhCO0FBQ0EsSUFBTXhGLFVBQVUsR0FBRyxDQUFuQjs7SUFhcUI3QztFQTJEbkI7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFBQTs7SUFFRSxLQUFLcUgsUUFBTDtJQUNBLEtBQUtpQixjQUFMLEdBQXNCLENBQXRCO0lBQ0EsS0FBS0MsV0FBTCxHQUFtQixDQUFuQjtJQUNBLEtBQUtDLE9BQUwsR0FBZSxPQUFmO0lBQ0F4RyxPQUFPLENBQUN5RyxJQUFSLENBQWEsZUFBYixFQUE4QixLQUFLRCxPQUFuQztFQUNEOzs7OzsyTEFVTTtRQUFBO1FBQUE7VUFBQTtZQUFBO2NBQUE7Z0JBQUE7Z0JBQUEsT0FDaUJoSSx3RUFBWSxFQUQ3Qjs7Y0FBQTtnQkFDTCxLQUFLNkcsUUFEQTs7Z0JBR0wsS0FBS3FCLFNBQUw7O2dCQUVJQyxLQUxDLEdBS08sT0FBT0MsTUFBUCxLQUFrQixXQUFsQixHQUFnQ0EsTUFBaEMsR0FBeUNDLHFCQUxoRDtnQkFNTEYsS0FBSyxDQUFDbkksWUFBTixHQUFxQixJQUFyQjtnQkFOSyxpQ0FRRSxJQVJGOztjQUFBO2NBQUE7Z0JBQUE7WUFBQTtVQUFBO1FBQUE7TUFBQTs7Ozs7Ozs7OztXQWlCQyxxQkFBUztNQUFBOztNQUVmLENBQ0UsT0FERixFQUVFLFVBRkYsRUFJRSxVQUpGLEVBTUUsYUFORixFQU9FLGFBUEYsRUFTRSxjQVRGLEVBVUUsY0FWRixFQVlFLG9CQVpGLEVBY0UsY0FkRixFQWVFLGlCQWZGLEVBZ0JFLGNBaEJGLEVBaUJFLFlBakJGLEVBbUJFLGFBbkJGLEVBb0JFLGVBcEJGLEVBc0JFLHdCQXRCRixFQXVCRSx3QkF2QkYsRUF5QkUsdUJBekJGLEVBMEJFLHVCQTFCRixFQTRCRSxrQkE1QkYsRUE2QkUsa0JBN0JGLEVBK0JFLGNBL0JGLEVBZ0NFLGNBaENGLEVBa0NFLGtCQWxDRixFQW1DRSxrQkFuQ0YsRUFxQ0UsWUFyQ0YsRUFzQ0VzSSxPQXRDRixDQXNDVSxVQUFDQyxNQUFELEVBQVc7UUFDbkIsS0FBSSxDQUFDM0csU0FBTCxHQUFpQjJHLE1BQWpCLElBQTJCLEtBQUksQ0FBQzFCLFFBQUwsQ0FBYzBCLE1BQWQsQ0FBM0I7TUFDRCxDQXhDRDs7TUEyQ0EsS0FBSyxJQUFNQyxFQUFYLElBQWlCLEtBQUszQixRQUF0QixFQUFnQztRQUM5QixJQUFJMkIsRUFBRSxDQUFDQyxLQUFILENBQVMsS0FBVCxDQUFKLEVBQXFCO1VBQ25CLEtBQUs3RyxTQUFMLEdBQWlCNEcsRUFBakIsSUFBdUIsS0FBSzNCLFFBQUwsQ0FBYzJCLEVBQWQsQ0FBdkI7UUFDRDtNQUNGO0lBQ0Y7OztXQU1PLHFCQUFTO01BQ2YsT0FBTyxJQUFQO0lBQ0Q7Ozs7aU1BV00sa0JBQWlCM0MsU0FBakI7UUFBQTtRQUFBO1VBQUE7WUFBQTtjQUFBO2dCQUNDM0MsTUFERCxHQUNVLG1CQUFtQixLQUFLNkUsV0FBTCxFQUQ3Qjs7Z0JBQUEsTUFLRGxDLFNBQVMsWUFBWWUsVUFMcEI7a0JBQUE7a0JBQUE7Z0JBQUE7O2dCQU9IekQsSUFBSSxHQUFHMEMsU0FBUDtnQkFQRztnQkFBQTs7Y0FBQTtnQkFBQTtnQkFBQTtnQkFBQSxPQVdZK0IsOERBQUEsQ0FBc0IvQixTQUF0QixDQVhaOztjQUFBO2dCQVdEMUMsSUFYQztnQkFBQTtnQkFBQTs7Y0FBQTtnQkFBQTtnQkFBQTtnQkFBQTs7Y0FBQTtnQkFpQkwsS0FBS3dGLGNBQUwsQ0FBb0J4RixJQUFwQixFQUEwQkQsTUFBMUI7O2dCQWpCSyxrQ0FvQkUsS0FBSzJELFFBQUwsQ0FBYytCLFdBQWQsQ0FBMEIxRixNQUExQixDQXBCRjs7Y0FBQTtjQUFBO2dCQUFBO1lBQUE7VUFBQTtRQUFBO01BQUE7Ozs7Ozs7Ozs7V0ErQkEsdUJBQ0wyRixJQURLLEVBRUxDLElBRkssRUFHTC9FLFFBSEssRUFJTGdGLFFBSkssRUFJK0I7TUFBQTs7TUFFcEMsSUFBSUMsUUFBUSxHQUFRLEVBQXBCO01BQ0EsSUFBSUMsT0FBTyxHQUFHSCxJQUFJLENBQUMxRSxNQUFMLEdBQWMsQ0FBNUI7O01BQ0EsSUFBSTBCLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQUNvRCxRQUFELEVBQWtCO1FBQ2hDRCxPQUFPLElBQUksQ0FBWDs7UUFDQSxJQUFJQSxPQUFPLEtBQUssQ0FBaEIsRUFBbUI7VUFDakIsSUFBTUUsR0FBRyxHQUFHLElBQUksTUFBSSxDQUFDdEMsUUFBTCxDQUFjdUMsVUFBbEIsRUFBWjtVQUNBLElBQU1DLFNBQVMsR0FBRyxFQUFsQjs7VUFDQSxLQUFLLElBQUlwSCxFQUFDLEdBQUcsQ0FBYixFQUFnQkEsRUFBQyxHQUFHK0csUUFBUSxDQUFDNUUsTUFBN0IsRUFBcUNuQyxFQUFDLEVBQXRDLEVBQTBDO1lBQ3hDa0gsR0FBRyxDQUFDRyxTQUFKLENBQWNOLFFBQVEsQ0FBQy9HLEVBQUQsQ0FBdEI7VUFDRDs7VUFDRCxJQUFJc0gsR0FBRyxHQUFHLE1BQUksQ0FBQzFDLFFBQUwsQ0FBYzJDLGNBQWQsQ0FBNkJYLElBQTdCLEVBQW1DTSxHQUFuQyxDQUFWOztVQUNBLEtBQUssSUFBSWxILEdBQUMsR0FBRyxDQUFiLEVBQWdCQSxHQUFDLEdBQUdzSCxHQUFHLENBQUNFLElBQUosRUFBcEIsRUFBZ0N4SCxHQUFDLEVBQWpDLEVBQXFDO1lBQ25Db0gsU0FBUyxDQUFDckYsSUFBVixDQUFldUYsR0FBRyxDQUFDRyxHQUFKLENBQVF6SCxHQUFSLENBQWY7VUFDRDs7VUFFRFQsT0FBTyxDQUFDOEUsR0FBUixDQUFZLHNCQUFaLEVBQW9DK0MsU0FBcEM7VUFDQSxJQUFJdEYsUUFBSixFQUFjQSxRQUFRLENBQUNzRixTQUFELENBQVI7UUFDZjtNQUNGLENBaEJEOztNQWlCQSxJQUFJdEQsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBQ21ELFFBQUQsRUFBZ0JTLFdBQWhCLEVBQXFDO1FBQ2pEbkksT0FBTyxDQUFDOEUsR0FBUixDQUFZLGtCQUFaLEVBQWdDNEMsUUFBaEM7UUFDQUgsUUFBUSxDQUFDWSxXQUFELENBQVI7TUFDRCxDQUhEOztNQUtBLEtBQUssSUFBSTFILENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUc2RyxJQUFJLENBQUMxRSxNQUF6QixFQUFpQ25DLENBQUMsRUFBbEMsRUFBc0M7UUFDcEMsSUFBSTJILEdBQUcsR0FBR2QsSUFBSSxDQUFDN0csQ0FBRCxDQUFkO1FBQ0EsSUFBSTRILE1BQU0sR0FBRyxnQkFBZ0IsS0FBSy9CLGNBQWxDO1FBQ0FrQixRQUFRLENBQUNoRixJQUFULENBQWM2RixNQUFkO1FBQ0EsSUFBSUMsU0FBUyxHQUFHRCxNQUFNLEdBQUcsT0FBekI7UUFDQSxJQUFJRSxTQUFTLEdBQUdGLE1BQU0sR0FBRyxPQUF6QjtRQUNBLElBQUlHLFNBQVMsR0FBR0gsTUFBTSxHQUFHLFFBQXpCO1FBRUEsS0FBS0ksSUFBTCxDQUNFTCxHQUFHLEdBQUcsT0FEUixFQUVFRSxTQUZGLEVBR0VoRSxTQUFTLENBQUNvRSxJQUFWLENBQWVKLFNBQWYsQ0FIRixFQUlFL0QsT0FBTyxDQUFDbUUsSUFBUixDQUFhSixTQUFiLENBSkY7UUFNQSxLQUFLRyxJQUFMLENBQ0VMLEdBQUcsR0FBRyxPQURSLEVBRUVHLFNBRkYsRUFHRWpFLFNBQVMsQ0FBQ29FLElBQVYsQ0FBZUgsU0FBZixDQUhGLEVBSUVoRSxPQUFPLENBQUNtRSxJQUFSLENBQWFILFNBQWIsQ0FKRjtRQU1BLEtBQUtFLElBQUwsQ0FDRUwsR0FBRyxHQUFHLFFBRFIsRUFFRUksU0FGRixFQUdFbEUsU0FBUyxDQUFDb0UsSUFBVixDQUFlRixTQUFmLENBSEYsRUFJRWpFLE9BQU8sQ0FBQ21FLElBQVIsQ0FBYUYsU0FBYixDQUpGO1FBTUEsS0FBS2xDLGNBQUwsSUFBdUIsQ0FBdkI7TUFDRDs7TUFDRCxJQUFJcUMsR0FBRyxHQUFRLEVBQWY7O01BRUEsS0FBSyxJQUFJbEksQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzZHLElBQUksQ0FBQzFFLE1BQXpCLEVBQWlDLEVBQUVuQyxDQUFuQyxFQUFzQztRQUNwQ2tJLEdBQUcsQ0FBQ25HLElBQUosQ0FBUy9CLENBQVQ7TUFDRDs7TUFFRCxPQUFPa0ksR0FBUDtJQUNEOzs7V0FTTyx3QkFBZWhILElBQWYsRUFBaUNELE1BQWpDLEVBQStDO01BR3JELEtBQUsyRCxRQUFMLENBQWN1RCxFQUFkLENBQWlCQyxTQUFqQixDQUEyQm5ILE1BQTNCLEVBQW1DQyxJQUFuQyxFQUF5QztRQUN2Q21ILFFBQVEsRUFBRTtNQUQ2QixDQUF6QztJQUdEOzs7V0FTTyxjQUNOVixHQURNLEVBRU4xRyxNQUZNLEVBR05hLFFBSE0sRUFJTndHLGFBSk0sRUFJK0I7TUFBQTs7TUFFckMsSUFBSUMsSUFBSSxHQUFHLElBQUlDLGNBQUosRUFBWDtNQUNBRCxJQUFJLENBQUNFLElBQUwsQ0FBVSxLQUFWLEVBQWlCZCxHQUFqQixFQUFzQixJQUF0QjtNQUNBWSxJQUFJLENBQUNHLFlBQUwsR0FBb0IsYUFBcEI7O01BQ0EsSUFBTUMsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQixDQUN6QjFILE1BRHlCLEVBRXpCMkgsU0FGeUIsRUFHekI5RyxRQUh5QixFQUl2QjtRQUNGLE1BQUksQ0FBQzhDLFFBQUwsQ0FBY3VELEVBQWQsQ0FBaUJDLFNBQWpCLENBQTJCbkgsTUFBM0IsRUFBbUMySCxTQUFuQyxFQUE4QztVQUFFUCxRQUFRLEVBQUU7UUFBWixDQUE5Qzs7UUFDQXZHLFFBQVEsQ0FBQzhHLFNBQUQsQ0FBUjtNQUNELENBUEQ7O01BU0FMLElBQUksQ0FBQ00sTUFBTCxHQUFjO1FBQ1osSUFBSSxLQUFLQyxNQUFMLElBQWUsR0FBbkIsRUFBd0I7VUFDdEIsSUFBSUMsV0FBVyxHQUFHUixJQUFJLENBQUNTLFFBQXZCO1VBQ0EsSUFBSUosU0FBUyxHQUFHLElBQUlqRSxVQUFKLENBQWVvRSxXQUFmLENBQWhCO1VBQ0FKLGtCQUFrQixDQUFDMUgsTUFBRCxFQUFTMkgsU0FBVCxFQUFvQjlHLFFBQXBCLENBQWxCO1FBQ0QsQ0FKRCxNQUlPO1VBQ0x3RyxhQUFhLENBQUMsS0FBS1EsTUFBTixDQUFiO1FBQ0Q7TUFDRixDQVJEOztNQVVBUCxJQUFJLENBQUNVLElBQUw7SUFDRDs7O1NBdFRELGVBQXlCO01BQ3ZCLE9BQU9yRCxjQUFQO0lBQ0Q7OztTQUNELGVBQXFCO01BQ25CLE9BQU94RixVQUFQO0lBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdkJIOztJQUVxQnVGOzs7Ozs7OztzTUFDbkIsaUJBQTZCZ0MsR0FBN0I7UUFBQTtRQUFBO1VBQUE7WUFBQTtjQUFBO2dCQUFBO2dCQUFBO2dCQUFBLE9BRWdDdUIsZ0RBQUEsQ0FBVXZCLEdBQVYsRUFBZTtrQkFDekNlLFlBQVksRUFBRTtnQkFEMkIsQ0FBZixDQUZoQzs7Y0FBQTtnQkFFVU0sUUFGVjtnQkFBQSxpQ0FLVyxJQUFJckUsVUFBSixDQUFlcUUsUUFBUSxDQUFDOUgsSUFBeEIsQ0FMWDs7Y0FBQTtnQkFBQTtnQkFBQTtnQkFBQTs7Y0FBQTtjQUFBO2dCQUFBO1lBQUE7VUFBQTtRQUFBO01BQUE7Ozs7Ozs7Ozs7OzhNQVdBLGtCQUFxQ3lHLEdBQXJDLEVBQWtEN0YsUUFBbEQ7UUFBQTtRQUFBO1VBQUE7WUFBQTtjQUFBO2dCQUFBO2dCQUFBO2dCQUFBLE9BRWdDb0gsZ0RBQUEsQ0FDckJ2QixHQURxQixFQUNoQjtrQkFBRWUsWUFBWSxFQUFFO2dCQUFoQixDQURnQixFQUV6QlMsSUFGeUIsQ0FFcEIsVUFBQ0gsUUFBRCxFQUFrQjtrQkFDdEIsSUFBTTlILElBQUksR0FBRyxJQUFJeUQsVUFBSixDQUFlcUUsUUFBUSxDQUFDOUgsSUFBeEIsQ0FBYjtrQkFDQTNCLE9BQU8sQ0FBQzhFLEdBQVIsQ0FBWW5ELElBQVo7a0JBQ0FZLFFBQVEsQ0FBQ2tILFFBQUQsQ0FBUjtnQkFDRCxDQU55QixDQUZoQzs7Y0FBQTtnQkFFVUEsUUFGVjtnQkFBQSxrQ0FTV0EsUUFUWDs7Y0FBQTtnQkFBQTtnQkFBQTtnQkFBQTs7Y0FBQTtjQUFBO2dCQUFBO1lBQUE7VUFBQTtRQUFBO01BQUE7Ozs7Ozs7Ozs7V0FlQSwwQkFBd0JJLE1BQXhCLEVBQXNDO01BQ3BDLElBQU1sSSxJQUFJLEdBQUcsSUFBSXlELFVBQUosQ0FBZXlFLE1BQU0sQ0FBQ2pILE1BQXRCLENBQWI7O01BQ0EsS0FBSyxJQUFJbkMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2tCLElBQUksQ0FBQ2lCLE1BQXpCLEVBQWlDbkMsQ0FBQyxFQUFsQyxFQUFzQztRQUNwQ2tCLElBQUksQ0FBQ2xCLENBQUQsQ0FBSixHQUFVb0osTUFBTSxDQUFDQyxVQUFQLENBQWtCckosQ0FBbEIsSUFBdUIsSUFBakM7TUFDRDs7TUFDRCxPQUFPa0IsSUFBUDtJQUNEOzs7Ozs7Ozs7Ozs7Ozs7O0FDdEVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLE1BQU07QUFDTixlQUFlO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRDtBQUMxRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBLHdDQUF3QyxXQUFXO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUMsY0FBYztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUMsbUJBQW1CO0FBQ3BEO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxH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QTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7QUNsQ2U7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7O0FDSkE7QUFDQSxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7Ozs7Ozs7Ozs7Ozs7O0FDakJlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7Ozs7OztVQ2JBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7O1VBRUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7Ozs7O1dDdEJBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxpQ0FBaUMsV0FBVztXQUM1QztXQUNBOzs7OztXQ1BBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EseUNBQXlDLHdDQUF3QztXQUNqRjtXQUNBO1dBQ0E7Ozs7O1dDUEE7V0FDQTtXQUNBO1dBQ0E7V0FDQSxHQUFHO1dBQ0g7V0FDQTtXQUNBLENBQUM7Ozs7O1dDUEQ7Ozs7O1dDQUE7V0FDQTtXQUNBO1dBQ0EsdURBQXVELGlCQUFpQjtXQUN4RTtXQUNBLGdEQUFnRCxhQUFhO1dBQzdEOzs7Ozs7Ozs7Ozs7Ozs7OztBQzZCQTtBQUNBO0FBRUEsaUVBQWU7RUFDYjNELFlBQVksRUFBWkEscURBRGE7RUFFYkMsZUFBZSxFQUFmQSx3REFBZUE7QUFGRixDQUFmLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL2J1aWxkL2FydG9vbGtpdE5GVF9FUzZfd2FzbS5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9kYXRhLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vc3JjL0FSQ29udHJvbGxlck5GVC50cyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9zcmMvQVJUb29sa2l0TkZULnRzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL3NyYy9VdGlscy50cyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC9pZ25vcmVkfC9ob21lL3dhbHRlci9rYWx3YWx0LWdpdGh1Yi9qc2FydG9vbGtpdE5GVC9idWlsZHxjcnlwdG8iLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZUL2lnbm9yZWR8L2hvbWUvd2FsdGVyL2thbHdhbHQtZ2l0aHViL2pzYXJ0b29sa2l0TkZUL2J1aWxkfGZzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC9pZ25vcmVkfC9ob21lL3dhbHRlci9rYWx3YWx0LWdpdGh1Yi9qc2FydG9vbGtpdE5GVC9idWlsZHxwYXRoIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZUL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiQVJUb29sa2l0TkZUXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkFSVG9vbGtpdE5GVFwiXSA9IGZhY3RvcnkoKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCAoKSA9PiB7XG5yZXR1cm4gIiwiXG52YXIgTW9kdWxlID0gKCgpID0+IHtcbiAgdmFyIF9zY3JpcHREaXIgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyA6IHVuZGVmaW5lZDtcbiAgaWYgKHR5cGVvZiBfX2ZpbGVuYW1lICE9PSAndW5kZWZpbmVkJykgX3NjcmlwdERpciA9IF9zY3JpcHREaXIgfHwgX19maWxlbmFtZTtcbiAgcmV0dXJuIChcbmZ1bmN0aW9uKE1vZHVsZSkge1xuICBNb2R1bGUgPSBNb2R1bGUgfHwge307XG5cbnZhciBNb2R1bGU9dHlwZW9mIE1vZHVsZSE9XCJ1bmRlZmluZWRcIj9Nb2R1bGU6e307dmFyIHJlYWR5UHJvbWlzZVJlc29sdmUscmVhZHlQcm9taXNlUmVqZWN0O01vZHVsZVtcInJlYWR5XCJdPW5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtyZWFkeVByb21pc2VSZXNvbHZlPXJlc29sdmU7cmVhZHlQcm9taXNlUmVqZWN0PXJlamVjdH0pO3ZhciBtb2R1bGVPdmVycmlkZXM9T2JqZWN0LmFzc2lnbih7fSxNb2R1bGUpO3ZhciBhcmd1bWVudHNfPVtdO3ZhciB0aGlzUHJvZ3JhbT1cIi4vdGhpcy5wcm9ncmFtXCI7dmFyIHF1aXRfPShzdGF0dXMsdG9UaHJvdyk9Pnt0aHJvdyB0b1Rocm93fTt2YXIgRU5WSVJPTk1FTlRfSVNfV0VCPXR5cGVvZiB3aW5kb3c9PVwib2JqZWN0XCI7dmFyIEVOVklST05NRU5UX0lTX1dPUktFUj10eXBlb2YgaW1wb3J0U2NyaXB0cz09XCJmdW5jdGlvblwiO3ZhciBFTlZJUk9OTUVOVF9JU19OT0RFPXR5cGVvZiBwcm9jZXNzPT1cIm9iamVjdFwiJiZ0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucz09XCJvYmplY3RcIiYmdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZT09XCJzdHJpbmdcIjt2YXIgc2NyaXB0RGlyZWN0b3J5PVwiXCI7ZnVuY3Rpb24gbG9jYXRlRmlsZShwYXRoKXtpZihNb2R1bGVbXCJsb2NhdGVGaWxlXCJdKXtyZXR1cm4gTW9kdWxlW1wibG9jYXRlRmlsZVwiXShwYXRoLHNjcmlwdERpcmVjdG9yeSl9cmV0dXJuIHNjcmlwdERpcmVjdG9yeStwYXRofXZhciByZWFkXyxyZWFkQXN5bmMscmVhZEJpbmFyeSxzZXRXaW5kb3dUaXRsZTtmdW5jdGlvbiBsb2dFeGNlcHRpb25PbkV4aXQoZSl7aWYoZSBpbnN0YW5jZW9mIEV4aXRTdGF0dXMpcmV0dXJuO2xldCB0b0xvZz1lO2VycihcImV4aXRpbmcgZHVlIHRvIGV4Y2VwdGlvbjogXCIrdG9Mb2cpfXZhciBmczt2YXIgbm9kZVBhdGg7dmFyIHJlcXVpcmVOb2RlRlM7aWYoRU5WSVJPTk1FTlRfSVNfTk9ERSl7aWYoRU5WSVJPTk1FTlRfSVNfV09SS0VSKXtzY3JpcHREaXJlY3Rvcnk9cmVxdWlyZShcInBhdGhcIikuZGlybmFtZShzY3JpcHREaXJlY3RvcnkpK1wiL1wifWVsc2V7c2NyaXB0RGlyZWN0b3J5PV9fZGlybmFtZStcIi9cIn1yZXF1aXJlTm9kZUZTPSgoKT0+e2lmKCFub2RlUGF0aCl7ZnM9cmVxdWlyZShcImZzXCIpO25vZGVQYXRoPXJlcXVpcmUoXCJwYXRoXCIpfX0pO3JlYWRfPWZ1bmN0aW9uIHNoZWxsX3JlYWQoZmlsZW5hbWUsYmluYXJ5KXt2YXIgcmV0PXRyeVBhcnNlQXNEYXRhVVJJKGZpbGVuYW1lKTtpZihyZXQpe3JldHVybiBiaW5hcnk/cmV0OnJldC50b1N0cmluZygpfXJlcXVpcmVOb2RlRlMoKTtmaWxlbmFtZT1ub2RlUGF0aFtcIm5vcm1hbGl6ZVwiXShmaWxlbmFtZSk7cmV0dXJuIGZzLnJlYWRGaWxlU3luYyhmaWxlbmFtZSxiaW5hcnk/dW5kZWZpbmVkOlwidXRmOFwiKX07cmVhZEJpbmFyeT0oZmlsZW5hbWU9Pnt2YXIgcmV0PXJlYWRfKGZpbGVuYW1lLHRydWUpO2lmKCFyZXQuYnVmZmVyKXtyZXQ9bmV3IFVpbnQ4QXJyYXkocmV0KX1yZXR1cm4gcmV0fSk7cmVhZEFzeW5jPSgoZmlsZW5hbWUsb25sb2FkLG9uZXJyb3IpPT57dmFyIHJldD10cnlQYXJzZUFzRGF0YVVSSShmaWxlbmFtZSk7aWYocmV0KXtvbmxvYWQocmV0KX1yZXF1aXJlTm9kZUZTKCk7ZmlsZW5hbWU9bm9kZVBhdGhbXCJub3JtYWxpemVcIl0oZmlsZW5hbWUpO2ZzLnJlYWRGaWxlKGZpbGVuYW1lLGZ1bmN0aW9uKGVycixkYXRhKXtpZihlcnIpb25lcnJvcihlcnIpO2Vsc2Ugb25sb2FkKGRhdGEuYnVmZmVyKX0pfSk7aWYocHJvY2Vzc1tcImFyZ3ZcIl0ubGVuZ3RoPjEpe3RoaXNQcm9ncmFtPXByb2Nlc3NbXCJhcmd2XCJdWzFdLnJlcGxhY2UoL1xcXFwvZyxcIi9cIil9YXJndW1lbnRzXz1wcm9jZXNzW1wiYXJndlwiXS5zbGljZSgyKTtwcm9jZXNzW1wib25cIl0oXCJ1bmNhdWdodEV4Y2VwdGlvblwiLGZ1bmN0aW9uKGV4KXtpZighKGV4IGluc3RhbmNlb2YgRXhpdFN0YXR1cykpe3Rocm93IGV4fX0pO3Byb2Nlc3NbXCJvblwiXShcInVuaGFuZGxlZFJlamVjdGlvblwiLGZ1bmN0aW9uKHJlYXNvbil7dGhyb3cgcmVhc29ufSk7cXVpdF89KChzdGF0dXMsdG9UaHJvdyk9PntpZihrZWVwUnVudGltZUFsaXZlKCkpe3Byb2Nlc3NbXCJleGl0Q29kZVwiXT1zdGF0dXM7dGhyb3cgdG9UaHJvd31sb2dFeGNlcHRpb25PbkV4aXQodG9UaHJvdyk7cHJvY2Vzc1tcImV4aXRcIl0oc3RhdHVzKX0pO01vZHVsZVtcImluc3BlY3RcIl09ZnVuY3Rpb24oKXtyZXR1cm5cIltFbXNjcmlwdGVuIE1vZHVsZSBvYmplY3RdXCJ9fWVsc2UgaWYoRU5WSVJPTk1FTlRfSVNfV0VCfHxFTlZJUk9OTUVOVF9JU19XT1JLRVIpe2lmKEVOVklST05NRU5UX0lTX1dPUktFUil7c2NyaXB0RGlyZWN0b3J5PXNlbGYubG9jYXRpb24uaHJlZn1lbHNlIGlmKHR5cGVvZiBkb2N1bWVudCE9XCJ1bmRlZmluZWRcIiYmZG9jdW1lbnQuY3VycmVudFNjcmlwdCl7c2NyaXB0RGlyZWN0b3J5PWRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjfWlmKF9zY3JpcHREaXIpe3NjcmlwdERpcmVjdG9yeT1fc2NyaXB0RGlyfWlmKHNjcmlwdERpcmVjdG9yeS5pbmRleE9mKFwiYmxvYjpcIikhPT0wKXtzY3JpcHREaXJlY3Rvcnk9c2NyaXB0RGlyZWN0b3J5LnN1YnN0cigwLHNjcmlwdERpcmVjdG9yeS5yZXBsYWNlKC9bPyNdLiovLFwiXCIpLmxhc3RJbmRleE9mKFwiL1wiKSsxKX1lbHNle3NjcmlwdERpcmVjdG9yeT1cIlwifXtyZWFkXz0odXJsPT57dHJ5e3ZhciB4aHI9bmV3IFhNTEh0dHBSZXF1ZXN0O3hoci5vcGVuKFwiR0VUXCIsdXJsLGZhbHNlKTt4aHIuc2VuZChudWxsKTtyZXR1cm4geGhyLnJlc3BvbnNlVGV4dH1jYXRjaChlcnIpe3ZhciBkYXRhPXRyeVBhcnNlQXNEYXRhVVJJKHVybCk7aWYoZGF0YSl7cmV0dXJuIGludEFycmF5VG9TdHJpbmcoZGF0YSl9dGhyb3cgZXJyfX0pO2lmKEVOVklST05NRU5UX0lTX1dPUktFUil7cmVhZEJpbmFyeT0odXJsPT57dHJ5e3ZhciB4aHI9bmV3IFhNTEh0dHBSZXF1ZXN0O3hoci5vcGVuKFwiR0VUXCIsdXJsLGZhbHNlKTt4aHIucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIjt4aHIuc2VuZChudWxsKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoeGhyLnJlc3BvbnNlKX1jYXRjaChlcnIpe3ZhciBkYXRhPXRyeVBhcnNlQXNEYXRhVVJJKHVybCk7aWYoZGF0YSl7cmV0dXJuIGRhdGF9dGhyb3cgZXJyfX0pfXJlYWRBc3luYz0oKHVybCxvbmxvYWQsb25lcnJvcik9Pnt2YXIgeGhyPW5ldyBYTUxIdHRwUmVxdWVzdDt4aHIub3BlbihcIkdFVFwiLHVybCx0cnVlKTt4aHIucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIjt4aHIub25sb2FkPSgoKT0+e2lmKHhoci5zdGF0dXM9PTIwMHx8eGhyLnN0YXR1cz09MCYmeGhyLnJlc3BvbnNlKXtvbmxvYWQoeGhyLnJlc3BvbnNlKTtyZXR1cm59dmFyIGRhdGE9dHJ5UGFyc2VBc0RhdGFVUkkodXJsKTtpZihkYXRhKXtvbmxvYWQoZGF0YS5idWZmZXIpO3JldHVybn1vbmVycm9yKCl9KTt4aHIub25lcnJvcj1vbmVycm9yO3hoci5zZW5kKG51bGwpfSl9c2V0V2luZG93VGl0bGU9KHRpdGxlPT5kb2N1bWVudC50aXRsZT10aXRsZSl9ZWxzZXt9dmFyIG91dD1Nb2R1bGVbXCJwcmludFwiXXx8Y29uc29sZS5sb2cuYmluZChjb25zb2xlKTt2YXIgZXJyPU1vZHVsZVtcInByaW50RXJyXCJdfHxjb25zb2xlLndhcm4uYmluZChjb25zb2xlKTtPYmplY3QuYXNzaWduKE1vZHVsZSxtb2R1bGVPdmVycmlkZXMpO21vZHVsZU92ZXJyaWRlcz1udWxsO2lmKE1vZHVsZVtcImFyZ3VtZW50c1wiXSlhcmd1bWVudHNfPU1vZHVsZVtcImFyZ3VtZW50c1wiXTtpZihNb2R1bGVbXCJ0aGlzUHJvZ3JhbVwiXSl0aGlzUHJvZ3JhbT1Nb2R1bGVbXCJ0aGlzUHJvZ3JhbVwiXTtpZihNb2R1bGVbXCJxdWl0XCJdKXF1aXRfPU1vZHVsZVtcInF1aXRcIl07dmFyIHRlbXBSZXQwPTA7dmFyIHNldFRlbXBSZXQwPXZhbHVlPT57dGVtcFJldDA9dmFsdWV9O3ZhciBnZXRUZW1wUmV0MD0oKT0+dGVtcFJldDA7dmFyIHdhc21CaW5hcnk7aWYoTW9kdWxlW1wid2FzbUJpbmFyeVwiXSl3YXNtQmluYXJ5PU1vZHVsZVtcIndhc21CaW5hcnlcIl07dmFyIG5vRXhpdFJ1bnRpbWU9TW9kdWxlW1wibm9FeGl0UnVudGltZVwiXXx8dHJ1ZTtpZih0eXBlb2YgV2ViQXNzZW1ibHkhPVwib2JqZWN0XCIpe2Fib3J0KFwibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZFwiKX12YXIgd2FzbU1lbW9yeTt2YXIgQUJPUlQ9ZmFsc2U7dmFyIEVYSVRTVEFUVVM7ZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbix0ZXh0KXtpZighY29uZGl0aW9uKXthYm9ydCh0ZXh0KX19dmFyIFVURjhEZWNvZGVyPXR5cGVvZiBUZXh0RGVjb2RlciE9XCJ1bmRlZmluZWRcIj9uZXcgVGV4dERlY29kZXIoXCJ1dGY4XCIpOnVuZGVmaW5lZDtmdW5jdGlvbiBVVEY4QXJyYXlUb1N0cmluZyhoZWFwT3JBcnJheSxpZHgsbWF4Qnl0ZXNUb1JlYWQpe3ZhciBlbmRJZHg9aWR4K21heEJ5dGVzVG9SZWFkO3ZhciBlbmRQdHI9aWR4O3doaWxlKGhlYXBPckFycmF5W2VuZFB0cl0mJiEoZW5kUHRyPj1lbmRJZHgpKSsrZW5kUHRyO2lmKGVuZFB0ci1pZHg+MTYmJmhlYXBPckFycmF5LmJ1ZmZlciYmVVRGOERlY29kZXIpe3JldHVybiBVVEY4RGVjb2Rlci5kZWNvZGUoaGVhcE9yQXJyYXkuc3ViYXJyYXkoaWR4LGVuZFB0cikpfWVsc2V7dmFyIHN0cj1cIlwiO3doaWxlKGlkeDxlbmRQdHIpe3ZhciB1MD1oZWFwT3JBcnJheVtpZHgrK107aWYoISh1MCYxMjgpKXtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUodTApO2NvbnRpbnVlfXZhciB1MT1oZWFwT3JBcnJheVtpZHgrK10mNjM7aWYoKHUwJjIyNCk9PTE5Mil7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKCh1MCYzMSk8PDZ8dTEpO2NvbnRpbnVlfXZhciB1Mj1oZWFwT3JBcnJheVtpZHgrK10mNjM7aWYoKHUwJjI0MCk9PTIyNCl7dTA9KHUwJjE1KTw8MTJ8dTE8PDZ8dTJ9ZWxzZXt1MD0odTAmNyk8PDE4fHUxPDwxMnx1Mjw8NnxoZWFwT3JBcnJheVtpZHgrK10mNjN9aWYodTA8NjU1MzYpe3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSh1MCl9ZWxzZXt2YXIgY2g9dTAtNjU1MzY7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fGNoPj4xMCw1NjMyMHxjaCYxMDIzKX19fXJldHVybiBzdHJ9ZnVuY3Rpb24gVVRGOFRvU3RyaW5nKHB0cixtYXhCeXRlc1RvUmVhZCl7cmV0dXJuIHB0cj9VVEY4QXJyYXlUb1N0cmluZyhIRUFQVTgscHRyLG1heEJ5dGVzVG9SZWFkKTpcIlwifWZ1bmN0aW9uIHN0cmluZ1RvVVRGOEFycmF5KHN0cixoZWFwLG91dElkeCxtYXhCeXRlc1RvV3JpdGUpe2lmKCEobWF4Qnl0ZXNUb1dyaXRlPjApKXJldHVybiAwO3ZhciBzdGFydElkeD1vdXRJZHg7dmFyIGVuZElkeD1vdXRJZHgrbWF4Qnl0ZXNUb1dyaXRlLTE7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7dmFyIHU9c3RyLmNoYXJDb2RlQXQoaSk7aWYodT49NTUyOTYmJnU8PTU3MzQzKXt2YXIgdTE9c3RyLmNoYXJDb2RlQXQoKytpKTt1PTY1NTM2KygodSYxMDIzKTw8MTApfHUxJjEwMjN9aWYodTw9MTI3KXtpZihvdXRJZHg+PWVuZElkeClicmVhaztoZWFwW291dElkeCsrXT11fWVsc2UgaWYodTw9MjA0Nyl7aWYob3V0SWR4KzE+PWVuZElkeClicmVhaztoZWFwW291dElkeCsrXT0xOTJ8dT4+NjtoZWFwW291dElkeCsrXT0xMjh8dSY2M31lbHNlIGlmKHU8PTY1NTM1KXtpZihvdXRJZHgrMj49ZW5kSWR4KWJyZWFrO2hlYXBbb3V0SWR4KytdPTIyNHx1Pj4xMjtoZWFwW291dElkeCsrXT0xMjh8dT4+NiY2MztoZWFwW291dElkeCsrXT0xMjh8dSY2M31lbHNle2lmKG91dElkeCszPj1lbmRJZHgpYnJlYWs7aGVhcFtvdXRJZHgrK109MjQwfHU+PjE4O2hlYXBbb3V0SWR4KytdPTEyOHx1Pj4xMiY2MztoZWFwW291dElkeCsrXT0xMjh8dT4+NiY2MztoZWFwW291dElkeCsrXT0xMjh8dSY2M319aGVhcFtvdXRJZHhdPTA7cmV0dXJuIG91dElkeC1zdGFydElkeH1mdW5jdGlvbiBzdHJpbmdUb1VURjgoc3RyLG91dFB0cixtYXhCeXRlc1RvV3JpdGUpe3JldHVybiBzdHJpbmdUb1VURjhBcnJheShzdHIsSEVBUFU4LG91dFB0cixtYXhCeXRlc1RvV3JpdGUpfWZ1bmN0aW9uIGxlbmd0aEJ5dGVzVVRGOChzdHIpe3ZhciBsZW49MDtmb3IodmFyIGk9MDtpPHN0ci5sZW5ndGg7KytpKXt2YXIgdT1zdHIuY2hhckNvZGVBdChpKTtpZih1Pj01NTI5NiYmdTw9NTczNDMpdT02NTUzNisoKHUmMTAyMyk8PDEwKXxzdHIuY2hhckNvZGVBdCgrK2kpJjEwMjM7aWYodTw9MTI3KSsrbGVuO2Vsc2UgaWYodTw9MjA0NylsZW4rPTI7ZWxzZSBpZih1PD02NTUzNSlsZW4rPTM7ZWxzZSBsZW4rPTR9cmV0dXJuIGxlbn12YXIgVVRGMTZEZWNvZGVyPXR5cGVvZiBUZXh0RGVjb2RlciE9XCJ1bmRlZmluZWRcIj9uZXcgVGV4dERlY29kZXIoXCJ1dGYtMTZsZVwiKTp1bmRlZmluZWQ7ZnVuY3Rpb24gVVRGMTZUb1N0cmluZyhwdHIsbWF4Qnl0ZXNUb1JlYWQpe3ZhciBlbmRQdHI9cHRyO3ZhciBpZHg9ZW5kUHRyPj4xO3ZhciBtYXhJZHg9aWR4K21heEJ5dGVzVG9SZWFkLzI7d2hpbGUoIShpZHg+PW1heElkeCkmJkhFQVBVMTZbaWR4XSkrK2lkeDtlbmRQdHI9aWR4PDwxO2lmKGVuZFB0ci1wdHI+MzImJlVURjE2RGVjb2Rlcil7cmV0dXJuIFVURjE2RGVjb2Rlci5kZWNvZGUoSEVBUFU4LnN1YmFycmF5KHB0cixlbmRQdHIpKX1lbHNle3ZhciBzdHI9XCJcIjtmb3IodmFyIGk9MDshKGk+PW1heEJ5dGVzVG9SZWFkLzIpOysraSl7dmFyIGNvZGVVbml0PUhFQVAxNltwdHIraSoyPj4xXTtpZihjb2RlVW5pdD09MClicmVhaztzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVVuaXQpfXJldHVybiBzdHJ9fWZ1bmN0aW9uIHN0cmluZ1RvVVRGMTYoc3RyLG91dFB0cixtYXhCeXRlc1RvV3JpdGUpe2lmKG1heEJ5dGVzVG9Xcml0ZT09PXVuZGVmaW5lZCl7bWF4Qnl0ZXNUb1dyaXRlPTIxNDc0ODM2NDd9aWYobWF4Qnl0ZXNUb1dyaXRlPDIpcmV0dXJuIDA7bWF4Qnl0ZXNUb1dyaXRlLT0yO3ZhciBzdGFydFB0cj1vdXRQdHI7dmFyIG51bUNoYXJzVG9Xcml0ZT1tYXhCeXRlc1RvV3JpdGU8c3RyLmxlbmd0aCoyP21heEJ5dGVzVG9Xcml0ZS8yOnN0ci5sZW5ndGg7Zm9yKHZhciBpPTA7aTxudW1DaGFyc1RvV3JpdGU7KytpKXt2YXIgY29kZVVuaXQ9c3RyLmNoYXJDb2RlQXQoaSk7SEVBUDE2W291dFB0cj4+MV09Y29kZVVuaXQ7b3V0UHRyKz0yfUhFQVAxNltvdXRQdHI+PjFdPTA7cmV0dXJuIG91dFB0ci1zdGFydFB0cn1mdW5jdGlvbiBsZW5ndGhCeXRlc1VURjE2KHN0cil7cmV0dXJuIHN0ci5sZW5ndGgqMn1mdW5jdGlvbiBVVEYzMlRvU3RyaW5nKHB0cixtYXhCeXRlc1RvUmVhZCl7dmFyIGk9MDt2YXIgc3RyPVwiXCI7d2hpbGUoIShpPj1tYXhCeXRlc1RvUmVhZC80KSl7dmFyIHV0ZjMyPUhFQVAzMltwdHIraSo0Pj4yXTtpZih1dGYzMj09MClicmVhazsrK2k7aWYodXRmMzI+PTY1NTM2KXt2YXIgY2g9dXRmMzItNjU1MzY7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fGNoPj4xMCw1NjMyMHxjaCYxMDIzKX1lbHNle3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSh1dGYzMil9fXJldHVybiBzdHJ9ZnVuY3Rpb24gc3RyaW5nVG9VVEYzMihzdHIsb3V0UHRyLG1heEJ5dGVzVG9Xcml0ZSl7aWYobWF4Qnl0ZXNUb1dyaXRlPT09dW5kZWZpbmVkKXttYXhCeXRlc1RvV3JpdGU9MjE0NzQ4MzY0N31pZihtYXhCeXRlc1RvV3JpdGU8NClyZXR1cm4gMDt2YXIgc3RhcnRQdHI9b3V0UHRyO3ZhciBlbmRQdHI9c3RhcnRQdHIrbWF4Qnl0ZXNUb1dyaXRlLTQ7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7dmFyIGNvZGVVbml0PXN0ci5jaGFyQ29kZUF0KGkpO2lmKGNvZGVVbml0Pj01NTI5NiYmY29kZVVuaXQ8PTU3MzQzKXt2YXIgdHJhaWxTdXJyb2dhdGU9c3RyLmNoYXJDb2RlQXQoKytpKTtjb2RlVW5pdD02NTUzNisoKGNvZGVVbml0JjEwMjMpPDwxMCl8dHJhaWxTdXJyb2dhdGUmMTAyM31IRUFQMzJbb3V0UHRyPj4yXT1jb2RlVW5pdDtvdXRQdHIrPTQ7aWYob3V0UHRyKzQ+ZW5kUHRyKWJyZWFrfUhFQVAzMltvdXRQdHI+PjJdPTA7cmV0dXJuIG91dFB0ci1zdGFydFB0cn1mdW5jdGlvbiBsZW5ndGhCeXRlc1VURjMyKHN0cil7dmFyIGxlbj0wO2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe3ZhciBjb2RlVW5pdD1zdHIuY2hhckNvZGVBdChpKTtpZihjb2RlVW5pdD49NTUyOTYmJmNvZGVVbml0PD01NzM0MykrK2k7bGVuKz00fXJldHVybiBsZW59ZnVuY3Rpb24gYWxsb2NhdGVVVEY4KHN0cil7dmFyIHNpemU9bGVuZ3RoQnl0ZXNVVEY4KHN0cikrMTt2YXIgcmV0PV9tYWxsb2Moc2l6ZSk7aWYocmV0KXN0cmluZ1RvVVRGOEFycmF5KHN0cixIRUFQOCxyZXQsc2l6ZSk7cmV0dXJuIHJldH1mdW5jdGlvbiB3cml0ZUFycmF5VG9NZW1vcnkoYXJyYXksYnVmZmVyKXtIRUFQOC5zZXQoYXJyYXksYnVmZmVyKX1mdW5jdGlvbiB3cml0ZUFzY2lpVG9NZW1vcnkoc3RyLGJ1ZmZlcixkb250QWRkTnVsbCl7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7SEVBUDhbYnVmZmVyKys+PjBdPXN0ci5jaGFyQ29kZUF0KGkpfWlmKCFkb250QWRkTnVsbClIRUFQOFtidWZmZXI+PjBdPTB9dmFyIGJ1ZmZlcixIRUFQOCxIRUFQVTgsSEVBUDE2LEhFQVBVMTYsSEVBUDMyLEhFQVBVMzIsSEVBUEYzMixIRUFQRjY0O2Z1bmN0aW9uIHVwZGF0ZUdsb2JhbEJ1ZmZlckFuZFZpZXdzKGJ1Zil7YnVmZmVyPWJ1ZjtNb2R1bGVbXCJIRUFQOFwiXT1IRUFQOD1uZXcgSW50OEFycmF5KGJ1Zik7TW9kdWxlW1wiSEVBUDE2XCJdPUhFQVAxNj1uZXcgSW50MTZBcnJheShidWYpO01vZHVsZVtcIkhFQVAzMlwiXT1IRUFQMzI9bmV3IEludDMyQXJyYXkoYnVmKTtNb2R1bGVbXCJIRUFQVThcIl09SEVBUFU4PW5ldyBVaW50OEFycmF5KGJ1Zik7TW9kdWxlW1wiSEVBUFUxNlwiXT1IRUFQVTE2PW5ldyBVaW50MTZBcnJheShidWYpO01vZHVsZVtcIkhFQVBVMzJcIl09SEVBUFUzMj1uZXcgVWludDMyQXJyYXkoYnVmKTtNb2R1bGVbXCJIRUFQRjMyXCJdPUhFQVBGMzI9bmV3IEZsb2F0MzJBcnJheShidWYpO01vZHVsZVtcIkhFQVBGNjRcIl09SEVBUEY2ND1uZXcgRmxvYXQ2NEFycmF5KGJ1Zil9dmFyIElOSVRJQUxfTUVNT1JZPU1vZHVsZVtcIklOSVRJQUxfTUVNT1JZXCJdfHwyNjg0MzU0NTY7dmFyIHdhc21UYWJsZTt2YXIgX19BVFBSRVJVTl9fPVtdO3ZhciBfX0FUSU5JVF9fPVtdO3ZhciBfX0FUUE9TVFJVTl9fPVtdO3ZhciBydW50aW1lSW5pdGlhbGl6ZWQ9ZmFsc2U7ZnVuY3Rpb24ga2VlcFJ1bnRpbWVBbGl2ZSgpe3JldHVybiBub0V4aXRSdW50aW1lfWZ1bmN0aW9uIHByZVJ1bigpe2lmKE1vZHVsZVtcInByZVJ1blwiXSl7aWYodHlwZW9mIE1vZHVsZVtcInByZVJ1blwiXT09XCJmdW5jdGlvblwiKU1vZHVsZVtcInByZVJ1blwiXT1bTW9kdWxlW1wicHJlUnVuXCJdXTt3aGlsZShNb2R1bGVbXCJwcmVSdW5cIl0ubGVuZ3RoKXthZGRPblByZVJ1bihNb2R1bGVbXCJwcmVSdW5cIl0uc2hpZnQoKSl9fWNhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRQUkVSVU5fXyl9ZnVuY3Rpb24gaW5pdFJ1bnRpbWUoKXtydW50aW1lSW5pdGlhbGl6ZWQ9dHJ1ZTtpZighTW9kdWxlW1wibm9GU0luaXRcIl0mJiFGUy5pbml0LmluaXRpYWxpemVkKUZTLmluaXQoKTtGUy5pZ25vcmVQZXJtaXNzaW9ucz1mYWxzZTtUVFkuaW5pdCgpO2NhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRJTklUX18pfWZ1bmN0aW9uIHBvc3RSdW4oKXtpZihNb2R1bGVbXCJwb3N0UnVuXCJdKXtpZih0eXBlb2YgTW9kdWxlW1wicG9zdFJ1blwiXT09XCJmdW5jdGlvblwiKU1vZHVsZVtcInBvc3RSdW5cIl09W01vZHVsZVtcInBvc3RSdW5cIl1dO3doaWxlKE1vZHVsZVtcInBvc3RSdW5cIl0ubGVuZ3RoKXthZGRPblBvc3RSdW4oTW9kdWxlW1wicG9zdFJ1blwiXS5zaGlmdCgpKX19Y2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVFBPU1RSVU5fXyl9ZnVuY3Rpb24gYWRkT25QcmVSdW4oY2Ipe19fQVRQUkVSVU5fXy51bnNoaWZ0KGNiKX1mdW5jdGlvbiBhZGRPbkluaXQoY2Ipe19fQVRJTklUX18udW5zaGlmdChjYil9ZnVuY3Rpb24gYWRkT25Qb3N0UnVuKGNiKXtfX0FUUE9TVFJVTl9fLnVuc2hpZnQoY2IpfXZhciBydW5EZXBlbmRlbmNpZXM9MDt2YXIgcnVuRGVwZW5kZW5jeVdhdGNoZXI9bnVsbDt2YXIgZGVwZW5kZW5jaWVzRnVsZmlsbGVkPW51bGw7ZnVuY3Rpb24gZ2V0VW5pcXVlUnVuRGVwZW5kZW5jeShpZCl7cmV0dXJuIGlkfWZ1bmN0aW9uIGFkZFJ1bkRlcGVuZGVuY3koaWQpe3J1bkRlcGVuZGVuY2llcysrO2lmKE1vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0pe01vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0ocnVuRGVwZW5kZW5jaWVzKX19ZnVuY3Rpb24gcmVtb3ZlUnVuRGVwZW5kZW5jeShpZCl7cnVuRGVwZW5kZW5jaWVzLS07aWYoTW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXSl7TW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXShydW5EZXBlbmRlbmNpZXMpfWlmKHJ1bkRlcGVuZGVuY2llcz09MCl7aWYocnVuRGVwZW5kZW5jeVdhdGNoZXIhPT1udWxsKXtjbGVhckludGVydmFsKHJ1bkRlcGVuZGVuY3lXYXRjaGVyKTtydW5EZXBlbmRlbmN5V2F0Y2hlcj1udWxsfWlmKGRlcGVuZGVuY2llc0Z1bGZpbGxlZCl7dmFyIGNhbGxiYWNrPWRlcGVuZGVuY2llc0Z1bGZpbGxlZDtkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9bnVsbDtjYWxsYmFjaygpfX19ZnVuY3Rpb24gYWJvcnQod2hhdCl7e2lmKE1vZHVsZVtcIm9uQWJvcnRcIl0pe01vZHVsZVtcIm9uQWJvcnRcIl0od2hhdCl9fXdoYXQ9XCJBYm9ydGVkKFwiK3doYXQrXCIpXCI7ZXJyKHdoYXQpO0FCT1JUPXRydWU7RVhJVFNUQVRVUz0xO3doYXQrPVwiLiBCdWlsZCB3aXRoIC1zQVNTRVJUSU9OUyBmb3IgbW9yZSBpbmZvLlwiO3ZhciBlPW5ldyBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3Iod2hhdCk7cmVhZHlQcm9taXNlUmVqZWN0KGUpO3Rocm93IGV9dmFyIGRhdGFVUklQcmVmaXg9XCJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsXCI7ZnVuY3Rpb24gaXNEYXRhVVJJKGZpbGVuYW1lKXtyZXR1cm4gZmlsZW5hbWUuc3RhcnRzV2l0aChkYXRhVVJJUHJlZml4KX1mdW5jdGlvbiBpc0ZpbGVVUkkoZmlsZW5hbWUpe3JldHVybiBmaWxlbmFtZS5zdGFydHNXaXRoKFwiZmlsZTovL1wiKX12YXIgd2FzbUJpbmFyeUZpbGU7d2FzbUJpbmFyeUZpbGU9XCJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsQUdGemJRRUFBQUFCN2dWY1lBRi9BWDlnQVg4QVlBSi9md0JnQW45L0FYOWdBMzkvZndGL1lBTi9mMzhBWUFWL2YzOS9md0JnQkg5L2YzOEFZQVIvZjM5L0FYOWdCbjkvZjM5L2Z3Ri9ZQVYvZjM5L2Z3Ri9ZQVovZjM5L2YzOEFZQWQvZjM5L2YzOS9BR0FJZjM5L2YzOS9mMzhCZjJBSGYzOS9mMzkvZndGL1lBQUJmMkFCZlFGOVlBQUFZQVYvZm41K2ZnQmdBMzkrZndGK1lBSi9mQUJnQW4xOUFYMWdCWDkvZjM5K0FYOWdDSDkvZjM5L2YzOS9BR0FEZjM5L0FYMWdDbjkvZjM5L2YzOS9mMzhCZjJBRWYzOS9md0YrWUFwL2YzOS9mMzkvZjM5L0FHQUVmMzUrZndCZ0FYOEJmR0FIZjM5L2YzOStmZ0YvWUFaL2YzOS9mbjRCZjJBRGYzOThBR0FCZndGOVlBVi9mWDEvZndGL1lBRjhBWDFnQTM5L2ZRQmdBbngvQVh4Z0JuOS9mWDEvZndGL1lBVi9mMzE5ZndCZ0FYd0JmR0FDZjM4QmZXQUpmMzkvZjM5L2YzOS9BWDlnQW45L0FYeGdESDkvZjM5L2YzOS9mMzkvZndGL1lBVi9mMzUvZndCZ0JuOThmMzkvZndGL1lBWi9mMzkvZm44QmYyQVBmMzkvZjM5L2YzOS9mMzkvZjM5L0FHQUxmMzkvZjM5L2YzOS9mMzhCZjJBRmYzOS9mM3dCZjJBTmYzOS9mMzkvZjM5L2YzOS9md0JnQUFGOFlBTi9mWDBCZldBRmYzMTlmMzhCZldBRWZYMTlmUUY5WUFKL2ZnQmdCMzkvZjM5OGYzOEJmMkFFZm41K2ZnRi9ZQVIvZjM5OUFHQUNmbjhCZjJBQmZRRi9ZQU44Zkg4QmZHQUNmSHdCZkdBSGYzOS9mMzkvZlFGOVlBZC9mMzkvZjM5L0FYMWdBMzkrZndCZ0EzOS9mUUY5WUF4L2YzOS9mMzkvZjM5L2ZIOEJmMkFDZm40QmZHQUZmMzkvZlgwQVlBWjhmSHg4Zkh3QmZHQURmSHg4QVh4Z0EzMTlmUUY5WUFSL2YzOStBWDVnQW41K0FYMWdBMzUrZmdGL1lBWi9mWDE5Zlg4QmYyQURmMzkrQUdBQ2YzOEJmbUFDZjMwQmZXQUJmd0YrWUFKOWZ3Ri9ZQUo4ZndGL1lBNS9mMzkvZjM5L2YzOS9mSDkvZndGL1lBVi9mMzE5ZndGL1lBTi9mMzBCZjJBR2YzOS9mMzk5QUdBR2YzeDhmMzkvQUdBRWYzOStmZ0JnQkg5K2YzOEJmMkFEZjM5L0FYd0NyUUl5QVdFQllRQVJBV0VCWWdBRkFXRUJZd0FCQVdFQlpBQUJBV0VCWlFBUEFXRUJaZ0FYQVdFQlp3QUxBV0VCYUFBR0FXRUJhUUFFQVdFQmFnQUZBV0VCYXdBQUFXRUJiQUFDQVdFQmJRQUdBV0VCYmdBRkFXRUJid0FEQVdFQmNBQUxBV0VCY1FBekFXRUJjZ0FBQVdFQmN3QUlBV0VCZEFBRUFXRUJkUUEwQVdFQmRnQUNBV0VCZHdBRkFXRUJlQUFnQVdFQmVRQURBV0VCZWdBSUFXRUJRUUFFQVdFQlFnQUZBV0VCUXdBSEFXRUJSQUFLQVdFQlJRQU1BV0VCUmdBS0FXRUJSd0FSQVdFQlNBQUFBV0VCU1FBREFXRUJTZ0FEQVdFQlN3QUlBV0VCVEFBRUFXRUJUUUFJQVdFQlRnQUNBV0VCVHdBRkFXRUJVQUFDQVdFQlVRQUdBV0VCVWdBQ0FXRUJVd0FCQVdFQlZBQUJBV0VCVlFBQkFXRUJWZ0FiQVdFQlZ3QUxBV0VCV0FBSUE3TUtzUW9EQVFBREFRQUFBQVFEQndBQUJBTUNBQUFBQVFJQkFEVUFBd01EQUFJQUFBTUNBaEVBTmlFQUJRTVBFZ0VEQ0FJQUFBVUZBUVFBQUFnUEF3TUJBQkFESWdNQkFBQUJBd01EQXdBREJBSUFBQU1BQXdJQUVnVUNBaHdHQUFjQ0F3TUFBd01BQXdJS0FoRUFBZ0FERWdBQUF3QTNBd0FDQkJnQkJBSUJDZ0FCQWdNQ0FnUUVCUUFBQXdJQUFnQURBQUlBT0FBakl3SUNBUU1EQlJRSUpBUUJBQUFBQWdvS0NBUUFBQUFLQUFJWUFDSVZBUUVORFFjSkFBUWxBQUFBQVFVRU9RVUZBd0FEQkFNRkF3QUNBZ0lBQUFjREhBRTZBQWdEQURza0FRTURBZ0FBQUFBQkFnY0NDUUlBQUFBREFBSThBd01GUFJBREFnSUFBZ1FFQlFFREFBTUNCQUVBQXdBQ0JRTURHUUFFR1FJQUFBRUFBd01BQlQ0L0JBRUlRRUVtQXhVRkZBUUFDQUVBQWdNRkJRSUNBd0VEQUJVQ0p3RUVBd0VGQXdVREFnQURBZzBDQXdBQkFBTURBQWdBQWlnQ0RBSUFRZ0FBQ3dNQUJ3SUZCUVFDQVNrRkNSVUNBUU1DQ0FNREFnRUNBQU1CQkFJQ0FnSUNRd01GQkFBQ0JRSUdGMFFGQWdBQUFnUUhBdzRERGdjYUF3QUNBZ0FDQVFFcUFBRUFBQUFCQTBVU0F3UUlBd1lFQkNnQ0FnRUFBZ1FEQUFFTEJ3OENBZ0VHQVFNSEFFWURBZ01IQlFFQUFBRXJBQU1BQWdJQUFBOENBd0FDQXdCSEFBQklBRWtEQWdRQUZ3QUNBUUlJSndNQkFBRUJBZ0lDQlFFQ0NBZ09DQXNMQlFjREJRSUNCZ0FFQ2dNQ0JBQUVMQVlFTEFZUkJScEtBQWdBQVFNQUF3QUFBd0VEQXdFQkFBVUJCUUFBRFFBRkFnRUFBQUFBQXdBQUF3TUJBQUFBQndFdEJBQUFBd1JMQWdnQ0Vrd0NUUU1FVGs4QkJ4SWNFZ1VBQndBT0NpVURBUUFGQUFJSEFBQVFVQkJSQlFFQUFRQlNVd29RRVFJSEFRRUNDQWdCQVFBQkFRQUJBd0VCVkFBQkFRZ0FWUU1DQWdFQ0NDWUJBZ2dEQkFNQ0FRSUNBZ0VNR0FBQUNRSUNBZ2NCQndJQUFRQUJCUWtBQVFJQ0FoQVFBUW9CQXlrQklRSVpBQUlEQUFJQlZnTUNBQUpYRGdjTkJ3Z0JBZ2NEQUFnQ0FBSUxCQUFCQkFFQ0FRSUFBZ0VDQXc4REFnRURBZ2NDQXdRREJ3RUNBZ0lDQWdJQ0F3TUNDUUlEQUFJQkFnSUNXQUFBQlFFQ0F3UUFCQUVEQlFRRUJBSUNDQUlBQXdJQ0FBSUJBZ0lEQVFJQkVBSUJBd0VERlJBUUFnRUFBUUVDQWdBREFBVUVDQWd2Q1M4SkF3ZFpBUUFGQXdJSEJoY0ZCUUVCQWdVREFBRURBQUFBQVFBS0FnMElBQUVBQVFJQUJEQWJNQnNEQUFBQ01RSURBZ0FBQlFJeEFnSUNBUXNHQ3dzR0Mxb0xEQVFNREF3RENRRUVCd1JiR0JvSUNRZ2FDQTRDQ1FRSENnUUhDZ01FQWdNRUFnTUFBQUlEQUFBQ0FRUUFCQUVFQUFRQkFnUUVBaTRBRXdNQUFBUUVFdzhBQndFSEJ3SUJCd2NIQndjQ0FRUUpDUUVLQ2dFR0JnWUdCZ1lHQmdZR0JnWUdCZ1lHQmdZR0JnWUdCZ1lHQmdZR0JnWUdCZ1lHQVFJQkFnRUhCd2NIQndFTURBd01BZ3dIREFjQkFRRUhCd2NDQXdNQUF3RUJBd01EQXdNREFRRURBd01EQXdFQkJnWUdCZ1lHQmdZR0FBRUFBQUFEQUFFQkFRQUNBZ1FBQUFNQkJRTUlCd1VJQndVSUJ3VUZLeUFBQWdVRER3UUVBd1FEQ0FRRkJRRUFCQVVCQUFRRkJRSUJBQVFBQUFJQUFBTUFBZ0FDSFJRZEZBVUFBQThCQlFBQUF3RUJBUU1CQXdFREF3RUJBQUVCQVFBQUFCa3FEZ3dLQVE4QUFBc0xDd1lHQmdRSEJ3Y0VCQUVBQVFBQkFBRUFBUUFCQUFFQUFRQUJBQUVBQVFBQkFBRUFBUUFDQWdJQ0FnSUFBQUVCQ2cwTkNnME5BQW9BQ2cwTkFRb0tCQWdFQXdRREFRb0VDQVFEQkFNSUNBZ0VBUUVCQVFzTENSNEpIZzRPRGc0T0RnMEpDUWtKQ1EwSkNRa0pDUW9mTWhZS0Znb0tDaDh5RmdvV0Nnb0pDUWtKQ1FrSkNRa0pDUWtKQ1FrSkFBa0VCd0Z3QWVBRTRBUUZCd0VCZ0NDQWdBSUdDUUYvQVVIUXhjUUNDd2RmRVFGWkFnQUJXZ0MvQkFGZkFEa0JKQUF6QW1GaEFQUUhBbUpoQVFBQ1kyRUE5UWNDWkdFQW9BVUNaV0VBOVFRQ1ptRUF6d2tDWjJFQXpna0NhR0VBMFFrQ2FXRUF6UWtDYW1FQXpBa0NhMkVBeXdrQ2JHRUF5Z2tDYldFQXlRa0pud2tCQUVFQkM5OEV2Z21xQmJrSjlnZzg5d2p4Q1BVSTh3ajBDUElJOWdiR0NiZ0d3UW1LQk1RSml3VEZDY01Kd2dudUFWN0FDYjhKK1FOZXZRbThDZmtEWHJzSnVnbjVBN2dKdHdtZkNiQUp0QW11Q2E4Sm9BbTFDYllKc3dtbENhTUpwQW15Q2JFSnJRbXNDYXNKcWdtbkNhWUpxUW1vQ2FJSm9RbWVDWjBKNXdPY0Nac0pWcG9KbVFtWUNaY0o1d09xQXZVRFE1WUpsUW1VQ1pNSjV3UFhCWklKdUFHUkNaQUpqd21PQ1kwSmpBbUxDWW9KaVFsZWlBbUhDWVlKaFFtRUNZTUpnZ25qQTRFSmdBbmlBK0VEL3dqakEvNEkvUWppQStFRC9BampBL3NJK2dqaUErRUQrUWo0Q09VQjZnandDTzhJN2dqdENMRUY3QWpyQ09rSTZBam5DT1lJNVFqbEFlUUk0d2ppQ09FSTRBamZDTjRJM1FqY0NOc0lvZ2lqQ0tRSXBRaW1DS2NJcUFpZ0NKOEluZ2lkQ0p3SW13aWFDSmtJbUFpWENKWUlsUWlVQ0pNSWtnaVJDSkFJandpT0NJMElqQWlMQ0lvSW9RaXBDS29JcXdqbEFkb0kyUWpZQ05jSTFnalZDTlFJMHdqU0NORUkwQWpQQ000SXpRak1DTXNJeWdqSkNNZ0lvUUhIQ01ZSXhRakVDTU1Jd2dqQkNNQUl2d2krQ0wwSXZBaTdDTG9JdVFpNENMY0l0Z2kxQ0xRSXN3aXlDTEVJc0FpdkNLNElyUWlzQ0lrSTNRT0lDSWNJaGdpRkNJUUlwd1dtQllNSXpRS0NDT1VCZ1FpQUNQOEgvZ2Y5Qi93SCt3ZjZCL2tIK0FmbEFmY0g5Z2Z6Qi9JSDhRZndCNkVCN1FmckIrb0g2UWZvQjg4RDVnZUFBKzBFN0FUcUJLRUJvUUhsQitrRTVBZjdBdU1IK3dMTkErSUhnQVB0Qk93RTZnU2hBYUVCNFFmcEJPQUgrd0xmQi9zQytnTE1BK2NFNWdUNkFzd0Q1d1RtQlBnQ3lBUGVCTndFK0FMSUE5NEUzQVR2Qk5BRDd3VFFBOFFDMEFQbEFkNEgwQVRkQjl3SDJ3ZmFCODBFMlFmWUI5Y0gxZ2ZRQk5VSHlnVFVCOU1IelFUU0I4b0UwUWZRQnpQbEFhY0twUXI0Q2ZZSjlBbnlDZkFKN2duc0Nlb0o2QW5tQ2VRSjRnbmdDZDRKa2dlb0NxWUtrQWVaQ3BnS2x3cVdDcFVLbmdhVUNwTUtrZ3FWQjVBS2p3cU9DbzBLakFxaEFZc0tpZ3FKQjRNS2dRcUFDdjhKL1FuN0NZZ0hnZ3JIQ2VFSy9nbjhDZm9KN2dGZVhxUUtvd3FpQ3FFS29BcWZDcDRLblFxZUJwd0ttd3FhQ2w2T0I0NEh0QVNjQkp3RWtRcWNCRjZKQ29nS3RBU2hBYUVCaHdyUEJWNkdDb1VLdEFTaEFhRUJoQXJQQmU0QlhzOEh6Z2ZOQis0Qlhzd0h5d2ZLQjE3SkIrSUs0QXJmQ3NNSHd3ZmVDdDBLM0FyYkN0b0tYdGtLMkFyWEN0WUt1Z2U2QjlVSzFBclRDdElLMFFwZTBBclBDczRLelFyTUNzc0t5Z3JKQ2w3SUNzY0t4Z3JGQ3NRS3d3ckNDc0VLN2dGZXpnWEFDcjhLdmdxOUNyd0t1d3I1Q2ZVSjhRbmxDZUVKN1FucENlNEJYczRGdWdxNUNyZ0t0d3EyQ3JVSzl3bnpDZThKNHduZkNlc0o1d215QklVSHRBcXlCSVVIc3dwZXVBTzRBNzBCdlFHOUFha0hvUUdBQW9BQ1hyZ0R1QU85QWIwQnZRR3BCNkVCZ0FLQUFsNjNBN2NEdlFHOUFiMEJxQWVoQVlBQ2dBSmV0d08zQTcwQnZRRzlBYWdIb1FHQUFvQUNYcklLc1FwZXNBcXZDbDZ1Q3EwS1hxd0txd3BlbGdlcUNvQURYcFlIcVFxQUEvOEdWZjhHN2dmdUFWN2xBZVVCM1FsZTNBblNDZFVKMndsZTB3bldDZG9KWHRRSjF3blpDVjdZQ2U0Qlh0QUo5UWJJQ2ZVR0NxZWhHYkVLcFFFQkIzOGdBUkNnQVNFREl3QkJJR3NpQWlRQUFrQWdBa0VZYWlBQUVQY0NJZ1V0QUFCRkRRQWdBa0VJYWlBQUVNSURJUVlnQUNBQUtBSUFRUXhyS0FJQWFpSUVLQUlFSVFjZ0JCRExCQ0VJSUFJZ0JpZ0NBQ0FCSUFFZ0Eyb2lBeUFCSUFkQnNBRnhRU0JHR3lBRElBUWdDQkRwQVRZQ0VDQUNRUkJxRU1NQ1JRMEFJQUFnQUNnQ0FFRU1heWdDQUdwQkJSRENBZ3NnQlJERkFpQUNRU0JxSkFBZ0FBdk1EQUVIZndKQUlBQkZEUUFnQUVFSWF5SURJQUJCQkdzb0FnQWlBVUY0Y1NJQWFpRUZBa0FnQVVFQmNRMEFJQUZCQTNGRkRRRWdBeUFES0FJQUlnRnJJZ05Cb0tFRUtBSUFTUTBCSUFBZ0FXb2hBRUdrb1FRb0FnQWdBMGNFUUNBQlFmOEJUUVJBSUFNb0FnZ2lBaUFCUVFOMklnUkJBM1JCdUtFRWFrWWFJQUlnQXlnQ0RDSUJSZ1JBUVpDaEJFR1FvUVFvQWdCQmZpQUVkM0UyQWdBTUF3c2dBaUFCTmdJTUlBRWdBallDQ0F3Q0N5QURLQUlZSVFZQ1FDQURJQU1vQWd3aUFVY0VRQ0FES0FJSUlnSWdBVFlDRENBQklBSTJBZ2dNQVFzQ1FDQURRUlJxSWdJb0FnQWlCQTBBSUFOQkVHb2lBaWdDQUNJRURRQkJBQ0VCREFFTEEwQWdBaUVISUFRaUFVRVVhaUlDS0FJQUlnUU5BQ0FCUVJCcUlRSWdBU2dDRUNJRURRQUxJQWRCQURZQ0FBc2dCa1VOQVFKQUlBTW9BaHdpQWtFQ2RFSEFvd1JxSWdRb0FnQWdBMFlFUUNBRUlBRTJBZ0FnQVEwQlFaU2hCRUdVb1FRb0FnQkJmaUFDZDNFMkFnQU1Bd3NnQmtFUVFSUWdCaWdDRUNBRFJodHFJQUUyQWdBZ0FVVU5BZ3NnQVNBR05nSVlJQU1vQWhBaUFnUkFJQUVnQWpZQ0VDQUNJQUUyQWhnTElBTW9BaFFpQWtVTkFTQUJJQUkyQWhRZ0FpQUJOZ0lZREFFTElBVW9BZ1FpQVVFRGNVRURSdzBBUVppaEJDQUFOZ0lBSUFVZ0FVRitjVFlDQkNBRElBQkJBWEkyQWdRZ0FDQURhaUFBTmdJQUR3c2dBeUFGVHcwQUlBVW9BZ1FpQVVFQmNVVU5BQUpBSUFGQkFuRkZCRUJCcUtFRUtBSUFJQVZHQkVCQnFLRUVJQU0yQWdCQm5LRUVRWnloQkNnQ0FDQUFhaUlBTmdJQUlBTWdBRUVCY2pZQ0JDQURRYVNoQkNnQ0FFY05BMEdZb1FSQkFEWUNBRUdrb1FSQkFEWUNBQThMUWFTaEJDZ0NBQ0FGUmdSQVFhU2hCQ0FETmdJQVFaaWhCRUdZb1FRb0FnQWdBR29pQURZQ0FDQURJQUJCQVhJMkFnUWdBQ0FEYWlBQU5nSUFEd3NnQVVGNGNTQUFhaUVBQWtBZ0FVSC9BVTBFUUNBRktBSUlJZ0lnQVVFRGRpSUVRUU4wUWJpaEJHcEdHaUFDSUFVb0Fnd2lBVVlFUUVHUW9RUkJrS0VFS0FJQVFYNGdCSGR4TmdJQURBSUxJQUlnQVRZQ0RDQUJJQUkyQWdnTUFRc2dCU2dDR0NFR0FrQWdCU0FGS0FJTUlnRkhCRUFnQlNnQ0NDSUNRYUNoQkNnQ0FFa2FJQUlnQVRZQ0RDQUJJQUkyQWdnTUFRc0NRQ0FGUVJScUlnSW9BZ0FpQkEwQUlBVkJFR29pQWlnQ0FDSUVEUUJCQUNFQkRBRUxBMEFnQWlFSElBUWlBVUVVYWlJQ0tBSUFJZ1FOQUNBQlFSQnFJUUlnQVNnQ0VDSUVEUUFMSUFkQkFEWUNBQXNnQmtVTkFBSkFJQVVvQWh3aUFrRUNkRUhBb3dScUlnUW9BZ0FnQlVZRVFDQUVJQUUyQWdBZ0FRMEJRWlNoQkVHVW9RUW9BZ0JCZmlBQ2QzRTJBZ0FNQWdzZ0JrRVFRUlFnQmlnQ0VDQUZSaHRxSUFFMkFnQWdBVVVOQVFzZ0FTQUdOZ0lZSUFVb0FoQWlBZ1JBSUFFZ0FqWUNFQ0FDSUFFMkFoZ0xJQVVvQWhRaUFrVU5BQ0FCSUFJMkFoUWdBaUFCTmdJWUN5QURJQUJCQVhJMkFnUWdBQ0FEYWlBQU5nSUFJQU5CcEtFRUtBSUFSdzBCUVppaEJDQUFOZ0lBRHdzZ0JTQUJRWDV4TmdJRUlBTWdBRUVCY2pZQ0JDQUFJQU5xSUFBMkFnQUxJQUJCL3dGTkJFQWdBRUVEZGlJQlFRTjBRYmloQkdvaEFBSi9RWkNoQkNnQ0FDSUNRUUVnQVhRaUFYRkZCRUJCa0tFRUlBRWdBbkkyQWdBZ0FBd0JDeUFBS0FJSUN5RUNJQUFnQXpZQ0NDQUNJQU0yQWd3Z0F5QUFOZ0lNSUFNZ0FqWUNDQThMUVI4aEFpQUFRZi8vL3dkTkJFQWdBRUVJZGlJQklBRkJnUDQvYWtFUWRrRUljU0lCZENJQ0lBSkJnT0FmYWtFUWRrRUVjU0lDZENJRUlBUkJnSUFQYWtFUWRrRUNjU0lFZEVFUGRpQUJJQUp5SUFSeWF5SUJRUUYwSUFBZ0FVRVZhblpCQVhGeVFSeHFJUUlMSUFNZ0FqWUNIQ0FEUWdBM0FoQWdBa0VDZEVIQW93UnFJUUVDUUFKQUFrQkJsS0VFS0FJQUlnUkJBU0FDZENJSGNVVUVRRUdVb1FRZ0JDQUhjallDQUNBQklBTTJBZ0FnQXlBQk5nSVlEQUVMSUFCQkFFRVpJQUpCQVhacklBSkJIMFliZENFQ0lBRW9BZ0FoQVFOQUlBRWlCQ2dDQkVGNGNTQUFSZzBDSUFKQkhYWWhBU0FDUVFGMElRSWdCQ0FCUVFSeGFpSUhRUkJxS0FJQUlnRU5BQXNnQnlBRE5nSVFJQU1nQkRZQ0dBc2dBeUFETmdJTUlBTWdBellDQ0F3QkN5QUVLQUlJSWdBZ0F6WUNEQ0FFSUFNMkFnZ2dBMEVBTmdJWUlBTWdCRFlDRENBRElBQTJBZ2dMUWJDaEJFR3dvUVFvQWdCQkFXc2lBRUYvSUFBYk5nSUFDd3NIQUNBQVFRaHFDNzBCQVFaL0l3QkJJR3NpQWlRQUlBSkJHR29pQXlBQUVQY0NHZ0pBSUFNdEFBQkZEUUFnQUNBQUtBSUFRUXhyS0FJQWFpSUVLQUlFR2lBQ1FSQnFJZ01nQkJCUElBTkJpTFlFRU1zQklRUWdBeEJISUFKQkNHb2dBQkRDQXlFRklBQWdBQ2dDQUVFTWF5Z0NBR29pQmhETEJDRUhJQUlnQkNBRktBSUFJQVlnQnlBQklBUW9BZ0FvQWhBUkNnQTJBaEFnQXhEREFrVU5BQ0FBSUFBb0FnQkJER3NvQWdCcVFRVVF3Z0lMSUFKQkdHb1F4UUlnQWtFZ2FpUUFJQUFMQ2dBZ0FFRU5FUUFBR2dzVkFDQUFFSVlCQkVBZ0FDZ0NCQThMSUFBdEFBc0xId0VCZnlBQUVJWUJCRUFnQUNnQ0FDRUJJQUFRNmdFYUlBRVFNd3NnQUF1SkxnRUxmeU1BUVJCcklnc2tBQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0FFSDBBVTBFUUVHUW9RUW9BZ0FpQmtFUUlBQkJDMnBCZUhFZ0FFRUxTUnNpQjBFRGRpSUNkaUlCUVFOeEJFQUNRQ0FCUVg5elFRRnhJQUpxSWdKQkEzUWlBRUc0b1FScUlnRWdBRUhBb1FScUtBSUFJZ01vQWdnaUFFWUVRRUdRb1FRZ0JrRitJQUozY1RZQ0FBd0JDeUFBSUFFMkFnd2dBU0FBTmdJSUN5QURJQUpCQTNRaUFFRURjallDQkNBQUlBTnFJZ0FnQUNnQ0JFRUJjallDQkNBRFFRaHFJUUFNREFzZ0IwR1lvUVFvQWdBaUNrME5BU0FCQkVBQ1FFRUNJQUowSWdCQkFDQUFhM0lnQVNBQ2RIRWlBRUVBSUFCcmNVRUJheUlBSUFCQkRIWkJFSEVpQW5ZaUFVRUZka0VJY1NJQUlBSnlJQUVnQUhZaUFVRUNka0VFY1NJQWNpQUJJQUIySWdGQkFYWkJBbkVpQUhJZ0FTQUFkaUlCUVFGMlFRRnhJZ0J5SUFFZ0FIWnFJZ0pCQTNRaUFFRzRvUVJxSWdFZ0FFSEFvUVJxS0FJQUlnUW9BZ2dpQUVZRVFFR1FvUVFnQmtGK0lBSjNjU0lHTmdJQURBRUxJQUFnQVRZQ0RDQUJJQUEyQWdnTElBUWdCMEVEY2pZQ0JDQUVJQWRxSWdFZ0FrRURkQ0lBSUFkcklnSkJBWEkyQWdRZ0FDQUVhaUFDTmdJQUlBb0VRQ0FLUVFOMklnQkJBM1JCdUtFRWFpRUZRYVNoQkNnQ0FDRURBbjhnQmtFQklBQjBJZ0J4UlFSQVFaQ2hCQ0FBSUFaeU5nSUFJQVVNQVFzZ0JTZ0NDQXNoQUNBRklBTTJBZ2dnQUNBRE5nSU1JQU1nQlRZQ0RDQURJQUEyQWdnTFFhU2hCQ0FCTmdJQVFaaWhCQ0FDTmdJQUlBUkJDR29oQUF3TUMwR1VvUVFvQWdBaUNVVU5BU0FKUVFBZ0NXdHhRUUZySWdBZ0FFRU1ka0VRY1NJQ2RpSUJRUVYyUVFoeElnQWdBbklnQVNBQWRpSUJRUUoyUVFSeElnQnlJQUVnQUhZaUFVRUJka0VDY1NJQWNpQUJJQUIySWdGQkFYWkJBWEVpQUhJZ0FTQUFkbXBCQW5SQndLTUVhaWdDQUNJQktBSUVRWGh4SUFkcklRTWdBU0VDQTBBQ1FDQUNLQUlRSWdCRkJFQWdBaWdDRkNJQVJRMEJDeUFBS0FJRVFYaHhJQWRySWdJZ0F5QUNJQU5KSWdJYklRTWdBQ0FCSUFJYklRRWdBQ0VDREFFTEN5QUJLQUlZSVFnZ0FTQUJLQUlNSWdWSEJFQWdBU2dDQ0NJQVFhQ2hCQ2dDQUVrYUlBQWdCVFlDRENBRklBQTJBZ2dNQ3dzZ0FVRVVhaUlDS0FJQUlnQkZCRUFnQVNnQ0VDSUFSUTBESUFGQkVHb2hBZ3NEUUNBQ0lRUWdBQ0lGUVJScUlnSW9BZ0FpQUEwQUlBVkJFR29oQWlBRktBSVFJZ0FOQUFzZ0JFRUFOZ0lBREFvTFFYOGhCeUFBUWI5L1N3MEFJQUJCQzJvaUFFRjRjU0VIUVpTaEJDZ0NBQ0lKUlEwQVFRQWdCMnNoQXdKQUFrQUNRQUovUVFBZ0IwR0FBa2tOQUJwQkh5QUhRZi8vL3dkTERRQWFJQUJCQ0hZaUFDQUFRWUQrUDJwQkVIWkJDSEVpQW5RaUFDQUFRWURnSDJwQkVIWkJCSEVpQVhRaUFDQUFRWUNBRDJwQkVIWkJBbkVpQUhSQkQzWWdBU0FDY2lBQWNtc2lBRUVCZENBSElBQkJGV3AyUVFGeGNrRWNhZ3NpQmtFQ2RFSEFvd1JxS0FJQUlnSkZCRUJCQUNFQURBRUxRUUFoQUNBSFFRQkJHU0FHUVFGMmF5QUdRUjlHRzNRaEFRTkFBa0FnQWlnQ0JFRjRjU0FIYXlJRUlBTlBEUUFnQWlFRklBUWlBdzBBUVFBaEF5QUNJUUFNQXdzZ0FDQUNLQUlVSWdRZ0JDQUNJQUZCSFhaQkJIRnFLQUlRSWdKR0d5QUFJQVFiSVFBZ0FVRUJkQ0VCSUFJTkFBc0xJQUFnQlhKRkJFQkJBQ0VGUVFJZ0JuUWlBRUVBSUFCcmNpQUpjU0lBUlEwRElBQkJBQ0FBYTNGQkFXc2lBQ0FBUVF4MlFSQnhJZ0oySWdGQkJYWkJDSEVpQUNBQ2NpQUJJQUIySWdGQkFuWkJCSEVpQUhJZ0FTQUFkaUlCUVFGMlFRSnhJZ0J5SUFFZ0FIWWlBVUVCZGtFQmNTSUFjaUFCSUFCMmFrRUNkRUhBb3dScUtBSUFJUUFMSUFCRkRRRUxBMEFnQUNnQ0JFRjRjU0FIYXlJQklBTkpJUUlnQVNBRElBSWJJUU1nQUNBRklBSWJJUVVnQUNnQ0VDSUJCSDhnQVFVZ0FDZ0NGQXNpQUEwQUN3c2dCVVVOQUNBRFFaaWhCQ2dDQUNBSGEwOE5BQ0FGS0FJWUlRWWdCU0FGS0FJTUlnRkhCRUFnQlNnQ0NDSUFRYUNoQkNnQ0FFa2FJQUFnQVRZQ0RDQUJJQUEyQWdnTUNRc2dCVUVVYWlJQ0tBSUFJZ0JGQkVBZ0JTZ0NFQ0lBUlEwRElBVkJFR29oQWdzRFFDQUNJUVFnQUNJQlFSUnFJZ0lvQWdBaUFBMEFJQUZCRUdvaEFpQUJLQUlRSWdBTkFBc2dCRUVBTmdJQURBZ0xJQWRCbUtFRUtBSUFJZ0pOQkVCQnBLRUVLQUlBSVFNQ1FDQUNJQWRySWdGQkVFOEVRRUdZb1FRZ0FUWUNBRUdrb1FRZ0F5QUhhaUlBTmdJQUlBQWdBVUVCY2pZQ0JDQUNJQU5xSUFFMkFnQWdBeUFIUVFOeU5nSUVEQUVMUWFTaEJFRUFOZ0lBUVppaEJFRUFOZ0lBSUFNZ0FrRURjallDQkNBQ0lBTnFJZ0FnQUNnQ0JFRUJjallDQkFzZ0EwRUlhaUVBREFvTElBZEJuS0VFS0FJQUlnaEpCRUJCbktFRUlBZ2dCMnNpQVRZQ0FFR29vUVJCcUtFRUtBSUFJZ0lnQjJvaUFEWUNBQ0FBSUFGQkFYSTJBZ1FnQWlBSFFRTnlOZ0lFSUFKQkNHb2hBQXdLQzBFQUlRQWdCMEV2YWlJSkFuOUI2S1FFS0FJQUJFQkI4S1FFS0FJQURBRUxRZlNrQkVKL053SUFRZXlrQkVLQW9JQ0FnSUFFTndJQVFlaWtCQ0FMUVF4cVFYQnhRZGlxMWFvRmN6WUNBRUg4cEFSQkFEWUNBRUhNcEFSQkFEWUNBRUdBSUFzaUFXb2lCa0VBSUFGcklnUnhJZ0lnQjAwTkNVSElwQVFvQWdBaUJRUkFRY0NrQkNnQ0FDSURJQUpxSWdFZ0EwMGdBU0FGUzNJTkNndEJ6S1FFTFFBQVFRUnhEUVFDUUFKQVFhaWhCQ2dDQUNJREJFQkIwS1FFSVFBRFFDQURJQUFvQWdBaUFVOEVRQ0FCSUFBb0FnUnFJQU5MRFFNTElBQW9BZ2dpQUEwQUN3dEJBQkNJQWlJQlFYOUdEUVVnQWlFR1FleWtCQ2dDQUNJRFFRRnJJZ0FnQVhFRVFDQUNJQUZySUFBZ0FXcEJBQ0FEYTNGcUlRWUxJQVlnQjAwZ0JrSCsvLy8vQjB0eURRVkJ5S1FFS0FJQUlnVUVRRUhBcEFRb0FnQWlBeUFHYWlJQUlBTk5JQUFnQlV0eURRWUxJQVlRaUFJaUFDQUJSdzBCREFjTElBWWdDR3NnQkhFaUJrSCsvLy8vQjBzTkJDQUdFSWdDSWdFZ0FDZ0NBQ0FBS0FJRWFrWU5BeUFCSVFBTElBQkJmMFlnQjBFd2FpQUdUWEpGQkVCQjhLUUVLQUlBSWdFZ0NTQUdhMnBCQUNBQmEzRWlBVUgrLy8vL0Iwc0VRQ0FBSVFFTUJ3c2dBUkNJQWtGL1J3UkFJQUVnQm1vaEJpQUFJUUVNQnd0QkFDQUdheENJQWhvTUJBc2dBQ0lCUVg5SERRVU1Bd3RCQUNFRkRBY0xRUUFoQVF3RkN5QUJRWDlIRFFJTFFjeWtCRUhNcEFRb0FnQkJCSEkyQWdBTElBSkIvdi8vL3dkTERRRWdBaENJQWlJQlFYOUdRUUFRaUFJaUFFRi9SbklnQUNBQlRYSU5BU0FBSUFGcklnWWdCMEVvYWswTkFRdEJ3S1FFUWNDa0JDZ0NBQ0FHYWlJQU5nSUFRY1NrQkNnQ0FDQUFTUVJBUWNTa0JDQUFOZ0lBQ3dKQUFrQUNRRUdvb1FRb0FnQWlCQVJBUWRDa0JDRUFBMEFnQVNBQUtBSUFJZ01nQUNnQ0JDSUNha1lOQWlBQUtBSUlJZ0FOQUFzTUFndEJvS0VFS0FJQUlnQkJBQ0FBSUFGTkcwVUVRRUdnb1FRZ0FUWUNBQXRCQUNFQVFkU2tCQ0FHTmdJQVFkQ2tCQ0FCTmdJQVFiQ2hCRUYvTmdJQVFiU2hCRUhvcEFRb0FnQTJBZ0JCM0tRRVFRQTJBZ0FEUUNBQVFRTjBJZ05Cd0tFRWFpQURRYmloQkdvaUFqWUNBQ0FEUWNTaEJHb2dBallDQUNBQVFRRnFJZ0JCSUVjTkFBdEJuS0VFSUFaQktHc2lBMEY0SUFGclFRZHhRUUFnQVVFSWFrRUhjUnNpQUdzaUFqWUNBRUdvb1FRZ0FDQUJhaUlBTmdJQUlBQWdBa0VCY2pZQ0JDQUJJQU5xUVNnMkFnUkJyS0VFUWZpa0JDZ0NBRFlDQUF3Q0N5QUFMUUFNUVFoeElBTWdCRXR5SUFFZ0JFMXlEUUFnQUNBQ0lBWnFOZ0lFUWFpaEJDQUVRWGdnQkd0QkIzRkJBQ0FFUVFocVFRZHhHeUlBYWlJQ05nSUFRWnloQkVHY29RUW9BZ0FnQm1vaUFTQUFheUlBTmdJQUlBSWdBRUVCY2pZQ0JDQUJJQVJxUVNnMkFnUkJyS0VFUWZpa0JDZ0NBRFlDQUF3QkMwR2dvUVFvQWdBZ0FVc0VRRUdnb1FRZ0FUWUNBQXNnQVNBR2FpRUNRZENrQkNFQUFrQUNRQUpBQWtBQ1FBSkFBMEFnQWlBQUtBSUFSd1JBSUFBb0FnZ2lBQTBCREFJTEN5QUFMUUFNUVFoeFJRMEJDMEhRcEFRaEFBTkFJQVFnQUNnQ0FDSUNUd1JBSUFJZ0FDZ0NCR29pQlNBRVN3MERDeUFBS0FJSUlRQU1BQXNBQ3lBQUlBRTJBZ0FnQUNBQUtBSUVJQVpxTmdJRUlBRkJlQ0FCYTBFSGNVRUFJQUZCQ0dwQkIzRWJhaUlKSUFkQkEzSTJBZ1FnQWtGNElBSnJRUWR4UVFBZ0FrRUlha0VIY1J0cUlnWWdCeUFKYWlJSWF5RUNJQVFnQmtZRVFFR29vUVFnQ0RZQ0FFR2NvUVJCbktFRUtBSUFJQUpxSWdBMkFnQWdDQ0FBUVFGeU5nSUVEQU1MUWFTaEJDZ0NBQ0FHUmdSQVFhU2hCQ0FJTmdJQVFaaWhCRUdZb1FRb0FnQWdBbW9pQURZQ0FDQUlJQUJCQVhJMkFnUWdBQ0FJYWlBQU5nSUFEQU1MSUFZb0FnUWlBRUVEY1VFQlJnUkFJQUJCZUhFaEJBSkFJQUJCL3dGTkJFQWdCaWdDQ0NJRElBQkJBM1lpQUVFRGRFRzRvUVJxUmhvZ0F5QUdLQUlNSWdGR0JFQkJrS0VFUVpDaEJDZ0NBRUYrSUFCM2NUWUNBQXdDQ3lBRElBRTJBZ3dnQVNBRE5nSUlEQUVMSUFZb0FoZ2hCd0pBSUFZZ0JpZ0NEQ0lCUndSQUlBWW9BZ2dpQUNBQk5nSU1JQUVnQURZQ0NBd0JDd0pBSUFaQkZHb2lBQ2dDQUNJRERRQWdCa0VRYWlJQUtBSUFJZ01OQUVFQUlRRU1BUXNEUUNBQUlRVWdBeUlCUVJScUlnQW9BZ0FpQXcwQUlBRkJFR29oQUNBQktBSVFJZ01OQUFzZ0JVRUFOZ0lBQ3lBSFJRMEFBa0FnQmlnQ0hDSURRUUowUWNDakJHb2lBQ2dDQUNBR1JnUkFJQUFnQVRZQ0FDQUJEUUZCbEtFRVFaU2hCQ2dDQUVGK0lBTjNjVFlDQUF3Q0N5QUhRUkJCRkNBSEtBSVFJQVpHRzJvZ0FUWUNBQ0FCUlEwQkN5QUJJQWMyQWhnZ0JpZ0NFQ0lBQkVBZ0FTQUFOZ0lRSUFBZ0FUWUNHQXNnQmlnQ0ZDSUFSUTBBSUFFZ0FEWUNGQ0FBSUFFMkFoZ0xJQUlnQkdvaEFpQUVJQVpxSWdZb0FnUWhBQXNnQmlBQVFYNXhOZ0lFSUFnZ0FrRUJjallDQkNBQ0lBaHFJQUkyQWdBZ0FrSC9BVTBFUUNBQ1FRTjJJZ0JCQTNSQnVLRUVhaUVDQW45QmtLRUVLQUlBSWdGQkFTQUFkQ0lBY1VVRVFFR1FvUVFnQUNBQmNqWUNBQ0FDREFFTElBSW9BZ2dMSVFBZ0FpQUlOZ0lJSUFBZ0NEWUNEQ0FJSUFJMkFnd2dDQ0FBTmdJSURBTUxRUjhoQUNBQ1FmLy8vd2ROQkVBZ0FrRUlkaUlBSUFCQmdQNC9ha0VRZGtFSWNTSURkQ0lBSUFCQmdPQWZha0VRZGtFRWNTSUJkQ0lBSUFCQmdJQVBha0VRZGtFQ2NTSUFkRUVQZGlBQklBTnlJQUJ5YXlJQVFRRjBJQUlnQUVFVmFuWkJBWEZ5UVJ4cUlRQUxJQWdnQURZQ0hDQUlRZ0EzQWhBZ0FFRUNkRUhBb3dScUlRVUNRRUdVb1FRb0FnQWlBMEVCSUFCMElnRnhSUVJBUVpTaEJDQUJJQU55TmdJQUlBVWdDRFlDQUNBSUlBVTJBaGdNQVFzZ0FrRUFRUmtnQUVFQmRtc2dBRUVmUmh0MElRQWdCU2dDQUNFQkEwQWdBU0lES0FJRVFYaHhJQUpHRFFNZ0FFRWRkaUVCSUFCQkFYUWhBQ0FESUFGQkJIRnFJZ1VvQWhBaUFRMEFDeUFGSUFnMkFoQWdDQ0FETmdJWUN5QUlJQWcyQWd3Z0NDQUlOZ0lJREFJTFFaeWhCQ0FHUVNocklnTkJlQ0FCYTBFSGNVRUFJQUZCQ0dwQkIzRWJJZ0JySWdJMkFnQkJxS0VFSUFBZ0FXb2lBRFlDQUNBQUlBSkJBWEkyQWdRZ0FTQURha0VvTmdJRVFheWhCRUg0cEFRb0FnQTJBZ0FnQkNBRlFTY2dCV3RCQjNGQkFDQUZRU2RyUVFkeEcycEJMMnNpQUNBQUlBUkJFR3BKR3lJQ1FSczJBZ1FnQWtIWXBBUXBBZ0EzQWhBZ0FrSFFwQVFwQWdBM0FnaEIyS1FFSUFKQkNHbzJBZ0JCMUtRRUlBWTJBZ0JCMEtRRUlBRTJBZ0JCM0tRRVFRQTJBZ0FnQWtFWWFpRUFBMEFnQUVFSE5nSUVJQUJCQ0dvaEFTQUFRUVJxSVFBZ0FTQUZTUTBBQ3lBQ0lBUkdEUU1nQWlBQ0tBSUVRWDV4TmdJRUlBUWdBaUFFYXlJRlFRRnlOZ0lFSUFJZ0JUWUNBQ0FGUWY4QlRRUkFJQVZCQTNZaUFFRURkRUc0b1FScUlRSUNmMEdRb1FRb0FnQWlBVUVCSUFCMElnQnhSUVJBUVpDaEJDQUFJQUZ5TmdJQUlBSU1BUXNnQWlnQ0NBc2hBQ0FDSUFRMkFnZ2dBQ0FFTmdJTUlBUWdBallDRENBRUlBQTJBZ2dNQkF0Qkh5RUFJQVZCLy8vL0IwMEVRQ0FGUVFoMklnQWdBRUdBL2o5cVFSQjJRUWh4SWdKMElnQWdBRUdBNEI5cVFSQjJRUVJ4SWdGMElnQWdBRUdBZ0E5cVFSQjJRUUp4SWdCMFFROTJJQUVnQW5JZ0FISnJJZ0JCQVhRZ0JTQUFRUlZxZGtFQmNYSkJIR29oQUFzZ0JDQUFOZ0ljSUFSQ0FEY0NFQ0FBUVFKMFFjQ2pCR29oQXdKQVFaU2hCQ2dDQUNJQ1FRRWdBSFFpQVhGRkJFQkJsS0VFSUFFZ0FuSTJBZ0FnQXlBRU5nSUFJQVFnQXpZQ0dBd0JDeUFGUVFCQkdTQUFRUUYyYXlBQVFSOUdHM1FoQUNBREtBSUFJUUVEUUNBQklnSW9BZ1JCZUhFZ0JVWU5CQ0FBUVIxMklRRWdBRUVCZENFQUlBSWdBVUVFY1dvaUF5Z0NFQ0lCRFFBTElBTWdCRFlDRUNBRUlBSTJBaGdMSUFRZ0JEWUNEQ0FFSUFRMkFnZ01Bd3NnQXlnQ0NDSUFJQWcyQWd3Z0F5QUlOZ0lJSUFoQkFEWUNHQ0FJSUFNMkFnd2dDQ0FBTmdJSUN5QUpRUWhxSVFBTUJRc2dBaWdDQ0NJQUlBUTJBZ3dnQWlBRU5nSUlJQVJCQURZQ0dDQUVJQUkyQWd3Z0JDQUFOZ0lJQzBHY29RUW9BZ0FpQUNBSFRRMEFRWnloQkNBQUlBZHJJZ0UyQWdCQnFLRUVRYWloQkNnQ0FDSUNJQWRxSWdBMkFnQWdBQ0FCUVFGeU5nSUVJQUlnQjBFRGNqWUNCQ0FDUVFocUlRQU1Bd3RCOEpZRVFUQTJBZ0JCQUNFQURBSUxBa0FnQmtVTkFBSkFJQVVvQWh3aUFrRUNkRUhBb3dScUlnQW9BZ0FnQlVZRVFDQUFJQUUyQWdBZ0FRMEJRWlNoQkNBSlFYNGdBbmR4SWdrMkFnQU1BZ3NnQmtFUVFSUWdCaWdDRUNBRlJodHFJQUUyQWdBZ0FVVU5BUXNnQVNBR05nSVlJQVVvQWhBaUFBUkFJQUVnQURZQ0VDQUFJQUUyQWhnTElBVW9BaFFpQUVVTkFDQUJJQUEyQWhRZ0FDQUJOZ0lZQ3dKQUlBTkJEMDBFUUNBRklBTWdCMm9pQUVFRGNqWUNCQ0FBSUFWcUlnQWdBQ2dDQkVFQmNqWUNCQXdCQ3lBRklBZEJBM0kyQWdRZ0JTQUhhaUlFSUFOQkFYSTJBZ1FnQXlBRWFpQUROZ0lBSUFOQi93Rk5CRUFnQTBFRGRpSUFRUU4wUWJpaEJHb2hBZ0ovUVpDaEJDZ0NBQ0lCUVFFZ0FIUWlBSEZGQkVCQmtLRUVJQUFnQVhJMkFnQWdBZ3dCQ3lBQ0tBSUlDeUVBSUFJZ0JEWUNDQ0FBSUFRMkFnd2dCQ0FDTmdJTUlBUWdBRFlDQ0F3QkMwRWZJUUFnQTBILy8vOEhUUVJBSUFOQkNIWWlBQ0FBUVlEK1AycEJFSFpCQ0hFaUFuUWlBQ0FBUVlEZ0gycEJFSFpCQkhFaUFYUWlBQ0FBUVlDQUQycEJFSFpCQW5FaUFIUkJEM1lnQVNBQ2NpQUFjbXNpQUVFQmRDQURJQUJCRldwMlFRRnhja0VjYWlFQUN5QUVJQUEyQWh3Z0JFSUFOd0lRSUFCQkFuUkJ3S01FYWlFQkFrQUNRQ0FKUVFFZ0FIUWlBbkZGQkVCQmxLRUVJQUlnQ1hJMkFnQWdBU0FFTmdJQURBRUxJQU5CQUVFWklBQkJBWFpySUFCQkgwWWJkQ0VBSUFFb0FnQWhCd05BSUFjaUFTZ0NCRUY0Y1NBRFJnMENJQUJCSFhZaEFpQUFRUUYwSVFBZ0FTQUNRUVJ4YWlJQ0tBSVFJZ2NOQUFzZ0FpQUVOZ0lRQ3lBRUlBRTJBaGdnQkNBRU5nSU1JQVFnQkRZQ0NBd0JDeUFCS0FJSUlnQWdCRFlDRENBQklBUTJBZ2dnQkVFQU5nSVlJQVFnQVRZQ0RDQUVJQUEyQWdnTElBVkJDR29oQUF3QkN3SkFJQWhGRFFBQ1FDQUJLQUljSWdKQkFuUkJ3S01FYWlJQUtBSUFJQUZHQkVBZ0FDQUZOZ0lBSUFVTkFVR1VvUVFnQ1VGK0lBSjNjVFlDQUF3Q0N5QUlRUkJCRkNBSUtBSVFJQUZHRzJvZ0JUWUNBQ0FGUlEwQkN5QUZJQWcyQWhnZ0FTZ0NFQ0lBQkVBZ0JTQUFOZ0lRSUFBZ0JUWUNHQXNnQVNnQ0ZDSUFSUTBBSUFVZ0FEWUNGQ0FBSUFVMkFoZ0xBa0FnQTBFUFRRUkFJQUVnQXlBSGFpSUFRUU55TmdJRUlBQWdBV29pQUNBQUtBSUVRUUZ5TmdJRURBRUxJQUVnQjBFRGNqWUNCQ0FCSUFkcUlnSWdBMEVCY2pZQ0JDQUNJQU5xSUFNMkFnQWdDZ1JBSUFwQkEzWWlBRUVEZEVHNG9RUnFJUVJCcEtFRUtBSUFJUVVDZjBFQklBQjBJZ0FnQm5GRkJFQkJrS0VFSUFBZ0JuSTJBZ0FnQkF3QkN5QUVLQUlJQ3lFQUlBUWdCVFlDQ0NBQUlBVTJBZ3dnQlNBRU5nSU1JQVVnQURZQ0NBdEJwS0VFSUFJMkFnQkJtS0VFSUFNMkFnQUxJQUZCQ0dvaEFBc2dDMEVRYWlRQUlBQUxLUUVCZnlBQ0JFQWdBQ0VEQTBBZ0F5QUJPZ0FBSUFOQkFXb2hBeUFDUVFGcklnSU5BQXNMSUFBTERRQWdBQ2dDQUNBQlFRSjBhZ3ZTQXdFRmZ5TUFRUkJySWdBa0FBSkFJQUpGRFFCQm9PMERLQUlBSUFGS0RRQWdBaTBBQUVVTkFDQUFJQU0yQWd3akFFRVFheUlGSkFBZ0JTQUROZ0lNQWtBZ0FrVU5BRUdnN1FNb0FnQWdBVW9OQUNBQ0xRQUFSUTBBSUFVZ0JTZ0NEQ0lETmdJSVFRQkJBQ0FDSUFNUWlRSWlCa1VOQUNBQlFRTk5CRUFnQVVFQ2RFSFFxUUZxS0FJQUVLQUJRUU5xSVFRTElBUWdCbW9pQjBFQmFpSUlFRGtoQXlBRUJFQWdCU0FCUVFKMFFkQ3BBV29vQWdBMkFnQWdBeUFFUVFGcVFmQWxJQVVRMWdNYUN5QURJQVJxSUFaQkFXb2dBaUFGS0FJTUVJa0NHZ0pBQWtCQnNKVUVLQUlBSWdFRVFFRzBsUVFvQWdCRkRRRkJ1SlVFS0FJQVFmU1hCRWNFUUVHOGxRUW9BZ0FpQkVVTkEwSEVsUVFvQWdBaUFVR0FJRUVBUWNDVkJDMEFBQnNpQWs4TkF5QUJJQVJxSVFRZ0FpQUJhMEVFYXlBSFR3UkFJQVFnQXlBSUVOVURHa0hFbFFRZ0FTQUhhallDQUF3RUN5QUVRYTdjdUFFMkFBQkJ4SlVFSUFJMkFnQU1Bd3RCeEpVRUtBSUFSUTBCUWJ5VkJDZ0NBQ0FCRVFFQVFjU1ZCRUVBTmdJQVFiQ1ZCQ2dDQUNFQkRBRUxRYkR4QWlnQ0FDRUJJQU5CQVNBREVLQUJJQUVRemdFYURBRUxJQU1nQVJFQkFBc2dBeEF6Q3lBRlFSQnFKQUFMSUFCQkVHb2tBQXNIQUNBQVFReHFDeElBSUFBUWhnRUVRQ0FBS0FJQUR3c2dBQXN6QVFGL0lBSUVRQ0FBSVFNRFFDQURJQUV0QUFBNkFBQWdBMEVCYWlFRElBRkJBV29oQVNBQ1FRRnJJZ0lOQUFzTElBQUxDUUFnQUJBK0lBRnFDOWtCQVFSL0FrQWdBU0FBRURjaUEwc0VRQ01BUVJCcklnSWtBQ0FCSUFOcklnTUVRQ0FBRUZFaEJDQUFFRGNpQVNBRGFpRUZJQU1nQkNBQmEwc0VRQ0FBSUFRZ0JTQUVheUFCSUFFUXNRUUxJQUVnQUJBK0lnUnFJQU5CQUJEK0JpQUFJQVVRbVFJZ0FrRUFPZ0FQSUFRZ0JXb2dBa0VQYWhDRkFRc01BUXNqQUVFUWF5SUNKQUFDUUNBQUVJWUJCRUFnQUNnQ0FDRURJQUpCQURvQUR5QUJJQU5xSUFKQkQyb1FoUUVnQUNBQkVJa0JEQUVMSUFKQkFEb0FEaUFBSUFGcUlBSkJEbW9RaFFFZ0FDQUJFSThCQ3dzZ0FrRVFhaVFBQ3hBQUlBQW9BZ1FnQUNnQ0FHdEJBM1VMRUFBZ0FDZ0NCQ0FBS0FJQWEwRUNkUXNiQVFGL0l3QkJFR3NpQVNRQUlBQVExQVFnQVVFUWFpUUFJQUFMRWdBZ0FBUkFJQUFvQWdBUU15QUFFRE1MQ3h3QkFYOGdBQ2dDQUNFQ0lBQWdBU2dDQURZQ0FDQUJJQUkyQWdBTEN3QWdBQ2dDQUJEWUFob0xMUUVCZnlNQVFSQnJJZ0VrQUNBQVFnQTNBZ0FnQVVFQU5nSU1JQUJCQ0dvUWl3TWFJQUZCRUdva0FDQUFDNjRIQWdaL0JIMENmU0FBS0FJWUlRZ2dBQ2dDQkNFRklBQW9BZ2doQkNBQUtBSU1JUWNDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFuOGdBWXREQUFBQVQxMEVRQ0FCcUF3QkMwR0FnSUNBZUFzQ2Z5QUJqaUlKaTBNQUFBQlBYUVJBSUFtb0RBRUxRWUNBZ0lCNEN5SUFSZ1JBQW44Z0FvdERBQUFBVDEwRVFDQUNxQXdCQzBHQWdJQ0FlQXNoQmlBR0FuOGdBbzRpQ1l0REFBQUFUMTBFUUNBSnFBd0JDMEdBZ0lDQWVBc2lBMGNOQVNBRFFRQklJQU1nQkU5eURRSWdCQ0FEUVFGcUlnWk5EUU1nQUVFQVNDQUFJQVZQY2cwRUlBVWdBRUVCYWlJRVRRMEZJQVN5SUFHVElnb2dCcklnQXBNaUM1UWlDVU1BQUFBQVlFVWdDYnRFY2F5TDIyZ0E4RDlsUlhJTkJpQUJJQUN5a3lJTUlBdVVJZ0ZEQUFBQUFHQkZJQUc3UkhHc2k5dG9BUEEvWlVWeURRY2dDaUFDSUFPeWt5SUtsQ0lDUXdBQUFBQmdSU0FDdTBSeHJJdmJhQUR3UDJWRmNnMElJQXdnQ3BRaUNrTUFBQUFBWUVVZ0NydEVjYXlMMjJnQThEOWxSWElOQ1NBS0lBSWdDU0FCa3BLU3UwUnhySXZiYUFEd1AyVkZEUW9nQ2lBSUlBTWdCMnhxSWdNZ0Iyb2lCU0FFUVFKMElnUnFLZ0lBbENBQ0lBVWdBRUVDZENJQWFpb0NBSlFnQ1NBQUlBTnFLZ0lBbENBQklBTWdCR29xQWdDVWtwS1NEQXdMUWZDdkJFR1B6Z0VRTWtIRHpnRVFNa0cvSEJBeVFjVUFFRFZCK1NBUU1rSHd6d0VRTWhBMkRBb0xRZkN2QkVHTzBBRVFNa0hEemdFUU1rRy9IQkF5UWNZQUVEVkIrU0FRTWtId3p3RVFNaEEyREFrTFFmQ3ZCRUhDMEFFUU1rSER6Z0VRTWtHL0hCQXlRYzhBRURWQitTQVFNa0h3MEFFUU1oQTJEQWdMUWZDdkJFR0IwUUVRTWtIRHpnRVFNa0cvSEJBeVFkQUFFRFZCK1NBUU1rRzkwUUVRTWhBMkRBY0xRZkN2QkVIVjBRRVFNa0hEemdFUU1rRy9IQkF5UWRFQUVEVkIrU0FRTWtHQzBnRVFNaEEyREFZTFFmQ3ZCRUdUMGdFUU1rSER6Z0VRTWtHL0hCQXlRZElBRURWQitTQVFNa0hPMGdFUU1oQTJEQVVMUWZDdkJFSG0wZ0VRTWtIRHpnRVFNa0cvSEJBeVFkNEFFRFZCK1NBUU1rR1Ywd0VRTWhBMkRBUUxRZkN2QkVHaTB3RVFNa0hEemdFUU1rRy9IQkF5UWQ4QUVEVkIrU0FRTWtHVjB3RVFNaEEyREFNTFFmQ3ZCRUhSMHdFUU1rSER6Z0VRTWtHL0hCQXlRZUFBRURWQitTQVFNa0dWMHdFUU1oQTJEQUlMUWZDdkJFR0ExQUVRTWtIRHpnRVFNa0cvSEJBeVFlRUFFRFZCK1NBUU1rR1Ywd0VRTWhBMkRBRUxRZkN2QkVHdjFBRVFNa0hEemdFUU1rRy9IQkF5UWVJQUVEVkIrU0FRTWtHVjB3RVFNaEEyQ3hBQUFBc0xCd0FnQUVFRWFnc2lBUUYvSXdCQkVHc2lBaVFBSUFBZ0FTQUJFS0FCRVAwR0lBSkJFR29rQUNBQUN3MEFJQUFvQWdBZ0FVRUZkR29MUlFBZ0FTQUFLQUlJVHdSQVFmQ3ZCRUdvekFFUU1rSE56QUVRTWtHL0hCQXlRZndBRURWQitTQVFNa0hOelFFUU1oQTJFQUFBQ3lBQUtBSVlJQUFvQWd3Z0FXeHFDek1CQVg4Z0FFRUJJQUFiSVFBQ1FBTkFJQUFRT1NJQkRRRkJ5TVVFS0FJQUlnRUVRQ0FCRVJFQURBRUxDeEFBQUFzZ0FRc01BQ0FBSUFGQkhHb1F0Z1FMMHdFQ0EzOENmZ0pBSUFBcEEzQWlCRkJGSUFRZ0FDa0RlQ0FBS0FJRUlnRWdBQ2dDTENJQ2E2eDhJZ1ZYY1VVRVFDQUFFSWNESWdOQkFFNE5BU0FBS0FJc0lRSWdBQ2dDQkNFQkN5QUFRbjgzQTNBZ0FDQUJOZ0pvSUFBZ0JTQUNJQUZyckh3M0EzaEJmdzhMSUFWQ0FYd2hCU0FBS0FJRUlRRWdBQ2dDQ0NFQ0FrQWdBQ2tEY0NJRVVBMEFJQVFnQlgwaUJDQUNJQUZyckZrTkFDQUJJQVNuYWlFQ0N5QUFJQUkyQW1nZ0FDQUZJQUFvQWl3aUFDQUJhNng4TndONElBQWdBVThFUUNBQlFRRnJJQU02QUFBTElBTUxHd0VCZjBFS0lRRWdBQkNHQVFSL0lBQVE2Z0ZCQVdzRlFRb0xDdzBBSUFBb0FnQWdBVUVEZEdvTDVRRUJCbjhnQVJERkJDRURJd0JCRUdzaUJTUUFBa0FnQXlBQUlnUVF1QVFpQUUwRVFDQUVFRDRpQmlFQ0lBTWlBQVIvQWtBZ0FTQUNSZzBBSUFJZ0FXc2dBRUVDZEU4RVFDQUFSUTBCQTBBZ0FpQUJLQUlBTmdJQUlBSkJCR29oQWlBQlFRUnFJUUVnQUVFQmF5SUFEUUFMREFFTElBQkZEUUFEUUNBQ0lBQkJBV3NpQUVFQ2RDSUhhaUFCSUFkcUtBSUFOZ0lBSUFBTkFBc0xRUUFGSUFJTEdpQUZRUUEyQWd3Z0JpQURRUUowYWlBRlFReHFFS3dCSUFRZ0F4Q1pBZ3dCQ3lBRUlBQWdBeUFBYXlBRUVEY2lBRUVBSUFBZ0F5QUJFUHdHQ3lBRlFSQnFKQUFMZFFFRGZ5QUJFS0FCSVFJakFFRVFheUlFSkFBQ1FDQUNJQUFRVVNJRFRRUkFJQUFRUGlFRElBSUVRQ0FESUFFZ0FoREtBZ3NnQkVFQU9nQVBJQUlnQTJvZ0JFRVBhaENGQVNBQUlBSVFtUUlNQVFzZ0FDQURJQUlnQTJzZ0FCQTNJZ0JCQUNBQUlBSWdBUkN6QXdzZ0JFRVFhaVFBQ3dVQUVBQUFDeEFBSUFBb0FnUWdBQ2dDQUd0QkRHMExZQUVCZnlNQVFSQnJJZ1VrQUNBQUlBTWdCQkQ1QVNFQUlBVkJER29nQlVFSWFpQUJJQUlnQXhDWkJDQUZLZ0lJSVFFZ0FDQUZLZ0lNSUFBb0FnUkJBbXV6RU9ZQ0lBRWdBQ2dDQ0VFQ2E3TVE1Z0lRU1NFQklBVkJFR29rQUNBQkN3a0FJQUFnQUJEcEJRc0hBQ0FBUVJCcUMwWUFJQUFnQVNvQ0NDQUJLZ0lBSUFJcUFnQ1VJQUVxQWdRZ0Fpb0NCSlNTa2pnQ0FDQUFJQUVxQWhRZ0FTb0NEQ0FDS2dJQWxDQUJLZ0lRSUFJcUFnU1VrcEk0QWdRTEtBRUJmeUFCSUFGQkFXc2lBbkZGQkVBZ0FDQUNjUThMSUFBZ0FVOEVmeUFBSUFGd0JTQUFDd3Z4QWdFRWYwR010d1F0QUFBRVFFR0l0d1FvQWdBUEN5TUFRU0JySWdJa0FBSkFBa0FEUUNBQ1FRaHFJQUJCQW5ScUFuOUJBU0FBZEVILy8vLy9CM0VpQTBFQmNrVUVRQ0FBUVFKMEtBSUFEQUVMSUFCQnJwWUNRYktoQWlBREd4REpCQXNpQXpZQ0FDQURRWDlHRFFFZ0FFRUJhaUlBUVFaSERRQUxRUUFReUFSRkJFQkJtSmtESVFFZ0FrRUlha0dZbVFNUThBSkZEUUpCc0prRElRRWdBa0VJYWtHd21RTVE4QUpGRFFKQkFDRUFRZUMxQkMwQUFFVUVRQU5BSUFCQkFuUkJzTFVFYWlBQVFiS2hBaERKQkRZQ0FDQUFRUUZxSWdCQkJrY05BQXRCNExVRVFRRTZBQUJCeUxVRVFiQzFCQ2dDQURZQ0FBdEJzTFVFSVFFZ0FrRUlha0d3dFFRUThBSkZEUUpCeUxVRUlRRWdBa0VJYWtISXRRUVE4QUpGRFFKQkdCQTVJZ0ZGRFFFTElBRWdBaWtEQ0RjQ0FDQUJJQUlwQXhnM0FoQWdBU0FDS1FNUU53SUlEQUVMUVFBaEFRc2dBa0VnYWlRQUlBRWhBRUdNdHdSQkFUb0FBRUdJdHdRZ0FEWUNBQ0FBQzhrS0FnVi9EMzRqQUVIZ0FHc2lCU1FBSUFSQy8vLy8vLy8vUDRNaERDQUNJQVNGUW9DQWdJQ0FnSUNBZ0grRElRb2dBa0wvLy8vLy8vOC9neUlOUWlDSUlRNGdCRUl3aUtkQi8vOEJjU0VIQWtBQ1FDQUNRakNJcDBILy93RnhJZ2xCLy84QmEwR0NnSDVQQkVBZ0IwSC8vd0ZyUVlHQWZrc05BUXNnQVZBZ0FrTC8vLy8vLy8vLy8vOEFneUlMUW9DQWdJQ0FnTUQvL3dCVUlBdENnSUNBZ0lDQXdQLy9BRkViUlFSQUlBSkNnSUNBZ0lDQUlJUWhDZ3dDQ3lBRFVDQUVRdi8vLy8vLy8vLy8vd0NESWdKQ2dJQ0FnSUNBd1AvL0FGUWdBa0tBZ0lDQWdJREEvLzhBVVJ0RkJFQWdCRUtBZ0lDQWdJQWdoQ0VLSUFNaEFRd0NDeUFCSUF0Q2dJQ0FnSUNBd1AvL0FJV0VVQVJBSUFJZ0E0UlFCRUJDZ0lDQWdJQ0E0UC8vQUNFS1FnQWhBUXdEQ3lBS1FvQ0FnSUNBZ01ELy93Q0VJUXBDQUNFQkRBSUxJQU1nQWtLQWdJQ0FnSURBLy84QWhZUlFCRUFnQVNBTGhDRUNRZ0FoQVNBQ1VBUkFRb0NBZ0lDQWdPRC8vd0FoQ2d3REN5QUtRb0NBZ0lDQWdNRC8vd0NFSVFvTUFnc2dBU0FMaEZBRVFFSUFJUUVNQWdzZ0FpQURoRkFFUUVJQUlRRU1BZ3NnQzBMLy8vLy8vLzgvV0FSQUlBVkIwQUJxSUFFZ0RTQUJJQTBnRFZBaUJodDVJQVpCQm5TdGZLY2lCa0VQYXhDTEFVRVFJQVpySVFZZ0JTa0RXQ0lOUWlDSUlRNGdCU2tEVUNFQkN5QUNRdi8vLy8vLy96OVdEUUFnQlVGQWF5QURJQXdnQXlBTUlBeFFJZ2diZVNBSVFRWjByWHluSWdoQkQyc1Fpd0VnQmlBSWEwRVFhaUVHSUFVcEEwZ2hEQ0FGS1FOQUlRTUxJQU5DRDRZaUMwS0FnUDcvRDRNaUFpQUJRaUNJSWdSK0loQWdDMElnaUNJVElBRkMvLy8vL3crRElnRitmQ0lQUWlDR0loRWdBU0FDZm53aUN5QVJWSzBnQWlBTlF2Ly8vLzhQZ3lJTmZpSVZJQVFnRTM1OEloRWdERUlQaGlBRFFqR0loQ0lTUXYvLy8vOFBneUlESUFGK2ZDSVVJQThnRUZTdFFpQ0dJQTlDSUlpRWZDSVBJQUlnRGtLQWdBU0VJZ3grSWhZZ0RTQVRmbndpRGlBU1FpQ0lRb0NBZ0lBSWhDSUNJQUYrZkNJUUlBTWdCSDU4SWhKQ0lJWjhJaGQ4SVFFZ0J5QUphaUFHYWtILy93QnJJUVlDUUNBQ0lBUitJaGdnRENBVGZud2lCQ0FZVkswZ0JDQUVJQU1nRFg1OElnUldyWHdnQWlBTWZud2dCQ0FFSUJFZ0ZWU3RJQkVnRkZhdGZId2lCRmF0ZkNBRElBeCtJZ01nQWlBTmZud2lBaUFEVksxQ0lJWWdBa0lnaUlSOElBUWdBa0lnaG53aUFpQUVWSzE4SUFJZ0FpQVFJQkpXclNBT0lCWlVyU0FPSUJCV3JYeDhRaUNHSUJKQ0lJaUVmQ0lDVnExOElBSWdBaUFQSUJSVXJTQVBJQmRXclh4OElnSldyWHdpQkVLQWdJQ0FnSURBQUlOUVJRUkFJQVpCQVdvaEJnd0JDeUFMUWorSUlRTWdCRUlCaGlBQ1FqK0loQ0VFSUFKQ0FZWWdBVUkvaUlRaEFpQUxRZ0dHSVFzZ0F5QUJRZ0dHaENFQkN5QUdRZi8vQVU0RVFDQUtRb0NBZ0lDQWdNRC8vd0NFSVFwQ0FDRUJEQUVMQW40Z0JrRUFUQVJBUVFFZ0Jtc2lCMEdBQVU4RVFFSUFJUUVNQXdzZ0JVRXdhaUFMSUFFZ0JrSC9BR29pQmhDTEFTQUZRU0JxSUFJZ0JDQUdFSXNCSUFWQkVHb2dDeUFCSUFjUWhRSWdCU0FDSUFRZ0J4Q0ZBaUFGS1FNd0lBVXBBemlFUWdCU3JTQUZLUU1nSUFVcEF4Q0VoQ0VMSUFVcEF5Z2dCU2tER0lRaEFTQUZLUU1BSVFJZ0JTa0RDQXdCQ3lBRVF2Ly8vLy8vL3orRElBYXRRakNHaEFzZ0NvUWhDaUFMVUNBQlFnQlpJQUZDZ0lDQWdJQ0FnSUNBZjFFYlJRUkFJQW9nQWtJQmZDSUJJQUpVclh3aENnd0JDeUFMSUFGQ2dJQ0FnSUNBZ0lDQWY0V0VVRVVFUUNBQ0lRRU1BUXNnQ2lBQ0lBSkNBWU44SWdFZ0FsU3RmQ0VLQ3lBQUlBRTNBd0FnQUNBS053TUlJQVZCNEFCcUpBQUxCZ0FnQUJBekM4a0VBUWQvQWtBZ0FDZ0MxQU1pQkNnQ0VDSUNRWUNBQWs0RVFDQUVLQUlVSVFNTUFRc2dCQ2dDRkNFREEwQWdCQ0FEUVFGcklnSTJBaFFDUUNBRFFRQktCRUFnQWlFRERBRUxRUUFoQlNBQUtBSzRBMFVFUUFKQUlBQW9BaGdpQWlnQ0JBMEFJQUFnQWlnQ0RCRUFBQTBBSUFBb0FnQWlBMEVaTmdJVUlBQWdBeWdDQUJFQkFBc2dBaUFDS0FJRVFRRnJOZ0lFSUFJZ0FpZ0NBQ0lDUVFGcU5nSUFBa0FnQWkwQUFDSUZRZjhCUncwQUEwQUNRQ0FBS0FJWUlnSW9BZ1FOQUNBQUlBSW9BZ3dSQUFBTkFDQUFLQUlBSWdOQkdUWUNGQ0FBSUFNb0FnQVJBUUFMSUFJZ0FpZ0NCRUVCYXpZQ0JDQUNJQUlvQWdBaUFrRUJhallDQUVIL0FTRUZJQUl0QUFBaUFrSC9BVVlOQUFzZ0FrVU5BQ0FBSUFJMkFyZ0RRUUFoQlFzZ0JDZ0NGQ0VDQ3lBRUlBSkJDR29pQXpZQ0ZDQUVJQVFvQWd4QkNIUWdCWEkyQWd3Z0FrRjNTZzBBSUFRZ0FrRUphaUlETmdJVUlBTU5BQ0FFUVlDQUFqWUNFRUVBSVFNTElBUWdCQ2dDRUVFQmRDSUNOZ0lRSUFKQmdJQUNTQTBBQ3dzZ0JDQUNJQUV0QUFBaUFFSC9BSEZCQW5SQnNLNENhaWdDQUNJRlFSQjFJZ1pySWdJMkFoQWdCVUVJZFNFSEFrQWdCQ2dDRENJSUlBSWdBM1FpQTA0RVFDQUVJQVkyQWhBZ0JDQUlJQU5yTmdJTUlBQkJnQUZ4SVFNZ0FpQUdTQVJBSUFFZ0F5QUhjem9BQUF3Q0N5QUJJQU1nQlhNNkFBQWdBRUdBQVhNaEFBd0JDeUFDUWYvL0FVc05BQ0FBUVlBQmNTRURJQUlnQmtnRVFDQUJJQU1nQlhNNkFBQWdBRUdBQVhNaEFBd0JDeUFCSUFNZ0IzTTZBQUFMSUFCQkIzWUxyd0VCQTM4Z0F5Z0NUQm9nQVNBQ2JDRUZJQU1nQXlnQ1NDSUVRUUZySUFSeU5nSklJQU1vQWdRaUJpQURLQUlJSWdSR0JIOGdCUVVnQUNBR0lBUWdCbXNpQkNBRklBUWdCVWtiSWdRUVB4b2dBeUFES0FJRUlBUnFOZ0lFSUFBZ0JHb2hBQ0FGSUFSckN5SUVCRUFEUUFKQUlBTVFpQU5GQkVBZ0F5QUFJQVFnQXlnQ0lCRUVBQ0lHRFFFTElBVWdCR3NnQVc0UEN5QUFJQVpxSVFBZ0JDQUdheUlFRFFBTEN5QUNRUUFnQVJzTEVBQWdBRUdnNlFNZ0FTZ0NBTGNRRnd1bUFRRURmeU1BUVNCcklnRWtBQ0FCUVFBMkFnd2dBVUhSQWpZQ0NDQUJJQUVwQXdnM0F3QWdBVUVRYWlJQ0lBRXBBZ0EzQWdRZ0FpQUFOZ0lBSXdCQkVHc2lBeVFBSUFBb0FnQkJmMGNFUUNBRElBTkJDR29nQWhDVkJoQjlJUUlEUUNBQUtBSUFRUUZHRFFBTElBQW9BZ0JGQkVBZ0FFRUJOZ0lBSUFKQjBnSVJBUUFnQUVGL05nSUFDd3NnQTBFUWFpUUFJQUFvQWdRaEFDQUJRU0JxSkFBZ0FFRUJhd3NTQUNBQUVKRUdJZ0JCK0wwRE5nSUFJQUFMdUFFQkFYMGdBaUFCRU9rRklRTWdBQ0FBS2dJQUlBTWdBU29DQUpTVE9BSUFJQUFnQUNvQ0JDQURJQUVxQWdTVWt6Z0NCQ0FBSUFBcUFnZ2dBeUFCS2dJSWxKTTRBZ2dnQUNBQUtnSU1JQU1nQVNvQ0RKU1RPQUlNSUFBZ0FDb0NFQ0FESUFFcUFoQ1VremdDRUNBQUlBQXFBaFFnQXlBQktnSVVsSk00QWhRZ0FDQUFLZ0lZSUFNZ0FTb0NHSlNUT0FJWUlBQWdBQ29DSENBRElBRXFBaHlVa3pnQ0hDQUFJQUFxQWlBZ0F5QUJLZ0lnbEpNNEFpQUx3UVVCQ1g4akFFRVFheUlKSkFBZ0FSQ1lBeU1BUVJCcklnTWtBQ0FESUFFMkFnd2dDVUVJYWlBRFFReHFFS0lCSVFjZ0EwRVFhaVFBSUFCQkNHb2lBQkJESUFKTkJFQUNRQ0FBRUVNaUF5QUNRUUZxSWdGSkJFQWpBRUVnYXlJS0pBQUNRQ0FCSUFOcklnZ2dBQkEwS0FJQUlBQW9BZ1JyUVFKMVRRUkFJQUFnQ0JDVUJ3d0JDeUFBRUZraEN5QUtRUWhxSVFFQ2Z5QUFFRU1nQ0dvaEJTTUFRUkJySWdRa0FDQUVJQVUyQWd3Z0JTQUFFSVFISWdOTkJFQWdBQkRUQVNJRklBTkJBWFpKQkVBZ0JDQUZRUUYwTmdJSUlBUkJDR29nQkVFTWFoQjVLQUlBSVFNTElBUkJFR29rQUNBRERBRUxFRlVBQ3lFRElBQVFReUVGSXdCQkVHc2lCQ1FBSUFSQkFEWUNEQ0FCUVF4cUlBc1F1d0VnQXdSQUlBRW9BaEFnQXhDREJ5RUdDeUFCSUFZMkFnQWdBU0FHSUFWQkFuUnFJZ1UyQWdnZ0FTQUZOZ0lFSUFFUVBTQUdJQU5CQW5ScU5nSUFJQVJCRUdva0FDTUFRUkJySWdZa0FDQUdJQUZCQ0dvZ0NCQ2tBeUlFS0FJQUlRTURRQ0FFS0FJRUlBTkhCRUFnQVNnQ0VDQUVLQUlBRUpBRUlBUWdCQ2dDQUVFRWFpSUROZ0lBREFFTEN5QUVFS29CSUFaQkVHb2tBQ0FBRU9rQ0lBQVFXU0FBS0FJQUlBQW9BZ1FnQVVFRWFpSURFSmdDSUFBZ0F4QkdJQUJCQkdvZ0FVRUlhaEJHSUFBUU5DQUJFRDBRUmlBQklBRW9BZ1EyQWdBZ0FDQUFFRU1RdEFJZ0FTZ0NCQ0VEQTBBZ0F5QUJLQUlJUndSQUlBRW9BaEFhSUFFZ0FTZ0NDRUVFYXpZQ0NBd0JDd3NnQVNnQ0FBUkFJQUVvQWhBZ0FTZ0NBQ0FCRU1vR0VJSUhDd3NnQ2tFZ2FpUUFEQUVMSUFFZ0Ewa0VRQ0FBS0FJQUlBRkJBblJxSVFFZ0FCQkRJUU1nQUNBQkVJRUhJQUFnQXhDbEF3c0xDeUFBSUFJUU95Z0NBQVJBSUFBZ0FoQTdLQUlBRU5nQ0dnc2dCeEM1QVNFQklBQWdBaEE3SUFFMkFnQWdCeWdDQUNFQUlBZEJBRFlDQUNBQUJFQWdBQkRZQWhvTElBbEJFR29rQUFzSUFDQUFRUUFRZndzeUFRRi9Jd0JCRUdzaUF5UUFJQU1nQVRZQ0RDQUFJQU5CREdvUW9nRWlBRUVFYWlBQ0VLSUJHaUFEUVJCcUpBQWdBQXNLQUNBQUtBSUFFT0FFQ3hBQUlBQW9BZ0FRNHdSQkdIUkJHSFVMK2dJQkJuOGdBQ2dDQkNFSElBQW9BZ0FoQmdKQUFrQWdBQ2dDRUNJRktBSzRBd1JBSUFZaEJBd0JDeUFDUVJoS0JFQWdBaUVJSUFZaEJBd0NDd05BSUFkRkJFQWdCU0FGS0FJWUtBSU1FUUFBUlFSQVFRQVBDeUFGS0FJWUlnUW9BZ1FoQnlBRUtBSUFJUVlMSUFaQkFXb2hCQ0FIUVFGcklRY0NRQ0FHTFFBQUlnaEIvd0ZHQkVBRFFDQUhSUVJBSUFVZ0JTZ0NHQ2dDREJFQUFFVUVRRUVBRHdzZ0JTZ0NHQ0lFS0FJRUlRY2dCQ2dDQUNFRUN5QUhRUUZySVFjZ0JDMEFBQ0VHUWY4QklRZ2dCRUVCYWlFRUlBWkIvd0ZHRFFBTElBWU5BUXNnQ0NBQlFRaDBjaUVCSUFKQkVVZ2hDU0FFSVFZZ0FrRUlhaUlJSVFJZ0NRMEJEQU1MQ3lBRklBWTJBcmdEQ3lBQ0lBTk9CRUFnQWlFSURBRUxJQVVvQXRRREtBSW9SUVJBSUFVb0FnQWlBMEg0QURZQ0ZDQUZRWDhnQXlnQ0JCRUNBQ0FGS0FMVUEwRUJOZ0lvQzBFWklRZ2dBVUVaSUFKcmRDRUJDeUFBSUFnMkFnd2dBQ0FCTmdJSUlBQWdCellDQkNBQUlBUTJBZ0JCQVFzbEFRSi9Jd0JCRUdzaUFDUUFJQUJCQ0dvUWdnUVFmU2dDQUNFQklBQkJFR29rQUNBQkN3MEFJQUFnQVdwQkFXc2dBVzBMRFFBZ0FDZ0NBQ0FCUVJSc2Fnc1BBQ0FBS0FJQUlBQW9BZ1EyQWdRTENnQWdBQ2dDQUVFSWFnc0hBQ0FBSUFDVUMwUUFJQUFnQVhNaUFDQUFRUUYyUWRXcTFhb0ZjV3NpQUVFQ2RrR3o1c3laQTNFZ0FFR3o1c3laQTNGcUlnQkJCSFlnQUdwQmo1NjgrQUJ4UVlHQ2hBaHNRUmgyQzdJQkFRVi9BbjhnQWtNQUFBQS9raUlDaTBNQUFBQlBYUVJBSUFLb0RBRUxRWUNBZ0lCNEN5RUZJQUFvQWhRaENFRi9JUVlDUUFKL0lBRkRBQUFBUDVJaUFZdERBQUFBVDEwRVFDQUJxQXdCQzBHQWdJQ0FlQXNnQUNnQ0VHb2lCMEVBU0EwQUlBY2dBQ2dDQ0NJSlRnMEFJQVVnQ0dvaUJVRUFTQTBBSUFVZ0FDZ0NERTROQUNBRElBQW9BZ0FnQlNBSmJDQUhha0VEZEdvaUFDb0NBRGdDQUNBRUlBQXFBZ1E0QWdCQkFDRUdDeUFHQ3lrQkFYOGpBRUVRYXlJQ0pBQWdBa0VJYWlBQUlBRVFsd1lRZlNnQ0FDRUFJQUpCRUdva0FDQUFDeXdCQVg4Z0FCRHBBaUFBS0FJQUJFQWdBQkRRQmlBQUVEUWFJQUFvQWdBaEFTQUFFTk1CR2lBQkVETUxDdzBBSUFBb0FnQVEzd1FhSUFBTERRQWdBQ2dDQUJEaUJCb2dBQXZwQWdJR2Z3SjhJd0JCTUdzaUFTUUFJd0JCRUdzaUFpUUFJQUFyQXdCRUFBQUFBQUFBQUFCbVJRUkFRZkN2QkVISUNoQXlRYlFRRURKQnZ4d1FNa0hEQUJBMVFma2dFREpCcWlRUU1oQTJFQUFBQ3lBQ1FRaHFFSm9GSUFBZ0FpZ0NETGRFamUyMW9QZkdzRDZpSUFJb0FnaTNvRGtEQ0NBQ1FSQnFKQUFRbGdZaEF5QUJRU0JxSWdJUTN3VWdBaEErSVFRZ0FFRVFhaUlGRUQ0aEJpQUJBbndDUUNBQUt3TUFJZ2RFQUFBQUFBQUFBQUJtQkVBZ0FDc0RDQ0lJUkFBQUFBQUFBQUFBWmtVTkFTQUlJQWVoREFJTFFmQ3ZCRUhJQ2hBeVFiUVFFREpCdnh3UU1rSFFBQkExUWZrZ0VESkJxaVFRTWhBMkVBQUFDMEh3cndSQitDc1FNa0cwRUJBeVFiOGNFREpCMFFBUU5VSDVJQkF5UWU0dkVESVFOaEFBQUF0RUFBQUFBQUJBajBDaU9RTVFJQUVnQmpZQ0RDQUJRWlhmQVRZQ0NDQUJJQVEyQWdRZ0FVSEhQellDQUNBRFFjUTFJQUVRM0FVZ0FoQTRHaUFGRURnYUlBRkJNR29rQUFzSkFDQUFJQUVRc2dFTEpBRUNmeU1BUVJCcklnSWtBQ0FBSUFFUStnRWhBeUFDUVJCcUpBQWdBU0FBSUFNYkN3a0FJQUFnQVJEaEJBc0pBQ0FBSUFFUTVBUUxyd1lDQ244QmZTTUFRU0JySWdRa0FDQUVJQUFRMndJMkFoQWdCRUVZYWlFSUl3QkJJR3NpQVNRQVFkeVZCQkE5R2lBQUtBSUFJUVZCM0pVRUVJMEJJUU1nQVVFQU9nQWZBa0FDUUNBRFJRMEFRZHlWQkNBRklBTVFXeUlHRURzb0FnQWlBa1VOQUFOQUlBSW9BZ0FpQWtVTkFTQUZJQUlvQWdSSEJFQWdBaWdDQkNBREVGc2dCa2NOQWd0QjNKVUVFRmtnQWtFSWFpQUFFTkFCUlEwQUN3d0JDeU1BUVJCcklna2tBRUhjbFFRUU5DRUFJQUZCRUdwQnVBUVFUaUFKUVFocUlBQkJBQkN1QWhDdEFpSUNLQUlBUVFocUlRQWdCQ2dDRUNFS0l3QkJFR3NpQnlRQUlBY2dDallDQ0NBQUlBY29BZ2dvQWdBMkFnQWdBRUVJYWtFQVFhZ0VFRG9pQUVJQU53UEFBU0FBL1F3QUFBQUFBQUFBQUFBQUFBQUFBQUFBL1FzQ3pBRWdBRUwrLy8vL0R6Y0RnQUlnQVAwTUFBQUFBQUFBVGtBQUFBQUFBQUJlUVAwTEEvQUJJQUJCMkFKcUVKSUNHaUFBUWZ3Q2FoQklHaUFBUVFJMkFxQUVJQUJCQURZQ21BTWdBUDBNTFVNYzYrSTJHajhBQUFBQUFFQ1BRUDBMQTRnRElBZEJFR29rQUNBQ0VFcEJBVG9BQkNBQ0tBSUFJQVUyQWdRZ0FpZ0NBRUVBTmdJQUlBbEJFR29rQUVIY2xRUVFQU2dDQUNFQVFkeVZCQkJaSVFJQ1FDQURCRUFnQUVFQmFyTWdBaW9DQUNBRHM1UmVSUTBCQ3lBQklBTVE0UUZCQVhNZ0EwRUJkSEkyQWd3Z0FRSi9RZHlWQkJBOUtBSUFRUUZxczBIY2xRUVFXU29DQUpXTklndERBQUNBVDEwZ0MwTUFBQUFBWUhFRVFDQUxxUXdCQzBFQUN6WUNDRUhjbFFRZ0FVRU1haUFCUVFocUVIa29BZ0FReUFVZ0JVSGNsUVFRalFFaUF4QmJJUVlMQWtCQjNKVUVJQVlRT3lnQ0FDSUFSUVJBSUFFb0FoQkI1SlVFS0FJQU5nSUFRZVNWQkNBQktBSVFOZ0lBUWR5VkJDQUdFRHRCNUpVRU5nSUFJQUVvQWhBb0FnQkZEUUVnQVNnQ0VDRUFRZHlWQkNBQktBSVFLQUlBS0FJRUlBTVFXeEE3SUFBMkFnQU1BUXNnQVNnQ0VDQUFLQUlBTmdJQUlBQWdBU2dDRURZQ0FBc2dBVUVRYWlJQUVMa0JJUUpCM0pVRUVEMGlBeUFES0FJQVFRRnFOZ0lBSUFGQkFUb0FIeUFBRU1jRkN5QUlJQUZCRUdvZ0FoQjlJQUZCSDJvUXJ3SWdBVUVnYWlRQUlBZ1FieUVBSUFSQklHb2tBQ0FBUVFocUN3c0FJQUFnQVRZQ0FDQUFDeTBBSUFKRkJFQWdBQ2dDQkNBQktBSUVSZzhMSUFBZ0FVWUVRRUVCRHdzZ0FDZ0NCQ0FCS0FJRUVLTUNSUXNqQVFGL0lBQW9BZ0FoQWlBQUlBRTJBZ0FnQWdSQUlBSWdBQkJLS0FJQUVRRUFDd3NRQUNBQUtBSUVJQUFvQWdCclFSUnRDd29BSUFCQkVHb1FnQUVMREFBZ0FDQUJFTElCUVFGekN4QUFJQUFvQWdRZ0FDZ0NBR3RCSkcwTEVRQWdBQ0FCSUFBb0FnQW9BaHdSQXdBTERBQWdBQ0FCTFFBQU9nQUFDd29BSUFBdEFBdEJCM1lMZFFFQmZpQUFJQUVnQkg0Z0FpQURmbndnQTBJZ2lDSUNJQUZDSUlnaUJINThJQU5DLy8vLy93K0RJZ01nQVVMLy8vLy9ENE1pQVg0aUJVSWdpQ0FESUFSK2ZDSURRaUNJZkNBQklBSitJQU5DLy8vLy93K0RmQ0lCUWlDSWZEY0RDQ0FBSUFWQy8vLy8vdytESUFGQ0lJYUVOd01BQ3hnQUlBQXRBQUJCSUhGRkJFQWdBU0FDSUFBUTJnTWFDd3NKQUNBQUlBRTJBZ1FMV1FFQ2Z5TUFRUkJySWdJa0FDQUFFSVlCQkVBZ0FDZ0NBQ0VESUFBUTZnRWFJQU1RTXdzZ0FDQUJLQUlJTmdJSUlBQWdBU2tDQURjQ0FDQUJRUUFRandFZ0FrRUFPZ0FQSUFFZ0FrRVBhaENGQVNBQ1FSQnFKQUFMVUFFQmZnSkFJQU5Cd0FCeEJFQWdBU0FEUVVCcXJZWWhBa0lBSVFFTUFRc2dBMFVOQUNBQ0lBT3RJZ1NHSUFGQndBQWdBMnV0aUlRaEFpQUJJQVNHSVFFTElBQWdBVGNEQUNBQUlBSTNBd2dMYndFQmZ5TUFRWUFDYXlJRkpBQWdCRUdBd0FSeElBSWdBMHh5UlFSQUlBVWdBVUgvQVhFZ0FpQURheUlDUVlBQ0lBSkJnQUpKSWdFYkVEb2FJQUZGQkVBRFFDQUFJQVZCZ0FJUWlBRWdBa0dBQW1zaUFrSC9BVXNOQUFzTElBQWdCU0FDRUlnQkN5QUZRWUFDYWlRQUN3a0FJQUFRU2lnQ0FBdWhBUUVDZndKQUlBQVFOMFVnQWlBQmEwRUZTSElOQUNBQklBSVF1UU1nQWtFRWF5RUVJQUFRUGlJQ0lBQVFOMm9oQlFKQUEwQUNRQ0FDTEFBQUlRQWdBU0FFVHcwQUlBQkJBRXdnQUVIL0FFNXlSUVJBSUFFb0FnQWdBaXdBQUVjTkF3c2dBVUVFYWlFQklBSWdCU0FDYTBFQlNtb2hBZ3dCQ3dzZ0FFRUFUQ0FBUWY4QVRuSU5BU0FDTEFBQUlBUW9BZ0JCQVd0TERRRUxJQU5CQkRZQ0FBc0xDUUFnQUNBQk9nQUxDd3dBSUFBZ0FSRGhCRUVCY3dzTUFDQUFJQUVRNUFSQkFYTUxEUUFnQUNnQ0JDQUFLQUlBYXd0aUFDQUFRb0NBZ0lDQWdJRDR2MzgzQXdnZ0FFS0FnSUNBZ0lDQStMOS9Od01BSUFCQkVHb2dBUkJMR2lNQVFSQnJJZ0VrQUNBQlFRaHFFSm9GSUFBZ0FTZ0NETGRFamUyMW9QZkdzRDZpSUFFb0FnaTNvRGtEQUNBQlFSQnFKQUFnQUFzd0FRSjlBbjlCQVNBQktnSUFJZ0lnQUNvQ0FDSURYUTBBR2tFQUlBSWdBMTROQUJvZ0FTZ0NCQ0FBS0FJRVNRc0xDd0FnQUVHc3R3UVF5d0VMRFFBZ0FDZ0NBQ0FCUVF4c2FndVVDQUlLZndGOUl3QkJJR3NpQkNRQUlBUkJBVFlDR0NBRUlBRTJBaHdnQVVFQVRnUkFJQVFnQVRZQ0NDQUVJQUJCM0FCcUlnQWdCRUVJYWlJQkVITTJBaEFnQkJCck5nSUlBa0FnQkVFUWFpQUJFSGdFUUNBRVFRaHFJZ1VnQkNnQ0hEWUNBQ0FGSUFRb0FoZzJBZ1FqQUVFUWF5SUhKQUFnQjBFSWFpRUtJd0JCSUdzaUF5UUFJQUFRUFJvZ0JTZ0NBQ0VJSUFBUWpRRWhBU0FEUVFBNkFCOENRQUpBSUFGRkRRQWdBQ0FJSUFFUVd5SUdFRHNvQWdBaUFrVU5BQU5BSUFJb0FnQWlBa1VOQVNBSUlBSW9BZ1JIQkVBZ0FpZ0NCQ0FCRUZzZ0JrY05BZ3NnQUJCWklBSkJDR29nQlJEUUFVVU5BQXNNQVFzakFFRVFheUlKSkFBZ0FCQTBJUUlnQTBFUWFrRVFFRTRnQ1VFSWFpQUNRUUFRcmdJUXJRSWlBaWdDQUNJTFFRaHFJQVVvQWdBMkFnQWdDeUFGS0FJRU5nSU1JQUlRU2tFQk9nQUVJQUlvQWdBZ0NEWUNCQ0FDS0FJQVFRQTJBZ0FnQ1VFUWFpUUFJQUFRUFNnQ0FDRUNJQUFRV1NFRkFrQWdBUVJBSUFKQkFXcXpJQVVxQWdBZ0FiT1VYa1VOQVFzZ0F5QUJFT0VCUVFGeklBRkJBWFJ5TmdJTUlBTUNmeUFBRUQwb0FnQkJBV3F6SUFBUVdTb0NBSldOSWd4REFBQ0FUMTBnREVNQUFBQUFZSEVFUUNBTXFRd0JDMEVBQ3pZQ0NDQURRUXhxSUFOQkNHb1FlU2dDQUNFQkl3QkJFR3NpQWlRQUlBSWdBVFlDREFKQUlBSWdBVUVCUmdSL1FRSUZJQUVnQVVFQmEzRkZEUUVnQVJDZ0Fnc2lBVFlDREFzQ1FDQUFFSTBCSWdVZ0FVa0VRQ0FBSUFFUTRnVU1BUXNnQVNBRlR3MEFJQVVRNFFFaEJnSi9JQUFRUFNnQ0FMTWdBQkJaS2dJQWxZMGlERU1BQUlCUFhTQU1Rd0FBQUFCZ2NRUkFJQXlwREFFTFFRQUxJUUVnQWdKL0lBWUVRQ0FCRVAwRERBRUxJQUVRb0FJTE5nSUlJQUlnQWtFTWFpQUNRUWhxRUhrb0FnQWlBVFlDRENBQklBVlBEUUFnQUNBQkVPSUZDeUFDUVJCcUpBQWdDQ0FBRUkwQklnRVFXeUVHQ3dKQUlBQWdCaEE3S0FJQUlnSkZCRUFnQXlnQ0VDQUFRUWhxSWdJb0FnQTJBZ0FnQUNBREtBSVFOZ0lJSUFBZ0JoQTdJQUkyQWdBZ0F5Z0NFQ2dDQUVVTkFTQURLQUlRSVFJZ0FDQURLQUlRS0FJQUtBSUVJQUVRV3hBN0lBSTJBZ0FNQVFzZ0F5Z0NFQ0FDS0FJQU5nSUFJQUlnQXlnQ0VEWUNBQXNnQTBFUWFpSUJFTGtCSVFJZ0FCQTlJZ0FnQUNnQ0FFRUJhallDQUNBRFFRRTZBQjhnQVNnQ0FDRUFJQUZCQURZQ0FDQUFCRUFnQVJCS0lnRXRBQVFFUUNBQktBSUFHZ3NnQUFSQUlBRW9BZ0FhSUFBUU13c0xDeUFLSUFOQkVHb2dBaEI5SUFOQkgyb1Fyd0lnQTBFZ2FpUUFJQVFnQnlnQ0NCQjlJQWN0QUF3NkFBUWdCMEVRYWlRQURBRUxJQVJCRUdvUWJ5SUFJQUFvQWdSQkFXbzJBZ1FMSUFSQklHb2tBQThMUWZDdkJFR05nd0VRTWtHTS93QVFNa0cvSEJBeVFhSUNFRFZCK1NBUU1rSEJoQUVRTWhBMkVBQUFDNUVFQVFOL0FrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBRkJBRTRFUUNBQUtBSTBJZ1VnQVV3TkFTQUNRUUJJRFFJZ0FDZ0NPQ0lHSUFKTURRTWdBMEVBU0EwRUlBQW9BandpQnlBRFRBMEZJQVJCQUVnTkJpQUFLQUpBSUFSTURRY2dBaUFGYkNBQmFpSUJJQUFvQWxRZ0EyeHFJQUFvQWxnZ0JHeHFJZ0FnQkNBSGJDQURhaUFGSUFac2JDQUJha29OQ0NBQUR3dEI4SzhFUVlHS0FSQXlRWXovQUJBeVFiOGNFREpCcFFFUU5VSDVJQkF5UWNlS0FSQXlFRFlNQ0F0QjhLOEVRWStOQVJBeVFZei9BQkF5UWI4Y0VESkJwZ0VRTlVINUlCQXlRY2VLQVJBeUVEWU1Cd3RCOEs4RVFlR09BUkF5UVl6L0FCQXlRYjhjRURKQnB3RVFOVUg1SUJBeVFkYVFBUkF5RURZTUJndEI4SzhFUWJlVEFSQXlRWXovQUJBeVFiOGNFREpCcUFFUU5VSDVJQkF5UWRhUUFSQXlFRFlNQlF0QjhLOEVRYmFXQVJBeVFZei9BQkF5UWI4Y0VESkJxUUVRTlVINUlCQXlRZk9XQVJBeUVEWU1CQXRCOEs4RVFlYVpBUkF5UVl6L0FCQXlRYjhjRURKQnFnRVFOVUg1SUJBeVFmT1dBUkF5RURZTUF3dEI4SzhFUWErY0FSQXlRWXovQUJBeVFiOGNFREpCcXdFUU5VSDVJQkF5UWEyZEFSQXlFRFlNQWd0QjhLOEVRWWlnQVJBeVFZei9BQkF5UWI4Y0VESkJyQUVRTlVINUlCQXlRYTJkQVJBeUVEWU1BUXRCOEs4RVFhU2pBUkF5UVl6L0FCQXlRYjhjRURKQnNBRVFOVUg1SUJBeVFjR0VBUkF5RURZTEVBQUFDd2tBSUFBZ0FUWUNBQXNLQUVHRDhnRVFyUUVBQ3dzQUlBQkJ0TGNFRU1zQkN4RUFJQUFnQVNBQktBSUFLQUlVRVFJQUN3OEFJQUFnQUNnQ0FDZ0NFQkVBQUFzUkFDQUFJQUVnQUNnQ0FDZ0NMQkVEQUF2TUNRSUVmZ1IvSXdCQjhBQnJJZ29rQUNBRVF2Ly8vLy8vLy8vLy93Q0RJUVVDUUFKQUlBRlFJZ2tnQWtMLy8vLy8vLy8vLy84QWd5SUdRb0NBZ0lDQWdNRC8vd0I5UW9DQWdJQ0FnTUNBZ0g5VUlBWlFHMFVFUUNBRFFnQlNJQVZDZ0lDQWdJQ0F3UC8vQUgwaUNFS0FnSUNBZ0lEQWdJQi9WaUFJUW9DQWdJQ0FnTUNBZ0g5Ukd3MEJDeUFKSUFaQ2dJQ0FnSUNBd1AvL0FGUWdCa0tBZ0lDQWdJREEvLzhBVVJ0RkJFQWdBa0tBZ0lDQWdJQWdoQ0VFSUFFaEF3d0NDeUFEVUNBRlFvQ0FnSUNBZ01ELy93QlVJQVZDZ0lDQWdJQ0F3UC8vQUZFYlJRUkFJQVJDZ0lDQWdJQ0FJSVFoQkF3Q0N5QUJJQVpDZ0lDQWdJQ0F3UC8vQUlXRVVBUkFRb0NBZ0lDQWdPRC8vd0FnQWlBQklBT0ZJQUlnQklWQ2dJQ0FnSUNBZ0lDQWY0V0VVQ0lKR3lFRVFnQWdBU0FKR3lFRERBSUxJQU1nQlVLQWdJQ0FnSURBLy84QWhZUlFEUUVnQVNBR2hGQUVRQ0FESUFXRVFnQlNEUUlnQVNBRGd5RURJQUlnQklNaEJBd0NDeUFESUFXRVVFVU5BQ0FCSVFNZ0FpRUVEQUVMSUFNZ0FTQUJJQU5VSUFVZ0JsWWdCU0FHVVJzaURCc2hCU0FFSUFJZ0RCc2lDRUwvLy8vLy8vOC9neUVHSUFJZ0JDQU1HeUlIUWpDSXAwSC8vd0Z4SVFzZ0NFSXdpS2RCLy84QmNTSUpSUVJBSUFwQjRBQnFJQVVnQmlBRklBWWdCbEFpQ1J0NUlBbEJCblN0ZktjaUNVRVBheENMQVNBS0tRTm9JUVlnQ2lrRFlDRUZRUkFnQ1dzaENRc2dBU0FESUF3YklRTWdCMEwvLy8vLy8vOC9neUVFSUF0RkJFQWdDa0hRQUdvZ0F5QUVJQU1nQkNBRVVDSUxHM2tnQzBFR2RLMThweUlMUVE5ckVJc0JRUkFnQzJzaEN5QUtLUU5ZSVFRZ0Npa0RVQ0VEQ3lBRVFnT0dJQU5DUFlpRVFvQ0FnSUNBZ0lBRWhDRUNJQVpDQTRZZ0JVSTlpSVFoQkNBRFFnT0dJUUVnQnlBSWhTRURBa0FnQ1NBTFJnMEFJQWtnQzJzaUMwSC9BRXNFUUVJQUlRSkNBU0VCREFFTElBcEJRR3NnQVNBQ1FZQUJJQXRyRUlzQklBcEJNR29nQVNBQ0lBc1FoUUlnQ2lrRE1DQUtLUU5BSUFvcEEwaUVRZ0JTcllRaEFTQUtLUU00SVFJTElBUkNnSUNBZ0lDQWdBU0VJUWNnQlVJRGhpRUdBa0FnQTBJQVV3UkFRZ0FoQTBJQUlRUWdBU0FHaFNBQ0lBZUZoRkFOQWlBR0lBRjlJUVVnQnlBQ2ZTQUJJQVpXclgwaUJFTC8vLy8vLy8vL0ExWU5BU0FLUVNCcUlBVWdCQ0FGSUFRZ0JGQWlDeHQ1SUF0QkJuU3RmS2RCREdzaUN4Q0xBU0FKSUF0cklRa2dDaWtES0NFRUlBb3BBeUFoQlF3QkN5QUJJQVo4SWdVZ0FWU3RJQUlnQjN4OElnUkNnSUNBZ0lDQWdBaURVQTBBSUFWQ0FZTWdCRUkvaGlBRlFnR0loSVFoQlNBSlFRRnFJUWtnQkVJQmlDRUVDeUFJUW9DQWdJQ0FnSUNBZ0grRElRRWdDVUgvL3dGT0JFQWdBVUtBZ0lDQWdJREEvLzhBaENFRVFnQWhBd3dCQzBFQUlRc0NRQ0FKUVFCS0JFQWdDU0VMREFFTElBcEJFR29nQlNBRUlBbEIvd0JxRUlzQklBb2dCU0FFUVFFZ0NXc1FoUUlnQ2lrREFDQUtLUU1RSUFvcEF4aUVRZ0JTcllRaEJTQUtLUU1JSVFRTElBUkNQWVlnQlVJRGlJUWlBaUFGcDBFSGNTSUpRUVJMclh3aUF5QUNWSzBnQkVJRGlFTC8vLy8vLy84L2d5QUxyVUl3aG9RZ0FZUjhJUVFDUUNBSlFRUkdCRUFnQkNBRFFnR0RJZ0VnQTN3aUF5QUJWSzE4SVFRTUFRc2dDVVVOQVFzTElBQWdBemNEQUNBQUlBUTNBd2dnQ2tId0FHb2tBQXQvQVFOL0lBQWhBUUpBSUFCQkEzRUVRQU5BSUFFdEFBQkZEUUlnQVVFQmFpSUJRUU54RFFBTEN3TkFJQUVpQWtFRWFpRUJJQUlvQWdBaUEwRi9jeUFEUVlHQ2hBaHJjVUdBZ1lLRWVIRkZEUUFMSUFOQi93RnhSUVJBSUFJZ0FHc1BDd05BSUFJdEFBRWhBeUFDUVFGcUlnRWhBaUFERFFBTEN5QUJJQUJyQ3dRQVFRQUxEZ0FnQUNBQktBSUFOZ0lBSUFBTEVRQWdBQ0FBS0FJQVFRaHFOZ0lBSUFBTERRQWdBQ0FEbENBQklBS1Vrd3NOQUNBQUtBSUFJQUZCSkd4cUN4QUFJQUFvQWdRZ0FDZ0NBR3RCQlhVTGZ3SUNmd0YrSXdCQkVHc2lBeVFBSUFBQ2ZpQUJSUVJBUWdBTUFRc2dBeUFCSUFGQkgzVWlBbk1nQW1zaUFxMUNBQ0FDWnlJQ1FkRUFhaENMQVNBREtRTUlRb0NBZ0lDQWdNQUFoVUdlZ0FFZ0FtdXRRakNHZkNBQlFZQ0FnSUI0Y2ExQ0lJYUVJUVFnQXlrREFBczNBd0FnQUNBRU53TUlJQU5CRUdva0FBdEJBUUovQWtBZ0FrVU5BQU5BSUFFZ0EwRURkR29vQWdBaUJFVU5BU0FBSUFSR0JFQWdBU0FEUVFOMGFpZ0NCQThMSUFOQkFXb2lBeUFDUncwQUN3dEJBQXN4QVFKOUlBRXFBZ0FnQUNvQ0FDSURreUFDS2dJRUlBQXFBZ1FpQkpPVUlBSXFBZ0FnQTVNZ0FTb0NCQ0FFazVTVEN3OEFJQUFvQWdnZ0FDZ0NBRFlDQUF1NEFnRURmeU1BUVVCcUlnTWtBQ0FBS0FJQUlnVkJCR3NvQWdBaEJDQUZRUWhyS0FJQUlRVWdBMElBTndNZ0lBTkNBRGNES0NBRFFnQTNBekFnQTBJQU53QTNJQU5DQURjREdDQURRUUEyQWhRZ0F5QUJOZ0lRSUFNZ0FEWUNEQ0FESUFJMkFnZ2dBQ0FGYWlFQVFRQWhBUUpBSUFRZ0FrRUFFSDRFUUNBRFFRRTJBamdnQkNBRFFRaHFJQUFnQUVFQlFRQWdCQ2dDQUNnQ0ZCRUxBQ0FBUVFBZ0F5Z0NJRUVCUmhzaEFRd0JDeUFFSUFOQkNHb2dBRUVCUVFBZ0JDZ0NBQ2dDR0JFR0FBSkFBa0FnQXlnQ0xBNENBQUVDQ3lBREtBSWNRUUFnQXlnQ0tFRUJSaHRCQUNBREtBSWtRUUZHRzBFQUlBTW9BakJCQVVZYklRRU1BUXNnQXlnQ0lFRUJSd1JBSUFNb0FqQU5BU0FES0FJa1FRRkhEUUVnQXlnQ0tFRUJSdzBCQ3lBREtBSVlJUUVMSUFOQlFHc2tBQ0FCQ3d3QUlBQWdBU2dDQURZQ0FBdGRBUU4vUVFnUUNoQzNCaUlEUWF6c0F6WUNBQ0FBRUtBQklnRkJEV29RVGlJQ1FRQTJBZ2dnQWlBQk5nSUVJQUlnQVRZQ0FDQURJQUlRUFNBQUlBRkJBV29RUHpZQ0JDQURJZ0JCM093RE5nSUFJQUJCL093RFFRd1FDUUFMUlFFQmZ5TUFRUkJySWdVa0FDQUZJQUkyQWd3Z0JTQUVOZ0lJSUFVZ0JVRU1haERLQVNFQ0lBQWdBU0FESUFVb0FnZ1FpUUloQUNBQ0VNa0JJQVZCRUdva0FDQUFDeVlCQVg4akFFRVFheUlCSkFBZ0FVRUlhaUFBRUQ0UWZTZ0NBQ0VBSUFGQkVHb2tBQ0FBQzIwQkFuOGdBQ2dDVEJvZ0FCREpBaG9nQUNBQUtBSU1FUUFBR2lBQUxRQUFRUUZ4UlFSQUlBQW9BalFpQVFSQUlBRWdBQ2dDT0RZQ09Bc2dBQ2dDT0NJQ0JFQWdBaUFCTmdJMEN5QUFRZkNYQkNnQ0FFWUVRRUh3bHdRZ0FqWUNBQXNnQUNnQ1lCQXpJQUFRTXdzTDNBRUJBWDBnQUNvQ0FDRUNJQUFnQVNvQ0FEZ0NBQ0FCSUFJNEFnQWdBQ29DQkNFQ0lBQWdBU29DQkRnQ0JDQUJJQUk0QWdRZ0FDb0NDQ0VDSUFBZ0FTb0NDRGdDQ0NBQklBSTRBZ2dnQUNvQ0RDRUNJQUFnQVNvQ0REZ0NEQ0FCSUFJNEFnd2dBQ29DRUNFQ0lBQWdBU29DRURnQ0VDQUJJQUk0QWhBZ0FDb0NGQ0VDSUFBZ0FTb0NGRGdDRkNBQklBSTRBaFFnQUNvQ0dDRUNJQUFnQVNvQ0dEZ0NHQ0FCSUFJNEFoZ2dBQ29DSENFQ0lBQWdBU29DSERnQ0hDQUJJQUk0QWh3Z0FDb0NJQ0VDSUFBZ0FTb0NJRGdDSUNBQklBSTRBaUFMRFFBZ0FDZ0NBQ0FCS0FJQVJnc1JBQ0FBSUFFZ0FTZ0NBQ2dDR0JFQ0FBc1FBQ0FBSUFGQmdJQ0FnSGh5TmdJSUN4TUFJQUFnQVNBQ0lBQW9BZ0FvQWd3UkJBQUxKd0VCZnlBQ1FRQk9CSDhnQUNnQ0NDQUNRZjhCY1VFQmRHb3ZBUUFnQVhGQkFFY0ZRUUFMQ3hBQUlBSUVRQ0FBSUFFZ0FoQS9HZ3NMRUFBZ0FDZ0NCQ0FBS0FJQWEwRUVkUXNVQVFGL0lBQW9BZ0FoQVNBQVFRQTJBZ0FnQVFzTEFDQUFJQUZCQXhEckJnc1BBQ0FBRUlzRFFRUnFJQUVRZlJvTEVnQWdBQkEwS0FJQUlBQW9BZ0JyUVF4dEN3Y0FJQUFRUkJvTER3QWdBQ0FBS0FJQUtBSU1FUUFBQ3djQUlBQWdBVVlMQndBZ0FCQTNSUXNSQUNBQUlBRWdBU2dDQUNnQ0hCRUNBQXNJQUNBQVFmOEJjUXRCQVFGL0lBQWdBVGNEY0NBQUlBQW9BaXdnQUNnQ0JDSUNhNnczQTNnZ0FDQUJVQ0FBS0FJSUlnQWdBbXVzSUFGWGNnUi9JQUFGSUFJZ0FhZHFDellDYUFzS0FDQUFRVEJyUVFwSkMwc0JBbndnQUNBQW9pSUJJQUNpSWdJZ0FTQUJvcUlnQVVTblJqdU1oODNHUHFKRWRPZks0dmtBS3IrZ29pQUNJQUZFc3Z0dWlSQVJnVCtpUkhlc3kxUlZWY1cvb0tJZ0FLQ2d0Z3RQQVFGOElBQWdBS0lpQUNBQUlBQ2lJZ0dpSUFCRWFWRHU0RUtUK1Q2aVJDY2VEK2lId0ZhL29LSWdBVVJDT2dYaFUxV2xQNklnQUVTQlhnejkvLy9mdjZKRUFBQUFBQUFBOEQrZ29LQzJDeGtBSUFBZ0FVSEMzd0ZCMC9jRFFhanRBMEdrN1FNUXFRUUxGUUFnQUNBQkVMc0dJQUJCQkdvZ0FVRUVhaEJHQ3hJQUlBQW9BZ0FpQUFSQUlBQVF3d1FhQ3dzUkFDQUFJQUVvQWdBUXd3UTJBZ0FnQUF0Q0FRRi9JQUFvQWdBaEFpQUJFR0loQUNBQ1FRaHFJZ0VRUXlBQVN3Ui9JQUVnQUJBN0tBSUFRUUJIQlVFQUMwVUVRQkJWQUFzZ0FrRUlhaUFBRURzb0FnQUxOZ0FnQWdSL0lBSUVRQU5BSUFBZ0FTZ0NBRFlDQUNBQVFRUnFJUUFnQVVFRWFpRUJJQUpCQVdzaUFnMEFDd3RCQUFVZ0FBc2FDL29CQWdOK0FuOGpBRUVRYXlJRkpBQUNmaUFCdlNJRFF2Ly8vLy8vLy8vLy93Q0RJZ0pDZ0lDQWdJQ0FnQWg5UXYvLy8vLy8vLy92L3dCWUJFQWdBa0k4aGlFRUlBSkNCSWhDZ0lDQWdJQ0FnSUE4ZkF3QkN5QUNRb0NBZ0lDQWdJRDQvd0JhQkVBZ0EwSThoaUVFSUFOQ0JJaENnSUNBZ0lDQXdQLy9BSVFNQVFzZ0FsQUVRRUlBREFFTElBVWdBa0lBSUFPblowRWdhaUFDUWlDSXAyY2dBa0tBZ0lDQUVGUWJJZ1pCTVdvUWl3RWdCU2tEQUNFRUlBVXBBd2hDZ0lDQWdJQ0F3QUNGUVl6NEFDQUdhNjFDTUlhRUN5RUNJQUFnQkRjREFDQUFJQUlnQTBLQWdJQ0FnSUNBZ0lCL2c0UTNBd2dnQlVFUWFpUUFDMElCQVg4Z0FTQUNiQ0VFSUFRQ2Z5QURLQUpNUVFCSUJFQWdBQ0FFSUFNUTJnTU1BUXNnQUNBRUlBTVEyZ01MSWdCR0JFQWdBa0VBSUFFYkR3c2dBQ0FCYmd0M0FDQUFJQUVxQWdBZ0FwUTRBZ0FnQUNBQktnSUVJQUtVT0FJRUlBQWdBU29DQ0NBQ2xEZ0NDQ0FBSUFFcUFnd2dBcFE0QWd3Z0FDQUJLZ0lRSUFLVU9BSVFJQUFnQVNvQ0ZDQUNsRGdDRkNBQUlBRXFBaGdnQXBRNEFoZ2dBQ0FCS2dJY0lBS1VPQUljSUFBZ0FTb0NJQ0FDbERnQ0lBc0pBQ0FCSUFJUXNnRUxQUUVCZnlBQUtBSUVJZ0FFUUNBQUVOZ0NCRUFDUUNBQVFRaHFJZ0VvQWdBRVFDQUJFUGdEUVg5SERRRUxJQUFnQUNnQ0FDZ0NFQkVCQUFzTEN3c1JBQ0FBSUFBb0FnQkJDR3MyQWdBZ0FBc1NBQ0FBRURRb0FnQWdBQ2dDQUd0QkFuVUxFZ0FnQUJBMEtBSUFJQUFvQWdCclFRTjFDMWtCQW44akFFRVFheUlDSkFBZ0FCQ0dBUVJBSUFBb0FnQWhBeUFBRU9vQkdpQURFRE1MSUFBZ0FTZ0NDRFlDQ0NBQUlBRXBBZ0EzQWdBZ0FVRUFFSThCSUFKQkFEWUNEQ0FCSUFKQkRHb1FyQUVnQWtFUWFpUUFDNzhCQVFOL0l3QkJFR3NpQlNRQUlBVWdBVFlDQ0VFQUlRRkJCaUVHQWtBQ1FDQUFJQVZCQ0dvUWVnMEFRUVFoQmlBRFFZQVFJQUFRYUNJSEVMVUJSUTBBSUFNZ0J4QzhBaUVCQTBBQ1FDQUFFSFVhSUFGQk1Hc2hBU0FBSUFWQkNHb1FrQUZGSUFSQkFraHlEUUFnQTBHQUVDQUFFR2dpQmhDMUFVVU5BeUFFUVFGcklRUWdBeUFHRUx3Q0lBRkJDbXhxSVFFTUFRc0xRUUloQmlBQUlBVkJDR29RZWtVTkFRc2dBaUFDS0FJQUlBWnlOZ0lBQ3lBRlFSQnFKQUFnQVF1L0FRRURmeU1BUVJCcklnVWtBQ0FGSUFFMkFnaEJBQ0VCUVFZaEJnSkFBa0FnQUNBRlFRaHFFSHNOQUVFRUlRWWdBMEdBRUNBQUVHa2lCeEMyQVVVTkFDQURJQWNRdlFJaEFRTkFBa0FnQUJCMkdpQUJRVEJySVFFZ0FDQUZRUWhxRUpFQlJTQUVRUUpJY2cwQUlBTkJnQkFnQUJCcElnWVF0Z0ZGRFFNZ0JFRUJheUVFSUFNZ0JoQzlBaUFCUVFwc2FpRUJEQUVMQzBFQ0lRWWdBQ0FGUVFocUVIdEZEUUVMSUFJZ0FpZ0NBQ0FHY2pZQ0FBc2dCVUVRYWlRQUlBRUxuQUVCQTM4akFFRVFheUlFSkFBZ0JDQUJOZ0lNSUFRZ0F6WUNDQ0FFSUFSQkRHb1F5Z0VoQmlBRUtBSUlJUU1qQUVFUWF5SUJKQUFnQVNBRE5nSU1JQUVnQXpZQ0NFRi9JUVVDUUVFQVFRQWdBaUFERUlrQ0lnTkJBRWdOQUNBQUlBTkJBV29pQXhBNUlnQTJBZ0FnQUVVTkFDQUFJQU1nQWlBQktBSU1FSWtDSVFVTElBRkJFR29rQUNBRklRQWdCaERKQVNBRVFSQnFKQUFnQUF0akFDQUNLQUlFUWJBQmNTSUNRU0JHQkVBZ0FROExBa0FnQWtFUVJ3MEFBa0FDUUNBQUxRQUFJZ0pCSzJzT0F3QUJBQUVMSUFCQkFXb1BDeUFDUVRCSElBRWdBR3RCQWtoeURRQWdBQzBBQVVFZ2NrSDRBRWNOQUNBQVFRSnFJUUFMSUFBTExnQUNRQ0FBS0FJRVFjb0FjU0lBQkVBZ0FFSEFBRVlFUUVFSUR3c2dBRUVJUncwQlFSQVBDMEVBRHd0QkNnc1BBQ0FBRURRb0FnQWdBQ2dDQUdzTEVnQWdBQkEwS0FJQUlBQW9BZ0JyUVJSdEMvUUJBUUovSUFJZ0JFZ0VRQ0FBSUFFZ0FpQUVFR3BGQkVCQmZ3OExJQUFvQWd3aEFpQUFLQUlJSVFFTElBUkJBblFpQmtIQXV3SnFLQUlBSUFFZ0FpQUVheUlDZFhFaUJTQURJQVpxS0FJQVNnUkFBMEFnQWtFQVRBUkFJQUFnQVNBQ1FRRVFha1VFUUVGL0R3c2dBQ2dDRENFQ0lBQW9BZ2doQVFzZ0FTQUNRUUZySWdKMlFRRnhJQVZCQVhSeUlnVWdBeUFFUVFGcUlnUkJBblJxS0FJQVNnMEFDd3NnQUNBQ05nSU1JQUFnQVRZQ0NDQUVRUkZPQkVBZ0FDZ0NFQ0lBS0FJQUlnRkIrUUEyQWhRZ0FFRi9JQUVvQWdRUkFnQkJBQThMSUFNb0Fvd0JJQU1nQkVFQ2RHb29Ba2dnQldwcUxRQVJDeFFCQVg5QkNCQk9JZ0VnQUNrQ0FEY0RBQ0FCQ3ljQkFYOGpBRUVRYXlJQ0pBQWdBRUVDUWJDdEFrR0Fwd0pCMWdBZ0FSQUdJQUpCRUdva0FBdlBBUUlCZndKOUlBQWdBU0FCSUFKQkFuUWlBMm9pQWlvQ0FJd1F6d0VnQUNBRGFpSURJQU1xQWdCREFBQ0FQNUk0QWdBZ0FDQUJRU1JxSUFJcUFpU01FSTBDSUFBZ0FVSElBR29nQWlvQ1NJd1FqUUlnQUNBQlFld0FhaUFDS2dKc2pCQ05BaUFBSUFGQmtBRnFJQUlxQXBBQmpCQ05BaUFBSUFGQnRBRnFJQUlxQXJRQmpCQ05BaUFBSUFGQjJBRnFJQUlxQXRnQmpCQ05BaUFBSUFGQi9BRnFJQUlxQXZ3QmpCQ05BaUFBRUZnaUJFTUFBQUFBWEFSQUlBQWdBRU1BQUlBL0lBU1JJZ1dWRU04QkN5QUZDeEVBSUFBZ0FFRUJhM0ZGSUFCQkFrdHhDN0lCQVFWL0FuOGdBa01BQUFBL2tpSUNpME1BQUFCUFhRUkFJQUtvREFFTFFZQ0FnSUI0Q3lFRklBQW9BaFFoQ0VGL0lRWUNRQUovSUFGREFBQUFQNUlpQVl0REFBQUFUMTBFUUNBQnFBd0JDMEdBZ0lDQWVBc2dBQ2dDRUdvaUIwRUFTQTBBSUFjZ0FDZ0NDQ0lKVGcwQUlBVWdDR29pQlVFQVNBMEFJQVVnQUNnQ0RFNE5BQ0FESUFBb0FnUWdCU0FKYkNBSGFrRURkR29pQUNvQ0FEZ0NBQ0FFSUFBcUFnUTRBZ0JCQUNFR0N5QUdDOTRDQVFSL0FuMGdBQ0FCa2lBQXZFSC8vLy8vQjNGQmdZQ0EvQWRKSUFHOFFmLy8vLzhIY1VHQWdJRDhCMDF4UlEwQUdpQUJ2Q0lDUVlDQWdQd0RSZ1JBSUFBUW53VU1BUXNnQWtFZWRrRUNjU0lGSUFDOElnTkJIM1p5SVFRQ1FBSkFJQU5CLy8vLy93ZHhJZ05GQkVBQ1FBSkFJQVJCQW1zT0FnQUJBd3REMnc5SlFBd0VDMFBiRDBuQURBTUxJQUpCLy8vLy93ZHhJZ0pCZ0lDQS9BZEhCRUJEMncvSlB5QUFtQ0FDUlEwREdrUGJEOGsvSUFDWUlBTkJnSUNBL0FkSElBSkJnSUNBNkFCcUlBTlBjVVVOQXhvQ2ZTQUZCRUJEQUFBQUFDQURRWUNBZ09nQWFpQUNTUTBCR2dzZ0FDQUJsWXNRbndVTElRQUNRQUpBQWtBZ0JBNERCQUFCQWdzZ0FJd01CUXREMnc5SlFDQUFReTY5dXpPU2t3d0VDeUFBUXk2OXV6T1NROXNQU2NDU0RBTUxJQU5CZ0lDQS9BZEdEUUVnQkVFQ2RFR0Ewd0pxS2dJQUlRQUxJQUFNQVFzZ0JFRUNkRUh3MGdKcUtnSUFDd3NzQVFGL0lBQVE0d0lnQUNnQ0FBUkFJQUFRMndZZ0FCQTBHaUFBS0FJQUlRRWdBQkRVQVJvZ0FSQXpDd3NEQUFFTHl3TUJBMzhqQUVFZ2F5SUlKQUFnQ0NBQ05nSVFJQWdnQVRZQ0dDQUlRUWhxSWdFZ0F4QlBJQUVRbFFFaENTQUJFRWNnQkVFQU5nSUFRUUFoQWdKQUEwQWdCaUFIUmlBQ2NnMEJBa0FnQ0VFWWFpQUlRUkJxRUhvTkFBSkFJQWtnQmlnQ0FCQzhBa0VsUmdSQUlBWkJCR29pQWlBSFJnMENRUUFoQ2dKL0lBa2dBaWdDQUJDOEFpSUJRY1VBUmlBQlFmOEJjVUV3Um5KRkJFQWdCaUVDSUFFTUFRc2dCa0VJYWlBSFJnMERJQUVoQ2lBSklBWW9BZ2dRdkFJTElRRWdDQ0FBSUFnb0FoZ2dDQ2dDRUNBRElBUWdCU0FCSUFvZ0FDZ0NBQ2dDSkJFTkFEWUNHQ0FDUVFocUlRWU1BUXNnQ1VHQXdBQWdCaWdDQUJDMUFRUkFBMEFDUUNBSElBWkJCR29pQmtZRVFDQUhJUVlNQVFzZ0NVR0F3QUFnQmlnQ0FCQzFBUTBCQ3dzRFFDQUlRUmhxSUFoQkVHb1FrQUZGRFFJZ0NVR0F3QUFnQ0VFWWFoQm9FTFVCUlEwQ0lBaEJHR29RZFJvTUFBc0FDeUFKSUFoQkdHb1FhQkNFQVNBSklBWW9BZ0FRaEFGR0JFQWdCa0VFYWlFR0lBaEJHR29RZFJvTUFRc2dCRUVFTmdJQUN5QUVLQUlBSVFJTUFRc0xJQVJCQkRZQ0FBc2dDRUVZYWlBSVFSQnFFSG9FUUNBRUlBUW9BZ0JCQW5JMkFnQUxJQWdvQWhnaEFDQUlRU0JxSkFBZ0FBdkxBd0VEZnlNQVFTQnJJZ2drQUNBSUlBSTJBaEFnQ0NBQk5nSVlJQWhCQ0dvaUFTQURFRThnQVJDYkFTRUpJQUVRUnlBRVFRQTJBZ0JCQUNFQ0FrQURRQ0FHSUFkR0lBSnlEUUVDUUNBSVFSaHFJQWhCRUdvUWV3MEFBa0FnQ1NBR0xBQUFFTDBDUVNWR0JFQWdCa0VCYWlJQ0lBZEdEUUpCQUNFS0FuOGdDU0FDTEFBQUVMMENJZ0ZCeFFCR0lBRkIvd0Z4UVRCR2NrVUVRQ0FHSVFJZ0FRd0JDeUFHUVFKcUlBZEdEUU1nQVNFS0lBa2dCaXdBQWhDOUFnc2hBU0FJSUFBZ0NDZ0NHQ0FJS0FJUUlBTWdCQ0FGSUFFZ0NpQUFLQUlBS0FJa0VRMEFOZ0lZSUFKQkFtb2hCZ3dCQ3lBSlFZREFBQ0FHTEFBQUVMWUJCRUFEUUFKQUlBY2dCa0VCYWlJR1JnUkFJQWNoQmd3QkN5QUpRWURBQUNBR0xBQUFFTFlCRFFFTEN3TkFJQWhCR0dvZ0NFRVFhaENSQVVVTkFpQUpRWURBQUNBSVFSaHFFR2tRdGdGRkRRSWdDRUVZYWhCMkdnd0FDd0FMSUFrZ0NFRVlhaEJwRUw0RElBa2dCaXdBQUJDK0EwWUVRQ0FHUVFGcUlRWWdDRUVZYWhCMkdnd0JDeUFFUVFRMkFnQUxJQVFvQWdBaEFnd0JDd3NnQkVFRU5nSUFDeUFJUVJocUlBaEJFR29RZXdSQUlBUWdCQ2dDQUVFQ2NqWUNBQXNnQ0NnQ0dDRUFJQWhCSUdva0FDQUFDeFlBSUFBZ0FTQUNJQU1nQUNnQ0FDZ0NNQkVJQUJvTG9BRUJCSDhqQUVFUWF5SUhKQUFDUUNBQVJRMEFJQVFvQWd3aEJpQUNJQUZySWdoQkFFb0VRQ0FBSUFFZ0NCREFBaUFJUncwQkN5QUdJQU1nQVdzaUFXdEJBQ0FCSUFaSUd5SUJRUUJLQkVBZ0FDQUhJQUVnQlJDK0J5SUZFRDRnQVJEQUFpRUdJQVVRT0JvZ0FTQUdSdzBCQ3lBRElBSnJJZ0ZCQUVvRVFDQUFJQUlnQVJEQUFpQUJSdzBCQ3lBRUVMc0hJQUFoQ1FzZ0IwRVFhaVFBSUFrTERnQWdBQ2dDQ0VILy8vLy9CM0VMS0FFQmZ5TUFRUkJySWdNa0FDQURJQUkyQWd3Z0FDQUJJQUlRK3dRaEFDQURRUkJxSkFBZ0FBdW9BUUFDUUNBQlFZQUlUZ1JBSUFCRUFBQUFBQUFBNEgraUlRQWdBVUgvRDBrRVFDQUJRZjhIYXlFQkRBSUxJQUJFQUFBQUFBQUE0SCtpSVFBZ0FVSDlGeUFCUWYwWFNCdEIvZzlySVFFTUFRc2dBVUdCZUVvTkFDQUFSQUFBQUFBQUFHQURvaUVBSUFGQnVIQkxCRUFnQVVISkIyb2hBUXdCQ3lBQVJBQUFBQUFBQUdBRG9pRUFJQUZCOEdnZ0FVSHdhRW9iUVpJUGFpRUJDeUFBSUFGQi93ZHFyVUkwaHIraUN4QUFJQUJCSUVZZ0FFRUphMEVGU1hJTEJBQWdBQXNVQVFGL1FRUVFUaUlCSUFBb0FnQTJBZ0FnQVFzVEFDQUFRZUw0QTBHdzdRTkJyTzBERVBNR0Mya0JBbjBnQUNBQktnSUlJQUVxQWdBZ0Fpb0NBQ0lEbENBQ0tnSUVJZ1FnQVNvQ0JKU1NraUFCS2dJZ0lBRXFBaGdnQTVRZ0FTb0NIQ0FFbEpLU0lnT1ZPQUlBSUFBZ0FTb0NGQ0FCS2dJTUlBSXFBZ0NVSUFFcUFoQWdBaW9DQkpTU2tpQURsVGdDQkFzU0FDQUFJQUkyQWdRZ0FDQUJOZ0lBSUFBTG5BSUNCSDhGZkNBQUlBTkJBblFpQjJvb0FnQWlDQ0FCSUFKQkFuUWlDV29vQWdBaUNtd2dBQ0FKYWlnQ0FDSUpJQUVnQjJvb0FnQWlCMnhydHlFUElBa2dDR3UzSVF3Z0J5QUthN2NoRFNBQ1FRRnFJZ2NoQ0FOQUlBTWdCMHhGQkVBZ0RTQUFJQWRCQW5RaUNXb29BZ0Mzb2lBTUlBRWdDV29vQWdDM29xQWdENkFpRGlBT29pSU9JQXNnQ3lBT1l5SUpHeUVMSUFjZ0NDQUpHeUVJSUFkQkFXb2hCd3dCQ3dzQ1FDQUVJQXNnRFNBTm9pQU1JQXlpb0tOakJFQkJmeUVISUFBZ0FTQUNJQWdnQkNBRklBWVE4d0ZCQUVnTkFTQUdLQUlBSWdKQkJVb05BU0FGSUFKQkFuUnFJQWcyQWdBZ0JpQUdLQUlBUVFGcU5nSUFJQUFnQVNBSUlBTWdCQ0FGSUFZUTh3RkJBRWdOQVF0QkFDRUhDeUFIQ3d3QUlBRWdBaWdDQURZQ0FBc09BQ0FBSUFFZ0FrRUNkQkEvR2dzSkFDQUFJQUVRb2dFTEVnQWdBQkEwS0FJQUlBQW9BZ0JyUVNSdEN6Y0JBWDhqQUVFUWF5SUNKQUFnQWlBQUtBSUFOZ0lJSUFJZ0FpZ0NDQ0FCUVFOMGFqWUNDQ0FDS0FJSUlRQWdBa0VRYWlRQUlBQUxnZ0VCQVg4Q1FDQUJJQUFvQWhCSkJFQWdBQ2dDRkNJRElBSk5EUUVnQUVFRWFpQUJJQU5zSUFKcUVFd1BDMEh3cndSQjdhNEJFREpCbWE4QkVESkJ2eHdRTWtIYUFSQTFRZmtnRURKQnJyQUJFRElRTmhBQUFBdEI4SzhFUWZHd0FSQXlRWm12QVJBeVFiOGNFREpCMndFUU5VSDVJQkF5UWFTeEFSQXlFRFlRQUFBTERRQWdBQ2dDQUNBQktBSUFTUXNyQVFGL0lBQW9BZ1FoQXdOQUlBRWdBMGNFUUNBQUVEUWFJQU1nQW1zaEF3d0JDd3NnQUNBQk5nSUVDeVFCQW44akFFRVFheUlDSkFBZ0FTQUFFUG9CSVFNZ0FrRVFhaVFBSUFFZ0FDQURHd3NQQUNBQUlBQW9BZ0FvQWlRUkFBQUxFUUFnQUNBQklBRW9BZ0FvQWlBUkFnQUxFUUFnQUNBQklBRW9BZ0FvQWl3UkFnQUxEQUFnQUVHQ2hvQWdOZ0FBQ3k0QkFYOGpBRUVRYXlJQkpBQWdBVUVJYWlBQUVENGdBQkEzUVFKMGFoQjlLQUlBSVFBZ0FVRVFhaVFBSUFBTEt3RUJmeU1BUVJCcklnRWtBQ0FCUVFocUlBQVFQaUFBRURkcUVIMG9BZ0FoQUNBQlFSQnFKQUFnQUFzV0FDQUFJQUVnQWlBRElBQW9BZ0FvQWlBUkNBQWFDeWtBSUFCQkNIUkJnSUQ4QjNFZ0FFRVlkSElnQUVFSWRrR0EvZ054SUFCQkdIWnljaUFBSUFFYkMxQUJBWDRDUUNBRFFjQUFjUVJBSUFJZ0EwRkFhcTJJSVFGQ0FDRUNEQUVMSUFORkRRQWdBa0hBQUNBRGE2MkdJQUVnQTYwaUJJaUVJUUVnQWlBRWlDRUNDeUFBSUFFM0F3QWdBQ0FDTndNSUN6UUFJQUFvQWdBYUlBQW9BZ0FnQUJDOEFVRU1iR29hSUFBb0FnQWdBQkJXUVF4c2Fob2dBQ2dDQUNBQUVMd0JRUXhzYWhvTDJ3RUNBWDhDZmtFQklRUUNRQ0FBUWdCU0lBRkMvLy8vLy8vLy8vLy9BSU1pQlVLQWdJQ0FnSURBLy84QVZpQUZRb0NBZ0lDQWdNRC8vd0JSR3cwQUlBSkNBRklnQTBMLy8vLy8vLy8vLy84QWd5SUdRb0NBZ0lDQWdNRC8vd0JXSUFaQ2dJQ0FnSUNBd1AvL0FGRWJEUUFnQUNBQ2hDQUZJQWFFaEZBRVFFRUFEd3NnQVNBRGcwSUFXUVJBUVg4aEJDQUFJQUpVSUFFZ0ExTWdBU0FEVVJzTkFTQUFJQUtGSUFFZ0E0V0VRZ0JTRHd0QmZ5RUVJQUFnQWxZZ0FTQURWU0FCSUFOUkd3MEFJQUFnQW9VZ0FTQURoWVJDQUZJaEJBc2dCQXRTQVFKL1FlenZBeWdDQUNJQklBQkJBMnBCZkhFaUFtb2hBQUpBSUFKQkFDQUFJQUZOR3cwQUlBQS9BRUVRZEVzRVFDQUFFQ0ZGRFFFTFFlenZBeUFBTmdJQUlBRVBDMEh3bGdSQk1EWUNBRUYvQzZJQkFRSi9Jd0JCb0FGcklnUWtBRUYvSVFVZ0JDQUJRUUZyUVFBZ0FSczJBcFFCSUFRZ0FDQUVRWjRCYWlBQkd5SUFOZ0tRQVNBRVFRQkJrQUVRT2lJRVFYODJBa3dnQkVHRkFqWUNKQ0FFUVg4MkFsQWdCQ0FFUVo4QmFqWUNMQ0FFSUFSQmtBRnFOZ0pVQWtBZ0FVRUFTQVJBUWZDV0JFRTlOZ0lBREFFTElBQkJBRG9BQUNBRUlBSWdBMEdEQWtHRUFoQ0lCU0VGQ3lBRVFhQUJhaVFBSUFVTENRQWdBQ0FCRU1VRkN4SUFJQUFRTkNnQ0FDQUFLQUlBYTBFRWRRdW1Bd0lDZndGOUlBRUNmeUFERU44R2ppSUdpME1BQUFCUFhRUkFJQWFvREFFTFFZQ0FnSUI0Q3lJRU5nSUFJQUlDZnlBRFFRRWdCSFN5bFJDbkFpQUFLZ0ljbEJEZUJpSURpME1BQUFCUFhRUkFJQU9vREFFTFFZQ0FnSUI0Q3lJRU5nSUFJQVFnQUNnQ0ZFRUJhMFlFUUNBQklBRW9BZ0JCQVdvMkFnQWdBa0VBTmdJQVFRQWhCQXNDUUNBQ0FuOGdBU2dDQUNJQ1FRQklCRUFnQVVFQU5nSUFRUUFNQVFzZ0FpQUFLQUlRSWdWSURRRWdBU0FGUVFGck5nSUFJQUFvQWhSQkFXc0xJZ1EyQWdBTEFrQUNRQUpBSUFFb0FnQWlBVUVBVGdSQUlBRWdBQ2dDRUU0TkFTQUVRUUJJRFFJZ0JDQUFLQUlVVGcwRER3dEI4SzhFUWZISUFCQXlRYmpNQUJBeVFkc2dFREpCakFJUU5VSDJKUkF5UWJYU0FCQXlFRFlRQUFBTFFmQ3ZCRUc3MXdBUU1rRzR6QUFRTWtIYklCQXlRWTBDRURWQjlpVVFNa0hQMmdBUU1oQTJFQUFBQzBId3J3UkIvZXdBRURKQnVNd0FFREpCMnlBUU1rR09BaEExUWZZbEVESkJrTzhBRURJUU5oQUFBQXRCOEs4RVFaUHpBQkF5UWJqTUFCQXlRZHNnRURKQmp3SVFOVUgySlJBeVFaYjNBQkF5RURZUUFBQUxyUUVBSUFBZ0FTb0NBQ0FDbENBQUtnSUFramdDQUNBQUlBRXFBZ1FnQXBRZ0FDb0NCSkk0QWdRZ0FDQUJLZ0lJSUFLVUlBQXFBZ2lTT0FJSUlBQWdBU29DRENBQ2xDQUFLZ0lNa2pnQ0RDQUFJQUVxQWhBZ0FwUWdBQ29DRUpJNEFoQWdBQ0FCS2dJVUlBS1VJQUFxQWhTU09BSVVJQUFnQVNvQ0dDQUNsQ0FBS2dJWWtqZ0NHQ0FBSUFFcUFod2dBcFFnQUNvQ0hKSTRBaHdnQUNBQktnSWdJQUtVSUFBcUFpQ1NPQUlnQ3c4QUlBQWdBQ2dDQUVFRWFqWUNBQXNMQUNBQVFSQnFJQUVRYlFzU0FDQUFRUVJxSUFBb0FnQWdBV3dRcndVTGt3RUJBbjhnQVNBQUVFTWlBa3NFUUNNQVFTQnJJZ01rQUFKQUlBRWdBbXNpQVNBQUVEUW9BZ0FnQUNnQ0JHdEJBblZOQkVBZ0FDQUJFS1lEREFFTElBQVFOQ0VDSUFOQkNHb2dBQ0FBRUVNZ0FXb1E0Z0lnQUJCRElBSVEyUUlpQWlBQkVNMEdJQUFnQWhEaEFpQUNFTFlDQ3lBRFFTQnFKQUFQQ3lBQklBSkpCRUFnQUNBQUtBSUFJQUZCQW5ScUVKOEVDd3VVQVFFRWZ5TUFRUkJySWdFa0FDTUFRUkJySWdJa0FDQUNRUUEyQWd3Z0FDQUNRUXhxRUtJQklnQkJCR29oQkNNQVFSQnJJZ01rQUNBRFFRQTJBZ3dnQkNBRFFReHFFS0lCR2lBRFFSQnFKQUFnQWtFUWFpUUFJQUJCQ0dwQkFEWUNBQ0FCUVFBMkFnd2dBRUVNYWlBQlFReHFFS0lCR2lBQlFZQ0FnUHdETmdJRUlBQWdBU29DQkRnQ0VDQUJRUkJxSkFBZ0FBc1NBQ0FBRURRb0FnQWdBQ2dDQUd0QkFYVUxFQUFnQUNnQ0JDQUFLQUlBYTBFQmRRc1NBQ0FBRURRb0FnQWdBQ2dDQUd0QkJYVUxGZ0VCZnlBQUVFSWhBU0FBRU5zR0lBQWdBUkNWQkF2MEFRRUhmeUFCSUFBUVF5SUNTd1JBSXdCQklHc2lCaVFBQWtBZ0FTQUNheUlESUFBUU5DZ0NBQ0FBS0FJRWEwRUNkVTBFUUNBQUlBTVFwZ01NQVFzZ0FCQTBJUVFnQUNBQUVFTWdBMm9RNGdJaEJTQUFFRU1oQ0VFQUlRSWpBRUVRYXlJSEpBQWdCMEVBTmdJTUlBWkJDR29pQVVFTWFpQUVFTHNCSUFVRVFDQUJLQUlRSUFVUXl3WWhBZ3NnQVNBQ05nSUFJQUVnQWlBSVFRSjBhaUlFTmdJSUlBRWdCRFlDQkNBQkVEMGdBaUFGUVFKMGFqWUNBQ0FIUVJCcUpBQWdBU0FERU0wR0lBQWdBUkRoQWlBQkVMWUNDeUFHUVNCcUpBQVBDeUFCSUFKSkJFQWdBQ0FBS0FJQUlBRkJBblJxRUo4RUN3c25BQ0FESUFNb0FnQWdBaUFCYXlJQWF5SUNOZ0lBSUFCQkFFb0VRQ0FDSUFFZ0FCQS9HZ3NMR1FBZ0FCQ0dBUVJBSUFBZ0FSQ0pBUThMSUFBZ0FSQ1BBUXV0QVFFRWZ5TUFRUkJySWdna0FBSkFJQUJGRFFBZ0JDZ0NEQ0VHSUFJZ0FXc2lCMEVBU2dSQUlBQWdBU0FIUVFKMklnY1F3QUlnQjBjTkFRc2dCaUFESUFGclFRSjFJZ0ZyUVFBZ0FTQUdTQnNpQVVFQVNnUkFJQUFnQ0NBQklBVVF0UWNpQlJBK0lBRVF3QUloQmlBRkVEZ2FJQUVnQmtjTkFRc2dBeUFDYXlJQlFRQktCRUFnQUNBQ0lBRkJBbllpQVJEQUFpQUJSdzBCQ3lBRUVMc0hJQUFoQ1FzZ0NFRVFhaVFBSUFrTExBQUNRQ0FBSUFGR0RRQURRQ0FBSUFGQkFXc2lBVThOQVNBQUlBRVFxZ2NnQUVFQmFpRUFEQUFMQUFzTEN3QWdBRUhjdHdRUXl3RUxKQUFnQUVFTFR3Ui9JQUJCRUdwQmNIRWlBQ0FBUVFGcklnQWdBRUVMUmhzRlFRb0xDdzhBSUFBZ0FDZ0NBQ2dDSEJFQUFBc2tBUUovSXdCQkVHc2lBaVFBSUFFZ0FCRGxCQ0VESUFKQkVHb2tBQ0FCSUFBZ0F4c0x0Z3dCQm44akFFRVFheUlFSkFBZ0JDQUFOZ0lNQWtBZ0FFSFRBVTBFUUVHd2l3TkI4SXdESUFSQkRHb1E4UVFvQWdBaEFnd0JDeUFBUVh4UEJFQVFWUUFMSUFRZ0FDQUFRZElCYmlJR1FkSUJiQ0lDYXpZQ0NFSHdqQU5Cc0k0RElBUkJDR29ROFFSQjhJd0RhMEVDZFNFRkEwQWdCVUVDZEVId2pBTnFLQUlBSUFKcUlRSkJCU0VBQWtBRFFBSkFJQUJCTDBZRVFFSFRBU0VBQTBBZ0FpQUFiaUlCSUFCSkRRUWdBaUFBSUFGc1JnMENJQUlnQUVFS2FpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVFTWFpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVFUWFpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVFU2FpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVFV2FpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVFY2FpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVFZWFpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVFa2FpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVFb2FpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVFcWFpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVFdWFpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVFMGFpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVFNmFpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVFOGFpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVIQ0FHb2lBVzRpQXlBQlNRMEVJQUlnQVNBRGJFWU5BaUFDSUFCQnhnQnFJZ0Z1SWdNZ0FVa05CQ0FDSUFFZ0EyeEdEUUlnQWlBQVFjZ0FhaUlCYmlJRElBRkpEUVFnQWlBQklBTnNSZzBDSUFJZ0FFSE9BR29pQVc0aUF5QUJTUTBFSUFJZ0FTQURiRVlOQWlBQ0lBQkIwZ0JxSWdGdUlnTWdBVWtOQkNBQ0lBRWdBMnhHRFFJZ0FpQUFRZGdBYWlJQmJpSURJQUZKRFFRZ0FpQUJJQU5zUmcwQ0lBSWdBRUhnQUdvaUFXNGlBeUFCU1EwRUlBSWdBU0FEYkVZTkFpQUNJQUJCNUFCcUlnRnVJZ01nQVVrTkJDQUNJQUVnQTJ4R0RRSWdBaUFBUWVZQWFpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVIcUFHb2lBVzRpQXlBQlNRMEVJQUlnQVNBRGJFWU5BaUFDSUFCQjdBQnFJZ0Z1SWdNZ0FVa05CQ0FDSUFFZ0EyeEdEUUlnQWlBQVFmQUFhaUlCYmlJRElBRkpEUVFnQWlBQklBTnNSZzBDSUFJZ0FFSDRBR29pQVc0aUF5QUJTUTBFSUFJZ0FTQURiRVlOQWlBQ0lBQkIvZ0JxSWdGdUlnTWdBVWtOQkNBQ0lBRWdBMnhHRFFJZ0FpQUFRWUlCYWlJQmJpSURJQUZKRFFRZ0FpQUJJQU5zUmcwQ0lBSWdBRUdJQVdvaUFXNGlBeUFCU1EwRUlBSWdBU0FEYkVZTkFpQUNJQUJCaWdGcUlnRnVJZ01nQVVrTkJDQUNJQUVnQTJ4R0RRSWdBaUFBUVk0QmFpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVHVUFXb2lBVzRpQXlBQlNRMEVJQUlnQVNBRGJFWU5BaUFDSUFCQmxnRnFJZ0Z1SWdNZ0FVa05CQ0FDSUFFZ0EyeEdEUUlnQWlBQVFad0JhaUlCYmlJRElBRkpEUVFnQWlBQklBTnNSZzBDSUFJZ0FFR2lBV29pQVc0aUF5QUJTUTBFSUFJZ0FTQURiRVlOQWlBQ0lBQkJwZ0ZxSWdGdUlnTWdBVWtOQkNBQ0lBRWdBMnhHRFFJZ0FpQUFRYWdCYWlJQmJpSURJQUZKRFFRZ0FpQUJJQU5zUmcwQ0lBSWdBRUdzQVdvaUFXNGlBeUFCU1EwRUlBSWdBU0FEYkVZTkFpQUNJQUJCc2dGcUlnRnVJZ01nQVVrTkJDQUNJQUVnQTJ4R0RRSWdBaUFBUWJRQmFpSUJiaUlESUFGSkRRUWdBaUFCSUFOc1JnMENJQUlnQUVHNkFXb2lBVzRpQXlBQlNRMEVJQUlnQVNBRGJFWU5BaUFDSUFCQnZnRnFJZ0Z1SWdNZ0FVa05CQ0FDSUFFZ0EyeEdEUUlnQWlBQVFjQUJhaUlCYmlJRElBRkpEUVFnQWlBQklBTnNSZzBDSUFJZ0FFSEVBV29pQVc0aUF5QUJTUTBFSUFJZ0FTQURiRVlOQWlBQ0lBQkJ4Z0ZxSWdGdUlnTWdBVWtOQkNBQ0lBRWdBMnhHRFFJZ0FpQUFRZEFCYWlJQmJpSURJQUZKRFFRZ0FFSFNBV29oQUNBQ0lBRWdBMnhIRFFBTERBRUxJQUlnQUVFQ2RFR3dpd05xS0FJQUlnRnVJZ01nQVVrTkFpQUFRUUZxSVFBZ0FpQUJJQU5zUncwQkN3dEJBQ0FGUVFGcUlnQWdBRUV3UmlJQUd5RUZJQUFnQm1vaUJrSFNBV3doQWd3QkN3c2dCQ0FDTmdJTUN5QUVRUkJxSkFBZ0FndGtBZ0YvQVg0akFFRVFheUlDSkFBZ0FBSitJQUZGQkVCQ0FBd0JDeUFDSUFHdFFnQWdBV2NpQVVIUkFHb1Fpd0VnQWlrRENFS0FnSUNBZ0lEQUFJVkJub0FCSUFGcnJVSXdobndoQXlBQ0tRTUFDemNEQUNBQUlBTTNBd2dnQWtFUWFpUUFDNE1CQWdOL0FYNENRQ0FBUW9DQWdJQVFWQVJBSUFBaEJRd0JDd05BSUFGQkFXc2lBU0FBSUFCQ0NvQWlCVUlLZm4yblFUQnlPZ0FBSUFCQy8vLy8vNThCVmlFQ0lBVWhBQ0FDRFFBTEN5QUZweUlDQkVBRFFDQUJRUUZySWdFZ0FpQUNRUXB1SWdOQkNteHJRVEJ5T2dBQUlBSkJDVXNoQkNBRElRSWdCQTBBQ3dzZ0FRdEtBUUovQWtBZ0FDMEFBQ0lDUlNBQ0lBRXRBQUFpQTBkeURRQURRQ0FCTFFBQklRTWdBQzBBQVNJQ1JRMEJJQUZCQVdvaEFTQUFRUUZxSVFBZ0FpQURSZzBBQ3dzZ0FpQURhd3NhQUNBQUlBRVFpZ1VpQUVFQUlBQXRBQUFnQVVIL0FYRkdHd3VnQVFFRWZ5TUFRUkJySWdVa0FDQUZJQUkyQWd3akFFR2dBV3NpQXlRQUlBTkJDR29pQmtId2hRTkJrQUVRUHhvZ0F5QUFOZ0kwSUFNZ0FEWUNIQ0FEUWYvLy8vOEhRWDRnQUdzaUJDQUVRZi8vLy84SFN4c2lCRFlDT0NBRElBQWdCR29pQURZQ0pDQURJQUEyQWhnZ0JpQUJJQUlRZ3dVZ0JBUkFJQU1vQWh3aUFDQUFJQU1vQWhoR2EwRUFPZ0FBQ3lBRFFhQUJhaVFBSUFWQkVHb2tBQXVpQVFJQmZRSi9JQUM4SWdKQkYzWkIvd0Z4SWdOQmxRRk5CRUFnQTBIOUFFMEVmU0FBUXdBQUFBQ1VCUUo5SUFBZ0FJd2dBa0VBVGhzaUFFTUFBQUJMa2tNQUFBRExraUFBa3lJQlF3QUFBRDllQkVBZ0FDQUJra01BQUlDL2tnd0JDeUFBSUFHU0lnQWdBVU1BQUFDL1gwVU5BQm9nQUVNQUFJQS9rZ3NpQUNBQWpDQUNRUUJPR3dzaEFBc2dBSXREQUFBQVQxMEVRQ0FBcUE4TFFZQ0FnSUI0QzRjQ0FnSi9BbndnQUx3aUFVR0FnSUQ4QTBZRVFFTUFBQUFBRHdzQ1FDQUJRWUNBZ1B3SGEwSC8vLytIZUUwRVFDQUJRUUYwSWdKRkJFQWpBRUVRYXlJQlF3QUFnTDg0QWd3Z0FTb0NERU1BQUFBQWxROExJQUZCZ0lDQS9BZEdEUUVnQWtHQWdJQjRTU0FCUVFCT2NVVUVRQ0FBRUpVRkR3c2dBRU1BQUFCTGxMeEJnSUNBM0FCcklRRUxRZGpyQWlzREFDQUJJQUZCZ0lETStRTnJJZ0ZCZ0lDQWZIRnJ2cnNnQVVFUGRrSHdBWEVpQWtIUTZRSnFLd01Bb2tRQUFBQUFBQUR3djZBaUF5QURvaUlFb2tIZzZ3SXJBd0FnQTZKQjZPc0NLd01Bb0tBZ0JLSWdBVUVYZGJkQjBPc0NLd01Bb2lBQ1FkanBBbW9yQXdDZ0lBT2dvTFloQUFzZ0FBc05BQ0FBS0FJRUlBRW9BZ1JMQ3lFQUlBQW9BZ1FnQUJBMEtBSUFTUVJBSUFBZ0FSQ29BdzhMSUFBZ0FSRHlCUXVpQVFFQ2Z5QUFLQUlFSUFBUU5DZ0NBRWNFUUNNQVFSQnJJZ01rQUNBRElBQkJBUkMxQWlFQ0lBQVFOQ0FDS0FJRUlBRVE5QUVnQWlBQ0tBSUVRUVJxTmdJRUlBSVFiaUFEUVJCcUpBQVBDeU1BUVNCcklnTWtBQ0FBRURRaUFpQURRUWhxSUFBZ0FCQkRRUUZxRU9JQ0lBQVFReUFDRU5rQ0lnSW9BZ2dnQVJEMEFTQUNJQUlvQWdoQkJHbzJBZ2dnQUNBQ0VPRUNJQUlRdGdJZ0EwRWdhaVFBQ3dnQUlBQkI5QUJxQ3lBQkFYOGdBQ2dDQUNFQ0lBQWdBVFlDQUNBQ0JFQWdBQkJLSUFJUXBRWUxDekVCQVg4akFFRVFheUlESkFBZ0F5QUJOZ0lNSUFBZ0EwRU1haENpQVNJQUlBSXBBZ0EzQWdRZ0EwRVFhaVFBSUFBTEVnQWdBQ0FDT2dBRUlBQWdBVFlDQUNBQUN4WUFJQUFnQVNnQ0FEWUNBQ0FBSUFJdEFBQTZBQVFMSUFFQmZ5QUFLQUlBSVFFZ0FFRUFOZ0lBSUFFRVFDQUFFRW9nQVJDbEJnc0xLUUVCZnlNQVFSQnJJZ0lrQUNBQ0lBRTJBZ2dnQUNBQ1FRaHFFS0lCSVFBZ0FrRVFhaVFBSUFBTEN3QWdBRUlBTndJQUlBQUxEQUFnQUNBQklBQWdBVW9iQ3l3QUlBQW9BZ0FhSUFBb0FnQWdBQkRUQVVFQ2RHb2FJQUFvQWdBZ0FCRFRBVUVDZEdvYUlBQW9BZ0FhQ3cwQUlBQWdBU0FDUVFJUXBnUUxUUUVCZnlBQUtBSUVJUUVEUUNBQklBQW9BZ2hIQkVBZ0FDZ0NFQm9nQUNBQUtBSUlRUVJyTmdJSURBRUxDeUFBS0FJQUJFQWdBQ2dDRUJvZ0FDZ0NBQ0VCSUFBUXlnWWFJQUVRTXdzTENnQWdBQ2dDQUJDVUJBdGFBUUovSXdCQkVHc2lBaVFBSUFJZ0FUWUNEQ0FCSUFBUTZRWWlBMDBFUUNBQUVMd0JJZ0FnQTBFQmRra0VRQ0FDSUFCQkFYUTJBZ2dnQWtFSWFpQUNRUXhxRUhrb0FnQWhBd3NnQWtFUWFpUUFJQU1QQ3hDYUFRQUxKQUFnQUVFQ1R3Ui9JQUJCQkdwQmZIRWlBQ0FBUVFGcklnQWdBRUVDUmhzRlFRRUxDNXNCQVFWL0l3QkJFR3NpQlNRQUlBRVF4UVFoQWlNQVFSQnJJZ01rQUFKQUlBSkI3Ly8vL3dOTkJFQUNRQ0FDUVFGTkJFQWdBQ0FDRUk4QklBQWhCQXdCQ3lBQUlBQWdBaEM1QWtFQmFpSUdFSW9DSWdRUW1RRWdBQ0FHRUxRQklBQWdBaENKQVFzZ0JDQUJJQUlRekFFZ0EwRUFOZ0lNSUFRZ0FrRUNkR29nQTBFTWFoQ3NBU0FEUVJCcUpBQU1BUXNRVlFBTElBVkJFR29rQUF2R0FRRUdmeU1BUVJCcklnUWtBQ0FBRUVvb0FnQWhCUUovSUFJb0FnQWdBQ2dDQUdzaUEwSC8vLy8vQjBrRVFDQURRUUYwREFFTFFYOExJZ05CQkNBREd5RURJQUVvQWdBaEJpQUFLQUlBSVFjZ0JVSFFBa1lFZjBFQUJTQUFLQUlBQ3lBREVNY0NJZ2dFUUNBRlFkQUNSd1JBSUFBUXVRRWFDeUFFUWM4Q05nSUVJQUFnQkVFSWFpQUlJQVJCQkdvUVp5SUZFS0FISUFVUVppQUJJQUFvQWdBZ0JpQUhhMm8yQWdBZ0FpQUFLQUlBSUFOQmZIRnFOZ0lBSUFSQkVHb2tBQThMRUZVQUN4TUFJQUFnQVVFQUlBQW9BZ0FvQWpRUkJBQUxFd0FnQUNBQlFRQWdBQ2dDQUNnQ0pCRUVBQXZ5QWdFQ2Z5TUFRUkJySWdva0FDQUtJQUEyQWd3Q1FBSkFBa0FnQXlnQ0FDQUNSdzBBUVNzaEN5QUFJQWtvQW1CSEJFQkJMU0VMSUFrb0FtUWdBRWNOQVFzZ0F5QUNRUUZxTmdJQUlBSWdDem9BQUF3QkN5QUdFRGRGSUFBZ0JVZHlSUVJBUVFBaEFDQUlLQUlBSWdFZ0IydEJud0ZLRFFJZ0JDZ0NBQ0VBSUFnZ0FVRUVhallDQUNBQklBQTJBZ0FNQVF0QmZ5RUFJQWtnQ1VIb0FHb2dDa0VNYWhDNUJDQUpheUlHUWR3QVNnMEJJQVpCQW5VaEJRSkFBa0FDUUNBQlFRaHJEZ01BQWdBQkN5QUJJQVZLRFFFTUF3c2dBVUVRUnlBR1FkZ0FTSElOQUNBREtBSUFJZ0VnQWtZZ0FTQUNhMEVDU25JTkFpQUJRUUZyTFFBQVFUQkhEUUpCQUNFQUlBUkJBRFlDQUNBRElBRkJBV28yQWdBZ0FTQUZRY0M0QTJvdEFBQTZBQUFNQWdzZ0F5QURLQUlBSWdCQkFXbzJBZ0FnQUNBRlFjQzRBMm90QUFBNkFBQWdCQ0FFS0FJQVFRRnFOZ0lBUVFBaEFBd0JDMEVBSVFBZ0JFRUFOZ0lBQ3lBS1FSQnFKQUFnQUFzTEFDQUFRZVMzQkJETEFRc1RBQ0FBSUFFZ0FpQUFLQUlBS0FJd0VRUUFDKzRDQVFOL0l3QkJFR3NpQ2lRQUlBb2dBRG9BRHdKQUFrQUNRQ0FES0FJQUlBSkhEUUJCS3lFTElBQkIvd0Z4SWd3Z0NTMEFHRWNFUUVFdElRc2dDUzBBR1NBTVJ3MEJDeUFESUFKQkFXbzJBZ0FnQWlBTE9nQUFEQUVMSUFZUU4wVWdBQ0FGUjNKRkJFQkJBQ0VBSUFnb0FnQWlBU0FIYTBHZkFVb05BaUFFS0FJQUlRQWdDQ0FCUVFScU5nSUFJQUVnQURZQ0FBd0JDMEYvSVFBZ0NTQUpRUnBxSUFwQkQyb1F2QVFnQ1dzaUJVRVhTZzBCQWtBQ1FBSkFJQUZCQ0dzT0F3QUNBQUVMSUFFZ0JVb05BUXdEQ3lBQlFSQkhJQVZCRmtoeURRQWdBeWdDQUNJQklBSkdJQUVnQW10QkFrcHlEUUlnQVVFQmF5MEFBRUV3UncwQ1FRQWhBQ0FFUVFBMkFnQWdBeUFCUVFGcU5nSUFJQUVnQlVIQXVBTnFMUUFBT2dBQURBSUxJQU1nQXlnQ0FDSUFRUUZxTmdJQUlBQWdCVUhBdUFOcUxRQUFPZ0FBSUFRZ0JDZ0NBRUVCYWpZQ0FFRUFJUUFNQVF0QkFDRUFJQVJCQURZQ0FBc2dDa0VRYWlRQUlBQUxKZ0FnQUNBQUtBSVlSU0FBS0FJUUlBRnljaUlCTmdJUUlBQW9BaFFnQVhFRVFCQlZBQXNMQ0FBZ0FDZ0NBRVVMYWdFQ2Z5QUFRYUNWQXpZQ0FDQUFLQUlvSVFFRFFDQUJCRUJCQUNBQUlBRkJBV3NpQVVFQ2RDSUNJQUFvQWlScUtBSUFJQUFvQWlBZ0Ftb29BZ0FSQlFBTUFRc0xJQUJCSEdvUVJ5QUFLQUlnRURNZ0FDZ0NKQkF6SUFBb0FqQVFNeUFBS0FJOEVETWdBQXVOQVFFQmZ3SkFJQUFvQWdRaUFTQUJLQUlBUVF4cktBSUFhaWdDR0VVTkFDQUFLQUlFSWdFZ0FTZ0NBRUVNYXlnQ0FHb1F5d05GRFFBZ0FDZ0NCQ0lCSUFFb0FnQkJER3NvQWdCcUtBSUVRWURBQUhGRkRRQWdBQ2dDQkNJQklBRW9BZ0JCREdzb0FnQnFLQUlZRU1ZQ1FYOUhEUUFnQUNnQ0JDSUFJQUFvQWdCQkRHc29BZ0JxUVFFUXdnSUxDdzhBSUFBZ0FDZ0NBQ2dDR0JFQUFBdVpDQUVMZnlBQVJRUkFJQUVRT1E4TElBRkJRRThFUUVId2xnUkJNRFlDQUVFQUR3c0NmMEVRSUFGQkMycEJlSEVnQVVFTFNSc2hCU0FBUVFocklnWW9BZ1FpQ1VGNGNTRUVBa0FnQ1VFRGNVVUVRRUVBSUFWQmdBSkpEUUlhSUFWQkJHb2dCRTBFUUNBR0lRSWdCQ0FGYTBId3BBUW9BZ0JCQVhSTkRRSUxRUUFNQWdzZ0JDQUdhaUVIQWtBZ0JDQUZUd1JBSUFRZ0JXc2lBMEVRU1EwQklBWWdDVUVCY1NBRmNrRUNjallDQkNBRklBWnFJZ0lnQTBFRGNqWUNCQ0FISUFjb0FnUkJBWEkyQWdRZ0FpQURFUGdFREFFTFFhaWhCQ2dDQUNBSFJnUkFRWnloQkNnQ0FDQUVhaUlFSUFWTkRRSWdCaUFKUVFGeElBVnlRUUp5TmdJRUlBVWdCbW9pQXlBRUlBVnJJZ0pCQVhJMkFnUkJuS0VFSUFJMkFnQkJxS0VFSUFNMkFnQU1BUXRCcEtFRUtBSUFJQWRHQkVCQm1LRUVLQUlBSUFScUlnTWdCVWtOQWdKQUlBTWdCV3NpQWtFUVR3UkFJQVlnQ1VFQmNTQUZja0VDY2pZQ0JDQUZJQVpxSWdRZ0FrRUJjallDQkNBRElBWnFJZ01nQWpZQ0FDQURJQU1vQWdSQmZuRTJBZ1FNQVFzZ0JpQUpRUUZ4SUFOeVFRSnlOZ0lFSUFNZ0Jtb2lBaUFDS0FJRVFRRnlOZ0lFUVFBaEFrRUFJUVFMUWFTaEJDQUVOZ0lBUVppaEJDQUNOZ0lBREFFTElBY29BZ1FpQTBFQ2NRMEJJQU5CZUhFZ0JHb2lDaUFGU1EwQklBb2dCV3NoREFKQUlBTkIvd0ZOQkVBZ0J5Z0NDQ0lFSUFOQkEzWWlBa0VEZEVHNG9RUnFSaG9nQkNBSEtBSU1JZ05HQkVCQmtLRUVRWkNoQkNnQ0FFRitJQUozY1RZQ0FBd0NDeUFFSUFNMkFnd2dBeUFFTmdJSURBRUxJQWNvQWhnaEN3SkFJQWNnQnlnQ0RDSUlSd1JBSUFjb0FnZ2lBa0dnb1FRb0FnQkpHaUFDSUFnMkFnd2dDQ0FDTmdJSURBRUxBa0FnQjBFVWFpSUVLQUlBSWdJTkFDQUhRUkJxSWdRb0FnQWlBZzBBUVFBaENBd0JDd05BSUFRaEF5QUNJZ2hCRkdvaUJDZ0NBQ0lDRFFBZ0NFRVFhaUVFSUFnb0FoQWlBZzBBQ3lBRFFRQTJBZ0FMSUF0RkRRQUNRQ0FIS0FJY0lnTkJBblJCd0tNRWFpSUNLQUlBSUFkR0JFQWdBaUFJTmdJQUlBZ05BVUdVb1FSQmxLRUVLQUlBUVg0Z0EzZHhOZ0lBREFJTElBdEJFRUVVSUFzb0FoQWdCMFliYWlBSU5nSUFJQWhGRFFFTElBZ2dDellDR0NBSEtBSVFJZ0lFUUNBSUlBSTJBaEFnQWlBSU5nSVlDeUFIS0FJVUlnSkZEUUFnQ0NBQ05nSVVJQUlnQ0RZQ0dBc2dERUVQVFFSQUlBWWdDVUVCY1NBS2NrRUNjallDQkNBR0lBcHFJZ0lnQWlnQ0JFRUJjallDQkF3QkN5QUdJQWxCQVhFZ0JYSkJBbkkyQWdRZ0JTQUdhaUlESUF4QkEzSTJBZ1FnQmlBS2FpSUNJQUlvQWdSQkFYSTJBZ1FnQXlBTUVQZ0VDeUFHSVFJTElBSUxJZ0lFUUNBQ1FRaHFEd3NnQVJBNUlnTkZCRUJCQUE4TElBTWdBRUY4UVhnZ0JpZ0NCQ0lDUVFOeEd5QUNRWGh4YWlJQ0lBRWdBU0FDU3hzUVB4b2dBQkF6SUFNTDBRUUJCSDhqQUVFUWF5SUVKQUFDUUFKQVFaeU1BaUFCTEFBQUVLUUNSUVJBUWZDV0JFRWNOZ0lBREFFTFFRSWhBaUFCUVNzUXBBSkZCRUFnQVMwQUFFSHlBRWNoQWdzZ0FrR0FBWElnQWlBQlFmZ0FFS1FDR3lJQ1FZQ0FJSElnQWlBQlFlVUFFS1FDR3lJQ0lBSkJ3QUJ5SUFFdEFBQWlBa0h5QUVZYklnVkJnQVJ5SUFVZ0FrSDNBRVliSWdWQmdBaHlJQVVnQWtIaEFFWWJJUUlnQkVLMkF6Y0RBRUdjZnlBQUlBSkJnSUFDY2lBRUVDWWlBRUdCWUU4RVFFSHdsZ1JCQUNBQWF6WUNBRUYvSVFBTElBQkJBRWdOQVNNQVFTQnJJZ01rQUFKL0FrQUNRRUdjakFJZ0FTd0FBQkNrQWtVRVFFSHdsZ1JCSERZQ0FBd0JDMEdZQ1JBNUlnSU5BUXRCQUF3QkN5QUNRUUJCa0FFUU9ob2dBVUVyRUtRQ1JRUkFJQUpCQ0VFRUlBRXRBQUJCOGdCR0d6WUNBQXNDUUNBQkxRQUFRZUVBUndSQUlBSW9BZ0FoQVF3QkN5QUFRUU5CQUJBVElnRkJnQWh4UlFSQUlBTWdBVUdBQ0hLc053TVFJQUJCQkNBRFFSQnFFQk1hQ3lBQ0lBSW9BZ0JCZ0FGeUlnRTJBZ0FMSUFKQmZ6WUNVQ0FDUVlBSU5nSXdJQUlnQURZQ1BDQUNJQUpCbUFGcU5nSXNBa0FnQVVFSWNRMEFJQU1nQTBFWWFxMDNBd0FnQUVHVHFBRWdBeEFsRFFBZ0FrRUtOZ0pRQ3lBQ1FmMEJOZ0lvSUFKQi9nRTJBaVFnQWtIL0FUWUNJQ0FDUVlBQ05nSU1RWW1YQkMwQUFFVUVRQ0FDUVg4MkFrd0xJQUpCOEpjRUtBSUFOZ0k0UWZDWEJDZ0NBQ0lCQkVBZ0FTQUNOZ0kwQzBId2x3UWdBallDQUNBQ0N5RUJJQU5CSUdva0FDQUJJZ01OQVNBQUVCRWFDMEVBSVFNTElBUkJFR29rQUNBREMvQUJBUU4vSUFCRkJFQkI2TzhES0FJQUJFQkI2TzhES0FJQUVNa0NJUUVMUWREdUF5Z0NBQVJBUWREdUF5Z0NBQkRKQWlBQmNpRUJDMEh3bHdRb0FnQWlBQVJBQTBBZ0FDZ0NUQm9nQUNnQ0ZDQUFLQUljUndSQUlBQVF5UUlnQVhJaEFRc2dBQ2dDT0NJQURRQUxDeUFCRHdzZ0FDZ0NURUVBVGlFQ0FrQUNRQ0FBS0FJVUlBQW9BaHhHRFFBZ0FFRUFRUUFnQUNnQ0pCRUVBQm9nQUNnQ0ZBMEFRWDhoQVF3QkN5QUFLQUlFSWdFZ0FDZ0NDQ0lEUndSQUlBQWdBU0FEYTZ4QkFTQUFLQUlvRVJNQUdndEJBQ0VCSUFCQkFEWUNIQ0FBUWdBM0F4QWdBRUlBTndJRUlBSkZEUUFMSUFFTFJ3QWdBQ0FCU1FSQUlBQWdBU0FDRUQ4YUR3c2dBZ1JBSUFBZ0Ftb2hBQ0FCSUFKcUlRRURRQ0FBUVFGcklnQWdBVUVCYXlJQkxRQUFPZ0FBSUFKQkFXc2lBZzBBQ3dzTG1RRUJBM3dnQUNBQW9pSURJQU1nQTZLaUlBTkVmTlhQV2pyWjVUMmlST3VjSzRybTVWcStvS0lnQXlBRFJIMytzVmZqSGNjK29rVFZZY0Vab0FFcXY2Q2lSS2I0RUJFUkVZRS9vS0FoQlNBRElBQ2lJUVFnQWtVRVFDQUVJQU1nQmFKRVNWVlZWVlZWeGIrZ29pQUFvQThMSUFBZ0F5QUJSQUFBQUFBQUFPQS9vaUFGSUFTaW9hSWdBYUVnQkVSSlZWVlZWVlhGUDZLZ29RdVNBUUVEZkVRQUFBQUFBQUR3UHlBQUlBQ2lJZ0pFQUFBQUFBQUE0RCtpSWdPaElnUkVBQUFBQUFBQThEOGdCS0VnQTZFZ0FpQUNJQUlnQWtTUUZjc1pvQUg2UHFKRWQxSEJGbXpCVnIrZ29rUk1WVlZWVlZXbFA2Q2lJQUlnQXFJaUF5QURvaUFDSUFKRTFEaUl2dW42cUwyaVJNU3h0TDJlN2lFK29LSkVyVktjZ0U5K2tyNmdvcUNpSUFBZ0FhS2hvS0FML2dJQkJuOGdBQ2dDQkNFR0lBSkI4WlByM0FOUEJFQWdBQ2dDQUVLNGdJQ0FFRGNDRkNBQUlBQW9BZ0FvQWdBUkFRQUxRUWdnQWtFSGNTSURhMEVBSUFNYklRTWdBVUVDVHdSQUlBQW9BZ0FpQlNBQk5nSVlJQVZCRHpZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMSUFJZ0Eyb2hBd0pBQWtBZ0JpQUJRUUowYWlJSUtBSTBJZ0pGRFFBRFFDQURJQUlpQkNnQ0NFc0VRQ0FFS0FJQUlnSU5BUXdDQ3dzZ0JDRUJEQUVMSUFGQkFuUkJxTUFDUWFEQUFpQUVHMm9vQWdBaUFVSHdrK3ZjQXlBRGF5SUNJQUVnQWtrYklnSWdBMm9pQlVFUWFpSUhFRGtpQVVVRVFBTkFJQUpCNHdCTkJFQWdBQ2dDQUVLNGdJQ0FJRGNDRkNBQUlBQW9BZ0FvQWdBUkFRQUxJQUpCQVhZaUFTRUNJQUVnQTJvaUJVRVFhaUlIRURraUFVVU5BQXNMSUFZZ0JpZ0NUQ0FIYWpZQ1RDQUJJQVUyQWdnZ0FVSUFOd01BSUFSRkJFQWdDQ0FCTmdJMERBRUxJQVFnQVRZQ0FBc2dBU0FCS0FJRUlnQWdBMm8yQWdRZ0FTQUJLQUlJSUFOck5nSUlJQUFnQVdwQkVHb0xwd0lCQlg4Z0FDZ0MxQU1oQWlBQUlBQW9BdEFES0FJSUVRQUFSUVJBSUFBb0FnQWlBVUVaTmdJVUlBQWdBU2dDQUJFQkFBc2dBQ2dDMUFKQkFFb0VRQU5BSUFBZ0EwRUNkQ0lGYWlnQzJBSWhCQUpBQWtBZ0FDZ0M0QUVFUUNBQUtBS2NBdzBCSUFBb0FxUUREUUlMSUFJZ0JDZ0NGRUVDZEdvb0Fqd2lBVUlBTndBQUlBRkNBRGNBT0NBQlFnQTNBREFnQVVJQU53QW9JQUZDQURjQUlDQUJRZ0EzQUJnZ0FVSUFOd0FRSUFGQ0FEY0FDQ0FDSUFWcUlnRkJBRFlDS0NBQlFRQTJBaGdnQUNnQzRBRkZCRUFnQUNnQ3RBTU5BUXdDQ3lBQUtBS2NBMFVOQVFzZ0FpQUVLQUlZUVFKMGFpZ0NmRUVBUVlBQ0VEb2FDeUFEUVFGcUlnTWdBQ2dDMUFKSURRQUxDeUFDUVhBMkFoUWdBa0lBTndJTUlBSWdBQ2dDbUFJMkFqZ0x5UW9CREg4Z0FDZ0NHQ0lHS0FJRUlRUWdCaWdDQUNFRklBQWdBellDNUFFZ0FDQUNOZ0xnQVNBQUlBRTJBdHdCQWtBZ0JFVUVRQ0FBSUFZb0Fnd1JBQUJGRFFFZ0JpZ0NBQ0VGSUFZb0FnUWhCQXNnQlMwQUFDRURJQVJCQVdzaUFRUi9JQVZCQVdvRklBQWdCaWdDREJFQUFFVU5BU0FHS0FJRUlRRWdCaWdDQUFzaUJDMEFBQ0VISUFBZ0FVRUJheUlGQkg4Z0JFRUJhZ1VnQUNBR0tBSU1FUUFBUlEwQklBWW9BZ1FoQlNBR0tBSUFDeUlFTFFBQU5nTFVBU0FBSUFWQkFXc2lCUVIvSUFSQkFXb0ZJQUFnQmlnQ0RCRUFBRVVOQVNBR0tBSUVJUVVnQmlnQ0FBc2lCQzBBQUVFSWRDSUJOZ0lnSUFBZ0JVRUJheUlGQkg4Z0JFRUJhZ1VnQUNBR0tBSU1FUUFBUlEwQklBQW9BaUFoQVNBR0tBSUVJUVVnQmlnQ0FBc2lCQzBBQUNBQmFqWUNJQ0FBSUFWQkFXc2lCUVIvSUFSQkFXb0ZJQUFnQmlnQ0RCRUFBRVVOQVNBR0tBSUVJUVVnQmlnQ0FBc2lCQzBBQUVFSWRDSUJOZ0ljSUFBZ0JVRUJheUlGQkg4Z0JFRUJhZ1VnQUNBR0tBSU1FUUFBUlEwQklBQW9BaHdoQVNBR0tBSUVJUVVnQmlnQ0FBc2lCQzBBQUNBQmFqWUNIQ0FBSUFWQkFXc2lBUVIvSUFSQkFXb0ZJQUFnQmlnQ0RCRUFBRVVOQVNBR0tBSUVJUUVnQmlnQ0FBc2lCUzBBQURZQ0pDQUFLQUlBSWdJZ0FDZ0N1QU0yQWhnZ0FpQUFLQUljTmdJY0lBSWdBQ2dDSURZQ0lDQUFLQUlrSVFRZ0FrSG1BRFlDRkNBQ0lBUTJBaVFnQUVFQklBSW9BZ1FSQWdBZ0FDZ0MwQU1vQWhBRVFDQUFLQUlBSWdKQlBUWUNGQ0FBSUFJb0FnQVJBUUFMSUFOQkNIUWdCM0pCQ0dzaEFnSkFBa0FnQUNnQ0lFVU5BQ0FBS0FJY1JRMEFJQUFvQWlRaUJFRUFTZzBCQ3lBQUtBSUFJZ05CSVRZQ0ZDQUFJQU1vQWdBUkFRQWdBQ2dDSkNFRUN5QUVRUU5zSUFKSEJFQWdBQ2dDQUNJQ1FRdzJBaFFnQUNBQ0tBSUFFUUVBQ3lBQUtBTFlBVVVFUUNBQUlBQkJBU0FBS0FJa1FkZ0FiQ0FBS0FJRUtBSUFFUVFBTmdMWUFRc2dCVUVCYWlFSUlBRkJBV3NoQkNBQUtBSWtRUUJLQkVCQkFDRUJBMEFnQkFSL0lBUUZJQUFnQmlnQ0RCRUFBRVVOQXlBR0tBSUFJUWdnQmlnQ0JBdEJBV3NoQ3lBQUtBTFlBU0VESUFndEFBQWhBZ0pBSUFGRkJFQWdBeUVFREFFTElBRkJBbXNoRENBQlFRRnJJUWtnQXlBS2FpRUhRUUFoQlNBRElRUURRQ0FDSUFRb0FnQkdCRUFnQTBIWUFHb2hCQ0FES0FJQUlRVWdBVUVDVHdSQUlBeEJBMDhFUUNBSlFYeHhJUU5CQUNFQ0EwQWdCQ2dDaUFJaURDQUVLQUt3QVNJTklBUW9BbGdpRGlBRUtBSUFJZzhnQlNBRklBOUlHeUlGSUFVZ0RrZ2JJZ1VnQlNBTlNCc2lCU0FGSUF4SUd5RUZJQVJCNEFKcUlRUWdBa0VFYWlJQ0lBTkhEUUFMQzBFQUlRSWdDVUVEY1NJREJFQURRQ0FFS0FJQUlna2dCU0FGSUFsSUd5RUZJQVJCMkFCcUlRUWdBa0VCYWlJQ0lBTkhEUUFMQ3lBSElRUUxJQVZCQVdvaEFnd0NDeUFFUWRnQWFpRUVJQVZCQVdvaUJTQUJSdzBBQ3lBSElRUUxJQVFnQVRZQ0JDQUVJQUkyQWdBZ0JDQUxCSDhnQ0VFQmFnVWdBQ0FHS0FJTUVRQUFSUTBESUFZb0FnUWhDeUFHS0FJQUN5SUZMUUFBSWdKQkQzRTJBZ3dnQkNBQ1FRUjJOZ0lJSUFRZ0MwRUJheUlEQkg4Z0JVRUJhZ1VnQUNBR0tBSU1FUUFBUlEwRElBWW9BZ1FoQXlBR0tBSUFDeUlDTFFBQU5nSVFJQUFvQWdBaUJ5QUVLQUlBTmdJWUlBY2dCQ2dDQ0RZQ0hDQUhJQVFvQWd3MkFpQWdCQ2dDRUNFRUlBZEI1d0EyQWhRZ0J5QUVOZ0lrSUFCQkFTQUhLQUlFRVFJQUlBcEIyQUJxSVFvZ0FrRUJhaUVJSUFOQkFXc2hCQ0FCUVFGcUlnRWdBQ2dDSkVnTkFBc0xJQUFvQXRBRFFRRTJBaEFnQmlBRU5nSUVJQVlnQ0RZQ0FFRUJEd3RCQUF2TEVRTUpmdzU5QVhzZ0JVVUVRQ01BUVNCcklnVWtBRU1ndkw1TUlRWUNRQ0FEUVFSSURRQWdBQ29DTEVNQUFBQUFXdzBBSUFOQkJuUVFPU0lKUlFSQVFRQkJBMEdXb0FKQkFCQThRd0FBZ0w4aEJnd0JDeUFEUVFOMEVEa2lDZ1JBQTBCQkFDRUlJQWRCQTBZRVFDQURRUUYwSVFzZ0E3SWhHZ0pBQTBBZ0JDb0NKQ0ViSUFRcUFpQWhHRU1BQUFBQUlSTkJBQ0VIQTBBZ0F5QUhSd1JBSUJnZ0FpQUhRUXhzYWlJQUtnSUFJaENVSUFBcUFnUWlFU0FibEpKREFBQ0FQNUlpQmtNQUFBQUFXdzBESUFFZ0IwRURkQ0lBYWlJTUtnSUFJUlFnQkNvQ0RDRVhJQVFxQWdBaEdTQUVLZ0lFSVJ3Z0FDQUthaUlBSUF3cUFnUWdCQ29DSENBRUtnSVFJQkNVSUJFZ0JDb0NGSlNTa2lJVklBYVZreUlXT0FJRUlBQWdGQ0FYSUJrZ0VKUWdFU0FjbEpLU0loUWdCcFdUSWhjNEFnQWdDU0FIUVFaMGFpSUFJQkVnQnBVaUdUZ0NCQ0FBSUJBZ0JwVWlIRGdDQUNBQVF3QUFnRDhnQnBVaUhUZ0NDQ0FBUWdBM0Fnd2dBRUVBTmdJVUlBQWdGQ0FRakNJUWxDQUdJQWFVSWdhVk9BSVlJQUFnRkNBUmpDSVJsQ0FHbFRnQ0hDQUFRZ0EzQWlBZ0FFRUFOZ0lvSUFBZ0hEZ0NMQ0FBSUJrNEFqQWdBQ0FkT0FJMElBQWdGU0FRbENBR2xUZ0NPQ0FBSUJVZ0VaUWdCcFU0QWp3Z0V5QVhJQmVVSUJZZ0ZwU1NraUVUSUFkQkFXb2hCd3dCQ3dzQ1FDQVRJQnFWSWdaRHpjek1QVjBOQUFKQUlBaEZJQVpEQUFDQVFGMUZja1VFUUNBR0lCS1ZRNlJ3ZlQ5ZURRSWdDRUVLUncwQkRBSUxJQWhCQ2tZTkFRc2dCU0FLSUFrZ0N4QzJCVUVBU0EwQ0lBUWdCU29DQUNBRUtnSUFramdDQUNBRUlBVXFBZ1FnQkNvQ0JKSTRBZ1FnQkNBRktnSUlJQVFxQWd5U09BSU1JQVFnQlNvQ0RDQUVLZ0lRa2pnQ0VDQUVJQVVxQWhBZ0JDb0NGSkk0QWhRZ0JDQUZLZ0lVSUFRcUFoeVNPQUljSUFRZ0JTb0NHQ0FFS2dJZ2tqZ0NJQ0FFSUFVcUFod2dCQ29DSkpJNEFpUWdDRUVCYWlFSUlBWWhFZ3dCQ3dzZ0NSQXpJQW9RTXd3RUN5QUpFRE1nQ2hBelF5Qzh2a3doQmd3REJRTkFJQWhCQkVjRVFDQUlRUUowSWdzZ0JDQUhRUVIwSWd4cWFpQUFJQXhxSUF0cUtnSUFJQUFxQWl5Vk9BSUFJQWhCQVdvaENBd0JDd3NnQjBFQmFpRUhEQUVMQUFzQUMwRUFRUU5CbHFBQ1FRQVFQQ0FKRUROREFBQ0F2eUVHQ3lBRlFTQnFKQUFnQmc4TElBWWhFQ01BUVNCcklnZ2tBRU1ndkw1TUlRWUNRQ0FEUVFSSURRQWdBQ29DTEVNQUFBQUFXdzBBQW44Z0E3SWlGeUFRbENJR2kwTUFBQUJQWFFSQUlBYW9EQUVMUVlDQWdJQjRDeUVGSUFOQkJuUVFPU0lIUlFSQVFRQkJBMEdXb0FKQkFCQThRd0FBZ0w4aEJnd0JDeUFEUVFOMEVEa2lDa1VFUUVFQVFRTkJscUFDUVFBUVBDQUhFRE5EQUFDQXZ5RUdEQUVMSUFOQkFuUWlDUkE1SWd4RkJFQkJBRUVEUVphZ0FrRUFFRHdnQnhBeklBb1FNME1BQUlDL0lRWU1BUXNnQ1JBNUlnc0VRQ0FGUVFVZ0JVRUZTaHRCQVdzaERVRUFJUWtEUUVFQUlRVWdDVUVEUmdSQUlBc2dEVUVDZEdvaEQwRUFJUWtDUUFOQUlBUXFBaVFoR2lBRUtnSWdJUnRCQUNFQUEwQWdBQ0FEUndSQUlCc2dBaUFBUVF4c2FpSUZLZ0lBSWhDVUlBVXFBZ1FpRVNBYWxKSkRBQUNBUDVJaUJrTUFBQUFBV3cwRElBRWdBRUVEZENJRmFpSU5LZ0lBSVJZZ0JDb0NEQ0VVSUFRcUFnQWhHQ0FFS2dJRUlSa2dCU0FLYWlJRklBMHFBZ1FnQkNvQ0hDQUVLZ0lRSUJDVUlCRWdCQ29DRkpTU2tpSVRJQWFWa3lJVk9BSUVJQVVnRmlBVUlCZ2dFSlFnRVNBWmxKS1NJaFlnQnBXVEloUTRBZ0FnQ3lBQVFRSjBJZ1ZxSUJRZ0ZKUWdGU0FWbEpJaUZUZ0NBQ0FGSUF4cUlCVTRBZ0FnQnlBQVFRWjBhaUlGSUJFZ0JwVWlGVGdDQkNBRklCQWdCcFVpRkRnQ0FDQUZRd0FBZ0Q4Z0JwVWlHRGdDQ0NBRlFnQTNBZ3dnQlVFQU5nSVVJQVVnRmlBUWpDSVFsQ0FHSUFhVUlnYVZPQUlZSUFVZ0ZpQVJqQ0lSbENBR2xUZ0NIQ0FGUWdBM0FpQWdCVUVBTmdJb0lBVWdGRGdDTENBRklCVTRBakFnQlNBWU9BSTBJQVVnRXlBUWxDQUdsVGdDT0NBRklCTWdFWlFnQnBVNEFqd2dBRUVCYWlFQURBRUxDeUFMSUFOQkJFSDJBQkNRQlNBUEtnSUFRd0FBZ0VDVVF3QUFnRUdYSWhCREFBREFRSlVoRVVFQUlRVkRBQUFBQUNFR0EwQWdBeUFGUndSQUlCQWdDeUFGUVFKMGFpb0NBQ0lUWFFSOUlCRWdCcElGSUJGREFBQ0FQME1BQUlBL0lCTWdFSldUSWhNZ0U1UWdFNVNUbENBR2tnc2hCaUFGUVFGcUlRVU1BUXNMQWtBZ0JpQVhsU0lHUTgzTXpEMWREUUFDUUNBSlJTQUdRd0FBZ0VCZFJYSkZCRUFnQmlBU2xVT2tjSDAvWGcwQ0lBbEJDa2NOQVF3Q0N5QUpRUXBHRFFFTFFRQWhCVUVBSVFBRFFDQURJQVZIQkVBZ0VDQU1JQVZCQW5ScUtnSUFJaEpnQkVBZ0J5QUFRUVYwYWlJTlF3QUFnRDhnRWlBUWxaTWlFaUFTbENJUy9STWlIaUFISUFWQkJuUnFJZzc5QUFJQS9lWUIvUXNDQUNBTklCNGdEdjBBQWhEOTVnSDlDd0lRSUEwZ0hpQU8vUUFDSVAzbUFmMExBaUFnRFNBZUlBNzlBQUl3L2VZQi9Rc0NNQ0FLSUFCQkFuUnFJZzBnRWlBS0lBVkJBM1JxSWc0cUFnQ1VPQUlBSUEwZ0VpQU9LZ0lFbERnQ0JDQUFRUUpxSVFBTElBVkJBV29oQlF3QkN3c2dBRUVGVEFSQUlBY1FNeUFLRURNZ0RCQXpJQXNRTTBNQUFJQy9JUVlNQndzZ0NDQUtJQWNnQUJDMkJVRUFTQTBDSUFRZ0NDb0NBQ0FFS2dJQWtqZ0NBQ0FFSUFncUFnUWdCQ29DQkpJNEFnUWdCQ0FJS2dJSUlBUXFBZ3lTT0FJTUlBUWdDQ29DRENBRUtnSVFramdDRUNBRUlBZ3FBaEFnQkNvQ0ZKSTRBaFFnQkNBSUtnSVVJQVFxQWh5U09BSWNJQVFnQ0NvQ0dDQUVLZ0lna2pnQ0lDQUVJQWdxQWh3Z0JDb0NKSkk0QWlRZ0NVRUJhaUVKSUFZaEVnd0JDd3NnQnhBeklBb1FNeUFNRURNZ0N4QXpEQVFMSUFjUU15QUtFRE1nREJBeklBc1FNME1ndkw1TUlRWU1Bd1VEUUNBRlFRUkhCRUFnQlVFQ2RDSU9JQVFnQ1VFRWRDSVBhbW9nQUNBUGFpQU9haW9DQUNBQUtnSXNsVGdDQUNBRlFRRnFJUVVNQVFzTElBbEJBV29oQ1F3QkN3QUxBQXRCQUVFRFFaYWdBa0VBRUR3Z0J4QXpJQW9RTXlBTUVETkRBQUNBdnlFR0N5QUlRU0JxSkFBZ0JndkdEd1FJZndWOEEzMEJleU1BUWVBQmF5SUhKQUFnQnlBRVFRUjBFRGtpQ1RZQzBBRWdDUVJBQWtBZ0J5QUVRUmhzRURraUNqWUMxQUVnQ2tVTkFDQUVRUUFnQkVFQVNoc2hDd05BSUFnZ0MwY0VRQ0FVSUFNZ0NFRU1iR29pRENvQ0NKSWhGQ0FYSUF6OVhRSUEvZVFCSVJjZ0NFRUJhaUVJREFFTEN5QVVJQVN5SWhXVklSUWdGeUFWL1JQOTV3RWhGMEVBSVFnRFFDQUlJQXRIQkVBZ0NTQUlRUVIwYWlBQ0lBaEJBM1JxL1YwQ0FQMWYvUXNEQUNBS0lBaEJHR3hxSWd3Z0F5QUlRUXhzYWlJTi9WMENBQ0FYL2VVQi9WLzlDd01BSUF3Z0RTb0NDQ0FVazdzNUF4QWdDRUVCYWlFSURBRUxDeUFISUFRMkF0Z0JRUUFoQWdOQVFRQWhDQ0FDUVFOSEJFQURRQ0FJUVFOSEJFQWdCMEh3QUdvZ0FrRUZkR29nQ0VFRGRHb2dBU0FDUVFSMGFpQUlRUUowYWlvQ0FMczVBd0FnQ0VFQmFpRUlEQUVMQ3lBQ1FRRnFJUUlNQVFzTElBY2dBU29DRENBQktnSUlJQlNVSUFFcUFnQWdGLzBmQUNJVmxDQVgvUjhCSWhZZ0FTb0NCSlNTa3BLN09RT0lBU0FISUFFcUFod2dBU29DR0NBVWxDQUJLZ0lRSUJXVUlCWWdBU29DRkpTU2twSzdPUU9vQVNBSElBRXFBaXdnQVNvQ0tDQVVsQ0FCS2dJZ0lCV1VJQllnQVNvQ0pKU1NrcEs3T1FQSUFRSkFJQVpGQkVBZ0FDQUhRZEFCYWlBSFFmQUFhaUFIUVJCcUlBZEJDR29RNWdWQkFFNE5BU0FIUW9DQWdJREE4UFhMd1FBM0F3Z01BUXNnQjBId0FHb2hDaUFIUVJCcUlRd2pBRUdnQVdzaUF5UUFRWDhoQVFKQUlBY29BdGdCSWdKQkJFZ05BQUovSUFBckE0QUJJQUszb2lJUW1VUUFBQUFBQUFEZ1FXTUVRQ0FRcWd3QkMwR0FnSUNBZUFzaENTQUNRZUFBYkJBNUlnUkZCRUJCQUVFRFFkc0xRUUFRUEF3QkN5QUNRUVIwRURraUJrVUVRRUVBUVFOQjJ3dEJBQkE4SUFRUU13d0JDeUFDUVFOMElnRVFPU0lMUlFSQVFRQkJBMEhiQzBFQUVEd2dCQkF6SUFZUU0wRi9JUUVNQVFzZ0FSQTVJZ2dFUUNBSlFRUWdDVUVFU2h0QkFXc2hDVUVBSVFJRFFFRUFJUUVnQWtFRFJnUkFJQWdnQ1VFRGRHb2hEa0VBSVEwQ1FBTkFJQUFnRENBRFFUQnFFUGNHUVFBaEFRTkFJQWNvQXRnQklnSWdBVW9FUUNBRFFaQUJhaUFEUVRCcUlBY29BdFFCSUFGQkdHeHFFSWtHUVFCSURRTWdBVUVFZENJQ0lBY29BdEFCYWlJSkt3TUFJUkVnQXlzRGtBRWhFaUFDSUFacUlnSWdDU3NEQ0NBREt3T1lBYUVpRURrRENDQUNJQkVnRXFFaUVUa0RBQ0FJSUFGQkEzUWlBbW9nRVNBUm9pQVFJQkNpb0NJUU9RTUFJQUlnQzJvZ0VEa0RBQ0FCUVFGcUlRRU1BUXNMSUFnZ0FrRUlRUUVRa0FWQkFDRUJJQWNvQXRnQklnSkJBQ0FDUVFCS0d5RUpJQTRyQXdCRUFBQUFBQUFBRUVDaVJBQUFBQUFBQURCQXBTSVJSQUFBQUFBQUFCaEFveUVTUkFBQUFBQUFBQUFBSVJBRFFDQUJJQWxIQkVBZ0VTQUlJQUZCQTNScUt3TUFJaE5qQkh3Z0VpQVFvQVVnRWtRQUFBQUFBQUR3UDBRQUFBQUFBQUR3UHlBVElCR2pvU0lUSUJPaUlCT2lvYUlnRUtBTElSQWdBVUVCYWlFQkRBRUxDd0pBSUJBZ0FyZWpJaEFnQUNzRGFHTU5BQUpBSUExRkRRQWdFQ0FBS3dONFkwVU5BQ0FBS3dOd0lCQWdENk5qRFFFTFFRQWhDVUVBSVFvZ0RTQUFLQUpnUmcwQUEwQWdBaUFKU2dSQUlCRWdDeUFKUVFOMGFpc0RBQ0lQWmdSQUlBUWdDa0VHYkVFRGRDSUNhaUlCSUFBZ0RDQUhLQUxVQVNBSlFSaHNhaENFQmtFQVNBMEZJQUZFQUFBQUFBQUE4RDhnRHlBUm82RWlEeUFQb2lJUElBRXJBd0NpT1FNQUlBUWdBa0VJY21vaUFpQVBJQUlyQXdDaU9RTUFJQUVnRHlBQkt3TVFvamtERUNBQklBOGdBU3NER0tJNUF4Z2dBU0FQSUFFckF5Q2lPUU1nSUFFZ0R5QUJLd01vb2prREtDQUJJQThnQVNzRE1LSTVBekFnQVNBUElBRXJBemlpT1FNNElBRkJRR3NpQWlBUElBSXJBd0NpT1FNQUlBRWdEeUFCS3dOSW9qa0RTQ0FCSUE4Z0FTc0RVS0k1QTFBZ0FTQVBJQUVyQTFpaU9RTllJQVlnQ2tFRGRHb2lBU0FQSUFZZ0NVRUVkR29pQWlzREFLSTVBd0FnQVNBUElBSXJBd2lpT1FNSUlBcEJBbW9oQ2lBSEtBTFlBU0VDQ3lBSlFRRnFJUWtNQVFzTElBcEJCVXdOQWlBRElBWWdCQ0FLRVA0RlFRQklEUUlnRENBREVQZ0ZJQTFCQVdvaERTQVFJUThNQVFzTElBY2dFRGtEQ0NBRUVETWdCaEF6SUFzUU15QUlFRE5CQUNFQkRBUUxJQVFRTXlBR0VETWdDeEF6SUFnUU0wRi9JUUVNQXdVRFFDQUJRUVJIQkVBZ0FVRURkQ0lOSUF3Z0FrRUZkQ0lPYW1vZ0NpQU9haUFOYWlzREFEa0RBQ0FCUVFGcUlRRU1BUXNMSUFKQkFXb2hBZ3dCQ3dBTEFBdEJBRUVEUWRzTFFRQVFQQ0FFRURNZ0JoQXpJQXNRTTBGL0lRRUxJQU5Cb0FGcUpBQWdBVUVBVGcwQUlBZENnSUNBZ01EdzljdkJBRGNEQ0FzZ0J5Z0MwQUVRTXlBSEtBTFVBUkF6UVFBaEFnTkFRUUFoQ0NBQ1FRTkhCRUFEUUNBSVFRTkhCRUFnQlNBQ1FRUjBhaUFJUVFKMGFpQUhRUkJxSUFKQkJYUnFJQWhCQTNScUt3TUF0amdDQUNBSVFRRnFJUWdNQVFzTElBSkJBV29oQWd3QkN3c2dCU0FIS3dNb0lBY3JBeEFnRmJzaUVLS2hJQWNyQXhnZ0Zyc2lENktoSUFjckF5QWdGTHNpRWFLaHRqZ0NEQ0FGSUFjckEwZ2dCeXNETUNBUW9xRWdCeXNET0NBUG9xRWdCMEZBYXlzREFDQVJvcUcyT0FJY0lBVWdCeXNEYUNBSEt3TlFJQkNpb1NBSEt3TllJQStpb1NBSEt3TmdJQkdpb2JZNEFpd2dCeXNEQ0NFUUlBZEI0QUZxSkFBZ0VMWVBDd3RCQUVFRFFhS2hBa0VBRUR4QkFSQURBQXZ0QVFJQmZ3UjlJd0JCTUdzaUJpUUFBbjhnQUFSQUlBQkJDR29nQVNBR0VMQURJQUJCdUFGcUlBWXFBZ3dnQmlvQ0FDQUNsQ0FHS2dJRUlBT1VrcElnQmlvQ0xDQUdLZ0lnSUFLVUlBWXFBaVFnQTVTU2tpSUhsU0FHS2dJY0lBWXFBaEFnQXBRZ0Jpb0NGQ0FEbEpLU0lBZVZJQVFnQlJCeVFSOTFEQUVMSUFFcUFod2hCeUFCS2dJVUlRZ2dBU29DRUNFSklBUWdBU29DRENBQktnSUFJQUtVSUFFcUFnUWdBNVNTa2lBQktnSXNJQUVxQWlBZ0FwUWdBU29DSkNBRGxKS1NJZ3FWT0FJQUlBVWdCeUFKSUFLVUlBZ2dBNVNTa2lBS2xUZ0NBRUVBQ3lFQklBWkJNR29rQUNBQkM3VUNBUVYvQTBCQkFDRUNJQUVvQWt3YVFmOEJJUVVnQUNFREFrQURRQUpBQWtBQ1FDQUJLQUlFSWdJZ0FTZ0NDQ0lFUmcwQUFuOGdBa0VLSUFRZ0Ftc1EyUU1pQmdSQUlBWWdBU2dDQkNJQ2EwRUJhZ3dCQ3lBQktBSUlJQUVvQWdRaUFtc0xJUVFnQXlBQ0lBUWdCU0FFSUFWSkd5SUNFRDhhSUFFZ0FTZ0NCQ0FDYWlJRU5nSUVJQUlnQTJvaEF5QUdEUUlnQlNBQ2F5SUZSUTBDSUFRZ0FTZ0NDRVlOQUNBQklBUkJBV28yQWdRZ0JDMEFBQ0VDREFFTElBRVFod01pQWtFQVRnMEFRUUFoQWlBQUlBTkdEUU1nQVMwQUFFRVFjUTBCREFNTElBTWdBam9BQUNBRFFRRnFJUU1nQWtIL0FYRkJDa1lOQUNBRlFRRnJJZ1VOQVFzTElBQkZCRUJCQUNFQ0RBRUxJQU5CQURvQUFDQUFJUUlMSUFJRVFDQUFMUUFBSWdOQkNrWWdBMEVqUm5JTkFRc0xJQUlMRlFBZ0FFTUFBSUEvSUFFZ0FVTUFBQUFBV3h1VkN5SUFJQUFnQVNvQ0FDQUNLZ0lBa3pnQ0FDQUFJQUVxQWdRZ0Fpb0NCSk00QWdRTEVRQWdBRVVFUUE4TElBQWdBVGtEZ0FFTEVRQWdBQkR1QlNBQkVPNEZJQUlRbndZTEpnRUJmeUFBUVFScUVQZ0RJZ0ZCZjBZRVFDQUFJQUFvQWdBb0FnZ1JBUUFMSUFGQmYwWUxaQUVDZnlNQVFSQnJJZ1VrQUNBRlFRQTJBZ3dnQUVFTWFpQURFTHNCSUFFRVFDQUFLQUlRSUFFUS9BTWhCQXNnQUNBRU5nSUFJQUFnQkNBQ1FRSjBhaUlDTmdJSUlBQWdBallDQkNBQUVEMGdCQ0FCUVFKMGFqWUNBQ0FGUVJCcUpBQWdBQXNOQUNBQUtBSUFFRE1nQUJBekN5VUJBWDhqQUVFUWF5SUJKQUFnQVVFSWFpQUFFSlVHS0FJQUlRQWdBVUVRYWlRQUlBQUxsd0VCQkg4akFFRVFheUlESkFBQ1FDQUJFSVlCUlFSQUlBQWdBU2dDQ0RZQ0NDQUFJQUVwQWdBM0FnQU1BUXNnQVNnQ0FDRUVBa0FDUUFKQUlBRW9BZ1FpQWtFS1RRUkFJQUFpQVNBQ0VJOEJEQUVMSUFKQmIwc05BU0FBSUFJUW5RSkJBV29pQlJCT0lnRVFtUUVnQUNBRkVMUUJJQUFnQWhDSkFRc2dBU0FFSUFKQkFXb1F0d0VNQVFzUVZRQUxDeUFEUVJCcUpBQUxIQUFnQUJDM0JpSUFRZFRWQVRZQ0FDQUFRUVJxSUFFUTNBSWdBQXZyRkFJTmZ3RjlJd0JCRUdzaURTUUFJQUVvQWdCQkFrWUVRQUpBQWtBQ1FBSkFBa0FnQWlnQ0FBNERBUU1BQWdzZ0FTZ0NHQ0VMSUFCQkxHcEJBQkE3SVFBZ0FpZ0NHQ0VJSUFJb0FnZ2hDZ0pBSUFJb0FnUWlCMEVFU3dSQUlBcEJCRXNFUUNBSFFRSnJJUVlnQjBFQmEwRUNkQ0VKSUFkQkEydEJBblFoRENBSFFRUnJRUUowSVE0Z0FDRUJBMEFDUUNBRElBcEdCRUJCQUNFRklBc2hBaUFIUVFKMElnUWdBQ0lHYWlJQklRTWdBU0FFYWlJRUlRZ01BUXRCQWlFRklBRWdDQ0FESUFkc1FRSjBhaUlDS2dJSUlBSXFBZ0FpRUNBUVF3QUF3RUNVSUJBZ0Fpb0NCSkpEQUFDQVFKU1NrcEk0QWdBZ0FTQUNLZ0lNSUFJcUFnQWlFQ0FDS2dJRVF3QUF3RUNVSUJBZ0Fpb0NDSkpEQUFDQVFKU1NrcEk0QWdRZ0FVRUlhaUVFQTBBZ0JTQUdSZ1JBSUFRZ0FpQUphaUlCS2dJQUloQWdBaUFPYWlvQ0FDQUNJQVpCQW5ScUlnVXFBZ0JEQUFEQVFKUWdFQ0FDSUF4cUlnSXFBZ0NTUXdBQWdFQ1VrcEtTT0FJQUlBUWdBU29DQUNJUUlBSXFBZ0FnRUVNQUFNQkFsQ0FRSUFVcUFnQ1NRd0FBZ0VDVWtwS1NPQUlFSUFOQkFXb2hBeUFFUVFocUlRRU1Bd1VnQkNBQ0lBVkJBblJxSWdFcUFnZ2dBVUVJYXlvQ0FDQUJLZ0lBUXdBQXdFQ1VJQUZCQkdzcUFnQWdBaUFGUVFGcUlnVkJBblJxS2dJQWtrTUFBSUJBbEpLU2tqZ0NBQ0FFUVFScUlRUU1BUXNBQ3dBTEN3TkFJQVVnQjBjRVFDQUNJQWdxQWdBZ0Jpb0NBQ0lRSUJCREFBREFRSlFnRUNBREtnSUFra01BQUlCQWxKS1Nra01BQUlBN2xEZ0NBQ0FJUVFScUlRZ2dBMEVFYWlFRElBWkJCR29oQmlBQ1FRUnFJUUlnQlVFQmFpRUZEQUVMQ3lBTElBZEJBblFpQTJvaEFpQURJQVJxSVFaQkFDRUZJQUFoQXdOQUlBVWdCMFlFUUFKQUlBcEJBbXNoREVFQ0lRa0RRQUpBSUFrZ0RFWUVRQ0FBSUFwQkJHc2dCMnhCQW5ScUlnRWdCMEVDZENJRGFpSUVJQU5xSWdJZ0Eyb2hCaUFMSUFjZ0RHeEJBblJxSVFOQkFDRUZEQUVMSUFBZ0NVRUNheUFIYkVFQ2RHb2lBU0FIUVFKMElnTnFJZ1FnQTJvaUFpQURhaUlHSUFOcUlRTWdDeUFISUFsc1FRSjBhaUVJUVFBaEJRTkFJQVVnQjBZRVFDQUpRUUZxSVFrTUF3VWdDQ0FES2dJQUlBRXFBZ0FnQWlvQ0FFTUFBTUJBbENBRUtnSUFJQVlxQWdDU1F3QUFnRUNVa3BLU1F3QUFnRHVVT0FJQUlBTkJCR29oQXlBR1FRUnFJUVlnQWtFRWFpRUNJQVJCQkdvaEJDQUJRUVJxSVFFZ0NFRUVhaUVJSUFWQkFXb2hCUXdCQ3dBTEFBc0xBMEFnQlNBSFJ3UkFJQU1nQmlvQ0FDSVFJQUVxQWdBZ0Fpb0NBRU1BQU1CQWxDQVFJQVFxQWdDU1F3QUFnRUNVa3BLU1F3QUFnRHVVT0FJQUlBWkJCR29oQmlBQ1FRUnFJUUlnQkVFRWFpRUVJQUZCQkdvaEFTQURRUVJxSVFNZ0JVRUJhaUVGREFFTEN5QUFJQXBCQTJzZ0IyeEJBblJxSWdFZ0IwRUNkQ0lBYWlJRUlBQnFJUUlnQ3lBS1FRRnJJQWRzUVFKMGFpRUdRUUFoQlFOQUlBVWdCMFlOQVNBR0lBSXFBZ0FpRUNBQktnSUFJQkJEQUFEQVFKUWdFQ0FFS2dJQWtrTUFBSUJBbEpLU2trTUFBSUE3bERnQ0FDQUNRUVJxSVFJZ0JFRUVhaUVFSUFGQkJHb2hBU0FHUVFScUlRWWdCVUVCYWlFRkRBQUxBQXNGSUFJZ0Jpb0NBQ0FES2dJQUloQWdBU29DQUVNQUFNQkFsQ0FRSUFRcUFnQ1NRd0FBZ0VDVWtwS1NRd0FBZ0R1VU9BSUFJQVpCQkdvaEJpQUVRUVJxSVFRZ0FVRUVhaUVCSUFOQkJHb2hBeUFDUVFScUlRSWdCVUVCYWlFRkRBRUxDd3dDQzBId3J3UkJ5Q29RTWtHSkZSQXlRYjhjRURKQnFRRVFOVUg1SUJBeVFZZ2tFRElRTmhBQUFBdEI4SzhFUWJnSkVESkJpUlVRTWtHL0hCQXlRYWdCRURWQitTQVFNa0dJSkJBeUVEWVFBQUFMREFNTFFSQVFDaUFOUVlEekFCQkxFTjBDUVpUVkFVRU9FQWtBQzBFUUVBb2dEVUhKOXdBUVN4RGRBa0dVMVFGQkRoQUpBQXNnQVNnQ0dDRUxJQUFvQWlBaEFDQUNLQUlZSVFnZ0FpZ0NDQ0VLQWtBZ0FpZ0NCQ0lIUVFSTEJFQWdDa0VFU3dSQUlBZEJCR3NoQ1NBSFFRTnJJUXdnQjBFQ2F5RUdJQWRCQVdzaERpQUFJUUVEUUFKQUlBTWdDa1lFUUVFQUlRVWdDeUVDSUFkQkFYUWlCQ0FBSWdacUlnRWhBeUFCSUFScUlnUWhDQXdCQzBFQ0lRVWdBU0FJSUFNZ0IyeHFJZ0l0QUFBaUJFRUhiQ0FDTFFBQ2FpQUNMUUFCSUFScVFRSjBhanNCQUNBQklBSXRBQU1nQWkwQUFDSUVJQUl0QUFGQkJteHFhaUFDTFFBQ0lBUnFRUUowYWpzQkFpQUJRUVJxSVFRRFFDQUZJQVpHQkVBZ0JDQUNJQWxxTFFBQUlBSWdEbW9pQVMwQUFDSUZJQUlnQm1vaUR5MEFBRUVHYkdwcUlBVWdBaUFNYWlJQ0xRQUFha0VDZEdvN0FRQWdCQ0FDTFFBQUlBRXRBQUFpQVVFSGJHb2dEeTBBQUNBQmFrRUNkR283QVFJZ0EwRUJhaUVESUFSQkJHb2hBUXdEQlNBRUlBSWdCV29pQVMwQUFFRUdiQ0FCUVFKckxRQUFhaUFDSUFWQkFXb2lCV290QUFBZ0FVRUJheTBBQUdwQkFuUnFJQUV0QUFKcU93RUFJQVJCQW1vaEJBd0JDd0FMQUFzTEEwQWdCU0FIUndSQUlBSWdDQzhCQUNBR0x3RUFJZ2xCQjJ3Z0F5OEJBQ0FKYWtFQ2RHcHFza01BQUlBN2xEZ0NBQ0FJUVFKcUlRZ2dBMEVDYWlFRElBWkJBbW9oQmlBQ1FRUnFJUUlnQlVFQmFpRUZEQUVMQ3lBTElBZEJBblJxSVFJZ0JDQUhRUUYwYWlFR1FRQWhCU0FBSVFNRFFDQUZJQWRHQkVBQ1FDQUtRUUpySVF4QkFpRUpBMEFDUUNBSklBeEdCRUFnQUNBS1FRUnJJQWRzUVFGMGFpSUJJQWRCQVhRaUEyb2lCQ0FEYWlJQ0lBTnFJUVlnQ3lBSElBeHNRUUowYWlFRFFRQWhCUXdCQ3lBQUlBbEJBbXNnQjJ4QkFYUnFJZ0VnQjBFQmRDSURhaUlFSUFOcUlnSWdBMm9pQmlBRGFpRURJQXNnQnlBSmJFRUNkR29oQ0VFQUlRVURRQ0FGSUFkR0JFQWdDVUVCYWlFSkRBTUZJQWdnQXk4QkFDQUJMd0VBSUFJdkFRQkJCbXhxSUFZdkFRQWdCQzhCQUdwQkFuUnFhckpEQUFDQU81UTRBZ0FnQTBFQ2FpRURJQVpCQW1vaEJpQUNRUUpxSVFJZ0JFRUNhaUVFSUFGQkFtb2hBU0FJUVFScUlRZ2dCVUVCYWlFRkRBRUxBQXNBQ3dzRFFDQUZJQWRIQkVBZ0F5QUJMd0VBSUFJdkFRQkJCbXhxSUFZdkFRQWlDQ0FFTHdFQWFrRUNkR29nQ0dxeVF3QUFnRHVVT0FJQUlBWkJBbW9oQmlBQ1FRSnFJUUlnQkVFQ2FpRUVJQUZCQW1vaEFTQURRUVJxSVFNZ0JVRUJhaUVGREFFTEN5QUFJQXBCQTJzZ0IyeEJBWFJxSWdFZ0IwRUJkQ0lBYWlJRUlBQnFJUUlnQ3lBS1FRRnJJQWRzUVFKMGFpRUdRUUFoQlFOQUlBVWdCMFlOQVNBR0lBRXZBUUFnQWk4QkFDSUFRUVpzYWlBQUlBUXZBUUJxUVFKMGFpQUFhckpEQUFDQU81UTRBZ0FnQWtFQ2FpRUNJQVJCQW1vaEJDQUJRUUpxSVFFZ0JrRUVhaUVHSUFWQkFXb2hCUXdBQ3dBTEJTQUNJQVl2QVFBZ0F5OEJBQ0lJSUFFdkFRQkJCbXhxSUFRdkFRQWdDR3BCQW5ScWFySkRBQUNBTzVRNEFnQWdCa0VDYWlFR0lBUkJBbW9oQkNBQlFRSnFJUUVnQTBFQ2FpRURJQUpCQkdvaEFpQUZRUUZxSVFVTUFRc0xEQUlMUWZDdkJFSElLaEF5UVlrVkVESkJ2eHdRTWtFNEVEVkIrU0FRTWtHSUpCQXlFRFlRQUFBTFFmQ3ZCRUc0Q1JBeVFZa1ZFREpCdnh3UU1rRTNFRFZCK1NBUU1rR0lKQkF5RURZUUFBQUxDeUFOUVJCcUpBQVBDMEh3cndSQnV1c0FFREpCaVJVUU1rRy9IQkF5UWVVQ0VEVkIrU0FRTWtIUzdnQVFNaEEyRUFBQUN3d0FJQUVnQWlrQ0FEY0NBQXNyQUNBQUtBSUFHaUFBS0FJQUlBQVF2QUZCREd4cUdpQUFLQUlBR2lBQUtBSUFJQUFRVmtFTWJHb2FDMUFCQVg4Z0FCRHBBaUFBRURRZ0FDZ0NBQ0FBS0FJRUlBRkJCR29pQWhDWUFpQUFJQUlRUmlBQVFRUnFJQUZCQ0dvUVJpQUFFRFFnQVJBOUVFWWdBU0FCS0FJRU5nSUFJQUFnQUJCREVMUUNDMW9CQW44akFFRVFheUlDSkFBZ0FpQUJOZ0lNSUFFZ0FCQ1NCQ0lEVFFSQUlBQVEwd0VpQUNBRFFRRjJTUVJBSUFJZ0FFRUJkRFlDQ0NBQ1FRaHFJQUpCREdvUWVTZ0NBQ0VEQ3lBQ1FSQnFKQUFnQXc4TEVKb0JBQXMwQUNBQUtBSUFHaUFBS0FJQUlBQVExQUZCQTNScUdpQUFLQUlBSUFBUVFrRURkR29hSUFBb0FnQWdBQkRVQVVFRGRHb2FDeTRCQVg4Z0FDZ0NCQ0FCS0FJSUVMb0JJZ0lFUUNBQ0lBQWdBUkNSQkVFQVRnUkFJQUlQQ3lBQ0VFVUxRUUFMQ2dBZ0FDZ0NCQkNVQkFzaEFRRjlBa0FnQUVNQUFBQUFYUTBBSUFFZ0FDSUNYVVVOQUNBQklRSUxJQUlMcEFFQkFuOGdBQ2dDQkNBQUVEUW9BZ0JIQkVBakFFRVFheUlESkFBZ0F5QUFRUUVRd3dZaEFpQUFFRFFnQWlnQ0JDQUJFTUlHSUFJZ0FpZ0NCRUVrYWpZQ0JDQUNFRzRnQTBFUWFpUUFEd3NqQUVFZ2F5SURKQUFnQUJBMElnSWdBMEVJYWlBQUlBQVFnd0ZCQVdvUXdRWWdBQkNEQVNBQ0VKZ0VJZ0lvQWdnZ0FSRENCaUFDSUFJb0FnaEJKR28yQWdnZ0FDQUNFSmNFSUFJUWxnUWdBMEVnYWlRQUM3RUpCQWQ4QVg0QmZ3RjlJQUFnQWtFQklBUjBzaUlDbEFKOEFrQUNRQUpBSUFSQkFXdTNJZ2U5SWd4Q0lJaW5JZ1JCLy8vLy93ZHhJZ0FnREtjaURYSUVmQ0FIUkFBQUFBQUFBQUJBb0NBTlJTQUFRWUNBd1A4SFIzSWdBRUdBZ01EL0IwMXhSUTBFR2dKQUlBME5BQ0FIUkFBQUFBQUFBQUFBSUF4Q0FGa2JJQUJCZ0lEQS93ZEdEUVVhSUFCQmdJREEvd05HQkVCRUFBQUFBQUFBQUVBZ0RFSUFXUTBHR2tRQUFBQUFBQURnUHd3R0MwUUFBQUFBQUFBUVFDQUVRWUNBZ0lBRVJnMEZHaUFFUVlDQWdQOERSdzBBUk0wN2YyYWVvUFkvREFVTElBQkJnWUNBandSUERRTkJnT3dDS3dNQVJBQUFBQUFBQVBBL1FmRHJBaXNEQUNJSW9TSUpSQUFBQUFBQUFQQS9JQWhFQUFBQUFBQUE4RCtnb3lJS29pSUd2VUtBZ0lDQWNJTy9JZ1VnQlNBRm9pSUxSQUFBQUFBQUFBaEFvQ0FLSUFrZ0JTQUZvS0VnQlVRQUFBQUFBQUR3UDBRQUFBQUFBQUFBUUNBSW9hR2lvYUlpQ0NBR0lBV2dvaUFHSUFhaUlnVWdCYUlnQlNBRklBVWdCU0FGUk85T1JVb29mc28vb2tSbDI4bVRTb2JOUDZDaVJBRkJIYWxnZE5FL29LSkVUU2FQVVZWVjFUK2dva1QvcTIvYnRtM2JQNkNpUkFNek16TXpNK00vb0tLZ0lnbWd2VUtBZ0lDQWNJTy9JZ1dpSWdvZ0NDQUZvaUFHSUFrZ0JVUUFBQUFBQUFBSXdLQWdDNkdob3FBaUJxQzlRb0NBZ0lCd2c3OGlCVVQxQVZzVTRDOCt2cUlnQmlBRklBcWhvVVQ5QXpyY0NjZnVQNktnb0NJR1FaRHNBaXNEQUNJSUlBWWdCVVFBQUFEZ0NjZnVQNklpQnFDZ1JBQUFBQUFBQVBBL29MMUNnSUNBZ0hDRHZ5SUZSQUFBQUFBQUFQQS9vU0FJb1NBR29hRWhCaUFISUF4Q2dJQ0FnSENEdnlJSW9TQUZvaUFHSUFlaW9DSUhJQVVnQ0tJaUJhQWlCcjBpREtjaEJBSkFJQXhDSUlpbklnQkJnSURBaEFST0JFQWdBRUdBZ01DRUJHc2dCSElOQXlBSFJQNkNLMlZIRlpjOG9DQUdJQVdoWkVVTkFRd0RDeUFBUVlENC8vOEhjVUdBbU1PRUJFa05BQ0FBUVlEb3ZQc0RhaUFFY2cwRElBY2dCaUFGb1dWRkRRQU1Bd3RCQUNFRUFud2dBRUgvLy8vL0IzRWlEVUdCZ0lEL0EwOEVma0VBUVlDQXdBQWdEVUVVZGtIK0IydDJJQUJxSWdCQi8vOC9jVUdBZ01BQWNrR1RDQ0FBUVJSMlFmOFBjU0lOYTNZaUJHc2dCQ0FNUWdCVEd5RUVJQWNnQlVHQWdFQWdEVUgvQjJ0MUlBQnhyVUlnaHIraElnV2d2UVVnREF0Q2dJQ0FnSENEdnlJR1JBQUFBQUJETHVZL29pSUlJQWNnQmlBRm9hRkU3em42L2tJdTVqK2lJQVpFT1d5b0RHRmNJTDZpb0NJR29DSUZJQVVnQlNBRklBV2lJZ2NnQnlBSElBY2dCMFRRcEw1eWFUZG1QcUpFOFd2U3hVRzl1NzZnb2tRczNpV3ZhbFlSUDZDaVJKTzl2aFpzd1dhL29LSkVQbFZWVlZWVnhUK2dvcUVpQjZJZ0IwUUFBQUFBQUFBQXdLQ2pJQVVnQmlBRklBaWhvU0lGb2lBRm9LR2hSQUFBQUFBQUFQQS9vQ0lGdlNJTVFpQ0lweUFFUVJSMGFpSUFRZi8vUDB3RVFDQUZJQVFRN0FFTUFRc2dERUwvLy8vL0Q0TWdBSzFDSUlhRXZ3dEVBQUFBQUFBQThEK2lCVVFBQUFBQUFBRHdQd3NNQXd0RUFBQUFBQUFBOEg4TUFndEVBQUFBQUFBQUFBQU1BUXRFQUFBQUFBQUE4SDlFQUFBQUFBQUFBQUFnQkVFQVNoc0xSQUFBQUFBQUFPQy9vTFlpRHBJNEFnQWdBU0FESUFLVUlBNlNPQUlBQ3pRQUlBQW9BZ0FhSUFBb0FnQWdBQkRUQVVFQ2RHb2FJQUFvQWdBZ0FCQkRRUUowYWhvZ0FDZ0NBQ0FBRU5NQlFRSjBhaG9MRFFBZ0FDQUJJQUpCREJDb0JBcy9BUUYvSXdCQkVHc2lBaVFBSUFBUU5Cb2dBaUFCTmdJTUlBSkIvLy8vL3djMkFnZ2dBa0VNYWlBQ1FRaHFFUHdCS0FJQUlRQWdBa0VRYWlRQUlBQUxEd0FnQUNBQUtBSUFRUUZxTmdJQUN6a0JBbjhqQUVFUWF5SURKQUFnQTBFSWFpSUVJQUVRVHlBQ0lBUVF2d0lpQVJDZEFUWUNBQ0FBSUFFUW5BRWdCQkJISUFOQkVHb2tBQXMzQVFKL0l3QkJFR3NpQWlRQUlBSkJDR29pQXlBQUVFOGdBeENWQVVIQXVBTkIycmdESUFFUTZBRWdBeEJISUFKQkVHb2tBQ0FCQ3prQkFuOGpBRUVRYXlJREpBQWdBMEVJYWlJRUlBRVFUeUFDSUFRUW5BSWlBUkNkQVRvQUFDQUFJQUVRbkFFZ0JCQkhJQU5CRUdva0FBdENBUVIvUVJnaEFnSkFBMEFnQUMwQUFDSURJQUV0QUFBaUJFWUVRQ0FCUVFGcUlRRWdBRUVCYWlFQUlBSkJBV3NpQWcwQkRBSUxDeUFESUFScklRVUxJQVVMRHdBZ0FDZ0NTQm9nQUNBQk5nSklDNndCQVFKL0FuOENRQ0FBS0FKTUlnRkJBRTRFUUNBQlJRMEJRWVNZQkNnQ0FDQUJRZi8vLy85N2NVY05BUXNnQUNnQ0JDSUJJQUFvQWdoSEJFQWdBQ0FCUVFGcU5nSUVJQUV0QUFBTUFnc2dBQkNIQXd3QkN5QUFRY3dBYWlJQklBRW9BZ0FpQWtILy8vLy9BeUFDR3pZQ0FBSi9JQUFvQWdRaUFpQUFLQUlJUndSQUlBQWdBa0VCYWpZQ0JDQUNMUUFBREFFTElBQVFod01MSVFBZ0FTZ0NBQm9nQVVFQU5nSUFJQUFMQzN3QkEzOUJmeUVEQWtBZ0FFRi9SZzBBSUFFb0FreEJBRTRoQkFKQUFrQWdBU2dDQkNJQ1JRUkFJQUVRaUFNYUlBRW9BZ1FpQWtVTkFRc2dBaUFCS0FJc1FRaHJTdzBCQ3lBRVJRMEJRWDhQQ3lBQklBSkJBV3NpQWpZQ0JDQUNJQUE2QUFBZ0FTQUJLQUlBUVc5eE5nSUFJQUJCL3dGeElRTUxJQU1MVFFBZ0FFRUFOZ0lVSUFBZ0FUWUNHQ0FBUVFBMkFnd2dBRUtDb0lDQTRBQTNBZ1FnQUNBQlJUWUNFQ0FBUVNCcVFRQkJLQkE2R2lBQVFSeHFFSkVISUFCQkFEWUNTQ0FBUVg4MkFrd0xIUUFnQUNBQklBSWdBeUFFSUFVZ0JpQUhJQUFvQWdBb0Fnd1JEUUFMREFBZ0FDQUJRUVJxRUxZRUMxVUFJQUFnQVRZQ0JDQUFRUUE2QUFBZ0FTQUJLQUlBUVF4cktBSUFhaERMQXdSQUlBRWdBU2dDQUVFTWF5Z0NBR29vQWtnRVFDQUJJQUVvQWdCQkRHc29BZ0JxS0FKSUVQa0NDeUFBUVFFNkFBQUxJQUFMRFFBZ0FFRUVhaERFQWhvZ0FBdHlBUUYvSXdCQkVHc2lBU1FBSUFBZ0FDZ0NBRUVNYXlnQ0FHb29BaGdFUUNBQlFRaHFJQUFROXdJYUFrQWdBUzBBQ0VVTkFDQUFJQUFvQWdCQkRHc29BZ0JxS0FJWUVNWUNRWDlIRFFBZ0FDQUFLQUlBUVF4cktBSUFha0VCRU1JQ0N5QUJRUWhxRU1VQ0N5QUJRUkJxSkFBTERRQWdBRUVJYWhERUFob2dBQXNFQUVGL0Mxb0NBWDhCZmdKQUFuOUJBQ0FBUlEwQUdpQUFyU0FCclg0aUE2Y2lBaUFBSUFGeVFZQ0FCRWtOQUJwQmZ5QUNJQU5DSUlpbkd3c2lBaEE1SWdCRkRRQWdBRUVFYXkwQUFFRURjVVVOQUNBQVFRQWdBaEE2R2dzZ0FBc1dBQ0FBUlFSQVFRQVBDMEh3bGdRZ0FEWUNBRUYvQytVQ0FRWi9Jd0JCRUdzaUJ5UUFJQU5CaktFRUlBTWJJZ1VvQWdBaEF3SkFBa0FDUUNBQlJRUkFJQU1OQVF3REMwRitJUVFnQWtVTkFpQUFJQWRCREdvZ0FCc2hCZ0pBSUFNRVFDQUNJUUFNQVFzZ0FTMEFBQ0lBUVJoMFFSaDFJZ05CQUU0RVFDQUdJQUEyQWdBZ0EwRUFSeUVFREFRTElBRXNBQUFoQUVITW1BUW9BZ0FvQWdCRkJFQWdCaUFBUWYrL0EzRTJBZ0JCQVNFRURBUUxJQUJCL3dGeFFjSUJheUlBUVRKTERRRWdBRUVDZEVIZ2lRTnFLQUlBSVFNZ0FrRUJheUlBUlEwQ0lBRkJBV29oQVFzZ0FTMEFBQ0lJUVFOMklnbEJFR3NnQTBFYWRTQUphbkpCQjBzTkFBTkFJQUJCQVdzaEFDQUlRWUFCYXlBRFFRWjBjaUlEUVFCT0JFQWdCVUVBTmdJQUlBWWdBellDQUNBQ0lBQnJJUVFNQkFzZ0FFVU5BaUFCUVFGcUlnRXRBQUFpQ0VIQUFYRkJnQUZHRFFBTEN5QUZRUUEyQWdCQjhKWUVRUmsyQWdCQmZ5RUVEQUVMSUFVZ0F6WUNBQXNnQjBFUWFpUUFJQVFMZ1FNQkRYOUJBQ0FBSUFCQmxRRkxHMEVCZEVIZy93SnFMd0VBUWJqeEFtb2hCMEhNbUFRb0FnQW9BaFFpQUFSL0lBQW9BZ1FoQlNBQUtBSUFJZ0FvQWdnZ0FDZ0NBRUdpMnUvWEJtb2lBaENFQWlFRElBQW9BZ3dnQWhDRUFpRUVJQUFvQWhBZ0FoQ0VBaUVCQWtBZ0F5QUZRUUoyVHcwQUlBRWdCSEpCQTNFZ0JDQUZJQU5CQW5ScklnWlBJQUVnQms5eWNnMEFJQUZCQW5ZaENpQUVRUUoySVF0QkFDRUVBMEFnQUNBRUlBTkJBWFlpQm1vaURFRUJkQ0lOSUF0cVFRSjBhaUlCS0FJQUlBSVFoQUloQ1NBRklBRW9BZ1FnQWhDRUFpSUJUU0FKSUFVZ0FXdFBjZzBCSUFBZ0FTQUphbW90QUFBTkFTQUhJQUFnQVdvUW93SWlBVVVFUUNBQUlBb2dEV3BCQW5ScUlnUW9BZ0FnQWhDRUFpRURJQVVnQkNnQ0JDQUNFSVFDSWdKTklBTWdCU0FDYTA5eURRSkJBQ0FBSUFKcUlBQWdBaUFEYW1vdEFBQWJJUWdNQWdzZ0EwRUJSZzBCSUFZZ0F5QUdheUFCUVFCSUlnRWJJUU1nQkNBTUlBRWJJUVFNQUFzQUN5QUlCVUVBQ3lJQUlBY2dBQnNMQXdBQkM4c0JBUUovSXdCQkVHc2lBU1FBQWtBZ0FMMUNJSWluUWYvLy8vOEhjU0lDUWZ2RHBQOERUUVJBSUFKQmdJREE4Z05KRFFFZ0FFUUFBQUFBQUFBQUFFRUFFTXNDSVFBTUFRc2dBa0dBZ01EL0IwOEVRQ0FBSUFDaElRQU1BUXNDUUFKQUFrQUNRQ0FBSUFFUW5RVkJBM0VPQXdBQkFnTUxJQUVyQXdBZ0FTc0RDRUVCRU1zQ0lRQU1Bd3NnQVNzREFDQUJLd01JRU13Q0lRQU1BZ3NnQVNzREFDQUJLd01JUVFFUXl3S2FJUUFNQVFzZ0FTc0RBQ0FCS3dNSUVNd0NtaUVBQ3lBQlFSQnFKQUFnQUF0SUFRSi9BbjhnQVVFZlRRUkFJQUFvQWdBaEFpQUFRUVJxREFFTElBRkJJR3NoQVNBQUN5Z0NBQ0VESUFBZ0FpQUJkRFlDQUNBQUlBTWdBWFFnQWtFZ0lBRnJkbkkyQWdRTHNnSUJCWDhqQUVId0FXc2lCeVFBSUFjZ0F5Z0NBQ0lJTmdMb0FTQURLQUlFSVFNZ0J5QUFOZ0lBSUFjZ0F6WUM3QUZCQVNFSkFrQUNRQUpBSUFoQkFVY2dBM0pGQkVBZ0FDRUREQUVMUVFBZ0FXc2hDeUFBSVFnRFFDQUlJQVlnQkVFQ2RHb2lDaWdDQUdzaUF5QUFJQUlSQXdCQkFFd0VRQ0FJSVFNTUFnc0NRQ0FGSUFSQkFraHlSUVJBSUFwQkNHc29BZ0FoQlNBSUlBdHFJZ29nQXlBQ0VRTUFRUUJPRFFFZ0NpQUZheUFESUFJUkF3QkJBRTROQVFzZ0J5QUpRUUowYWlBRE5nSUFJQWRCNkFGcUlnVWdCUkNPQlNJRkVJUURJQWxCQVdvaENTQUVJQVZxSVFSQkFDRUZJQU1oQ0NBSEtBTG9BVUVCUncwQklBY29BdXdCRFFFTUF3c0xJQWdoQXd3QkN5QUZEUUVMSUFFZ0J5QUpFSTBGSUFNZ0FTQUNJQVFnQmhEWUF3c2dCMEh3QVdva0FBdElBUUovQW44Z0FVRWZUUVJBSUFBb0FnUWhBaUFBREFFTElBRkJJR3NoQVNBQVFRUnFDeWdDQUNFRElBQWdBaUFCZGpZQ0JDQUFJQUpCSUNBQmEzUWdBeUFCZG5JMkFnQUw1QUVCQ1g4Z0FDQUFRVDBRaWdVaUFVWUVRRUVBRHdzQ1FDQUFJQUVnQUdzaUJXb3RBQUFOQUVHRWx3UW9BZ0FpQTBVTkFDQURLQUlBSWdKRkRRQURRQUpBQW44Z0FDRUJRUUFoQmtFQUlBVWlCMFVOQUJvQ1FDQUJMUUFBSWdSRkRRQURRQUpBSUFJdEFBQWlDRVVOQUNBSFFRRnJJZ2RGSUFRZ0NFZHlEUUFnQWtFQmFpRUNJQUV0QUFFaEJDQUJRUUZxSVFFZ0JBMEJEQUlMQ3lBRUlRWUxJQVpCL3dGeElBSXRBQUJyQzBVRVFDQURLQUlBSUFWcUlnRXRBQUJCUFVZTkFRc2dBeWdDQkNFQ0lBTkJCR29oQXlBQ0RRRU1BZ3NMSUFGQkFXb2hDUXNnQ1F1REFRRUJmd0pBSUFKQkFVY05BQ0FBS0FJSUlnTkZEUUFnQVNBRElBQW9BZ1JyckgwaEFRc0NRQ0FBS0FJVUlBQW9BaHhIQkVBZ0FFRUFRUUFnQUNnQ0pCRUVBQm9nQUNnQ0ZFVU5BUXNnQUVFQU5nSWNJQUJDQURjREVDQUFJQUVnQWlBQUtBSW9FUk1BUWdCVERRQWdBRUlBTndJRUlBQWdBQ2dDQUVGdmNUWUNBQXNMUVFFQ2Z5TUFRUkJySWdFa0FFRi9JUUlDUUNBQUVJZ0REUUFnQUNBQlFROXFRUUVnQUNnQ0lCRUVBRUVCUncwQUlBRXRBQThoQWdzZ0FVRVFhaVFBSUFJTGZBRUNmeUFBSUFBb0FrZ2lBVUVCYXlBQmNqWUNTQ0FBS0FJVUlBQW9BaHhIQkVBZ0FFRUFRUUFnQUNnQ0pCRUVBQm9MSUFCQkFEWUNIQ0FBUWdBM0F4QWdBQ2dDQUNJQlFRUnhCRUFnQUNBQlFTQnlOZ0lBUVg4UEN5QUFJQUFvQWl3Z0FDZ0NNR29pQWpZQ0NDQUFJQUkyQWdRZ0FVRWJkRUVmZFF2VEFRRUJmd0pBSUFSQkFFd05BQ0FFUVFGcklRWWdBQ0FCUVFKMGFpRUFJQUlnQTBFQ2RHb2hBU0FFUVFOeElnTUVRRUVBSVFJRFFDQUJLQUlBSUFBb0FnQWdCUkEvR2lBRVFRRnJJUVFnQVVFRWFpRUJJQUJCQkdvaEFDQUNRUUZxSWdJZ0EwY05BQXNMSUFaQkEwa05BQU5BSUFFb0FnQWdBQ2dDQUNBRkVEOGFJQUVvQWdRZ0FDZ0NCQ0FGRUQ4YUlBRW9BZ2dnQUNnQ0NDQUZFRDhhSUFFb0Fnd2dBQ2dDRENBRkVEOGFJQUZCRUdvaEFTQUFRUkJxSVFBZ0JFRUZheUVDSUFSQkJHc2hCQ0FDUVg1SkRRQUxDd3NTQUNBQUlBRnFRUUZySWdBZ0FDQUJiMnNMQ3dBZ0FFRUFOZ0lBSUFBTDlRWUJESDhqQUVHZ0Ntc2lCeVFBSUFKQkJFOEVRQ0FBS0FJQUlnVWdBallDR0NBRlFUUTJBaFFnQUNBQUtBSUFLQUlBRVFFQUN5QUFRYlFCUWNRQklBRWJhaUFDUVFKMGFpZ0NBQ0lJUlFSQUlBQW9BZ0FpQlNBQ05nSVlJQVZCTkRZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMSUFNb0FnQWlDVVVFUUNBRElBQkJBVUdRQ3lBQUtBSUVLQUlBRVFRQUlnazJBZ0FMSUFrZ0NEWUNqQUZCQUNFRlFRRWhBZ05BSUFVZ0FpQUlhaTBBQUNJRWFpSURRWUVDVGdSQUlBQW9BZ0FpQmtFSk5nSVVJQUFnQmlnQ0FCRUJBQXNnQkFSQUlBZEJrQWhxSUFWcUlBSWdCQkE2R2lBRElRVUxJQUpCQVdvaUFrRVJSdzBBQzBFQUlRTWdCMEdRQ0dvZ0JXcEJBRG9BQUNBSExRQ1FDQ0lHQkVBZ0JrRVlkRUVZZFNFRVFRQWhBZ05BSUFaQkdIUkJHSFVnQkVZRVFBTkFJQWNnQTBFQ2RHb2dBallDQUNBQ1FRRnFJUUlnQkNBRFFRRnFJZ01nQjBHUUNHcHFMQUFBSWdaR0RRQUxDMEVCSUFSMElBSk1CRUFnQUNnQ0FDSUtRUWsyQWhRZ0FDQUtLQUlBRVFFQUN5QUVRUUZxSVFRZ0FrRUJkQ0VDSUFaQi93RnhEUUFMQzBFQUlRTkJBU0VDQTBBZ0NTQUNRUUowYWlBQ0lBaHFJZ1F0QUFBRWZ5QUpJQUpCQW5ScUlBTWdCeUFEUVFKMGFpZ0NBR3MyQWtnZ0F5QUVMUUFBYWlJRFFRSjBJQWRxUVFScktBSUFCVUYvQ3pZQ0FDQUNRUUZxSWdKQkVVY05BQXNnQ1VILy96ODJBa1JCQUNFS0lBbEJrQUZxUVFCQmdBZ1FPaHBCQVNFR0EwQWdCaUFJYWlJTUxRQUFCRUJCQVNFTFFRRkJDQ0FHYXlJTmRDRUVBMEFnQ0NBS2FpRU9JQWNnQ2tFQ2RHb29BZ0FnRFhRaEFpQUVJUU1EUUNBSklBSkJBblJxSUFZMkFwQUJJQUlnQ1dwQmtBbHFJQTR0QUJFNkFBQWdBa0VCYWlFQ0lBTkJBVW9oRHlBRFFRRnJJUU1nRHcwQUN5QUtRUUZxSVFvZ0N5QU1MUUFBU1NFQ0lBdEJBV29oQ3lBQ0RRQUxDeUFHUVFGcUlnWkJDVWNOQUFzQ1FDQUJSU0FGUVFCTWNnMEFRUUFoQWlBRlFRRkhCRUFnQlVGK2NTRUJRUUFoQXdOQUlBSWdDR290QUJGQkVFOEVRQ0FBS0FJQUlnUkJDVFlDRkNBQUlBUW9BZ0FSQVFBTElBZ2dBa0VCY21vdEFCRkJFRThFUUNBQUtBSUFJZ1JCQ1RZQ0ZDQUFJQVFvQWdBUkFRQUxJQUpCQW1vaEFpQURRUUpxSWdNZ0FVY05BQXNMSUFWQkFYRkZEUUFnQWlBSWFpMEFFVUVRU1EwQUlBQW9BZ0FpQVVFSk5nSVVJQUFnQVNnQ0FCRUJBQXNnQjBHZ0Ntb2tBQXNuQVFKL0lBRW9BZ0FoQWlNQVFSQnJJZ01rQUNBQUlBRkJCR29nQWhEOUJpQURRUkJxSkFBTENRQWdBU0FDRU53Q0N3NEFJQUVnQXYwQUFnRDlDd0lBQzBzQkFYOGpBRUVRYXlJREpBQWdBeUFDTmdJTVFkaXNBaUFCUWFEcEEwR0Fwd0pCM1FBZ0EwRU1haER2QVVHZzZRTkIwS1lDUWQ0QUlBTkJER29RN3dFUUx5QURRUkJxSkFBZ0FBc1pBQ0FBSUFGQnZkOEJRYUgyQTBHbzdRTkJwTzBERUtrRUN3b0FJQUJCR0dvUTBRRUxJQUFnQUNvQ0FDQUJLZ0lFbENBQktnSUFJQUFxQWdTVWs0dERBQUFBUDVRTHNnRUJBWDBnQUNBQktnSUFqRGdDQUNBQktnSUVJUU1nQUVHQWdJRDhlellDQ0NBQUlBT01PQUlFSUFCQkRHb1E2Z1VnQUNBQ0tnSUFJQUVxQWdDVU9BSVlJQUFnQWlvQ0FDQUJLZ0lFbERnQ0hDQUFJQUlxQWdBNEFpQWdBRUVrYWhEcUJTQUFJQUVxQWdDTU9BSXdJQUVxQWdRaEF5QUFRWUNBZ1B4N05nSTRJQUFnQTR3NEFqUWdBQ0FDS2dJRUlBRXFBZ0NVT0FJOElBQWdBaW9DQkNBQktnSUVsRGdDUUNBQUlBSXFBZ1E0QWtRTElnQWdBQ0FCSUFJUXFRRkRBQUFBQUY0Z0F5QUVJQVVRcVFGREFBQUFBRjV6UlFzTUFDQUFJQUVnQUNBQlhSc0xRUUVDZnlNQVFTQnJJZ0lrQUNBQUVOUUJJQUZKQkVBZ0FCQTBJUU1nQUNBQ1FRaHFJQUVnQUJCQ0lBTVFtd01pQUJDZ0F5QUFFSjhEQ3lBQ1FTQnFKQUFMRHdBZ0FDQUFLQUlFUVFGcU5nSUVDd2tBSUFBZ0FSQ0NCZ3NKQUNBQUlBRTZBR1FMWkFFQ2Z5TUFRUkJySWdVa0FDQUZRUUEyQWd3Z0FFRU1haUFERUxzQklBRUVRQ0FBS0FJUUlBRVFtZ1loQkFzZ0FDQUVOZ0lBSUFBZ0JDQUNRUU4wYWlJQ05nSUlJQUFnQWpZQ0JDQUFFRDBnQkNBQlFRTjBhallDQUNBRlFSQnFKQUFnQUFzTUFDQUFJQUVnQUNBQlNCc0xFQUFnQUNnQ0FDQUJLQUlBYTBFRGRRc3NBQ0FBS0FJQUdpQUFLQUlBSUFBUTFBRkJBM1JxR2lBQUtBSUFJQUFRMUFGQkEzUnFHaUFBS0FJQUdndE5BUUYvSUFBb0FnUWhBUU5BSUFFZ0FDZ0NDRWNFUUNBQUtBSVFHaUFBSUFBb0FnaEJDR3MyQWdnTUFRc0xJQUFvQWdBRVFDQUFLQUlRR2lBQUtBSUFJUUVnQUJDK0Job2dBUkF6Q3d0UUFRRi9JQUFRNHdJZ0FCQTBJQUFvQWdBZ0FDZ0NCQ0FCUVFScUlnSVFtQUlnQUNBQ0VFWWdBRUVFYWlBQlFRaHFFRVlnQUJBMElBRVFQUkJHSUFFZ0FTZ0NCRFlDQUNBQUlBQVFRaENlQXd1T0JnSUpmd0o4SUFBb0FnQWhCU0FBS0FJRUlRTkJBQ0VBSXdCQjBBOXJJZ1lrQUFKQUlBTkI5QU5LRFFBQ1FBSkFBa0FnQXc0Q0F3QUJDeUFGUkFBQUFBQUFBUEEvSUFVckF3Q2pPUU1BREFFTElBTkJBQ0FEUVFCS0d5RUpBMEFnQUNBSlJnUkFBMEFnQkNBSlJnUkFRUUFoQkFOQUlBa2dCQ0lCUmcwRkEwQUNRQ0FCSUFOR0JFQWdBeUVCREFFTElBWWdBVUVDZEdvb0FnQWdCRVlOQUNBQlFRRnFJUUVNQVFzTElBWWdBVUVDZEdvZ0JpQUVRUUowYWlnQ0FEWUNBQ0FGSUFSQkEzUnFJUUFnQlNBQlFRTjBhaUVCUVFBaEFnTkFJQUlnQ1VjRVFDQUJLd01BSVFvZ0FTQUFLd01BT1FNQUlBQWdDamtEQUNBQ1FRRnFJUUlnQUNBRFFRTjBJZ2hxSVFBZ0FTQUlhaUVCREFFTEN5QUVRUUZxSVFRTUFBc0FDMFFBQUFBQUFBQUFBQ0VLUVg4aEFpQUZJQVFpQUNBRGJFRURkR29pQ0NFQkEwQWdBQ0FEUndSQUlBRXJBd0NaSWdzZ0NpQUtJQXRqSWdjYklRb2dBQ0FDSUFjYklRSWdBRUVCYWlFQUlBRWdBMEVEZEdvaEFRd0JDd3RCQUNFQUlBSkJmMFlnQ2tTN3ZkZlozM3piUFdWeURRUWdCaUFDUVFKMGFpSUFLQUlBSVFFZ0FDQUdJQVJCQW5ScUlnQW9BZ0EyQWdBZ0FDQUJOZ0lBSUFVZ0FpQURiRUVEZEdvaEFFRUFJUUlnQ0NFQkEwQWdBaUFEUndSQUlBQXJBd0FoQ2lBQUlBRXJBd0E1QXdBZ0FTQUtPUU1BSUFKQkFXb2hBaUFCUVFocUlRRWdBRUVJYWlFQURBRUxDeUFJS3dNQUlRcEJBU0VCSUFnaEFBTkFJQUVnQTBjRVFDQUFJQUFyQXdnZ0NxTTVBd0FnQVVFQmFpRUJJQUJCQ0dvaEFBd0JDd3NnQUVRQUFBQUFBQUR3UHlBS296a0RBRUVBSVFjRFFDQURJQWRIQkVBZ0JDQUhSd1JBSUFVZ0F5QUhiRUVEZEdvaUFDc0RBSm9oQ2tFQklRRWdDQ0VDQTBBZ0FTQURSd1JBSUFBZ0NpQUNLd01Bb2lBQUt3TUlvRGtEQUNBQ1FRaHFJUUlnQVVFQmFpRUJJQUJCQ0dvaEFBd0JDd3NnQUNBQ0t3TUFJQXFpT1FNQUN5QUhRUUZxSVFjTUFRc0xJQVJCQVdvaEJBd0FDd0FGSUFZZ0FFRUNkR29nQURZQ0FDQUFRUUZxSVFBTUFRc0FDd0FMSUFVaEFBc2dCa0hRRDJva0FFRUFRWDhnQUJzTFdnRUNmeU1BUVJCcklnSWtBQ0FDSUFFMkFnd2dBU0FBRUkwRUlnTk5CRUFnQUJEVUFTSUFJQU5CQVhaSkJFQWdBaUFBUVFGME5nSUlJQUpCQ0dvZ0FrRU1haEI1S0FJQUlRTUxJQUpCRUdva0FDQUREd3NRbWdFQUN3Y0FJQUFRU0JvTEt3RUJmeUFBSUFFb0FnQTJBZ0FnQVNnQ0FDRURJQUFnQVRZQ0NDQUFJQU1nQWtFQ2RHbzJBZ1FnQUFzckFDQUFLQUlBR2lBQUtBSUFJQUFRMHdGQkFuUnFHaUFBS0FJQUdpQUFLQUlBSUFBUVEwRUNkR29hQzFJQkEzOGpBRUVRYXlJREpBQWdBeUFBSUFFUXRRSWlBaWdDQkNFQklBSW9BZ2doQkFOQUlBRWdCRVlFUUNBQ0VHNGdBMEVRYWlRQUJTQUFFRFFnQVJETUJpQUNJQUZCQkdvaUFUWUNCQXdCQ3dzTEN3QWdBQ0FCUVFnUSt3RUxQZ0VDZnlNQVFSQnJJZ01rQUNBRElBQkJBUkMvQmlFQ0lBQVFOQ0FDS0FJRUlBRVEzd0lnQWlBQ0tBSUVRUWhxTmdJRUlBSVFiaUFEUVJCcUpBQUxLQUFnQUNBQkVFWWdBRUVFYWlBQlFRUnFFRVlnQUJBMElBRVFOQkJHSUFBUU5Cb2dBUkEwR2d1Q0FRQUNRQ0FDUXdBQUFBQmdCRUFnQUNnQ0ZMSWdBbDVGRFFFZ0FDb0NHQ0FDRU4wR1FRRWdBWFN5bEE4TFFmQ3ZCRUhudEFFUU1rR1pyd0VRTWtHL0hCQXlRZWdCRURWQitTQVFNa0hudFFFUU1oQTJFQUFBQzBId3J3UkI4YkFCRURKQm1hOEJFREpCdnh3UU1rSHBBUkExUWZrZ0VESkIvclVCRURJUU5oQUFBQXRhQVFKL0l3QkJFR3NpQWlRQUlBSWdBVFlDRENBQklBQVE1d1lpQTAwRVFDQUFFTnNCSWdBZ0EwRUJka2tFUUNBQ0lBQkJBWFEyQWdnZ0FrRUlhaUFDUVF4cUVIa29BZ0FoQXdzZ0FrRVFhaVFBSUFNUEN4Q2FBUUFMREFBZ0FTQUNMUUFBT2dBQUN5RUFJQUFnQVRZQ0FDQUFJQUVvQWdRaUFUWUNCQ0FBSUFFZ0FtbzJBZ2dnQUFzU0FDQUFFRDBvQWdBZ0FDZ0NBR3RCREcwTExBQWdBQ2dDQUJvZ0FDZ0NBQ0FBRUx3QlFReHNhaG9nQUNnQ0FDQUFFTHdCUVF4c2Fob2dBQ2dDQUJvTG5RRUNCSDhEZlFOQUlBUkJBMGNFUUNBQUlBUkJCWFJxSWdZckF4QzJJUWNnQmlzRENMWWhDQ0FHS3dNQXRpRUpRUUFoQXdOQUlBTkJCRWNFUUNBRFFRSjBJZ1VnQWlBRVFRUjBhbW9nQnlBQklBVnFJZ1VxQWlDVUlBa2dCU29DQUpRZ0JTb0NFQ0FJbEpLU09BSUFJQU5CQVdvaEF3d0JDd3NnQWlBRVFRUjBhaUlESUFNcUFnd2dCaXNER0xhU09BSU1JQVJCQVdvaEJBd0JDd3NMVlFFQmZ5QUFLQUlFSVFJRFFDQUNJQUFvQWdoSEJFQWdBQ2dDRUJvZ0FDQUFLQUlJSUFGck5nSUlEQUVMQ3lBQUtBSUFCRUFnQUNnQ0VCb2dBQ2dDQUNFQ0lBQVFQU2dDQUNBQUtBSUFheG9nQWhBekN3dEpBUUovSUFBb0FnUWlCa0VJZFNFRklBWkJBWEVFUUNBQ0tBSUFJQVVRclFRaEJRc2dBQ2dDQUNJQUlBRWdBaUFGYWlBRFFRSWdCa0VDY1JzZ0JDQUFLQUlBS0FJWUVRWUFDL01CQVFSL0l3QkJFR3NpQ0NRQUlBSWdBVUYvYzBFUmEwMEVRQ0FBRUQ0aENRSi9JQUZCNS8vLy93ZEpCRUFnQ0NBQlFRRjBOZ0lJSUFnZ0FTQUNhallDRENBSVFReHFJQWhCQ0dvUWVTZ0NBQkNkQWd3QkMwRnVDMEVCYWlJS0VFNGhBaUFFQkVBZ0FpQUpJQVFRdHdFTElBWUVRQ0FDSUFScUlBY2dCaEMzQVFzZ0F5QUVJQVZxSWd0cklRY2dBeUFMUndSQUlBSWdCR29nQm1vZ0JDQUphaUFGYWlBSEVMY0JDeUFCUVFwSEJFQWdDUkF6Q3lBQUlBSVFtUUVnQUNBS0VMUUJJQUFnQkNBR2FpQUhhaUlBRUlrQklBaEJBRG9BQnlBQUlBSnFJQWhCQjJvUWhRRWdDRUVRYWlRQUR3c1FWUUFMbm1vRERYOEVmUWw4SXdCQjRBRnJJZ3drQUNBTVFvQ0FnSUNBZ09DdHdBQTNBOWdCSUF4Q2dJQ0FnSUNBNEszQUFEY0R5QUVnREVLQWdJQ0FnSURBck1BQU53TzRBU0FNUW9DQWdJQ0FnTUNzd0FBM0E5QUJJQXhDZ0lDQWdJQ0E0SzNBQURjRHdBRWdERUtBZ0lDQWdJRGdyY0FBTndPd0FTQU1Rb0NBZ0lDQWdNQ3N3QUEzQTZnQklBeENnSUNBZ0lDQXdLekFBRGNEb0FFRFFDQU5RUVJIQkVBZ0RVRUVkQ0lPSUF4QjRBQnFhaUlSSUFrZ0Rtb2lEaXNEQURrREFDQVJJQTRyQXdnNUF3Z2dEVUVCYWlFTkRBRUxDeUFNUWFBQmFpRVZJQXhCNEFCcUlSWWdERUVRYWlFU1FRQWhEVUVJUVFnUXVnRWhFMEVJUVFFUXVnRWhEMEVJUVFFUXVnRWhFQ0FQS0FJQUlSY2dFeWdDQUNFWUEwQWdEVUVFUndSQUlCZ2dEVUVIZEdvaUNTQVZJQTFCQkhRaUZHb2lEaXNEQURrREFDQU9Ld01JSVIwZ0NVSUFOd01vSUFsQ0FEY0RJQ0FKUWdBM0F4Z2dDVUtBZ0lDQWdJQ0ErRDgzQXhBZ0NTQWRPUU1JSUFrZ0ZDQVdhaUlSS3dNQUlBNHJBd0Nhb2prRE1DQVJLd01BSVIwZ0Rpc0RDQ0VlSUFsQ0FEY0RVQ0FKUWdBM0EwZ2dDVUZBYTBJQU53TUFJQWtnSFNBZW1xSTVBemdnQ1NBT0t3TUFPUU5ZSUE0ckF3Z2hIU0FKUW9DQWdJQ0FnSUQ0UHpjRGFDQUpJQjA1QTJBZ0NTQVJLd01JSUE0ckF3Q2FvamtEY0NBSklCRXJBd2dnRGlzRENKcWlPUU40SUJRZ0Yyb2lDU0FSS3dNQU9RTUFJQWtnRVNzRENEa0RDQ0FOUVFGcUlRME1BUXNMSUJNUW9RTWFJQkFnRXlBUEVKRUVHaUFRS0FJQUlRNUJBQ0VKQTBBZ0NVRUNSd1JBSUJJZ0NVRVliQ0lSYWlJTklBNGdFV29pRVNzREFEa0RBQ0FOSUJFckF3ZzVBd2dnRFNBUkt3TVFPUU1RSUFsQkFXb2hDUXdCQ3dzZ0VpQU9Ld013T1FNd0lBNHJBemdoSFNBU1FVQnJRb0NBZ0lDQWdJRDRQemNEQUNBU0lCMDVBemdnRXhCRklBOFFSU0FRRUVVQ2Z5QU1Ld053SWgwZ0RDc0RnQUVpSHFFaUh5QWZvaUFNS3dONEloOGdEQ3NEaUFFaUlLRWlJU0Fob3FBaUlabEVBQUFBQUFBQTRFRmpCRUFnSWFvTUFRdEJnSUNBZ0hnTElRa0Nmd0ovSUF3ckE1QUJJaUVnRENzRFlDSWlvU0lrSUNTaUlBd3JBNWdCSWlRZ0RDc0RhQ0lsb1NJaklDT2lvQ0lqbVVRQUFBQUFBQURnUVdNRVFDQWpxZ3dCQzBHQWdJQ0FlQXNpRGlBSklBa2dEa2didHlBS29pQUtvaUlqbVVRQUFBQUFBQURnUVdNRVFDQWpxZ3dCQzBHQWdJQ0FlQXNoRVFKL0lDSWdIYUVpSFNBZG9pQWxJQitoSWgwZ0hhS2dJaDJaUkFBQUFBQUFBT0JCWXdSQUlCMnFEQUVMUVlDQWdJQjRDeUVKQW44Q2Z5QWVJQ0doSWgwZ0hhSWdJQ0Frb1NJZElCMmlvQ0lkbVVRQUFBQUFBQURnUVdNRVFDQWRxZ3dCQzBHQWdJQ0FlQXNpRGlBSklBa2dEa2didHlBS29pQUtvaUlkbVVRQUFBQUFBQURnUVdNRVFDQWRxZ3dCQzBHQWdJQ0FlQXNoRGdKQUlBQkZCRUFnQWlFSkEwQWdBeUFKSWcxS0JFQWdEVUVCZENFSklBMGdEV3dnRGtnTkFRc0xJQUloRGdOQUlBNGlDU0FEVGcwQ0lBbEJBWFFoRGlBSklBbHNJQkZJRFFBTERBRUxJQUloQ1FOQUlBNGdDU0FKSWcxc1FRSjBTZ1JBSUExQkFYUWhDU0FESUExS0RRRUxDeUFDSVE0RFFDQU9JZ2tnQ1d4QkFuUWdFVTROQVNBSlFRRjBJUTRnQXlBSlNnMEFDd3NnQ2tRQUFBQUFBQUFrUUtJaEhVUUFBQUFBQUFEd1B5QUtvVVFBQUFBQUFBRGdQNkpFQUFBQUFBQUFKRUNpSVFvZ0NTQURJQU1nQ1VvYklna2dBbTBoRVNBTklBTWdBeUFOU2hzaUF5QUNiU0VTSUFJZ0Ftd2hFd0pBQWtBQ1FBSkFJQUZGQkVBZ0UwRURiQ0lUUVFRUS9BSWlEa1VOQkFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFjT0R3QUJBZ01FQlFZSENBa0tDd1VGQlE0TElBbEJBQ0FKUVFCS0d5RVBJQU5CQUNBRFFRQktHeUVRSUFwRUFBQUFBQUFBV1VDZ0lSNGdBN2NoSVNBSnR5RWlRUUFoQVFOQUlBRWdEMFlORENBZUlCMGdBYmRFQUFBQUFBQUE0RCtnb2lBaW82QWhDa0VBSVEwRFFDQU5JQkJIQkVBZ0RDc0RVQ0FNS3dOQUlCNGdIU0FOdDBRQUFBQUFBQURnUDZDaUlDR2pvQ0lmb2lBS0lBd3JBMGlpb0tBaUlFUUFBQUFBQUFBQUFHRU5FU0FNSUF3ckF5QWdEQ3NERUNBZm9pQUtJQXdyQXhpaW9LQWdJS08ySWhrNEFnd2dEQ0FNS3dNNElBd3JBeWdnSDZJZ0NpQU1Ld013b3FDZ0lDQ2p0aUlhT0FJSUlBZ2dHU0FhSUF4QkRHb2dERUVJYWhCeUdpQU1LZ0lNSVJrQ2Z5QUFRUUZHQkVBQ2Z5QU1LZ0lJUXdBQWdEK1NJaHFMUXdBQUFFOWRCRUFnR3FnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwSVFNQ2Z5QVpRd0FBZ0QrU0lobUxRd0FBQUU5ZEJFQWdHYWdNQVF0QmdJQ0FnSGdMUVFKdFFRRjBEQUVMQW44Z0RDb0NDRU1BQUFBL2tpSWFpME1BQUFCUFhRUkFJQnFvREFFTFFZQ0FnSUI0Q3lFRElCbERBQUFBUDVJaUdZdERBQUFBVDEwRVFDQVpxQXdCQzBHQWdJQ0FlQXNpQ1VFQVNDQUZJQWxNY2lBRFFRQklJQU1nQms1eWNrVUVRQ0FPSUFFZ0VXMGdBbXdnRFNBU2JXcEJER3hxSWdjZ0J5Z0NBQ0FFSUFNZ0JXd2dDV3BCQTJ4cUlnTXRBQUpxTmdJQUlBY2dCeWdDQkNBRExRQUJhallDQkNBSElBY29BZ2dnQXkwQUFHbzJBZ2dMSUExQkFXb2hEUXdCQ3dzZ0FVRUJhaUVCREFBTEFBc2dDVUVBSUFsQkFFb2JJUThnQTBFQUlBTkJBRW9iSVJBZ0NrUUFBQUFBQUFCWlFLQWhIaUFEdHlFaElBbTNJU0pCQUNFQkEwQWdBU0FQUmcwTElCNGdIU0FCdDBRQUFBQUFBQURnUDZDaUlDS2pvQ0VLUVFBaERRTkFJQTBnRUVjRVFDQU1Ld05RSUF3ckEwQWdIaUFkSUEyM1JBQUFBQUFBQU9BL29LSWdJYU9nSWgraUlBb2dEQ3NEU0tLZ29DSWdSQUFBQUFBQUFBQUFZUTBRSUF3Z0RDc0RJQ0FNS3dNUUlCK2lJQW9nRENzREdLS2dvQ0FnbzdZaUdUZ0NEQ0FNSUF3ckF6Z2dEQ3NES0NBZm9pQUtJQXdyQXpDaW9LQWdJS08ySWhvNEFnZ2dDQ0FaSUJvZ0RFRU1haUFNUVFocUVISWFJQXdxQWd3aEdRSi9JQUJCQVVZRVFBSi9JQXdxQWdoREFBQ0FQNUlpR290REFBQUFUMTBFUUNBYXFBd0JDMEdBZ0lDQWVBdEJBbTFCQVhRaEF3Si9JQmxEQUFDQVA1SWlHWXREQUFBQVQxMEVRQ0FacUF3QkMwR0FnSUNBZUF0QkFtMUJBWFFNQVFzQ2Z5QU1LZ0lJUXdBQUFEK1NJaHFMUXdBQUFFOWRCRUFnR3FnTUFRdEJnSUNBZ0hnTElRTWdHVU1BQUFBL2tpSVppME1BQUFCUFhRUkFJQm1vREFFTFFZQ0FnSUI0Q3lJSlFRQklJQVVnQ1V4eUlBTkJBRWdnQXlBR1RuSnlSUVJBSUE0Z0FTQVJiU0FDYkNBTklCSnRha0VNYkdvaUJ5QUhLQUlBSUFRZ0F5QUZiQ0FKYWtFRGJHb2lBeTBBQUdvMkFnQWdCeUFIS0FJRUlBTXRBQUZxTmdJRUlBY2dCeWdDQ0NBRExRQUNhallDQ0FzZ0RVRUJhaUVOREFFTEN5QUJRUUZxSVFFTUFBc0FDeUFKUVFBZ0NVRUFTaHNoRHlBRFFRQWdBMEVBU2hzaEVDQUtSQUFBQUFBQUFGbEFvQ0VlSUFPM0lTRWdDYmNoSWtFQUlRRURRQ0FCSUE5R0RRb2dIaUFkSUFHM1JBQUFBQUFBQU9BL29LSWdJcU9nSVFwQkFDRU5BMEFnRFNBUVJ3UkFJQXdyQTFBZ0RDc0RRQ0FlSUIwZ0RiZEVBQUFBQUFBQTREK2dvaUFobzZBaUg2SWdDaUFNS3dOSW9xQ2dJaUJFQUFBQUFBQUFBQUJoRFE4Z0RDQU1Ld01nSUF3ckF4QWdINklnQ2lBTUt3TVlvcUNnSUNDanRpSVpPQUlNSUF3Z0RDc0RPQ0FNS3dNb0lCK2lJQW9nRENzRE1LS2dvQ0FnbzdZaUdqZ0NDQ0FJSUJrZ0dpQU1RUXhxSUF4QkNHb1FjaG9nRENvQ0RDRVpBbjhnQUVFQlJnUkFBbjhnRENvQ0NFTUFBSUEva2lJYWkwTUFBQUJQWFFSQUlCcW9EQUVMUVlDQWdJQjRDMEVDYlVFQmRDRURBbjhnR1VNQUFJQS9raUlaaTBNQUFBQlBYUVJBSUJtb0RBRUxRWUNBZ0lCNEMwRUNiVUVCZEF3QkN3Si9JQXdxQWdoREFBQUFQNUlpR290REFBQUFUMTBFUUNBYXFBd0JDMEdBZ0lDQWVBc2hBeUFaUXdBQUFEK1NJaG1MUXdBQUFFOWRCRUFnR2FnTUFRdEJnSUNBZ0hnTElnbEJBRWdnQlNBSlRISWdBMEVBU0NBRElBWk9jbkpGQkVBZ0RpQUJJQkZ0SUFKc0lBMGdFbTFxUVF4c2FpSUhJQWNvQWdBZ0JDQURJQVZzSUFscVFRSjBhaUlETFFBQ2FqWUNBQ0FISUFjb0FnUWdBeTBBQVdvMkFnUWdCeUFIS0FJSUlBTXRBQUJxTmdJSUN5QU5RUUZxSVEwTUFRc0xJQUZCQVdvaEFRd0FDd0FMSUFsQkFDQUpRUUJLR3lFUElBTkJBQ0FEUVFCS0d5RVFJQXBFQUFBQUFBQUFXVUNnSVI0Z0E3Y2hJU0FKdHlFaVFRQWhBUU5BSUFFZ0QwWU5DU0FlSUIwZ0FiZEVBQUFBQUFBQTREK2dvaUFpbzZBaENrRUFJUTBEUUNBTklCQkhCRUFnRENzRFVDQU1Ld05BSUI0Z0hTQU50MFFBQUFBQUFBRGdQNkNpSUNHam9DSWZvaUFLSUF3ckEwaWlvS0FpSUVRQUFBQUFBQUFBQUdFTkRpQU1JQXdyQXlBZ0RDc0RFQ0Fmb2lBS0lBd3JBeGlpb0tBZ0lLTzJJaGs0QWd3Z0RDQU1Ld000SUF3ckF5Z2dINklnQ2lBTUt3TXdvcUNnSUNDanRpSWFPQUlJSUFnZ0dTQWFJQXhCREdvZ0RFRUlhaEJ5R2lBTUtnSU1JUmtDZnlBQVFRRkdCRUFDZnlBTUtnSUlRd0FBZ0QrU0locUxRd0FBQUU5ZEJFQWdHcWdNQVF0QmdJQ0FnSGdMUVFKdFFRRjBJUU1DZnlBWlF3QUFnRCtTSWhtTFF3QUFBRTlkQkVBZ0dhZ01BUXRCZ0lDQWdIZ0xRUUp0UVFGMERBRUxBbjhnRENvQ0NFTUFBQUEva2lJYWkwTUFBQUJQWFFSQUlCcW9EQUVMUVlDQWdJQjRDeUVESUJsREFBQUFQNUlpR1l0REFBQUFUMTBFUUNBWnFBd0JDMEdBZ0lDQWVBc2lDVUVBU0NBRklBbE1jaUFEUVFCSUlBTWdCazV5Y2tVRVFDQU9JQUVnRVcwZ0Ftd2dEU0FTYldwQkRHeHFJZ2NnQnlnQ0FDQUVJQU1nQld3Z0NXcEJBblJxSWdNdEFBQnFOZ0lBSUFjZ0J5Z0NCQ0FETFFBQmFqWUNCQ0FISUFjb0FnZ2dBeTBBQW1vMkFnZ0xJQTFCQVdvaERRd0JDd3NnQVVFQmFpRUJEQUFMQUFzZ0NVRUFJQWxCQUVvYklROGdBMEVBSUFOQkFFb2JJUkFnQ2tRQUFBQUFBQUJaUUtBaEhpQUR0eUVoSUFtM0lTSkJBQ0VCQTBBZ0FTQVBSZzBJSUI0Z0hTQUJ0MFFBQUFBQUFBRGdQNkNpSUNLam9DRUtRUUFoRFFOQUlBMGdFRWNFUUNBTUt3TlFJQXdyQTBBZ0hpQWRJQTIzUkFBQUFBQUFBT0Evb0tJZ0lhT2dJaCtpSUFvZ0RDc0RTS0tnb0NJZ1JBQUFBQUFBQUFBQVlRME5JQXdnRENzRElDQU1Ld01RSUIraUlBb2dEQ3NER0tLZ29DQWdvN1lpR1RnQ0RDQU1JQXdyQXpnZ0RDc0RLQ0Fmb2lBS0lBd3JBekNpb0tBZ0lLTzJJaG80QWdnZ0NDQVpJQm9nREVFTWFpQU1RUWhxRUhJYUlBd3FBZ3doR1FKL0lBQkJBVVlFUUFKL0lBd3FBZ2hEQUFDQVA1SWlHb3REQUFBQVQxMEVRQ0FhcUF3QkMwR0FnSUNBZUF0QkFtMUJBWFFoQXdKL0lCbERBQUNBUDVJaUdZdERBQUFBVDEwRVFDQVpxQXdCQzBHQWdJQ0FlQXRCQW0xQkFYUU1BUXNDZnlBTUtnSUlRd0FBQUQrU0locUxRd0FBQUU5ZEJFQWdHcWdNQVF0QmdJQ0FnSGdMSVFNZ0dVTUFBQUEva2lJWmkwTUFBQUJQWFFSQUlCbW9EQUVMUVlDQWdJQjRDeUlKUVFCSUlBVWdDVXh5SUFOQkFFZ2dBeUFHVG5KeVJRUkFJQTRnQVNBUmJTQUNiQ0FOSUJKdGFrRU1iR29pQnlBSEtBSUFJQVFnQXlBRmJDQUpha0VDZEdvaUF5MEFBV28yQWdBZ0J5QUhLQUlFSUFNdEFBSnFOZ0lFSUFjZ0J5Z0NDQ0FETFFBRGFqWUNDQXNnRFVFQmFpRU5EQUVMQ3lBQlFRRnFJUUVNQUFzQUN5QUpRUUFnQ1VFQVNoc2hEeUFEUVFBZ0EwRUFTaHNoRUNBS1JBQUFBQUFBQUZsQW9DRWVJQU8zSVNFZ0NiY2hJa0VBSVFFRFFDQUJJQTlHRFFjZ0hpQWRJQUczUkFBQUFBQUFBT0Evb0tJZ0lxT2dJUXBCQUNFTkEwQWdEU0FRUndSQUlBd3JBMUFnRENzRFFDQWVJQjBnRGJkRUFBQUFBQUFBNEQrZ29pQWhvNkFpSDZJZ0NpQU1Ld05Jb3FDZ0lpQkVBQUFBQUFBQUFBQmhEUXdnRENBTUt3TWdJQXdyQXhBZ0g2SWdDaUFNS3dNWW9xQ2dJQ0NqdGlJWk9BSU1JQXdnRENzRE9DQU1Ld01vSUIraUlBb2dEQ3NETUtLZ29DQWdvN1lpR2pnQ0NDQUlJQmtnR2lBTVFReHFJQXhCQ0dvUWNob2dEQ29DRENFWkFuOGdBRUVCUmdSQUFuOGdEQ29DQ0VNQUFJQS9raUlhaTBNQUFBQlBYUVJBSUJxb0RBRUxRWUNBZ0lCNEMwRUNiVUVCZENFREFuOGdHVU1BQUlBL2tpSVppME1BQUFCUFhRUkFJQm1vREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQXdCQ3dKL0lBd3FBZ2hEQUFBQVA1SWlHb3REQUFBQVQxMEVRQ0FhcUF3QkMwR0FnSUNBZUFzaEF5QVpRd0FBQUQrU0lobUxRd0FBQUU5ZEJFQWdHYWdNQVF0QmdJQ0FnSGdMSWdsQkFFZ2dCU0FKVEhJZ0EwRUFTQ0FESUFaT2NuSkZCRUFnRGlBQklCRnRJQUpzSUEwZ0VtMXFRUXhzYWlJSElBUWdBeUFGYkNBSmFtb3RBQUFpQXlBSEtBSUFhallDQUNBSElBTWdCeWdDQkdvMkFnUWdCeUFESUFjb0FnaHFOZ0lJQ3lBTlFRRnFJUTBNQVFzTElBRkJBV29oQVF3QUN3QUxJQWxCQUNBSlFRQktHeUVQSUFOQkFDQURRUUJLR3lFUUlBcEVBQUFBQUFBQVdVQ2dJUjRnQTdjaElTQUp0eUVpUVFBaEFRTkFJQUVnRDBZTkJpQWVJQjBnQWJkRUFBQUFBQUFBNEQrZ29pQWlvNkFoQ2tFQUlRMERRQ0FOSUJCSEJFQWdEQ3NEVUNBTUt3TkFJQjRnSFNBTnQwUUFBQUFBQUFEZ1A2Q2lJQ0dqb0NJZm9pQUtJQXdyQTBpaW9LQWlJRVFBQUFBQUFBQUFBR0VOQ3lBTUlBd3JBeUFnRENzREVDQWZvaUFLSUF3ckF4aWlvS0FnSUtPMkloazRBZ3dnRENBTUt3TTRJQXdyQXlnZ0g2SWdDaUFNS3dNd29xQ2dJQ0NqdGlJYU9BSUlJQWdnR1NBYUlBeEJER29nREVFSWFoQnlHaUFNS2dJTUlSa0NmeUFBUVFGR0JFQUNmeUFNS2dJSVF3QUFnRCtTSWhxTFF3QUFBRTlkQkVBZ0dxZ01BUXRCZ0lDQWdIZ0xRUUp0UVFGMElRTUNmeUFaUXdBQWdEK1NJaG1MUXdBQUFFOWRCRUFnR2FnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwREFFTEFuOGdEQ29DQ0VNQUFBQS9raUlhaTBNQUFBQlBYUVJBSUJxb0RBRUxRWUNBZ0lCNEN5RURJQmxEQUFBQVA1SWlHWXREQUFBQVQxMEVRQ0FacUF3QkMwR0FnSUNBZUFzaUNVRUFTQ0FGSUFsTWNpQURRUUJJSUFNZ0JrNXlja1VFUUNBT0lBRWdFVzBnQW13Z0RTQVNiV3BCREd4cUlnY2dCeWdDQUNBRUlBTWdCV3dnQ1dwQkFuUnFJZ010QUFOcU5nSUFJQWNnQnlnQ0JDQURMUUFDYWpZQ0JDQUhJQWNvQWdnZ0F5MEFBV28yQWdnTElBMUJBV29oRFF3QkN3c2dBVUVCYWlFQkRBQUxBQXNnQ1VFQUlBbEJBRW9iSVE4Z0EwRUFJQU5CQUVvYklSQWdDa1FBQUFBQUFBQlpRS0FoSGlBRHR5RWhJQW0zSVNKQkFDRUJBMEFnQVNBUFJnMEZJQjRnSFNBQnQwUUFBQUFBQUFEZ1A2Q2lJQ0tqb0NFS1FRQWhEUU5BSUEwZ0VFY0VRQ0FNS3dOUUlBd3JBMEFnSGlBZElBMjNSQUFBQUFBQUFPQS9vS0lnSWFPZ0loK2lJQW9nRENzRFNLS2dvQ0lnUkFBQUFBQUFBQUFBWVEwS0lBd2dEQ3NESUNBTUt3TVFJQitpSUFvZ0RDc0RHS0tnb0NBZ283WWlHVGdDRENBTUlBd3JBemdnRENzREtDQWZvaUFLSUF3ckF6Q2lvS0FnSUtPMklobzRBZ2dnQ0NBWklCb2dERUVNYWlBTVFRaHFFSElhSUF3cUFnd2hHUUovSUFCQkFVWUVRQUovSUF3cUFnaERBQUNBUDVJaUdvdERBQUFBVDEwRVFDQWFxQXdCQzBHQWdJQ0FlQXRCQW0xQkFYUWhBd0ovSUJsREFBQ0FQNUlpR1l0REFBQUFUMTBFUUNBWnFBd0JDMEdBZ0lDQWVBdEJBbTFCQVhRTUFRc0NmeUFNS2dJSVF3QUFBRCtTSWhxTFF3QUFBRTlkQkVBZ0dxZ01BUXRCZ0lDQWdIZ0xJUU1nR1VNQUFBQS9raUlaaTBNQUFBQlBYUVJBSUJtb0RBRUxRWUNBZ0lCNEN5SUhRUUJJSUFVZ0IweHlJQU5CQUVnZ0F5QUdUbkp5UlFSQUFuOGdCQ0FESUFWc0lnTWdCMnBCQVhScUxRQUJRUkJyc2tOL0NwVkRsQ0laSUFRZ0IwSCsvd054SUFOcVFRRjBhaUlETFFBQVFZQUJhN0lpR2tOT0dnRkVsSklpRzR0REFBQUFUMTBFUUNBYnFBd0JDMEdBZ0lDQWVBc2hCeUFETFFBQ0lRa2dEaUFCSUJGdElBSnNJQTBnRW0xcVFReHNhaUlESUFNb0FnQWdCMEVJZFNJSFFRQWdCMEVBU2hzaUIwSC9BU0FIUWY4QlNSdHFOZ0lBSUFNZ0F5Z0NDQUovSUJrZ0NVR0FBV3V5SWh0RG9Fck1RNVNTSWh5TFF3QUFBRTlkQkVBZ0hLZ01BUXRCZ0lDQWdIZ0xRUWgxSWdkQkFDQUhRUUJLR3lJSFFmOEJJQWRCL3dGSkcybzJBZ2dnQXlBREtBSUVBbjhnRzBPNEhsRERsQ0FaSUJwRC9wVEl3cFNTa2lJWmkwTUFBQUJQWFFSQUlCbW9EQUVMUVlDQWdJQjRDMEVJZFNJRFFRQWdBMEVBU2hzaUEwSC9BU0FEUWY4QlNSdHFOZ0lFQ3lBTlFRRnFJUTBNQVFzTElBRkJBV29oQVF3QUN3QUxJQWxCQUNBSlFRQktHeUVQSUFOQkFDQURRUUJLR3lFUUlBcEVBQUFBQUFBQVdVQ2dJUjRnQTdjaElTQUp0eUVpUVFBaEFRTkFJQUVnRDBZTkJDQWVJQjBnQWJkRUFBQUFBQUFBNEQrZ29pQWlvNkFoQ2tFQUlRMERRQ0FOSUJCSEJFQWdEQ3NEVUNBTUt3TkFJQjRnSFNBTnQwUUFBQUFBQUFEZ1A2Q2lJQ0dqb0NJZm9pQUtJQXdyQTBpaW9LQWlJRVFBQUFBQUFBQUFBR0VOQ1NBTUlBd3JBeUFnRENzREVDQWZvaUFLSUF3ckF4aWlvS0FnSUtPMkloazRBZ3dnRENBTUt3TTRJQXdyQXlnZ0g2SWdDaUFNS3dNd29xQ2dJQ0NqdGlJYU9BSUlJQWdnR1NBYUlBeEJER29nREVFSWFoQnlHaUFNS2dJTUlSa0NmeUFBUVFGR0JFQUNmeUFNS2dJSVF3QUFnRCtTSWhxTFF3QUFBRTlkQkVBZ0dxZ01BUXRCZ0lDQWdIZ0xRUUp0UVFGMElRTUNmeUFaUXdBQWdEK1NJaG1MUXdBQUFFOWRCRUFnR2FnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwREFFTEFuOGdEQ29DQ0VNQUFBQS9raUlhaTBNQUFBQlBYUVJBSUJxb0RBRUxRWUNBZ0lCNEN5RURJQmxEQUFBQVA1SWlHWXREQUFBQVQxMEVRQ0FacUF3QkMwR0FnSUNBZUFzaUIwRUFTQ0FGSUFkTWNpQURRUUJJSUFNZ0JrNXlja1VFUUFKL0lBUWdBeUFGYkNJRElBZHFRUUYwYWkwQUFFRVFhN0pEZndxVlE1UWlHU0FIUWY3L0EzRWdBMnBCQVhRZ0JHb2lBeTBBQVVHQUFXdXlJaHBEVGhvQlJKU1NJaHVMUXdBQUFFOWRCRUFnRzZnTUFRdEJnSUNBZ0hnTElRY2dBeTBBQXlFSklBNGdBU0FSYlNBQ2JDQU5JQkp0YWtFTWJHb2lBeUFES0FJQUlBZEJDSFVpQjBFQUlBZEJBRW9iSWdkQi93RWdCMEgvQVVrYmFqWUNBQ0FESUFNb0FnZ0NmeUFaSUFsQmdBRnJzaUliUTZCS3pFT1VraUljaTBNQUFBQlBYUVJBSUJ5b0RBRUxRWUNBZ0lCNEMwRUlkU0lIUVFBZ0IwRUFTaHNpQjBIL0FTQUhRZjhCU1J0cU5nSUlJQU1nQXlnQ0JBSi9JQnREdUI1UXc1UWdHU0FhUS82VXlNS1VrcElpR1l0REFBQUFUMTBFUUNBWnFBd0JDMEdBZ0lDQWVBdEJDSFVpQTBFQUlBTkJBRW9iSWdOQi93RWdBMEgvQVVrYmFqWUNCQXNnRFVFQmFpRU5EQUVMQ3lBQlFRRnFJUUVNQUFzQUN5QUpRUUFnQ1VFQVNoc2hEeUFEUVFBZ0EwRUFTaHNoRUNBS1JBQUFBQUFBQUZsQW9DRWVJQU8zSVNFZ0NiY2hJa0VBSVFFRFFDQUJJQTlHRFFNZ0hpQWRJQUczUkFBQUFBQUFBT0Evb0tJZ0lxT2dJUXBCQUNFTkEwQWdEU0FRUndSQUlBd3JBMUFnRENzRFFDQWVJQjBnRGJkRUFBQUFBQUFBNEQrZ29pQWhvNkFpSDZJZ0NpQU1Ld05Jb3FDZ0lpQkVBQUFBQUFBQUFBQmhEUWdnRENBTUt3TWdJQXdyQXhBZ0g2SWdDaUFNS3dNWW9xQ2dJQ0NqdGlJWk9BSU1JQXdnRENzRE9DQU1Ld01vSUIraUlBb2dEQ3NETUtLZ29DQWdvN1lpR2pnQ0NDQUlJQmtnR2lBTVFReHFJQXhCQ0dvUWNob2dEQ29DRENFWkFuOGdBRUVCUmdSQUFuOGdEQ29DQ0VNQUFJQS9raUlhaTBNQUFBQlBYUVJBSUJxb0RBRUxRWUNBZ0lCNEMwRUNiVUVCZENFREFuOGdHVU1BQUlBL2tpSVppME1BQUFCUFhRUkFJQm1vREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQXdCQ3dKL0lBd3FBZ2hEQUFBQVA1SWlHb3REQUFBQVQxMEVRQ0FhcUF3QkMwR0FnSUNBZUFzaEF5QVpRd0FBQUQrU0lobUxRd0FBQUU5ZEJFQWdHYWdNQVF0QmdJQ0FnSGdMSWdsQkFFZ2dCU0FKVEhJZ0EwRUFTQ0FESUFaT2NuSkZCRUFnRGlBQklCRnRJQUpzSUEwZ0VtMXFRUXhzYWlJSElBY29BZ0FnQkNBRElBVnNJQWxxUVFGMGFpSURMUUFCSWdsQkEzUkJCSEpCL0FGeGFqWUNBQ0FISUFjb0FnZ2dBeTBBQUNJRFFRUnlRZndCY1dvMkFnZ2dCeUFIS0FJRUlBTkJCWFFnQ1VFRGRuSkJBbkpCL2dGeGFqWUNCQXNnRFVFQmFpRU5EQUVMQ3lBQlFRRnFJUUVNQUFzQUN5QUpRUUFnQ1VFQVNoc2hEeUFEUVFBZ0EwRUFTaHNoRUNBS1JBQUFBQUFBQUZsQW9DRWVJQU8zSVNFZ0NiY2hJa0VBSVFFRFFDQUJJQTlHRFFJZ0hpQWRJQUczUkFBQUFBQUFBT0Evb0tJZ0lxT2dJUXBCQUNFTkEwQWdEU0FRUndSQUlBd3JBMUFnRENzRFFDQWVJQjBnRGJkRUFBQUFBQUFBNEQrZ29pQWhvNkFpSDZJZ0NpQU1Ld05Jb3FDZ0lpQkVBQUFBQUFBQUFBQmhEUWNnRENBTUt3TWdJQXdyQXhBZ0g2SWdDaUFNS3dNWW9xQ2dJQ0NqdGlJWk9BSU1JQXdnRENzRE9DQU1Ld01vSUIraUlBb2dEQ3NETUtLZ29DQWdvN1lpR2pnQ0NDQUlJQmtnR2lBTVFReHFJQXhCQ0dvUWNob2dEQ29DRENFWkFuOGdBRUVCUmdSQUFuOGdEQ29DQ0VNQUFJQS9raUlhaTBNQUFBQlBYUVJBSUJxb0RBRUxRWUNBZ0lCNEMwRUNiVUVCZENFREFuOGdHVU1BQUlBL2tpSVppME1BQUFCUFhRUkFJQm1vREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQXdCQ3dKL0lBd3FBZ2hEQUFBQVA1SWlHb3REQUFBQVQxMEVRQ0FhcUF3QkMwR0FnSUNBZUFzaEF5QVpRd0FBQUQrU0lobUxRd0FBQUU5ZEJFQWdHYWdNQVF0QmdJQ0FnSGdMSWdsQkFFZ2dCU0FKVEhJZ0EwRUFTQ0FESUFaT2NuSkZCRUFnRGlBQklCRnRJQUpzSUEwZ0VtMXFRUXhzYWlJSElBY29BZ0FnQkNBRElBVnNJQWxxUVFGMGFpSURMUUFCSWdsQkFuUkJCSEpCL0FGeGFqWUNBQ0FISUFjb0FnZ2dBeTBBQUNJRFFRUnlRZndCY1dvMkFnZ2dCeUFIS0FJRUlBTkJCWFFnQ1VFRGRuSkJCSEpCL0FGeGFqWUNCQXNnRFVFQmFpRU5EQUVMQ3lBQlFRRnFJUUVNQUFzQUN5QUpRUUFnQ1VFQVNoc2hEeUFEUVFBZ0EwRUFTaHNoRUNBS1JBQUFBQUFBQUZsQW9DRWVJQU8zSVNFZ0NiY2hJa0VBSVFFRFFDQUJJQTlHRFFFZ0hpQWRJQUczUkFBQUFBQUFBT0Evb0tJZ0lxT2dJUXBCQUNFTkEwQWdEU0FRUndSQUlBd3JBMUFnRENzRFFDQWVJQjBnRGJkRUFBQUFBQUFBNEQrZ29pQWhvNkFpSDZJZ0NpQU1Ld05Jb3FDZ0lpQkVBQUFBQUFBQUFBQmhEUVlnRENBTUt3TWdJQXdyQXhBZ0g2SWdDaUFNS3dNWW9xQ2dJQ0NqdGlJWk9BSU1JQXdnRENzRE9DQU1Ld01vSUIraUlBb2dEQ3NETUtLZ29DQWdvN1lpR2pnQ0NDQUlJQmtnR2lBTVFReHFJQXhCQ0dvUWNob2dEQ29DRENFWkFuOGdBRUVCUmdSQUFuOGdEQ29DQ0VNQUFJQS9raUlhaTBNQUFBQlBYUVJBSUJxb0RBRUxRWUNBZ0lCNEMwRUNiVUVCZENFREFuOGdHVU1BQUlBL2tpSVppME1BQUFCUFhRUkFJQm1vREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQXdCQ3dKL0lBd3FBZ2hEQUFBQVA1SWlHb3REQUFBQVQxMEVRQ0FhcUF3QkMwR0FnSUNBZUFzaEF5QVpRd0FBQUQrU0lobUxRd0FBQUU5ZEJFQWdHYWdNQVF0QmdJQ0FnSGdMSWdsQkFFZ2dCU0FKVEhJZ0EwRUFTQ0FESUFaT2NuSkZCRUFnRGlBQklCRnRJQUpzSUEwZ0VtMXFRUXhzYWlJSElBY29BZ0FnQkNBRElBVnNJQWxxUVFGMGFpSURMUUFCUWZBQmNXcEJDR28yQWdBZ0J5QUhLQUlJSUFNdEFBQWlBMEVJY2tINEFYRnFOZ0lJSUFjZ0J5Z0NCQ0FEUVFSMFFRaHlRZmdCY1dvMkFnUUxJQTFCQVdvaERRd0JDd3NnQVVFQmFpRUJEQUFMQUFzZ0VTQVNiQ0VBUVFBaENVRUFJUTBEUUNBTklCTkdEUVFnQ3lBTmFpQU9JQTFCQW5ScUtBSUFJQUJ1T2dBQUlBMUJBV29oRFF3QUN3QUxJQk5CQkJEOEFpSU9SUTBEQWtBZ0IwRUJUUVJBSUFsQkFDQUpRUUJLR3lFUElBTkJBQ0FEUVFCS0d5RVFJQXBFQUFBQUFBQUFXVUNnSVI0Z0E3Y2hJU0FKdHlFaVFRQWhBUU5BSUFFZ0QwWU5BaUFlSUIwZ0FiZEVBQUFBQUFBQTREK2dvaUFpbzZBaENrRUFJUTBEUUNBTklCQkhCRUFnRENzRFVDQU1Ld05BSUI0Z0hTQU50MFFBQUFBQUFBRGdQNkNpSUNHam9DSWZvaUFLSUF3ckEwaWlvS0FpSUVRQUFBQUFBQUFBQUdFTkJpQU1JQXdyQXlBZ0RDc0RFQ0Fmb2lBS0lBd3JBeGlpb0tBZ0lLTzJJaGs0QWd3Z0RDQU1Ld000SUF3ckF5Z2dINklnQ2lBTUt3TXdvcUNnSUNDanRpSWFPQUlJSUFnZ0dTQWFJQXhCREdvZ0RFRUlhaEJ5R2lBTUtnSU1JUmtDZnlBQVFRRkdCRUFDZnlBTUtnSUlRd0FBZ0QrU0locUxRd0FBQUU5ZEJFQWdHcWdNQVF0QmdJQ0FnSGdMUVFKdFFRRjBJUU1DZnlBWlF3QUFnRCtTSWhtTFF3QUFBRTlkQkVBZ0dhZ01BUXRCZ0lDQWdIZ0xRUUp0UVFGMERBRUxBbjhnRENvQ0NFTUFBQUEva2lJYWkwTUFBQUJQWFFSQUlCcW9EQUVMUVlDQWdJQjRDeUVESUJsREFBQUFQNUlpR1l0REFBQUFUMTBFUUNBWnFBd0JDMEdBZ0lDQWVBc2lCMEVBU0NBRklBZE1jaUFEUVFCSUlBTWdCazV5Y2tVRVFDQU9JQUVnRVcwZ0Ftd2dEU0FTYldwQkFuUnFJZ2tnQ1NnQ0FDQUVJQU1nQld3Z0IycEJBMnhxSWdNdEFBRWdBeTBBQUdvZ0F5MEFBbXBCQTI1cU5nSUFDeUFOUVFGcUlRME1BUXNMSUFGQkFXb2hBUXdBQ3dBTElBZEJmbkZCQWtZRVFDQUpRUUFnQ1VFQVNoc2hEeUFEUVFBZ0EwRUFTaHNoRUNBS1JBQUFBQUFBQUZsQW9DRWVJQU8zSVNFZ0NiY2hJa0VBSVFFRFFDQUJJQTlHRFFJZ0hpQWRJQUczUkFBQUFBQUFBT0Evb0tJZ0lxT2dJUXBCQUNFTkEwQWdEU0FRUndSQUlBd3JBMUFnRENzRFFDQWVJQjBnRGJkRUFBQUFBQUFBNEQrZ29pQWhvNkFpSDZJZ0NpQU1Ld05Jb3FDZ0lpQkVBQUFBQUFBQUFBQmhEUVlnRENBTUt3TWdJQXdyQXhBZ0g2SWdDaUFNS3dNWW9xQ2dJQ0NqdGlJWk9BSU1JQXdnRENzRE9DQU1Ld01vSUIraUlBb2dEQ3NETUtLZ29DQWdvN1lpR2pnQ0NDQUlJQmtnR2lBTVFReHFJQXhCQ0dvUWNob2dEQ29DRENFWkFuOGdBRUVCUmdSQUFuOGdEQ29DQ0VNQUFJQS9raUlhaTBNQUFBQlBYUVJBSUJxb0RBRUxRWUNBZ0lCNEMwRUNiVUVCZENFREFuOGdHVU1BQUlBL2tpSVppME1BQUFCUFhRUkFJQm1vREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQXdCQ3dKL0lBd3FBZ2hEQUFBQVA1SWlHb3REQUFBQVQxMEVRQ0FhcUF3QkMwR0FnSUNBZUFzaEF5QVpRd0FBQUQrU0lobUxRd0FBQUU5ZEJFQWdHYWdNQVF0QmdJQ0FnSGdMSWdkQkFFZ2dCU0FIVEhJZ0EwRUFTQ0FESUFaT2NuSkZCRUFnRGlBQklCRnRJQUpzSUEwZ0VtMXFRUUowYWlJSklBa29BZ0FnQkNBRElBVnNJQWRxUVFKMGFpSURMUUFCSUFNdEFBQnFJQU10QUFKcVFRTnVhallDQUFzZ0RVRUJhaUVOREFFTEN5QUJRUUZxSVFFTUFBc0FDeUFIUVgxeFFRUkdCRUFnQ1VFQUlBbEJBRW9iSVE4Z0EwRUFJQU5CQUVvYklSQWdDa1FBQUFBQUFBQlpRS0FoSGlBRHR5RWhJQW0zSVNKQkFDRUJBMEFnQVNBUFJnMENJQjRnSFNBQnQwUUFBQUFBQUFEZ1A2Q2lJQ0tqb0NFS1FRQWhEUU5BSUEwZ0VFY0VRQ0FNS3dOUUlBd3JBMEFnSGlBZElBMjNSQUFBQUFBQUFPQS9vS0lnSWFPZ0loK2lJQW9nRENzRFNLS2dvQ0lnUkFBQUFBQUFBQUFBWVEwR0lBd2dEQ3NESUNBTUt3TVFJQitpSUFvZ0RDc0RHS0tnb0NBZ283WWlHVGdDRENBTUlBd3JBemdnRENzREtDQWZvaUFLSUF3ckF6Q2lvS0FnSUtPMklobzRBZ2dnQ0NBWklCb2dERUVNYWlBTVFRaHFFSElhSUF3cUFnd2hHUUovSUFCQkFVWUVRQUovSUF3cUFnaERBQUNBUDVJaUdvdERBQUFBVDEwRVFDQWFxQXdCQzBHQWdJQ0FlQXRCQW0xQkFYUWhBd0ovSUJsREFBQ0FQNUlpR1l0REFBQUFUMTBFUUNBWnFBd0JDMEdBZ0lDQWVBdEJBbTFCQVhRTUFRc0NmeUFNS2dJSVF3QUFBRCtTSWhxTFF3QUFBRTlkQkVBZ0dxZ01BUXRCZ0lDQWdIZ0xJUU1nR1VNQUFBQS9raUlaaTBNQUFBQlBYUVJBSUJtb0RBRUxRWUNBZ0lCNEN5SUhRUUJJSUFVZ0IweHlJQU5CQUVnZ0F5QUdUbkp5UlFSQUlBNGdBU0FSYlNBQ2JDQU5JQkp0YWtFQ2RHb2lDU0FKS0FJQUlBUWdBeUFGYkNBSGFrRUNkR29pQXkwQUFpQURMUUFCYWlBRExRQURha0VEYm1vMkFnQUxJQTFCQVdvaERRd0JDd3NnQVVFQmFpRUJEQUFMQUFzQ1FBSkFBa0FDUUFKQUFrQWdCMEVGYXc0S0FBY0JBZ01FQlFBQUFBY0xJQWxCQUNBSlFRQktHeUVQSUFOQkFDQURRUUJLR3lFUUlBcEVBQUFBQUFBQVdVQ2dJUjRnQTdjaElTQUp0eUVpUVFBaEFRTkFJQUVnRDBZTkJpQWVJQjBnQWJkRUFBQUFBQUFBNEQrZ29pQWlvNkFoQ2tFQUlRMERRQ0FOSUJCSEJFQWdEQ3NEVUNBTUt3TkFJQjRnSFNBTnQwUUFBQUFBQUFEZ1A2Q2lJQ0dqb0NJZm9pQUtJQXdyQTBpaW9LQWlJRVFBQUFBQUFBQUFBR0VOQ2lBTUlBd3JBeUFnRENzREVDQWZvaUFLSUF3ckF4aWlvS0FnSUtPMkloazRBZ3dnRENBTUt3TTRJQXdyQXlnZ0g2SWdDaUFNS3dNd29xQ2dJQ0NqdGlJYU9BSUlJQWdnR1NBYUlBeEJER29nREVFSWFoQnlHaUFNS2dJTUlSa0NmeUFBUVFGR0JFQUNmeUFNS2dJSVF3QUFnRCtTSWhxTFF3QUFBRTlkQkVBZ0dxZ01BUXRCZ0lDQWdIZ0xRUUp0UVFGMElRTUNmeUFaUXdBQWdEK1NJaG1MUXdBQUFFOWRCRUFnR2FnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwREFFTEFuOGdEQ29DQ0VNQUFBQS9raUlhaTBNQUFBQlBYUVJBSUJxb0RBRUxRWUNBZ0lCNEN5RURJQmxEQUFBQVA1SWlHWXREQUFBQVQxMEVRQ0FacUF3QkMwR0FnSUNBZUFzaUIwRUFTQ0FGSUFkTWNpQURRUUJJSUFNZ0JrNXlja1VFUUNBT0lBRWdFVzBnQW13Z0RTQVNiV3BCQW5ScUlna2dDU2dDQUNBRUlBTWdCV3dnQjJwcUxRQUFhallDQUFzZ0RVRUJhaUVOREFFTEN5QUJRUUZxSVFFTUFBc0FDeUFKUVFBZ0NVRUFTaHNoRHlBRFFRQWdBMEVBU2hzaEVDQUtSQUFBQUFBQUFGbEFvQ0VlSUFPM0lTRWdDYmNoSWtFQUlRRURRQ0FCSUE5R0RRVWdIaUFkSUFHM1JBQUFBQUFBQU9BL29LSWdJcU9nSVFwQkFDRU5BMEFnRFNBUVJ3UkFJQXdyQTFBZ0RDc0RRQ0FlSUIwZ0RiZEVBQUFBQUFBQTREK2dvaUFobzZBaUg2SWdDaUFNS3dOSW9xQ2dJaUJFQUFBQUFBQUFBQUJoRFFrZ0RDQU1Ld01nSUF3ckF4QWdINklnQ2lBTUt3TVlvcUNnSUNDanRpSVpPQUlNSUF3Z0RDc0RPQ0FNS3dNb0lCK2lJQW9nRENzRE1LS2dvQ0FnbzdZaUdqZ0NDQ0FJSUJrZ0dpQU1RUXhxSUF4QkNHb1FjaG9nRENvQ0RDRVpBbjhnQUVFQlJnUkFBbjhnRENvQ0NFTUFBSUEva2lJYWkwTUFBQUJQWFFSQUlCcW9EQUVMUVlDQWdJQjRDMEVDYlVFQmRDRURBbjhnR1VNQUFJQS9raUlaaTBNQUFBQlBYUVJBSUJtb0RBRUxRWUNBZ0lCNEMwRUNiVUVCZEF3QkN3Si9JQXdxQWdoREFBQUFQNUlpR290REFBQUFUMTBFUUNBYXFBd0JDMEdBZ0lDQWVBc2hBeUFaUXdBQUFEK1NJaG1MUXdBQUFFOWRCRUFnR2FnTUFRdEJnSUNBZ0hnTElnZEJBRWdnQlNBSFRISWdBMEVBU0NBRElBWk9jbkpGQkVBZ0RpQUJJQkZ0SUFKc0lBMGdFbTFxUVFKMGFpSUpJQWtvQWdBZ0JDQURJQVZzSUFkcVFRRjBhaTBBQVdvMkFnQUxJQTFCQVdvaERRd0JDd3NnQVVFQmFpRUJEQUFMQUFzZ0NVRUFJQWxCQUVvYklROGdBMEVBSUFOQkFFb2JJUkFnQ2tRQUFBQUFBQUJaUUtBaEhpQUR0eUVoSUFtM0lTSkJBQ0VCQTBBZ0FTQVBSZzBFSUI0Z0hTQUJ0MFFBQUFBQUFBRGdQNkNpSUNLam9DRUtRUUFoRFFOQUlBMGdFRWNFUUNBTUt3TlFJQXdyQTBBZ0hpQWRJQTIzUkFBQUFBQUFBT0Evb0tJZ0lhT2dJaCtpSUFvZ0RDc0RTS0tnb0NJZ1JBQUFBQUFBQUFBQVlRMElJQXdnRENzRElDQU1Ld01RSUIraUlBb2dEQ3NER0tLZ29DQWdvN1lpR1RnQ0RDQU1JQXdyQXpnZ0RDc0RLQ0Fmb2lBS0lBd3JBekNpb0tBZ0lLTzJJaG80QWdnZ0NDQVpJQm9nREVFTWFpQU1RUWhxRUhJYUlBd3FBZ3doR1FKL0lBQkJBVVlFUUFKL0lBd3FBZ2hEQUFDQVA1SWlHb3REQUFBQVQxMEVRQ0FhcUF3QkMwR0FnSUNBZUF0QkFtMUJBWFFoQXdKL0lCbERBQUNBUDVJaUdZdERBQUFBVDEwRVFDQVpxQXdCQzBHQWdJQ0FlQXRCQW0xQkFYUU1BUXNDZnlBTUtnSUlRd0FBQUQrU0locUxRd0FBQUU5ZEJFQWdHcWdNQVF0QmdJQ0FnSGdMSVFNZ0dVTUFBQUEva2lJWmkwTUFBQUJQWFFSQUlCbW9EQUVMUVlDQWdJQjRDeUlIUVFCSUlBVWdCMHh5SUFOQkFFZ2dBeUFHVG5KeVJRUkFJQTRnQVNBUmJTQUNiQ0FOSUJKdGFrRUNkR29pQ1NBSktBSUFJQVFnQXlBRmJDQUhha0VCZEdvdEFBQnFOZ0lBQ3lBTlFRRnFJUTBNQVFzTElBRkJBV29oQVF3QUN3QUxJQWxCQUNBSlFRQktHeUVQSUFOQkFDQURRUUJLR3lFUUlBcEVBQUFBQUFBQVdVQ2dJUjRnQTdjaElTQUp0eUVpUVFBaEFRTkFJQUVnRDBZTkF5QWVJQjBnQWJkRUFBQUFBQUFBNEQrZ29pQWlvNkFoQ2tFQUlRMERRQ0FOSUJCSEJFQWdEQ3NEVUNBTUt3TkFJQjRnSFNBTnQwUUFBQUFBQUFEZ1A2Q2lJQ0dqb0NJZm9pQUtJQXdyQTBpaW9LQWlJRVFBQUFBQUFBQUFBR0VOQnlBTUlBd3JBeUFnRENzREVDQWZvaUFLSUF3ckF4aWlvS0FnSUtPMkloazRBZ3dnRENBTUt3TTRJQXdyQXlnZ0g2SWdDaUFNS3dNd29xQ2dJQ0NqdGlJYU9BSUlJQWdnR1NBYUlBeEJER29nREVFSWFoQnlHaUFNS2dJTUlSa0NmeUFBUVFGR0JFQUNmeUFNS2dJSVF3QUFnRCtTSWhxTFF3QUFBRTlkQkVBZ0dxZ01BUXRCZ0lDQWdIZ0xRUUp0UVFGMElRTUNmeUFaUXdBQWdEK1NJaG1MUXdBQUFFOWRCRUFnR2FnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwREFFTEFuOGdEQ29DQ0VNQUFBQS9raUlhaTBNQUFBQlBYUVJBSUJxb0RBRUxRWUNBZ0lCNEN5RURJQmxEQUFBQVA1SWlHWXREQUFBQVQxMEVRQ0FacUF3QkMwR0FnSUNBZUFzaUIwRUFTQ0FGSUFkTWNpQURRUUJJSUFNZ0JrNXlja1VFUUNBT0lBRWdFVzBnQW13Z0RTQVNiV3BCQW5ScUlna2dDU2dDQUNBRUlBTWdCV3dnQjJwQkFYUnFJZ010QUFBaUIwSDRBWEVnQXkwQUFTSURRUU4wUWZnQmNXb2dCMEVGZENBRFFRTjJja0g4QVhGcVFRcHFRUU51YWpZQ0FBc2dEVUVCYWlFTkRBRUxDeUFCUVFGcUlRRU1BQXNBQ3lBSlFRQWdDVUVBU2hzaER5QURRUUFnQTBFQVNoc2hFQ0FLUkFBQUFBQUFBRmxBb0NFZUlBTzNJU0VnQ2JjaElrRUFJUUVEUUNBQklBOUdEUUlnSGlBZElBRzNSQUFBQUFBQUFPQS9vS0lnSXFPZ0lRcEJBQ0VOQTBBZ0RTQVFSd1JBSUF3ckExQWdEQ3NEUUNBZUlCMGdEYmRFQUFBQUFBQUE0RCtnb2lBaG82QWlINklnQ2lBTUt3TklvcUNnSWlCRUFBQUFBQUFBQUFCaERRWWdEQ0FNS3dNZ0lBd3JBeEFnSDZJZ0NpQU1Ld01Zb3FDZ0lDQ2p0aUlaT0FJTUlBd2dEQ3NET0NBTUt3TW9JQitpSUFvZ0RDc0RNS0tnb0NBZ283WWlHamdDQ0NBSUlCa2dHaUFNUVF4cUlBeEJDR29RY2hvZ0RDb0NEQ0VaQW44Z0FFRUJSZ1JBQW44Z0RDb0NDRU1BQUlBL2tpSWFpME1BQUFCUFhRUkFJQnFvREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQ0VEQW44Z0dVTUFBSUEva2lJWmkwTUFBQUJQWFFSQUlCbW9EQUVMUVlDQWdJQjRDMEVDYlVFQmRBd0JDd0ovSUF3cUFnaERBQUFBUDVJaUdvdERBQUFBVDEwRVFDQWFxQXdCQzBHQWdJQ0FlQXNoQXlBWlF3QUFBRCtTSWhtTFF3QUFBRTlkQkVBZ0dhZ01BUXRCZ0lDQWdIZ0xJZ2RCQUVnZ0JTQUhUSElnQTBFQVNDQURJQVpPY25KRkJFQWdEaUFCSUJGdElBSnNJQTBnRW0xcVFRSjBhaUlKSUFrb0FnQWdCQ0FESUFWc0lBZHFRUUYwYWlJRExRQUFJZ2RCK0FGeElBTXRBQUVpQTBFQ2RFSDRBWEZxSUFkQkJYUWdBMEVEZG5KQitBRnhha0VNYWtFRGJtbzJBZ0FMSUExQkFXb2hEUXdCQ3dzZ0FVRUJhaUVCREFBTEFBc2dDVUVBSUFsQkFFb2JJUThnQTBFQUlBTkJBRW9iSVJBZ0NrUUFBQUFBQUFCWlFLQWhIaUFEdHlFaElBbTNJU0pCQUNFQkEwQWdBU0FQUmcwQklCNGdIU0FCdDBRQUFBQUFBQURnUDZDaUlDS2pvQ0VLUVFBaERRTkFJQTBnRUVjRVFDQU1Ld05RSUF3ckEwQWdIaUFkSUEyM1JBQUFBQUFBQU9BL29LSWdJYU9nSWgraUlBb2dEQ3NEU0tLZ29DSWdSQUFBQUFBQUFBQUFZUTBGSUF3Z0RDc0RJQ0FNS3dNUUlCK2lJQW9nRENzREdLS2dvQ0FnbzdZaUdUZ0NEQ0FNSUF3ckF6Z2dEQ3NES0NBZm9pQUtJQXdyQXpDaW9LQWdJS08ySWhvNEFnZ2dDQ0FaSUJvZ0RFRU1haUFNUVFocUVISWFJQXdxQWd3aEdRSi9JQUJCQVVZRVFBSi9JQXdxQWdoREFBQ0FQNUlpR290REFBQUFUMTBFUUNBYXFBd0JDMEdBZ0lDQWVBdEJBbTFCQVhRaEF3Si9JQmxEQUFDQVA1SWlHWXREQUFBQVQxMEVRQ0FacUF3QkMwR0FnSUNBZUF0QkFtMUJBWFFNQVFzQ2Z5QU1LZ0lJUXdBQUFEK1NJaHFMUXdBQUFFOWRCRUFnR3FnTUFRdEJnSUNBZ0hnTElRTWdHVU1BQUFBL2tpSVppME1BQUFCUFhRUkFJQm1vREFFTFFZQ0FnSUI0Q3lJSFFRQklJQVVnQjB4eUlBTkJBRWdnQXlBR1RuSnlSUVJBSUE0Z0FTQVJiU0FDYkNBTklCSnRha0VDZEdvaUNTQUpLQUlBSUFRZ0F5QUZiQ0FIYWtFQmRHb2lBeTBBQUNJSFFmQUJjU0FIUVFSMFFmQUJjV29nQXkwQUFVRUlja0g0QVhGcVFSQnFRUU51YWpZQ0FBc2dEVUVCYWlFTkRBRUxDeUFCUVFGcUlRRU1BQXNBQ3lBUklCSnNJUUJCQUNFSlFRQWhEUU5BSUEwZ0UwWU5BeUFMSUExcUlBNGdEVUVDZEdvb0FnQWdBRzQ2QUFBZ0RVRUJhaUVOREFBTEFBdEJBRUVEUWJNWVFRQVFQQXRCZnlFSkN5QU9FRE1nREVIZ0FXb2tBQ0FKRHd0QkFFRURRYVFPUVFBUVBFRUJFQU1BQ3lBQUlBRWdBaWtDQURjQ0FDQUJJQUlvQWhBMkFoQWdBU0FDS1FJSU53SUlDeEVBSUFBZ0FTQUJLQUlBS0FJb0VRSUFDd2dBUWYvLy8vOEhDd1VBUWY4QUN5c0FBa0FnQUNBQlJnMEFBMEFnQUNBQlFRUnJJZ0ZQRFFFZ0FDQUJFRVlnQUVFRWFpRUFEQUFMQUFzTDBBRUJBbjhnQWtHQUVIRUVRQ0FBUVNzNkFBQWdBRUVCYWlFQUN5QUNRWUFJY1FSQUlBQkJJem9BQUNBQVFRRnFJUUFMSUFKQmhBSnhJZ05CaEFKSEJFQWdBRUd1MUFBN0FBQWdBRUVDYWlFQUN5QUNRWUNBQVhFaEFnTkFJQUV0QUFBaUJBUkFJQUFnQkRvQUFDQUFRUUZxSVFBZ0FVRUJhaUVCREFFTEN5QUFBbjhDUUNBRFFZQUNSd1JBSUFOQkJFY05BVUhHQUVIbUFDQUNHd3dDQzBIRkFFSGxBQ0FDR3d3QkMwSEJBRUhoQUNBQ0d5QURRWVFDUmcwQUdrSEhBRUhuQUNBQ0d3czZBQUFnQTBHRUFrY0xxZ0VCQVg4Q1FDQURRWUFRY1VVTkFDQUNSU0FEUWNvQWNTSUVRUWhHSUFSQndBQkdjbklOQUNBQVFTczZBQUFnQUVFQmFpRUFDeUFEUVlBRWNRUkFJQUJCSXpvQUFDQUFRUUZxSVFBTEEwQWdBUzBBQUNJRUJFQWdBQ0FFT2dBQUlBQkJBV29oQUNBQlFRRnFJUUVNQVFzTElBQUNmMEh2QUNBRFFjb0FjU0lCUWNBQVJnMEFHa0hZQUVINEFDQURRWUNBQVhFYklBRkJDRVlOQUJwQjVBQkI5UUFnQWhzTE9nQUFDd3dBSUFBUVBpQUJRUUowYWd1dkJBRUxmeU1BUVlBQmF5SUtKQUFnQ2lBQk5nSjRJQUlnQXhEekF5RUlJQXBCendJMkFoQWdDa0VJYWtFQUlBcEJFR29pQ1JCbklROENRQ0FJUWVVQVR3UkFJQWdRT1NJSlJRMEJJQThnQ1JCL0N5QUpJUWNnQWlFQkEwQWdBU0FEUmdSQUEwQUNRQ0FBSUFwQitBQnFFSkFCUVFBZ0NCdEZCRUFnQUNBS1FmZ0FhaEI2QkVBZ0JTQUZLQUlBUVFKeU5nSUFDd3dCQ3lBQUVHZ2hEU0FHUlFSQUlBUWdEUkNFQVNFTkN5QU1RUUZxSVJCQkFDRU9JQWtoQnlBQ0lRRURRQ0FCSUFOR0JFQWdFQ0VNSUE1RkRRTWdBQkIxR2lBSklRY2dBaUVCSUFnZ0MycEJBa2tOQXdOQUlBRWdBMFlFUUF3RkJRSkFJQWN0QUFCQkFrY05BQ0FCRURjZ0RFWU5BQ0FIUVFBNkFBQWdDMEVCYXlFTEN5QUhRUUZxSVFjZ0FVRU1haUVCREFFTEFBc0FCUUpBSUFjdEFBQkJBVWNOQUNBQklBd1F2QU1vQWdBaEVRSkFJQVlFZnlBUkJTQUVJQkVRaEFFTElBMUdCRUJCQVNFT0lBRVFOeUFRUncwQ0lBZEJBam9BQUNBTFFRRnFJUXNNQVFzZ0IwRUFPZ0FBQ3lBSVFRRnJJUWdMSUFkQkFXb2hCeUFCUVF4cUlRRU1BUXNBQ3dBTEN3SkFBa0FEUUNBQ0lBTkdEUUVnQ1MwQUFFRUNSd1JBSUFsQkFXb2hDU0FDUVF4cUlRSU1BUXNMSUFJaEF3d0JDeUFGSUFVb0FnQkJCSEkyQWdBTElBOFFaaUFLUVlBQmFpUUFJQU1QQlFKQUlBRVF3QUZGQkVBZ0IwRUJPZ0FBREFFTElBZEJBam9BQUNBTFFRRnFJUXNnQ0VFQmF5RUlDeUFIUVFGcUlRY2dBVUVNYWlFQkRBRUxBQXNBQ3hCVkFBc1JBQ0FBSUFFZ0FDZ0NBQ2dDREJFREFBdTJCQUVMZnlNQVFZQUJheUlLSkFBZ0NpQUJOZ0o0SUFJZ0F4RHpBeUVJSUFwQnp3STJBaEFnQ2tFSWFrRUFJQXBCRUdvaUNSQm5JUThDUUNBSVFlVUFUd1JBSUFnUU9TSUpSUTBCSUE4Z0NSQi9DeUFKSVFjZ0FpRUJBMEFnQVNBRFJnUkFBMEFDUUNBQUlBcEIrQUJxRUpFQlFRQWdDQnRGQkVBZ0FDQUtRZmdBYWhCN0JFQWdCU0FGS0FJQVFRSnlOZ0lBQ3d3QkN5QUFFR2toRFNBR1JRUkFJQVFnRFJDK0F5RU5DeUFNUVFGcUlSQkJBQ0VPSUFraEJ5QUNJUUVEUUNBQklBTkdCRUFnRUNFTUlBNUZEUU1nQUJCMkdpQUpJUWNnQWlFQklBZ2dDMnBCQWtrTkF3TkFJQUVnQTBZRVFBd0ZCUUpBSUFjdEFBQkJBa2NOQUNBQkVEY2dERVlOQUNBSFFRQTZBQUFnQzBFQmF5RUxDeUFIUVFGcUlRY2dBVUVNYWlFQkRBRUxBQXNBQlFKQUlBY3RBQUJCQVVjTkFDQUJJQXdRUUN3QUFDRVJBa0FnRFVIL0FYRWdCZ1IvSUJFRklBUWdFUkMrQXd0Qi93RnhSZ1JBUVFFaERpQUJFRGNnRUVjTkFpQUhRUUk2QUFBZ0MwRUJhaUVMREFFTElBZEJBRG9BQUFzZ0NFRUJheUVJQ3lBSFFRRnFJUWNnQVVFTWFpRUJEQUVMQUFzQUN3c0NRQUpBQTBBZ0FpQURSZzBCSUFrdEFBQkJBa2NFUUNBSlFRRnFJUWtnQWtFTWFpRUNEQUVMQ3lBQ0lRTU1BUXNnQlNBRktBSUFRUVJ5TmdJQUN5QVBFR1lnQ2tHQUFXb2tBQ0FERHdVQ1FDQUJFTUFCUlFSQUlBZEJBVG9BQUF3QkN5QUhRUUk2QUFBZ0MwRUJhaUVMSUFoQkFXc2hDQXNnQjBFQmFpRUhJQUZCREdvaEFRd0JDd0FMQUFzUVZRQUxmd0lDZndKK0l3QkJvQUZySWdRa0FDQUVJQUUyQWp3Z0JDQUJOZ0lVSUFSQmZ6WUNHQ0FFUVJCcUlnVkNBQkREQVNBRUlBVWdBMEVCRVA4RUlBUXBBd2doQmlBRUtRTUFJUWNnQWdSQUlBSWdBU0FFS0FJVUlBUW9Bb2dCYWlBRUtBSThhMm8yQWdBTElBQWdCamNEQ0NBQUlBYzNBd0FnQkVHZ0FXb2tBQXNOQUNBQUlBRWdBa0ovRU1JRUN4b0FJQUFnQVNBQktBSUFRUXhyS0FJQWFpZ0NHRFlDQUNBQUN3c0FJQUJCeExjRUVNc0JDeWNCQVg4Z0FFRUVhaERTQkNFQ0lBQkJ6SkFETmdJQUlBSkI0SkFETmdJQUlBSWdBUkQwQWdzbkFRRi9JQUJCQkdvUWhBVWhBaUFBUVp5UUF6WUNBQ0FDUWJDUUF6WUNBQ0FDSUFFUTlBSUxDd0FnQUVHOHR3UVF5d0VMWFFFQ2Z3SkFJQUFvQWdBaUFrVU5BQUovSUFJb0FoZ2lBeUFDS0FJY1JnUkFJQUlnQVJEQ0FTQUNLQUlBS0FJMEVRTUFEQUVMSUFJZ0EwRUJhallDR0NBRElBRTZBQUFnQVJEQ0FRdEJmeEMvQVVVTkFDQUFRUUEyQWdBTEN3a0FJQUFRK0FJUU13dTRBUUVCZnlNQVFSQnJJZ0VrQUNBQUlBQW9BZ0JCREdzb0FnQnFLQUlZQkVBZ0FTQUFOZ0lNSUFGQkFEb0FDQ0FBSUFBb0FnQkJER3NvQWdCcUVNc0RCRUFnQUNBQUtBSUFRUXhyS0FJQWFpZ0NTQVJBSUFBZ0FDZ0NBRUVNYXlnQ0FHb29Ba2dReVFNTElBRkJBVG9BQ0FzQ1FDQUJMUUFJUlEwQUlBQWdBQ2dDQUVFTWF5Z0NBR29vQWhnUXhnSkJmMGNOQUNBQUlBQW9BZ0JCREdzb0FnQnFRUUVRd2dJTElBRkJDR29ReFFJTElBRkJFR29rQUF1NXpBRUNEbjhCZkNBRFJRUkFJQVJCQVVZRVFDQUlCRUFDZnlBQUlRUkJBQ0VESUFFaUJrRUFJQUZCQUVvYklRQWdCeWdDQUNJQklBSWlCVUVCYXlJTElBWnNRUUYwYWlFSklBRWhBZ05BSUFBZ0EwY0VRQ0FKUVFBN0FRQWdBa0VBT3dFQUlBTkJBV29oQXlBQ1FRSnFJUUlnQ1VFQ2FpRUpEQUVMQ3lBRlFRQWdCVUVBU2hzaERDQUJJQVpCQVdzaUNrRUJkR29oQ1VFQUlRTWdBU0VDQTBBZ0F5QU1Sd1JBSUFsQkFEc0JBQ0FDUVFBN0FRQWdBMEVCYWlFRElBa2dCa0VCZENJQWFpRUpJQUFnQW1vaEFnd0JDd3NnQzBFQklBdEJBVW9iSVJJZ0IwR1FnTkFBYWlFTklBZEJrSURJQUdvaEFDQUlJQVpCQVdvaUFtb2hDQ0FDSUFScUlRNGdDa0VCSUFwQkFVb2JJaFJCQVdzaEVDQUJJQUpCQVhScUlRSkJBQ0FHYTBFQmRDRVZRUUFoREVFQklROENRQU5BSUE4Z0VrY0VRQ0FPSUJCcUlSWWdDQ0FRYWlFUlFRRWhDUU5BQWtBQ1FBSkFJQWtnRkVjRVFDQU9MUUFBSUFndEFBQk5CRUFnQWlBVmFpSUVMd0VBSWdOQkVIUkJFSFVpQVVFQVNnUkFJQUlnQVRzQkFDQURRUnhzSUExcUlnTkJCR3NnRHpZQ0FDQURRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQURRUmhySWdFZ0FTZ0NBQ0FKYWpZQ0FDQURRUlJySWdFZ0FTZ0NBQ0FQYWpZQ0FBd0ZDeUFFUVFKckx3RUFJZ05CRUhSQkVIVWhBU0FFTGdFQ0lnUkJBRW9FUUNBQlFRQktCRUFnQkVFQ2RDQUFha0VFYXlnQ0FDSUJJQU5CQW5RZ0FHcEJCR3NvQWdBaUJFb0VRQ0FDSUFRN0FRQkJBQ0VLSUF4QkFDQU1RUUJLR3lFTElBQWhBd05BSUFvZ0MwWUVRQ0FFSVFFTUNBc2dBU0FES0FJQVJnUkFJQU1nQkRZQ0FBc2dDa0VCYWlFS0lBTkJCR29oQXd3QUN3QUxJQUlnQVRzQkFDQUJJQVJPRFFWQkFDRUtJQXhCQUNBTVFRQktHeUVMSUFBaEF3TkFJQW9nQzBZTkJpQUVJQU1vQWdCR0JFQWdBeUFCTmdJQUN5QUtRUUZxSVFvZ0EwRUVhaUVEREFBTEFBc2dBa0VDYXk0QkFDSURRUUJLQkVBZ0JFRUNkQ0FBYWtFRWF5Z0NBQ0lCSUFOQi8vOERjVUVDZENBQWFrRUVheWdDQUNJRVNnUkFJQUlnQkRzQkFFRUFJUW9nREVFQUlBeEJBRW9iSVFzZ0FDRURBMEFnQ2lBTFJnUkFJQVFoQVF3SEN5QUJJQU1vQWdCR0JFQWdBeUFFTmdJQUN5QUtRUUZxSVFvZ0EwRUVhaUVEREFBTEFBc2dBaUFCT3dFQUlBRWdCRTROQkVFQUlRb2dERUVBSUF4QkFFb2JJUXNnQUNFREEwQWdDaUFMUmcwRklBUWdBeWdDQUVZRVFDQURJQUUyQWdBTElBcEJBV29oQ2lBRFFRUnFJUU1NQUFzQUN5QUNJQVE3QVFBZ0JFRUhiRUVDZENBTmFpSURRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQURRUmhySWdFZ0FTZ0NBQ0FKYWpZQ0FDQURRUlJySWdFZ0FTZ0NBQ0FQYWpZQ0FDQUpJQU5CRUdzaUFTZ0NBRWdFUUNBQklBazJBZ0FMSUFOQkJHc2dEellDQUF3RkN5QUJRUUJLQkVBZ0FpQUJPd0VBSUFOQkIyeEJBblFnRFdvaUEwRWNheUlCSUFFb0FnQkJBV28yQWdBZ0EwRVlheUlCSUFFb0FnQWdDV28yQWdBZ0EwRVVheUlCSUFFb0FnQWdEMm8yQWdBZ0NTQURRUXhySWdFb0FnQktCRUFnQVNBSk5nSUFDeUFEUVFScklBODJBZ0FNQlFzZ0FrRUNheThCQUNJRFFSQjBRUkIxSWdGQkFFb0VRQ0FDSUFFN0FRQWdBMEVjYkNBTmFpSURRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQURRUmhySWdFZ0FTZ0NBQ0FKYWpZQ0FDQURRUlJySWdFZ0FTZ0NBQ0FQYWpZQ0FDQURRUXhySWdFb0FnQWdDVTROQlNBQklBazJBZ0FNQlFzZ0RFR0FnQUpPQkVCQkFFRURRYm9NUVFBUVBFRi9JUW9NQ1FzZ0FpQU1RUUZxSWdFN0FRQWdBQ0FNUVFKMGFpQUJRUkIwUVJCMU5nSUFJQTBnREVFY2JHb2lBeUFQTmdJWUlBTWdEellDRkNBRElBazJBaEFnQXlBSk5nSU1JQU1nRHpZQ0NDQURJQWsyQWdRZ0EwRUJOZ0lBSUFFaERBd0VDeUFDUVFBN0FRQU1Bd3NnQWtFRWFpRUNJQkZCQW1vaENDQVdRUUpxSVE0Z0QwRUJhaUVQREFVTElBRkJFSFJCRUhWQkhHd2dEV29pQTBFY2F5SUJJQUVvQWdCQkFXbzJBZ0FnQTBFWWF5SUJJQUVvQWdBZ0NXbzJBZ0FnQTBFVWF5SUJJQUVvQWdBZ0QybzJBZ0FNQVFzZ0FVRVFkRUVRZFVFY2JDQU5haUlEUVFScklBODJBZ0FnQTBFY2F5SUJJQUVvQWdCQkFXbzJBZ0FnQTBFWWF5SUJJQUVvQWdBZ0NXbzJBZ0FnQTBFVWF5SUJJQUVvQWdBZ0QybzJBZ0FMSUFKQkFtb2hBaUFJUVFGcUlRZ2dEa0VCYWlFT0lBbEJBV29oQ1F3QUN3QUxDeUFNUVFBZ0RFRUFTaHRCQVdvaEFrRUJJUU5CQVNFSUlBQWhDUU5BSUFJZ0EwY0VRQUpBSUFNZ0NTZ0NBQ0lCUmdSQUlBZ2lDa0VCYWlFSURBRUxJQUZCQW5RZ0FHcEJCR3NvQWdBaENnc2dDU0FLTmdJQUlBbEJCR29oQ1NBRFFRRnFJUU1NQVFzTElBY2dDRUVCYXlJSk5nSUlRUUFnQ1VVTkFSb2dCMEdNZ0FocUlRb2dCMEVNYWtFQUlBbEJBblFRT2lFTElBZEJrSUFvYWtFQUlBbEJCSFFRT2lFSVFRQWhBd05BSUFNZ0NVNEVRRUVBSVFrZ0RFRUFJQXhCQUVvYklRUURRQ0FFSUFsR0JFQkJBQ0VLSUFjb0FnZ2lBRUVBSUFCQkFFb2JJUUJCQUNFREEwQWdBQ0FEUmcwRklBZ2dBMEVFZEdvaUFTQUJLd01BSUFzZ0EwRUNkR29vQWdDM0loZWpPUU1BSUFFZ0FTc0RDQ0FYb3prRENDQURRUUZxSVFNTUFBc0FDeUFMSUFBZ0NVRUNkR29vQWdCQkFXc2lBa0VDZENJRGFpSUJJQUVvQWdBZ0RTQUpRUWRzUVFKMGFpSUZLQUlBYWpZQ0FDQUlJQUpCQkhRaUFXb2lBaUFDS3dNQUlBVW9BZ1Mzb0RrREFDQUNJQUlyQXdnZ0JTZ0NDTGVnT1FNSUlBVW9BZ3dpQWlBQklBcHFJZ0VvQWdCSUJFQWdBU0FDTmdJQUN5QUZLQUlRSWdJZ0NpQURRUUowSWdOQkJISnFJZ0VvQWdCS0JFQWdBU0FDTmdJQUN5QUZLQUlVSWdJZ0NpQURRUWh5YWlJQktBSUFTQVJBSUFFZ0FqWUNBQXNnQlNnQ0dDSUNJQW9nQTBFTWNtb2lBU2dDQUVvRVFDQUJJQUkyQWdBTElBbEJBV29oQ1F3QUN3QUZJQW9nQTBFRWRHb2lBU0FHTmdJQUlBRkJBRFlDQkNBQklBVTJBZ2dnQVVFQU5nSU1JQU5CQVdvaEF5QUhLQUlJSVFrTUFRc0FDd0FMSUFvTER3c2dCa1VFUUFKL0lBQWhCRUVBSVFNZ0FTSUlRUUFnQVVFQVNoc2hBQ0FIS0FJQUlnRWdBaUlHUVFGcklna2dDR3hCQVhScUlRc2dBU0VDQTBBZ0FDQURSd1JBSUF0QkFEc0JBQ0FDUVFBN0FRQWdBMEVCYWlFRElBSkJBbW9oQWlBTFFRSnFJUXNNQVFzTElBWkJBQ0FHUVFCS0d5RU1JQUVnQ0VFQmF5SUtRUUYwYWlFTFFRQWhBeUFCSVFJRFFDQURJQXhIQkVBZ0MwRUFPd0VBSUFKQkFEc0JBQ0FEUVFGcUlRTWdDeUFJUVFGMElnQnFJUXNnQUNBQ2FpRUNEQUVMQ3lBSlFRRWdDVUVCU2hzaEVDQUhRWkNBMEFCcUlRNGdCMEdRZ01nQWFpRUFJQVFnQ0VFQmFpSUNhaUVNSUFwQkFTQUtRUUZLR3lJU1FRRnJJUlFnQVNBQ1FRRjBhaUVDUVFBZ0NHdEJBWFFoRlVFQUlRcEJBU0VOQWtBRFFDQU5JQkJIQkVBZ0RDQVVhaUVXUVFFaEN3TkFBa0FDUUFKQUlBc2dFa2NFUUNBRklBd3RBQUJPQkVBZ0FpQVZhaUlFTHdFQUlnTkJFSFJCRUhVaUFVRUFTZ1JBSUFJZ0FUc0JBQ0FEUVJ4c0lBNXFJZ05CQkdzZ0RUWUNBQ0FEUVJ4cklnRWdBU2dDQUVFQmFqWUNBQ0FEUVJocklnRWdBU2dDQUNBTGFqWUNBQ0FEUVJScklnRWdBU2dDQUNBTmFqWUNBQXdGQ3lBRVFRSnJMd0VBSWdOQkVIUkJFSFVoQVNBRUxnRUNJZ1JCQUVvRVFDQUJRUUJLQkVBZ0JFRUNkQ0FBYWtFRWF5Z0NBQ0lCSUFOQkFuUWdBR3BCQkdzb0FnQWlCRW9FUUNBQ0lBUTdBUUJCQUNFSklBcEJBQ0FLUVFCS0d5RVJJQUFoQXdOQUlBa2dFVVlFUUNBRUlRRU1DQXNnQVNBREtBSUFSZ1JBSUFNZ0JEWUNBQXNnQ1VFQmFpRUpJQU5CQkdvaEF3d0FDd0FMSUFJZ0FUc0JBQ0FCSUFST0RRVkJBQ0VKSUFwQkFDQUtRUUJLR3lFUklBQWhBd05BSUFrZ0VVWU5CaUFFSUFNb0FnQkdCRUFnQXlBQk5nSUFDeUFKUVFGcUlRa2dBMEVFYWlFRERBQUxBQXNnQWtFQ2F5NEJBQ0lEUVFCS0JFQWdCRUVDZENBQWFrRUVheWdDQUNJQklBTkIvLzhEY1VFQ2RDQUFha0VFYXlnQ0FDSUVTZ1JBSUFJZ0JEc0JBRUVBSVFrZ0NrRUFJQXBCQUVvYklSRWdBQ0VEQTBBZ0NTQVJSZ1JBSUFRaEFRd0hDeUFCSUFNb0FnQkdCRUFnQXlBRU5nSUFDeUFKUVFGcUlRa2dBMEVFYWlFRERBQUxBQXNnQWlBQk93RUFJQUVnQkU0TkJFRUFJUWtnQ2tFQUlBcEJBRW9iSVJFZ0FDRURBMEFnQ1NBUlJnMEZJQVFnQXlnQ0FFWUVRQ0FESUFFMkFnQUxJQWxCQVdvaENTQURRUVJxSVFNTUFBc0FDeUFDSUFRN0FRQWdCRUVIYkVFQ2RDQU9haUlEUVJ4cklnRWdBU2dDQUVFQmFqWUNBQ0FEUVJocklnRWdBU2dDQUNBTGFqWUNBQ0FEUVJScklnRWdBU2dDQUNBTmFqWUNBQ0FMSUFOQkVHc2lBU2dDQUVnRVFDQUJJQXMyQWdBTElBTkJCR3NnRFRZQ0FBd0ZDeUFCUVFCS0JFQWdBaUFCT3dFQUlBTkJCMnhCQW5RZ0Rtb2lBMEVjYXlJQklBRW9BZ0JCQVdvMkFnQWdBMEVZYXlJQklBRW9BZ0FnQzJvMkFnQWdBMEVVYXlJQklBRW9BZ0FnRFdvMkFnQWdDeUFEUVF4cklnRW9BZ0JLQkVBZ0FTQUxOZ0lBQ3lBRFFRUnJJQTAyQWdBTUJRc2dBa0VDYXk4QkFDSURRUkIwUVJCMUlnRkJBRW9FUUNBQ0lBRTdBUUFnQTBFY2JDQU9haUlEUVJ4cklnRWdBU2dDQUVFQmFqWUNBQ0FEUVJocklnRWdBU2dDQUNBTGFqWUNBQ0FEUVJScklnRWdBU2dDQUNBTmFqWUNBQ0FEUVF4cklnRW9BZ0FnQzA0TkJTQUJJQXMyQWdBTUJRc2dDa0dBZ0FKT0JFQkJBRUVEUWJvTVFRQVFQRUYvSVFrTUNRc2dBaUFLUVFGcUlnRTdBUUFnQUNBS1FRSjBhaUFCUVJCMFFSQjFOZ0lBSUE0Z0NrRWNiR29pQXlBTk5nSVlJQU1nRFRZQ0ZDQURJQXMyQWhBZ0F5QUxOZ0lNSUFNZ0RUWUNDQ0FESUFzMkFnUWdBMEVCTmdJQUlBRWhDZ3dFQ3lBQ1FRQTdBUUFNQXdzZ0FrRUVhaUVDSUJaQkFtb2hEQ0FOUVFGcUlRME1CUXNnQVVFUWRFRVFkVUVjYkNBT2FpSURRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQURRUmhySWdFZ0FTZ0NBQ0FMYWpZQ0FDQURRUlJySWdFZ0FTZ0NBQ0FOYWpZQ0FBd0JDeUFCUVJCMFFSQjFRUnhzSUE1cUlnTkJCR3NnRFRZQ0FDQURRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQURRUmhySWdFZ0FTZ0NBQ0FMYWpZQ0FDQURRUlJySWdFZ0FTZ0NBQ0FOYWpZQ0FBc2dBa0VDYWlFQ0lBeEJBV29oRENBTFFRRnFJUXNNQUFzQUN3c2dDa0VBSUFwQkFFb2JRUUZxSVFKQkFTRURRUUVoRENBQUlRc0RRQ0FDSUFOSEJFQUNRQ0FESUFzb0FnQWlBVVlFUUNBTUlnbEJBV29oREF3QkN5QUJRUUowSUFCcVFRUnJLQUlBSVFrTElBc2dDVFlDQUNBTFFRUnFJUXNnQTBFQmFpRUREQUVMQ3lBSElBeEJBV3NpQ3pZQ0NFRUFJQXRGRFFFYUlBZEJqSUFJYWlFSklBZEJER3BCQUNBTFFRSjBFRG9oRENBSFFaQ0FLR3BCQUNBTFFRUjBFRG9oQlVFQUlRTURRQ0FESUF0T0JFQkJBQ0VMSUFwQkFDQUtRUUJLR3lFRUEwQWdCQ0FMUmdSQVFRQWhDU0FIS0FJSUlnQkJBQ0FBUVFCS0d5RUFRUUFoQXdOQUlBQWdBMFlOQlNBRklBTkJCSFJxSWdFZ0FTc0RBQ0FNSUFOQkFuUnFLQUlBdHlJWG96a0RBQ0FCSUFFckF3Z2dGNk01QXdnZ0EwRUJhaUVEREFBTEFBc2dEQ0FBSUF0QkFuUnFLQUlBUVFGcklnSkJBblFpQTJvaUFTQUJLQUlBSUE0Z0MwRUhiRUVDZEdvaUJpZ0NBR28yQWdBZ0JTQUNRUVIwSWdGcUlnSWdBaXNEQUNBR0tBSUV0NkE1QXdBZ0FpQUNLd01JSUFZb0FnaTNvRGtEQ0NBR0tBSU1JZ0lnQVNBSmFpSUJLQUlBU0FSQUlBRWdBallDQUFzZ0JpZ0NFQ0lDSUFrZ0EwRUNkQ0lEUVFSeWFpSUJLQUlBU2dSQUlBRWdBallDQUFzZ0JpZ0NGQ0lDSUFrZ0EwRUljbW9pQVNnQ0FFZ0VRQ0FCSUFJMkFnQUxJQVlvQWhnaUFpQUpJQU5CREhKcUlnRW9BZ0JLQkVBZ0FTQUNOZ0lBQ3lBTFFRRnFJUXNNQUFzQUJTQUpJQU5CQkhScUlnRWdDRFlDQUNBQlFRQTJBZ1FnQVNBR05nSUlJQUZCQURZQ0RDQURRUUZxSVFNZ0J5Z0NDQ0VMREFFTEFBc0FDeUFKQ3c4TEFuOGdBQ0VHSUFFaUNFRUNiU0lTUVFBZ0VrRUFTaHNoQUNBSEtBSUFJZ01nQWtFQ2JTSVVRUUZySWdvZ0VteEJBWFJxSVFsQkFDRUJJQU1oQkFOQUlBQWdBVWNFUUNBSlFRQTdBUUFnQkVFQU93RUFJQUZCQVdvaEFTQUVRUUpxSVFRZ0NVRUNhaUVKREFFTEN5QVVRUUFnRkVFQVNoc2hBaUFESUJKQkFXc2lERUVCZEdvaENVRUFJUUVnQXlFRUEwQWdBU0FDUndSQUlBbEJBRHNCQUNBRVFRQTdBUUFnQVVFQmFpRUJJQWtnRWtFQmRDSUFhaUVKSUFBZ0JHb2hCQXdCQ3dzZ0NrRUJJQXBCQVVvYklSVWdERUVCSUF4QkFVb2JJUllnQjBHUWdOQUFhaUVRSUFkQmtJRElBR29oQUNBSVFRRjBJQVpxUVFKcUlRWWdFa0VCZENBRGFrRUNhaUVFUVFBZ0VtdEJBWFFoRVVFQUlReEJBU0VPQWtBRFFDQU9JQlZIQkVCQkFTRUpBMEFDUUFKQUFrQWdDU0FXUndSQUlBVWdCaTBBQUU0RVFDQUVJQkZxSWdNdkFRQWlBa0VRZEVFUWRTSUJRUUJLQkVBZ0JDQUJPd0VBSUFKQkhHd2dFR29pQWtFRWF5QU9OZ0lBSUFKQkhHc2lBU0FCS0FJQVFRRnFOZ0lBSUFKQkdHc2lBU0FCS0FJQUlBbHFOZ0lBSUFKQkZHc2lBU0FCS0FJQUlBNXFOZ0lBREFVTElBTkJBbXN2QVFBaUFVRVFkRUVRZFNFQ0lBTXVBUUlpQTBFQVNnUkFJQUpCQUVvRVFDQURRUUowSUFCcVFRUnJLQUlBSWdJZ0FVRUNkQ0FBYWtFRWF5Z0NBQ0lEU2dSQUlBUWdBenNCQUVFQUlRb2dERUVBSUF4QkFFb2JJUXNnQUNFQkEwQWdDaUFMUmdSQUlBTWhBZ3dJQ3lBQ0lBRW9BZ0JHQkVBZ0FTQUROZ0lBQ3lBS1FRRnFJUW9nQVVFRWFpRUJEQUFMQUFzZ0JDQUNPd0VBSUFJZ0EwNE5CVUVBSVFvZ0RFRUFJQXhCQUVvYklRc2dBQ0VCQTBBZ0NpQUxSZzBHSUFNZ0FTZ0NBRVlFUUNBQklBSTJBZ0FMSUFwQkFXb2hDaUFCUVFScUlRRU1BQXNBQ3lBRVFRSnJMZ0VBSWdGQkFFb0VRQ0FEUVFKMElBQnFRUVJyS0FJQUlnSWdBVUgvL3dOeFFRSjBJQUJxUVFScktBSUFJZ05LQkVBZ0JDQURPd0VBUVFBaENpQU1RUUFnREVFQVNoc2hDeUFBSVFFRFFDQUtJQXRHQkVBZ0F5RUNEQWNMSUFJZ0FTZ0NBRVlFUUNBQklBTTJBZ0FMSUFwQkFXb2hDaUFCUVFScUlRRU1BQXNBQ3lBRUlBSTdBUUFnQWlBRFRnMEVRUUFoQ2lBTVFRQWdERUVBU2hzaEN5QUFJUUVEUUNBS0lBdEdEUVVnQXlBQktBSUFSZ1JBSUFFZ0FqWUNBQXNnQ2tFQmFpRUtJQUZCQkdvaEFRd0FDd0FMSUFRZ0F6c0JBQ0FEUVFkc1FRSjBJQkJxSWdKQkhHc2lBU0FCS0FJQVFRRnFOZ0lBSUFKQkdHc2lBU0FCS0FJQUlBbHFOZ0lBSUFKQkZHc2lBU0FCS0FJQUlBNXFOZ0lBSUFrZ0FrRVFheUlCS0FJQVNBUkFJQUVnQ1RZQ0FBc2dBa0VFYXlBT05nSUFEQVVMSUFKQkFFb0VRQ0FFSUFJN0FRQWdBVUVIYkVFQ2RDQVFhaUlDUVJ4cklnRWdBU2dDQUVFQmFqWUNBQ0FDUVJocklnRWdBU2dDQUNBSmFqWUNBQ0FDUVJScklnRWdBU2dDQUNBT2FqWUNBQ0FKSUFKQkRHc2lBU2dDQUVvRVFDQUJJQWsyQWdBTElBSkJCR3NnRGpZQ0FBd0ZDeUFFUVFKckx3RUFJZ0pCRUhSQkVIVWlBVUVBU2dSQUlBUWdBVHNCQUNBQ1FSeHNJQkJxSWdKQkhHc2lBU0FCS0FJQVFRRnFOZ0lBSUFKQkdHc2lBU0FCS0FJQUlBbHFOZ0lBSUFKQkZHc2lBU0FCS0FJQUlBNXFOZ0lBSUFKQkRHc2lBU2dDQUNBSlRnMEZJQUVnQ1RZQ0FBd0ZDeUFNUVlDQUFrNEVRRUVBUVFOQnVneEJBQkE4UVg4aENnd0pDeUFFSUF4QkFXb2lBVHNCQUNBQUlBeEJBblJxSUFGQkVIUkJFSFUyQWdBZ0VDQU1RUnhzYWlJQ0lBNDJBaGdnQWlBT05nSVVJQUlnQ1RZQ0VDQUNJQWsyQWd3Z0FpQU9OZ0lJSUFJZ0NUWUNCQ0FDUVFFMkFnQWdBU0VNREFRTElBUkJBRHNCQUF3REN5QUVRUVJxSVFRZ0RrRUJhaUVPSUFZZ0NHcEJCR29oQmd3RkN5QUNRUkIwUVJCMVFSeHNJQkJxSWdKQkhHc2lBU0FCS0FJQVFRRnFOZ0lBSUFKQkdHc2lBU0FCS0FJQUlBbHFOZ0lBSUFKQkZHc2lBU0FCS0FJQUlBNXFOZ0lBREFFTElBSkJFSFJCRUhWQkhHd2dFR29pQWtFRWF5QU9OZ0lBSUFKQkhHc2lBU0FCS0FJQVFRRnFOZ0lBSUFKQkdHc2lBU0FCS0FJQUlBbHFOZ0lBSUFKQkZHc2lBU0FCS0FJQUlBNXFOZ0lBQ3lBRVFRSnFJUVFnQmtFQ2FpRUdJQWxCQVdvaENRd0FDd0FMQ3lBTVFRQWdERUVBU2h0QkFXb2hBMEVCSVFGQkFTRUdJQUFoQ1FOQUlBRWdBMGNFUUFKQUlBRWdDU2dDQUNJQ1JnUkFJQVlpQ2tFQmFpRUdEQUVMSUFKQkFuUWdBR3BCQkdzb0FnQWhDZ3NnQ1NBS05nSUFJQWxCQkdvaENTQUJRUUZxSVFFTUFRc0xJQWNnQmtFQmF5SUpOZ0lJUVFBZ0NVVU5BUm9nQjBHTWdBaHFJUWdnQjBFTWFrRUFJQWxCQW5RUU9pRUdJQWRCa0lBb2FrRUFJQWxCQkhRUU9pRUZRUUFoQVFOQUlBRWdDVTRFUUVFQUlRa2dERUVBSUF4QkFFb2JJUVFEUUNBRUlBbEdCRUJCQUNFS0lBY29BZ2dpQUVFQUlBQkJBRW9iSVFCQkFDRUJBMEFnQUNBQlJnMEZJQVVnQVVFRWRHb2lBaUFDS3dNQUlBWWdBVUVDZEdvb0FnQzNJaGVqT1FNQUlBSWdBaXNEQ0NBWG96a0RDQ0FCUVFGcUlRRU1BQXNBQ3lBR0lBQWdDVUVDZEdvb0FnQkJBV3NpQWtFQ2RDSURhaUlCSUFFb0FnQWdFQ0FKUVFkc1FRSjBhaUlNS0FJQWFqWUNBQ0FGSUFKQkJIUWlBV29pQWlBQ0t3TUFJQXdvQWdTM29Ea0RBQ0FDSUFJckF3Z2dEQ2dDQ0xlZ09RTUlJQXdvQWd3aUFpQUJJQWhxSWdFb0FnQklCRUFnQVNBQ05nSUFDeUFNS0FJUUlnSWdDQ0FEUVFKMElnTkJCSEpxSWdFb0FnQktCRUFnQVNBQ05nSUFDeUFNS0FJVUlnSWdDQ0FEUVFoeWFpSUJLQUlBU0FSQUlBRWdBallDQUFzZ0RDZ0NHQ0lDSUFnZ0EwRU1jbW9pQVNnQ0FFb0VRQ0FCSUFJMkFnQUxJQWxCQVdvaENRd0FDd0FGSUFnZ0FVRUVkR29pQWlBU05nSUFJQUpCQURZQ0JDQUNJQlEyQWdnZ0FrRUFOZ0lNSUFGQkFXb2hBU0FIS0FJSUlRa01BUXNBQ3dBTElBb0xEd3NnQ0FSQUFuOGdBQ0VFUVFBaEF5QUJJZ1pCQUNBQlFRQktHeUVBSUFjb0FnQWlBU0FDSWdWQkFXc2lDeUFHYkVFQmRHb2hDU0FCSVFJRFFDQUFJQU5IQkVBZ0NVRUFPd0VBSUFKQkFEc0JBQ0FEUVFGcUlRTWdBa0VDYWlFQ0lBbEJBbW9oQ1F3QkN3c2dCVUVBSUFWQkFFb2JJUXdnQVNBR1FRRnJJZ3BCQVhScUlRbEJBQ0VESUFFaEFnTkFJQU1nREVjRVFDQUpRUUE3QVFBZ0FrRUFPd0VBSUFOQkFXb2hBeUFKSUFaQkFYUWlBR29oQ1NBQUlBSnFJUUlNQVFzTElBdEJBU0FMUVFGS0d5RVNJQWRCa0lEUUFHb2hEU0FIUVpDQXlBQnFJUUFnQ0NBR1FRRnFJZ0pxSVFnZ0FpQUVhaUVPSUFwQkFTQUtRUUZLR3lJVVFRRnJJUkFnQVNBQ1FRRjBhaUVDUVFBZ0JtdEJBWFFoRlVFQUlReEJBU0VQQWtBRFFDQVBJQkpIQkVBZ0RpQVFhaUVXSUFnZ0VHb2hFVUVCSVFrRFFBSkFBa0FDUUNBSklCUkhCRUFnRGkwQUFDQUlMUUFBU3dSQUlBSWdGV29pQkM4QkFDSURRUkIwUVJCMUlnRkJBRW9FUUNBQ0lBRTdBUUFnQTBFY2JDQU5haUlEUVFScklBODJBZ0FnQTBFY2F5SUJJQUVvQWdCQkFXbzJBZ0FnQTBFWWF5SUJJQUVvQWdBZ0NXbzJBZ0FnQTBFVWF5SUJJQUVvQWdBZ0QybzJBZ0FNQlFzZ0JFRUNheThCQUNJRFFSQjBRUkIxSVFFZ0JDNEJBaUlFUVFCS0JFQWdBVUVBU2dSQUlBUkJBblFnQUdwQkJHc29BZ0FpQVNBRFFRSjBJQUJxUVFScktBSUFJZ1JLQkVBZ0FpQUVPd0VBUVFBaENpQU1RUUFnREVFQVNoc2hDeUFBSVFNRFFDQUtJQXRHQkVBZ0JDRUJEQWdMSUFFZ0F5Z0NBRVlFUUNBRElBUTJBZ0FMSUFwQkFXb2hDaUFEUVFScUlRTU1BQXNBQ3lBQ0lBRTdBUUFnQVNBRVRnMEZRUUFoQ2lBTVFRQWdERUVBU2hzaEN5QUFJUU1EUUNBS0lBdEdEUVlnQkNBREtBSUFSZ1JBSUFNZ0FUWUNBQXNnQ2tFQmFpRUtJQU5CQkdvaEF3d0FDd0FMSUFKQkFtc3VBUUFpQTBFQVNnUkFJQVJCQW5RZ0FHcEJCR3NvQWdBaUFTQURRZi8vQTNGQkFuUWdBR3BCQkdzb0FnQWlCRW9FUUNBQ0lBUTdBUUJCQUNFS0lBeEJBQ0FNUVFCS0d5RUxJQUFoQXdOQUlBb2dDMFlFUUNBRUlRRU1Cd3NnQVNBREtBSUFSZ1JBSUFNZ0JEWUNBQXNnQ2tFQmFpRUtJQU5CQkdvaEF3d0FDd0FMSUFJZ0FUc0JBQ0FCSUFST0RRUkJBQ0VLSUF4QkFDQU1RUUJLR3lFTElBQWhBd05BSUFvZ0MwWU5CU0FFSUFNb0FnQkdCRUFnQXlBQk5nSUFDeUFLUVFGcUlRb2dBMEVFYWlFRERBQUxBQXNnQWlBRU93RUFJQVJCQjJ4QkFuUWdEV29pQTBFY2F5SUJJQUVvQWdCQkFXbzJBZ0FnQTBFWWF5SUJJQUVvQWdBZ0NXbzJBZ0FnQTBFVWF5SUJJQUVvQWdBZ0QybzJBZ0FnQ1NBRFFSQnJJZ0VvQWdCSUJFQWdBU0FKTmdJQUN5QURRUVJySUE4MkFnQU1CUXNnQVVFQVNnUkFJQUlnQVRzQkFDQURRUWRzUVFKMElBMXFJZ05CSEdzaUFTQUJLQUlBUVFGcU5nSUFJQU5CR0dzaUFTQUJLQUlBSUFscU5nSUFJQU5CRkdzaUFTQUJLQUlBSUE5cU5nSUFJQWtnQTBFTWF5SUJLQUlBU2dSQUlBRWdDVFlDQUFzZ0EwRUVheUFQTmdJQURBVUxJQUpCQW1zdkFRQWlBMEVRZEVFUWRTSUJRUUJLQkVBZ0FpQUJPd0VBSUFOQkhHd2dEV29pQTBFY2F5SUJJQUVvQWdCQkFXbzJBZ0FnQTBFWWF5SUJJQUVvQWdBZ0NXbzJBZ0FnQTBFVWF5SUJJQUVvQWdBZ0QybzJBZ0FnQTBFTWF5SUJLQUlBSUFsT0RRVWdBU0FKTmdJQURBVUxJQXhCZ0lBQ1RnUkFRUUJCQTBHNkRFRUFFRHhCZnlFS0RBa0xJQUlnREVFQmFpSUJPd0VBSUFBZ0RFRUNkR29nQVVFUWRFRVFkVFlDQUNBTklBeEJIR3hxSWdNZ0R6WUNHQ0FESUE4MkFoUWdBeUFKTmdJUUlBTWdDVFlDRENBRElBODJBZ2dnQXlBSk5nSUVJQU5CQVRZQ0FDQUJJUXdNQkFzZ0FrRUFPd0VBREFNTElBSkJCR29oQWlBUlFRSnFJUWdnRmtFQ2FpRU9JQTlCQVdvaER3d0ZDeUFCUVJCMFFSQjFRUnhzSUExcUlnTkJIR3NpQVNBQktBSUFRUUZxTmdJQUlBTkJHR3NpQVNBQktBSUFJQWxxTmdJQUlBTkJGR3NpQVNBQktBSUFJQTlxTmdJQURBRUxJQUZCRUhSQkVIVkJIR3dnRFdvaUEwRUVheUFQTmdJQUlBTkJIR3NpQVNBQktBSUFRUUZxTmdJQUlBTkJHR3NpQVNBQktBSUFJQWxxTmdJQUlBTkJGR3NpQVNBQktBSUFJQTlxTmdJQUN5QUNRUUpxSVFJZ0NFRUJhaUVJSUE1QkFXb2hEaUFKUVFGcUlRa01BQXNBQ3dzZ0RFRUFJQXhCQUVvYlFRRnFJUUpCQVNFRFFRRWhDQ0FBSVFrRFFDQUNJQU5IQkVBQ1FDQURJQWtvQWdBaUFVWUVRQ0FJSWdwQkFXb2hDQXdCQ3lBQlFRSjBJQUJxUVFScktBSUFJUW9MSUFrZ0NqWUNBQ0FKUVFScUlRa2dBMEVCYWlFRERBRUxDeUFISUFoQkFXc2lDVFlDQ0VFQUlBbEZEUUVhSUFkQmpJQUlhaUVLSUFkQkRHcEJBQ0FKUVFKMEVEb2hDeUFIUVpDQUtHcEJBQ0FKUVFSMEVEb2hDRUVBSVFNRFFDQURJQWxPQkVCQkFDRUpJQXhCQUNBTVFRQktHeUVFQTBBZ0JDQUpSZ1JBUVFBaENpQUhLQUlJSWdCQkFDQUFRUUJLR3lFQVFRQWhBd05BSUFBZ0EwWU5CU0FJSUFOQkJIUnFJZ0VnQVNzREFDQUxJQU5CQW5ScUtBSUF0eUlYb3prREFDQUJJQUVyQXdnZ0Y2TTVBd2dnQTBFQmFpRUREQUFMQUFzZ0N5QUFJQWxCQW5ScUtBSUFRUUZySWdKQkFuUWlBMm9pQVNBQktBSUFJQTBnQ1VFSGJFRUNkR29pQlNnQ0FHbzJBZ0FnQ0NBQ1FRUjBJZ0ZxSWdJZ0Fpc0RBQ0FGS0FJRXQ2QTVBd0FnQWlBQ0t3TUlJQVVvQWdpM29Ea0RDQ0FGS0FJTUlnSWdBU0FLYWlJQktBSUFTQVJBSUFFZ0FqWUNBQXNnQlNnQ0VDSUNJQW9nQTBFQ2RDSURRUVJ5YWlJQktBSUFTZ1JBSUFFZ0FqWUNBQXNnQlNnQ0ZDSUNJQW9nQTBFSWNtb2lBU2dDQUVnRVFDQUJJQUkyQWdBTElBVW9BaGdpQWlBS0lBTkJESEpxSWdFb0FnQktCRUFnQVNBQ05nSUFDeUFKUVFGcUlRa01BQXNBQlNBS0lBTkJCSFJxSWdFZ0JqWUNBQ0FCUVFBMkFnUWdBU0FGTmdJSUlBRkJBRFlDRENBRFFRRnFJUU1nQnlnQ0NDRUpEQUVMQUFzQUN5QUtDdzhMSUFaRkJFQUNmeUFBSVFSQkFDRURJQUVpQ0VFQUlBRkJBRW9iSVFBZ0J5Z0NBQ0lCSUFJaUJrRUJheUlKSUFoc1FRRjBhaUVMSUFFaEFnTkFJQUFnQTBjRVFDQUxRUUE3QVFBZ0FrRUFPd0VBSUFOQkFXb2hBeUFDUVFKcUlRSWdDMEVDYWlFTERBRUxDeUFHUVFBZ0JrRUFTaHNoRENBQklBaEJBV3NpQ2tFQmRHb2hDMEVBSVFNZ0FTRUNBMEFnQXlBTVJ3UkFJQXRCQURzQkFDQUNRUUE3QVFBZ0EwRUJhaUVESUFzZ0NFRUJkQ0lBYWlFTElBQWdBbW9oQWd3QkN3c2dDVUVCSUFsQkFVb2JJUkFnQjBHUWdOQUFhaUVPSUFkQmtJRElBR29oQUNBRUlBaEJBV29pQW1vaERDQUtRUUVnQ2tFQlNoc2lFa0VCYXlFVUlBRWdBa0VCZEdvaEFrRUFJQWhyUVFGMElSVkJBQ0VLUVFFaERRSkFBMEFnRFNBUVJ3UkFJQXdnRkdvaEZrRUJJUXNEUUFKQUFrQUNRQ0FMSUJKSEJFQWdCU0FNTFFBQVNBUkFJQUlnRldvaUJDOEJBQ0lEUVJCMFFSQjFJZ0ZCQUVvRVFDQUNJQUU3QVFBZ0EwRWNiQ0FPYWlJRFFRUnJJQTAyQWdBZ0EwRWNheUlCSUFFb0FnQkJBV28yQWdBZ0EwRVlheUlCSUFFb0FnQWdDMm8yQWdBZ0EwRVVheUlCSUFFb0FnQWdEV28yQWdBTUJRc2dCRUVDYXk4QkFDSURRUkIwUVJCMUlRRWdCQzRCQWlJRVFRQktCRUFnQVVFQVNnUkFJQVJCQW5RZ0FHcEJCR3NvQWdBaUFTQURRUUowSUFCcVFRUnJLQUlBSWdSS0JFQWdBaUFFT3dFQVFRQWhDU0FLUVFBZ0NrRUFTaHNoRVNBQUlRTURRQ0FKSUJGR0JFQWdCQ0VCREFnTElBRWdBeWdDQUVZRVFDQURJQVEyQWdBTElBbEJBV29oQ1NBRFFRUnFJUU1NQUFzQUN5QUNJQUU3QVFBZ0FTQUVUZzBGUVFBaENTQUtRUUFnQ2tFQVNoc2hFU0FBSVFNRFFDQUpJQkZHRFFZZ0JDQURLQUlBUmdSQUlBTWdBVFlDQUFzZ0NVRUJhaUVKSUFOQkJHb2hBd3dBQ3dBTElBSkJBbXN1QVFBaUEwRUFTZ1JBSUFSQkFuUWdBR3BCQkdzb0FnQWlBU0FEUWYvL0EzRkJBblFnQUdwQkJHc29BZ0FpQkVvRVFDQUNJQVE3QVFCQkFDRUpJQXBCQUNBS1FRQktHeUVSSUFBaEF3TkFJQWtnRVVZRVFDQUVJUUVNQndzZ0FTQURLQUlBUmdSQUlBTWdCRFlDQUFzZ0NVRUJhaUVKSUFOQkJHb2hBd3dBQ3dBTElBSWdBVHNCQUNBQklBUk9EUVJCQUNFSklBcEJBQ0FLUVFCS0d5RVJJQUFoQXdOQUlBa2dFVVlOQlNBRUlBTW9BZ0JHQkVBZ0F5QUJOZ0lBQ3lBSlFRRnFJUWtnQTBFRWFpRUREQUFMQUFzZ0FpQUVPd0VBSUFSQkIyeEJBblFnRG1vaUEwRWNheUlCSUFFb0FnQkJBV28yQWdBZ0EwRVlheUlCSUFFb0FnQWdDMm8yQWdBZ0EwRVVheUlCSUFFb0FnQWdEV28yQWdBZ0N5QURRUkJySWdFb0FnQklCRUFnQVNBTE5nSUFDeUFEUVFScklBMDJBZ0FNQlFzZ0FVRUFTZ1JBSUFJZ0FUc0JBQ0FEUVFkc1FRSjBJQTVxSWdOQkhHc2lBU0FCS0FJQVFRRnFOZ0lBSUFOQkdHc2lBU0FCS0FJQUlBdHFOZ0lBSUFOQkZHc2lBU0FCS0FJQUlBMXFOZ0lBSUFzZ0EwRU1heUlCS0FJQVNnUkFJQUVnQ3pZQ0FBc2dBMEVFYXlBTk5nSUFEQVVMSUFKQkFtc3ZBUUFpQTBFUWRFRVFkU0lCUVFCS0JFQWdBaUFCT3dFQUlBTkJIR3dnRG1vaUEwRWNheUlCSUFFb0FnQkJBV28yQWdBZ0EwRVlheUlCSUFFb0FnQWdDMm8yQWdBZ0EwRVVheUlCSUFFb0FnQWdEV28yQWdBZ0EwRU1heUlCS0FJQUlBdE9EUVVnQVNBTE5nSUFEQVVMSUFwQmdJQUNUZ1JBUVFCQkEwRzZERUVBRUR4QmZ5RUpEQWtMSUFJZ0NrRUJhaUlCT3dFQUlBQWdDa0VDZEdvZ0FVRVFkRUVRZFRZQ0FDQU9JQXBCSEd4cUlnTWdEVFlDR0NBRElBMDJBaFFnQXlBTE5nSVFJQU1nQ3pZQ0RDQURJQTAyQWdnZ0F5QUxOZ0lFSUFOQkFUWUNBQ0FCSVFvTUJBc2dBa0VBT3dFQURBTUxJQUpCQkdvaEFpQVdRUUpxSVF3Z0RVRUJhaUVOREFVTElBRkJFSFJCRUhWQkhHd2dEbW9pQTBFY2F5SUJJQUVvQWdCQkFXbzJBZ0FnQTBFWWF5SUJJQUVvQWdBZ0MybzJBZ0FnQTBFVWF5SUJJQUVvQWdBZ0RXbzJBZ0FNQVFzZ0FVRVFkRUVRZFVFY2JDQU9haUlEUVFScklBMDJBZ0FnQTBFY2F5SUJJQUVvQWdCQkFXbzJBZ0FnQTBFWWF5SUJJQUVvQWdBZ0MybzJBZ0FnQTBFVWF5SUJJQUVvQWdBZ0RXbzJBZ0FMSUFKQkFtb2hBaUFNUVFGcUlRd2dDMEVCYWlFTERBQUxBQXNMSUFwQkFDQUtRUUJLRzBFQmFpRUNRUUVoQTBFQklRd2dBQ0VMQTBBZ0FpQURSd1JBQWtBZ0F5QUxLQUlBSWdGR0JFQWdEQ0lKUVFGcUlRd01BUXNnQVVFQ2RDQUFha0VFYXlnQ0FDRUpDeUFMSUFrMkFnQWdDMEVFYWlFTElBTkJBV29oQXd3QkN3c2dCeUFNUVFGcklnczJBZ2hCQUNBTFJRMEJHaUFIUVl5QUNHb2hDU0FIUVF4cVFRQWdDMEVDZEJBNklRd2dCMEdRZ0NocVFRQWdDMEVFZEJBNklRVkJBQ0VEQTBBZ0F5QUxUZ1JBUVFBaEN5QUtRUUFnQ2tFQVNoc2hCQU5BSUFRZ0MwWUVRRUVBSVFrZ0J5Z0NDQ0lBUVFBZ0FFRUFTaHNoQUVFQUlRTURRQ0FBSUFOR0RRVWdCU0FEUVFSMGFpSUJJQUVyQXdBZ0RDQURRUUowYWlnQ0FMY2lGNk01QXdBZ0FTQUJLd01JSUJlak9RTUlJQU5CQVdvaEF3d0FDd0FMSUF3Z0FDQUxRUUowYWlnQ0FFRUJheUlDUVFKMElnTnFJZ0VnQVNnQ0FDQU9JQXRCQjJ4QkFuUnFJZ1lvQWdCcU5nSUFJQVVnQWtFRWRDSUJhaUlDSUFJckF3QWdCaWdDQkxlZ09RTUFJQUlnQWlzRENDQUdLQUlJdDZBNUF3Z2dCaWdDRENJQ0lBRWdDV29pQVNnQ0FFZ0VRQ0FCSUFJMkFnQUxJQVlvQWhBaUFpQUpJQU5CQW5RaUEwRUVjbW9pQVNnQ0FFb0VRQ0FCSUFJMkFnQUxJQVlvQWhRaUFpQUpJQU5CQ0hKcUlnRW9BZ0JJQkVBZ0FTQUNOZ0lBQ3lBR0tBSVlJZ0lnQ1NBRFFReHlhaUlCS0FJQVNnUkFJQUVnQWpZQ0FBc2dDMEVCYWlFTERBQUxBQVVnQ1NBRFFRUjBhaUlCSUFnMkFnQWdBVUVBTmdJRUlBRWdCallDQ0NBQlFRQTJBZ3dnQTBFQmFpRURJQWNvQWdnaEN3d0JDd0FMQUFzZ0NRc1BDd0ovSUFBaEJpQUJJZ2hCQW0waUVrRUFJQkpCQUVvYklRQWdCeWdDQUNJRElBSkJBbTBpRkVFQmF5SUtJQkpzUVFGMGFpRUpRUUFoQVNBRElRUURRQ0FBSUFGSEJFQWdDVUVBT3dFQUlBUkJBRHNCQUNBQlFRRnFJUUVnQkVFQ2FpRUVJQWxCQW1vaENRd0JDd3NnRkVFQUlCUkJBRW9iSVFJZ0F5QVNRUUZySWd4QkFYUnFJUWxCQUNFQklBTWhCQU5BSUFFZ0FrY0VRQ0FKUVFBN0FRQWdCRUVBT3dFQUlBRkJBV29oQVNBSklCSkJBWFFpQUdvaENTQUFJQVJxSVFRTUFRc0xJQXBCQVNBS1FRRktHeUVWSUF4QkFTQU1RUUZLR3lFV0lBZEJrSURRQUdvaEVDQUhRWkNBeUFCcUlRQWdDRUVCZENBR2FrRUNhaUVHSUJKQkFYUWdBMnBCQW1vaEJFRUFJQkpyUVFGMElSRkJBQ0VNUVFFaERnSkFBMEFnRGlBVlJ3UkFRUUVoQ1FOQUFrQUNRQUpBSUFrZ0ZrY0VRQ0FGSUFZdEFBQklCRUFnQkNBUmFpSURMd0VBSWdKQkVIUkJFSFVpQVVFQVNnUkFJQVFnQVRzQkFDQUNRUnhzSUJCcUlnSkJCR3NnRGpZQ0FDQUNRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQUNRUmhySWdFZ0FTZ0NBQ0FKYWpZQ0FDQUNRUlJySWdFZ0FTZ0NBQ0FPYWpZQ0FBd0ZDeUFEUVFKckx3RUFJZ0ZCRUhSQkVIVWhBaUFETGdFQ0lnTkJBRW9FUUNBQ1FRQktCRUFnQTBFQ2RDQUFha0VFYXlnQ0FDSUNJQUZCQW5RZ0FHcEJCR3NvQWdBaUEwb0VRQ0FFSUFNN0FRQkJBQ0VLSUF4QkFDQU1RUUJLR3lFTElBQWhBUU5BSUFvZ0MwWUVRQ0FESVFJTUNBc2dBaUFCS0FJQVJnUkFJQUVnQXpZQ0FBc2dDa0VCYWlFS0lBRkJCR29oQVF3QUN3QUxJQVFnQWpzQkFDQUNJQU5PRFFWQkFDRUtJQXhCQUNBTVFRQktHeUVMSUFBaEFRTkFJQW9nQzBZTkJpQURJQUVvQWdCR0JFQWdBU0FDTmdJQUN5QUtRUUZxSVFvZ0FVRUVhaUVCREFBTEFBc2dCRUVDYXk0QkFDSUJRUUJLQkVBZ0EwRUNkQ0FBYWtFRWF5Z0NBQ0lDSUFGQi8vOERjVUVDZENBQWFrRUVheWdDQUNJRFNnUkFJQVFnQXpzQkFFRUFJUW9nREVFQUlBeEJBRW9iSVFzZ0FDRUJBMEFnQ2lBTFJnUkFJQU1oQWd3SEN5QUNJQUVvQWdCR0JFQWdBU0FETmdJQUN5QUtRUUZxSVFvZ0FVRUVhaUVCREFBTEFBc2dCQ0FDT3dFQUlBSWdBMDROQkVFQUlRb2dERUVBSUF4QkFFb2JJUXNnQUNFQkEwQWdDaUFMUmcwRklBTWdBU2dDQUVZRVFDQUJJQUkyQWdBTElBcEJBV29oQ2lBQlFRUnFJUUVNQUFzQUN5QUVJQU03QVFBZ0EwRUhiRUVDZENBUWFpSUNRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQUNRUmhySWdFZ0FTZ0NBQ0FKYWpZQ0FDQUNRUlJySWdFZ0FTZ0NBQ0FPYWpZQ0FDQUpJQUpCRUdzaUFTZ0NBRWdFUUNBQklBazJBZ0FMSUFKQkJHc2dEallDQUF3RkN5QUNRUUJLQkVBZ0JDQUNPd0VBSUFGQkIyeEJBblFnRUdvaUFrRWNheUlCSUFFb0FnQkJBV28yQWdBZ0FrRVlheUlCSUFFb0FnQWdDV28yQWdBZ0FrRVVheUlCSUFFb0FnQWdEbW8yQWdBZ0NTQUNRUXhySWdFb0FnQktCRUFnQVNBSk5nSUFDeUFDUVFScklBNDJBZ0FNQlFzZ0JFRUNheThCQUNJQ1FSQjBRUkIxSWdGQkFFb0VRQ0FFSUFFN0FRQWdBa0VjYkNBUWFpSUNRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQUNRUmhySWdFZ0FTZ0NBQ0FKYWpZQ0FDQUNRUlJySWdFZ0FTZ0NBQ0FPYWpZQ0FDQUNRUXhySWdFb0FnQWdDVTROQlNBQklBazJBZ0FNQlFzZ0RFR0FnQUpPQkVCQkFFRURRYm9NUVFBUVBFRi9JUW9NQ1FzZ0JDQU1RUUZxSWdFN0FRQWdBQ0FNUVFKMGFpQUJRUkIwUVJCMU5nSUFJQkFnREVFY2JHb2lBaUFPTmdJWUlBSWdEallDRkNBQ0lBazJBaEFnQWlBSk5nSU1JQUlnRGpZQ0NDQUNJQWsyQWdRZ0FrRUJOZ0lBSUFFaERBd0VDeUFFUVFBN0FRQU1Bd3NnQkVFRWFpRUVJQTVCQVdvaERpQUdJQWhxUVFScUlRWU1CUXNnQWtFUWRFRVFkVUVjYkNBUWFpSUNRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQUNRUmhySWdFZ0FTZ0NBQ0FKYWpZQ0FDQUNRUlJySWdFZ0FTZ0NBQ0FPYWpZQ0FBd0JDeUFDUVJCMFFSQjFRUnhzSUJCcUlnSkJCR3NnRGpZQ0FDQUNRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQUNRUmhySWdFZ0FTZ0NBQ0FKYWpZQ0FDQUNRUlJySWdFZ0FTZ0NBQ0FPYWpZQ0FBc2dCRUVDYWlFRUlBWkJBbW9oQmlBSlFRRnFJUWtNQUFzQUN3c2dERUVBSUF4QkFFb2JRUUZxSVFOQkFTRUJRUUVoQmlBQUlRa0RRQ0FCSUFOSEJFQUNRQ0FCSUFrb0FnQWlBa1lFUUNBR0lncEJBV29oQmd3QkN5QUNRUUowSUFCcVFRUnJLQUlBSVFvTElBa2dDallDQUNBSlFRUnFJUWtnQVVFQmFpRUJEQUVMQ3lBSElBWkJBV3NpQ1RZQ0NFRUFJQWxGRFFFYUlBZEJqSUFJYWlFSUlBZEJER3BCQUNBSlFRSjBFRG9oQmlBSFFaQ0FLR3BCQUNBSlFRUjBFRG9oQlVFQUlRRURRQ0FCSUFsT0JFQkJBQ0VKSUF4QkFDQU1RUUJLR3lFRUEwQWdCQ0FKUmdSQVFRQWhDaUFIS0FJSUlnQkJBQ0FBUVFCS0d5RUFRUUFoQVFOQUlBQWdBVVlOQlNBRklBRkJCSFJxSWdJZ0Fpc0RBQ0FHSUFGQkFuUnFLQUlBdHlJWG96a0RBQ0FDSUFJckF3Z2dGNk01QXdnZ0FVRUJhaUVCREFBTEFBc2dCaUFBSUFsQkFuUnFLQUlBUVFGcklnSkJBblFpQTJvaUFTQUJLQUlBSUJBZ0NVRUhiRUVDZEdvaURDZ0NBR28yQWdBZ0JTQUNRUVIwSWdGcUlnSWdBaXNEQUNBTUtBSUV0NkE1QXdBZ0FpQUNLd01JSUF3b0FnaTNvRGtEQ0NBTUtBSU1JZ0lnQVNBSWFpSUJLQUlBU0FSQUlBRWdBallDQUFzZ0RDZ0NFQ0lDSUFnZ0EwRUNkQ0lEUVFSeWFpSUJLQUlBU2dSQUlBRWdBallDQUFzZ0RDZ0NGQ0lDSUFnZ0EwRUljbW9pQVNnQ0FFZ0VRQ0FCSUFJMkFnQUxJQXdvQWhnaUFpQUlJQU5CREhKcUlnRW9BZ0JLQkVBZ0FTQUNOZ0lBQ3lBSlFRRnFJUWtNQUFzQUJTQUlJQUZCQkhScUlnSWdFallDQUNBQ1FRQTJBZ1FnQWlBVU5nSUlJQUpCQURZQ0RDQUJRUUZxSVFFZ0J5Z0NDQ0VKREFFTEFBc0FDeUFLQ3c4TElBUkJBVVlFUUNBSUJFQUNmeUFBSVFSQkFDRURJQUVpQmtFQUlBRkJBRW9iSVFBZ0J5SU1LQUlBSWdFZ0FpSUZRUUZySWdzZ0JteEJBWFJxSVFrZ0FTRUNBMEFnQUNBRFJ3UkFJQWxCQURzQkFDQUNRUUE3QVFBZ0EwRUJhaUVESUFKQkFtb2hBaUFKUVFKcUlRa01BUXNMSUFWQkFDQUZRUUJLR3lFSElBRWdCa0VCYXlJS1FRRjBhaUVKUVFBaEF5QUJJUUlEUUNBRElBZEhCRUFnQ1VFQU93RUFJQUpCQURzQkFDQURRUUZxSVFNZ0NTQUdRUUYwSWdCcUlRa2dBQ0FDYWlFQ0RBRUxDeUFMUVFFZ0MwRUJTaHNoRWlBTVFaQ0EwQUJxSVE4Z0RFR1FnTWdBYWlFQUlBZ2dCa0VCYWlJQ2FpRUhJQUlnQkdvaERpQU1LQUlFSUFKcUlRMGdDa0VCSUFwQkFVb2JJaFJCQVdzaEVDQUJJQUpCQVhScUlRSkJBQ0FHYTBFQmRDRVZRUUFoQ0VFQklSTUNRQU5BSUJJZ0UwY0VRQ0FPSUJCcUlSWWdCeUFRYWlFUlFRRWhDUU5BQWtBQ1FBSkFJQWtnRkVjRVFDQU9MUUFBSUFjdEFBQk5CRUFnRFVIL0FUb0FBQ0FDSUJWcUlnUXZBUUFpQTBFUWRFRVFkU0lCUVFCS0JFQWdBaUFCT3dFQUlBTkJIR3dnRDJvaUEwRUVheUFUTmdJQUlBTkJIR3NpQVNBQktBSUFRUUZxTmdJQUlBTkJHR3NpQVNBQktBSUFJQWxxTmdJQUlBTkJGR3NpQVNBQktBSUFJQk5xTmdJQURBVUxJQVJCQW1zdkFRQWlBMEVRZEVFUWRTRUJJQVF1QVFJaUJFRUFTZ1JBSUFGQkFFb0VRQ0FFUVFKMElBQnFRUVJyS0FJQUlnRWdBMEVDZENBQWFrRUVheWdDQUNJRVNnUkFJQUlnQkRzQkFFRUFJUW9nQ0VFQUlBaEJBRW9iSVFzZ0FDRURBMEFnQ2lBTFJnUkFJQVFoQVF3SUN5QUJJQU1vQWdCR0JFQWdBeUFFTmdJQUN5QUtRUUZxSVFvZ0EwRUVhaUVEREFBTEFBc2dBaUFCT3dFQUlBRWdCRTROQlVFQUlRb2dDRUVBSUFoQkFFb2JJUXNnQUNFREEwQWdDaUFMUmcwR0lBUWdBeWdDQUVZRVFDQURJQUUyQWdBTElBcEJBV29oQ2lBRFFRUnFJUU1NQUFzQUN5QUNRUUpyTGdFQUlnTkJBRW9FUUNBRVFRSjBJQUJxUVFScktBSUFJZ0VnQTBILy93TnhRUUowSUFCcVFRUnJLQUlBSWdSS0JFQWdBaUFFT3dFQVFRQWhDaUFJUVFBZ0NFRUFTaHNoQ3lBQUlRTURRQ0FLSUF0R0JFQWdCQ0VCREFjTElBRWdBeWdDQUVZRVFDQURJQVEyQWdBTElBcEJBV29oQ2lBRFFRUnFJUU1NQUFzQUN5QUNJQUU3QVFBZ0FTQUVUZzBFUVFBaENpQUlRUUFnQ0VFQVNoc2hDeUFBSVFNRFFDQUtJQXRHRFFVZ0JDQURLQUlBUmdSQUlBTWdBVFlDQUFzZ0NrRUJhaUVLSUFOQkJHb2hBd3dBQ3dBTElBSWdCRHNCQUNBRVFRZHNRUUowSUE5cUlnTkJIR3NpQVNBQktBSUFRUUZxTmdJQUlBTkJHR3NpQVNBQktBSUFJQWxxTmdJQUlBTkJGR3NpQVNBQktBSUFJQk5xTmdJQUlBa2dBMEVRYXlJQktBSUFTQVJBSUFFZ0NUWUNBQXNnQTBFRWF5QVROZ0lBREFVTElBRkJBRW9FUUNBQ0lBRTdBUUFnQTBFSGJFRUNkQ0FQYWlJRFFSeHJJZ0VnQVNnQ0FFRUJhallDQUNBRFFSaHJJZ0VnQVNnQ0FDQUphallDQUNBRFFSUnJJZ0VnQVNnQ0FDQVRhallDQUNBSklBTkJER3NpQVNnQ0FFb0VRQ0FCSUFrMkFnQUxJQU5CQkdzZ0V6WUNBQXdGQ3lBQ1FRSnJMd0VBSWdOQkVIUkJFSFVpQVVFQVNnUkFJQUlnQVRzQkFDQURRUnhzSUE5cUlnTkJIR3NpQVNBQktBSUFRUUZxTmdJQUlBTkJHR3NpQVNBQktBSUFJQWxxTmdJQUlBTkJGR3NpQVNBQktBSUFJQk5xTmdJQUlBTkJER3NpQVNnQ0FDQUpUZzBGSUFFZ0NUWUNBQXdGQ3lBSVFZQ0FBazRFUUVFQVFRTkJ1Z3hCQUJBOFFYOGhDZ3dKQ3lBQ0lBaEJBV29pQVRzQkFDQUFJQWhCQW5ScUlBRkJFSFJCRUhVMkFnQWdEeUFJUVJ4c2FpSURJQk0yQWhnZ0F5QVROZ0lVSUFNZ0NUWUNFQ0FESUFrMkFnd2dBeUFUTmdJSUlBTWdDVFlDQkNBRFFRRTJBZ0FnQVNFSURBUUxJQUpCQURzQkFDQU5RUUE2QUFBTUF3c2dEVUVDYWlFTklBSkJCR29oQWlBUlFRSnFJUWNnRmtFQ2FpRU9JQk5CQVdvaEV3d0ZDeUFCUVJCMFFSQjFRUnhzSUE5cUlnTkJIR3NpQVNBQktBSUFRUUZxTmdJQUlBTkJHR3NpQVNBQktBSUFJQWxxTmdJQUlBTkJGR3NpQVNBQktBSUFJQk5xTmdJQURBRUxJQUZCRUhSQkVIVkJIR3dnRDJvaUEwRUVheUFUTmdJQUlBTkJIR3NpQVNBQktBSUFRUUZxTmdJQUlBTkJHR3NpQVNBQktBSUFJQWxxTmdJQUlBTkJGR3NpQVNBQktBSUFJQk5xTmdJQUN5QU5RUUZxSVEwZ0FrRUNhaUVDSUFkQkFXb2hCeUFPUVFGcUlRNGdDVUVCYWlFSkRBQUxBQXNMSUFoQkFDQUlRUUJLRzBFQmFpRUNRUUVoQTBFQklRY2dBQ0VKQTBBZ0FpQURSd1JBQWtBZ0F5QUpLQUlBSWdGR0JFQWdCeUlLUVFGcUlRY01BUXNnQVVFQ2RDQUFha0VFYXlnQ0FDRUtDeUFKSUFvMkFnQWdDVUVFYWlFSklBTkJBV29oQXd3QkN3c2dEQ0FIUVFGcklnazJBZ2hCQUNBSlJRMEJHaUFNUVl5QUNHb2hDaUFNUVF4cVFRQWdDVUVDZEJBNklRc2dERUdRZ0NocVFRQWdDVUVFZEJBNklRZEJBQ0VEQTBBZ0F5QUpUZ1JBUVFBaENTQUlRUUFnQ0VFQVNoc2hCQU5BSUFRZ0NVWUVRRUVBSVFvZ0RDZ0NDQ0lBUVFBZ0FFRUFTaHNoQUVFQUlRTURRQ0FBSUFOR0RRVWdCeUFEUVFSMGFpSUJJQUVyQXdBZ0N5QURRUUowYWlnQ0FMY2lGNk01QXdBZ0FTQUJLd01JSUJlak9RTUlJQU5CQVdvaEF3d0FDd0FMSUFzZ0FDQUpRUUowYWlnQ0FFRUJheUlDUVFKMElnTnFJZ0VnQVNnQ0FDQVBJQWxCQjJ4QkFuUnFJZ1VvQWdCcU5nSUFJQWNnQWtFRWRDSUJhaUlDSUFJckF3QWdCU2dDQkxlZ09RTUFJQUlnQWlzRENDQUZLQUlJdDZBNUF3Z2dCU2dDRENJQ0lBRWdDbW9pQVNnQ0FFZ0VRQ0FCSUFJMkFnQUxJQVVvQWhBaUFpQUtJQU5CQW5RaUEwRUVjbW9pQVNnQ0FFb0VRQ0FCSUFJMkFnQUxJQVVvQWhRaUFpQUtJQU5CQ0hKcUlnRW9BZ0JJQkVBZ0FTQUNOZ0lBQ3lBRktBSVlJZ0lnQ2lBRFFReHlhaUlCS0FJQVNnUkFJQUVnQWpZQ0FBc2dDVUVCYWlFSkRBQUxBQVVnQ2lBRFFRUjBhaUlCSUFZMkFnQWdBVUVBTmdJRUlBRWdCVFlDQ0NBQlFRQTJBZ3dnQTBFQmFpRURJQXdvQWdnaENRd0JDd0FMQUFzZ0Nnc1BDeUFHUlFSQUFuOGdBQ0VFUVFBaEF5QUJJZ2hCQUNBQlFRQktHeUVBSUFjaURDZ0NBQ0lCSUFJaUJrRUJheUlKSUFoc1FRRjBhaUVMSUFFaEFnTkFJQUFnQTBjRVFDQUxRUUE3QVFBZ0FrRUFPd0VBSUFOQkFXb2hBeUFDUVFKcUlRSWdDMEVDYWlFTERBRUxDeUFHUVFBZ0JrRUFTaHNoQnlBQklBaEJBV3NpQ2tFQmRHb2hDMEVBSVFNZ0FTRUNBMEFnQXlBSFJ3UkFJQXRCQURzQkFDQUNRUUE3QVFBZ0EwRUJhaUVESUFzZ0NFRUJkQ0lBYWlFTElBQWdBbW9oQWd3QkN3c2dDVUVCSUFsQkFVb2JJUkFnREVHUWdOQUFhaUVOSUF4QmtJRElBR29oQUNBRUlBaEJBV29pQW1vaEJ5QU1LQUlFSUFKcUlRNGdDa0VCSUFwQkFVb2JJaEpCQVdzaEZDQUJJQUpCQVhScUlRSkJBQ0FJYTBFQmRDRVZRUUFoQ2tFQklROENRQU5BSUE4Z0VFY0VRQ0FISUJScUlSWkJBU0VMQTBBQ1FBSkFBa0FnQ3lBU1J3UkFJQVVnQnkwQUFFNEVRQ0FPUWY4Qk9nQUFJQUlnRldvaUJDOEJBQ0lEUVJCMFFSQjFJZ0ZCQUVvRVFDQUNJQUU3QVFBZ0EwRWNiQ0FOYWlJRFFRUnJJQTgyQWdBZ0EwRWNheUlCSUFFb0FnQkJBV28yQWdBZ0EwRVlheUlCSUFFb0FnQWdDMm8yQWdBZ0EwRVVheUlCSUFFb0FnQWdEMm8yQWdBTUJRc2dCRUVDYXk4QkFDSURRUkIwUVJCMUlRRWdCQzRCQWlJRVFRQktCRUFnQVVFQVNnUkFJQVJCQW5RZ0FHcEJCR3NvQWdBaUFTQURRUUowSUFCcVFRUnJLQUlBSWdSS0JFQWdBaUFFT3dFQVFRQWhDU0FLUVFBZ0NrRUFTaHNoRVNBQUlRTURRQ0FKSUJGR0JFQWdCQ0VCREFnTElBRWdBeWdDQUVZRVFDQURJQVEyQWdBTElBbEJBV29oQ1NBRFFRUnFJUU1NQUFzQUN5QUNJQUU3QVFBZ0FTQUVUZzBGUVFBaENTQUtRUUFnQ2tFQVNoc2hFU0FBSVFNRFFDQUpJQkZHRFFZZ0JDQURLQUlBUmdSQUlBTWdBVFlDQUFzZ0NVRUJhaUVKSUFOQkJHb2hBd3dBQ3dBTElBSkJBbXN1QVFBaUEwRUFTZ1JBSUFSQkFuUWdBR3BCQkdzb0FnQWlBU0FEUWYvL0EzRkJBblFnQUdwQkJHc29BZ0FpQkVvRVFDQUNJQVE3QVFCQkFDRUpJQXBCQUNBS1FRQktHeUVSSUFBaEF3TkFJQWtnRVVZRVFDQUVJUUVNQndzZ0FTQURLQUlBUmdSQUlBTWdCRFlDQUFzZ0NVRUJhaUVKSUFOQkJHb2hBd3dBQ3dBTElBSWdBVHNCQUNBQklBUk9EUVJCQUNFSklBcEJBQ0FLUVFCS0d5RVJJQUFoQXdOQUlBa2dFVVlOQlNBRUlBTW9BZ0JHQkVBZ0F5QUJOZ0lBQ3lBSlFRRnFJUWtnQTBFRWFpRUREQUFMQUFzZ0FpQUVPd0VBSUFSQkIyeEJBblFnRFdvaUEwRWNheUlCSUFFb0FnQkJBV28yQWdBZ0EwRVlheUlCSUFFb0FnQWdDMm8yQWdBZ0EwRVVheUlCSUFFb0FnQWdEMm8yQWdBZ0N5QURRUkJySWdFb0FnQklCRUFnQVNBTE5nSUFDeUFEUVFScklBODJBZ0FNQlFzZ0FVRUFTZ1JBSUFJZ0FUc0JBQ0FEUVFkc1FRSjBJQTFxSWdOQkhHc2lBU0FCS0FJQVFRRnFOZ0lBSUFOQkdHc2lBU0FCS0FJQUlBdHFOZ0lBSUFOQkZHc2lBU0FCS0FJQUlBOXFOZ0lBSUFzZ0EwRU1heUlCS0FJQVNnUkFJQUVnQ3pZQ0FBc2dBMEVFYXlBUE5nSUFEQVVMSUFKQkFtc3ZBUUFpQTBFUWRFRVFkU0lCUVFCS0JFQWdBaUFCT3dFQUlBTkJIR3dnRFdvaUEwRWNheUlCSUFFb0FnQkJBV28yQWdBZ0EwRVlheUlCSUFFb0FnQWdDMm8yQWdBZ0EwRVVheUlCSUFFb0FnQWdEMm8yQWdBZ0EwRU1heUlCS0FJQUlBdE9EUVVnQVNBTE5nSUFEQVVMSUFwQmdJQUNUZ1JBUVFCQkEwRzZERUVBRUR4QmZ5RUpEQWtMSUFJZ0NrRUJhaUlCT3dFQUlBQWdDa0VDZEdvZ0FVRVFkRUVRZFRZQ0FDQU5JQXBCSEd4cUlnTWdEellDR0NBRElBODJBaFFnQXlBTE5nSVFJQU1nQ3pZQ0RDQURJQTgyQWdnZ0F5QUxOZ0lFSUFOQkFUWUNBQ0FCSVFvTUJBc2dBa0VBT3dFQUlBNUJBRG9BQUF3REN5QU9RUUpxSVE0Z0FrRUVhaUVDSUJaQkFtb2hCeUFQUVFGcUlROE1CUXNnQVVFUWRFRVFkVUVjYkNBTmFpSURRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQURRUmhySWdFZ0FTZ0NBQ0FMYWpZQ0FDQURRUlJySWdFZ0FTZ0NBQ0FQYWpZQ0FBd0JDeUFCUVJCMFFSQjFRUnhzSUExcUlnTkJCR3NnRHpZQ0FDQURRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQURRUmhySWdFZ0FTZ0NBQ0FMYWpZQ0FDQURRUlJySWdFZ0FTZ0NBQ0FQYWpZQ0FBc2dEa0VCYWlFT0lBSkJBbW9oQWlBSFFRRnFJUWNnQzBFQmFpRUxEQUFMQUFzTElBcEJBQ0FLUVFCS0cwRUJhaUVDUVFFaEEwRUJJUWNnQUNFTEEwQWdBaUFEUndSQUFrQWdBeUFMS0FJQUlnRkdCRUFnQnlJSlFRRnFJUWNNQVFzZ0FVRUNkQ0FBYWtFRWF5Z0NBQ0VKQ3lBTElBazJBZ0FnQzBFRWFpRUxJQU5CQVdvaEF3d0JDd3NnRENBSFFRRnJJZ3MyQWdoQkFDQUxSUTBCR2lBTVFZeUFDR29oQ1NBTVFReHFRUUFnQzBFQ2RCQTZJUWNnREVHUWdDaHFRUUFnQzBFRWRCQTZJUVZCQUNFREEwQWdBeUFMVGdSQVFRQWhDeUFLUVFBZ0NrRUFTaHNoQkFOQUlBUWdDMFlFUUVFQUlRa2dEQ2dDQ0NJQVFRQWdBRUVBU2hzaEFFRUFJUU1EUUNBQUlBTkdEUVVnQlNBRFFRUjBhaUlCSUFFckF3QWdCeUFEUVFKMGFpZ0NBTGNpRjZNNUF3QWdBU0FCS3dNSUlCZWpPUU1JSUFOQkFXb2hBd3dBQ3dBTElBY2dBQ0FMUVFKMGFpZ0NBRUVCYXlJQ1FRSjBJZ05xSWdFZ0FTZ0NBQ0FOSUF0QkIyeEJBblJxSWdZb0FnQnFOZ0lBSUFVZ0FrRUVkQ0lCYWlJQ0lBSXJBd0FnQmlnQ0JMZWdPUU1BSUFJZ0Fpc0RDQ0FHS0FJSXQ2QTVBd2dnQmlnQ0RDSUNJQUVnQ1dvaUFTZ0NBRWdFUUNBQklBSTJBZ0FMSUFZb0FoQWlBaUFKSUFOQkFuUWlBMEVFY21vaUFTZ0NBRW9FUUNBQklBSTJBZ0FMSUFZb0FoUWlBaUFKSUFOQkNISnFJZ0VvQWdCSUJFQWdBU0FDTmdJQUN5QUdLQUlZSWdJZ0NTQURRUXh5YWlJQktBSUFTZ1JBSUFFZ0FqWUNBQXNnQzBFQmFpRUxEQUFMQUFVZ0NTQURRUVIwYWlJQklBZzJBZ0FnQVVFQU5nSUVJQUVnQmpZQ0NDQUJRUUEyQWd3Z0EwRUJhaUVESUF3b0FnZ2hDd3dCQ3dBTEFBc2dDUXNQQ3dKL0lBQWhCaUFCSWdoQkFtMGlFRUVBSUJCQkFFb2JJUUFnQnlnQ0FDSURJQUpCQW0waUZFRUJheUlLSUJCc1FRRjBhaUVKUVFBaEFTQURJUVFEUUNBQUlBRkhCRUFnQ1VFQU93RUFJQVJCQURzQkFDQUJRUUZxSVFFZ0JFRUNhaUVFSUFsQkFtb2hDUXdCQ3dzZ0ZFRUFJQlJCQUVvYklRSWdBeUFRUVFGcklneEJBWFJxSVFsQkFDRUJJQU1oQkFOQUlBRWdBa2NFUUNBSlFRQTdBUUFnQkVFQU93RUFJQUZCQVdvaEFTQUpJQkJCQVhRaUFHb2hDU0FBSUFScUlRUU1BUXNMSUFwQkFTQUtRUUZLR3lFVklBeEJBU0FNUVFGS0d5RVdJQWRCa0lEUUFHb2hEaUFIUVpDQXlBQnFJUUFnRUVFQmFpSUJJQWNvQWdScUlRd2dDRUVCZENBR2FrRUNhaUVTSUFNZ0FVRUJkR29oQkVFQUlCQnJRUUYwSVJGQkFDRUdRUUVoRFFKQUEwQWdEU0FWUndSQVFRRWhDUU5BQWtBQ1FBSkFJQWtnRmtjRVFDQUZJQkl0QUFCT0JFQWdERUgvQVRvQUFDQUVJQkZxSWdNdkFRQWlBa0VRZEVFUWRTSUJRUUJLQkVBZ0JDQUJPd0VBSUFKQkhHd2dEbW9pQWtFRWF5QU5OZ0lBSUFKQkhHc2lBU0FCS0FJQVFRRnFOZ0lBSUFKQkdHc2lBU0FCS0FJQUlBbHFOZ0lBSUFKQkZHc2lBU0FCS0FJQUlBMXFOZ0lBREFVTElBTkJBbXN2QVFBaUFVRVFkRUVRZFNFQ0lBTXVBUUlpQTBFQVNnUkFJQUpCQUVvRVFDQURRUUowSUFCcVFRUnJLQUlBSWdJZ0FVRUNkQ0FBYWtFRWF5Z0NBQ0lEU2dSQUlBUWdBenNCQUVFQUlRb2dCa0VBSUFaQkFFb2JJUXNnQUNFQkEwQWdDaUFMUmdSQUlBTWhBZ3dJQ3lBQ0lBRW9BZ0JHQkVBZ0FTQUROZ0lBQ3lBS1FRRnFJUW9nQVVFRWFpRUJEQUFMQUFzZ0JDQUNPd0VBSUFJZ0EwNE5CVUVBSVFvZ0JrRUFJQVpCQUVvYklRc2dBQ0VCQTBBZ0NpQUxSZzBHSUFNZ0FTZ0NBRVlFUUNBQklBSTJBZ0FMSUFwQkFXb2hDaUFCUVFScUlRRU1BQXNBQ3lBRVFRSnJMZ0VBSWdGQkFFb0VRQ0FEUVFKMElBQnFRUVJyS0FJQUlnSWdBVUgvL3dOeFFRSjBJQUJxUVFScktBSUFJZ05LQkVBZ0JDQURPd0VBUVFBaENpQUdRUUFnQmtFQVNoc2hDeUFBSVFFRFFDQUtJQXRHQkVBZ0F5RUNEQWNMSUFJZ0FTZ0NBRVlFUUNBQklBTTJBZ0FMSUFwQkFXb2hDaUFCUVFScUlRRU1BQXNBQ3lBRUlBSTdBUUFnQWlBRFRnMEVRUUFoQ2lBR1FRQWdCa0VBU2hzaEN5QUFJUUVEUUNBS0lBdEdEUVVnQXlBQktBSUFSZ1JBSUFFZ0FqWUNBQXNnQ2tFQmFpRUtJQUZCQkdvaEFRd0FDd0FMSUFRZ0F6c0JBQ0FEUVFkc1FRSjBJQTVxSWdKQkhHc2lBU0FCS0FJQVFRRnFOZ0lBSUFKQkdHc2lBU0FCS0FJQUlBbHFOZ0lBSUFKQkZHc2lBU0FCS0FJQUlBMXFOZ0lBSUFrZ0FrRVFheUlCS0FJQVNBUkFJQUVnQ1RZQ0FBc2dBa0VFYXlBTk5nSUFEQVVMSUFKQkFFb0VRQ0FFSUFJN0FRQWdBVUVIYkVFQ2RDQU9haUlDUVJ4cklnRWdBU2dDQUVFQmFqWUNBQ0FDUVJocklnRWdBU2dDQUNBSmFqWUNBQ0FDUVJScklnRWdBU2dDQUNBTmFqWUNBQ0FKSUFKQkRHc2lBU2dDQUVvRVFDQUJJQWsyQWdBTElBSkJCR3NnRFRZQ0FBd0ZDeUFFUVFKckx3RUFJZ0pCRUhSQkVIVWlBVUVBU2dSQUlBUWdBVHNCQUNBQ1FSeHNJQTVxSWdKQkhHc2lBU0FCS0FJQVFRRnFOZ0lBSUFKQkdHc2lBU0FCS0FJQUlBbHFOZ0lBSUFKQkZHc2lBU0FCS0FJQUlBMXFOZ0lBSUFKQkRHc2lBU2dDQUNBSlRnMEZJQUVnQ1RZQ0FBd0ZDeUFHUVlDQUFrNEVRRUVBUVFOQnVneEJBQkE4UVg4aENnd0pDeUFFSUFaQkFXb2lBVHNCQUNBQUlBWkJBblJxSUFGQkVIUkJFSFUyQWdBZ0RpQUdRUnhzYWlJQ0lBMDJBaGdnQWlBTk5nSVVJQUlnQ1RZQ0VDQUNJQWsyQWd3Z0FpQU5OZ0lJSUFJZ0NUWUNCQ0FDUVFFMkFnQWdBU0VHREFRTElBUkJBRHNCQUNBTVFRQTZBQUFNQXdzZ0RFRUNhaUVNSUFSQkJHb2hCQ0FOUVFGcUlRMGdDQ0FTYWtFRWFpRVNEQVVMSUFKQkVIUkJFSFZCSEd3Z0Rtb2lBa0VjYXlJQklBRW9BZ0JCQVdvMkFnQWdBa0VZYXlJQklBRW9BZ0FnQ1dvMkFnQWdBa0VVYXlJQklBRW9BZ0FnRFdvMkFnQU1BUXNnQWtFUWRFRVFkVUVjYkNBT2FpSUNRUVJySUEwMkFnQWdBa0VjYXlJQklBRW9BZ0JCQVdvMkFnQWdBa0VZYXlJQklBRW9BZ0FnQ1dvMkFnQWdBa0VVYXlJQklBRW9BZ0FnRFdvMkFnQUxJQXhCQVdvaERDQUVRUUpxSVFRZ0VrRUNhaUVTSUFsQkFXb2hDUXdBQ3dBTEN5QUdRUUFnQmtFQVNodEJBV29oQTBFQklRRkJBU0VNSUFBaENRTkFJQUVnQTBjRVFBSkFJQUVnQ1NnQ0FDSUNSZ1JBSUF3aUNrRUJhaUVNREFFTElBSkJBblFnQUdwQkJHc29BZ0FoQ2dzZ0NTQUtOZ0lBSUFsQkJHb2hDU0FCUVFGcUlRRU1BUXNMSUFjZ0RFRUJheUlKTmdJSVFRQWdDVVVOQVJvZ0IwR01nQWhxSVF3Z0IwRU1ha0VBSUFsQkFuUVFPaUVJSUFkQmtJQW9ha0VBSUFsQkJIUVFPaUVGUVFBaEFRTkFJQUVnQ1U0RVFFRUFJUWtnQmtFQUlBWkJBRW9iSVFRRFFDQUVJQWxHQkVCQkFDRUtJQWNvQWdnaUFFRUFJQUJCQUVvYklRQkJBQ0VCQTBBZ0FDQUJSZzBGSUFVZ0FVRUVkR29pQWlBQ0t3TUFJQWdnQVVFQ2RHb29BZ0MzSWhlak9RTUFJQUlnQWlzRENDQVhvemtEQ0NBQlFRRnFJUUVNQUFzQUN5QUlJQUFnQ1VFQ2RHb29BZ0JCQVdzaUFrRUNkQ0lEYWlJQklBRW9BZ0FnRGlBSlFRZHNRUUowYWlJR0tBSUFhallDQUNBRklBSkJCSFFpQVdvaUFpQUNLd01BSUFZb0FnUzNvRGtEQUNBQ0lBSXJBd2dnQmlnQ0NMZWdPUU1JSUFZb0Fnd2lBaUFCSUF4cUlnRW9BZ0JJQkVBZ0FTQUNOZ0lBQ3lBR0tBSVFJZ0lnRENBRFFRSjBJZ05CQkhKcUlnRW9BZ0JLQkVBZ0FTQUNOZ0lBQ3lBR0tBSVVJZ0lnRENBRFFRaHlhaUlCS0FJQVNBUkFJQUVnQWpZQ0FBc2dCaWdDR0NJQ0lBd2dBMEVNY21vaUFTZ0NBRW9FUUNBQklBSTJBZ0FMSUFsQkFXb2hDUXdBQ3dBRklBd2dBVUVFZEdvaUFpQVFOZ0lBSUFKQkFEWUNCQ0FDSUJRMkFnZ2dBa0VBTmdJTUlBRkJBV29oQVNBSEtBSUlJUWtNQVFzQUN3QUxJQW9MRHdzZ0NBUkFBbjhnQUNFRVFRQWhBeUFCSWdaQkFDQUJRUUJLR3lFQUlBY2lEQ2dDQUNJQklBSWlCVUVCYXlJTElBWnNRUUYwYWlFSklBRWhBZ05BSUFBZ0EwY0VRQ0FKUVFBN0FRQWdBa0VBT3dFQUlBTkJBV29oQXlBQ1FRSnFJUUlnQ1VFQ2FpRUpEQUVMQ3lBRlFRQWdCVUVBU2hzaEJ5QUJJQVpCQVdzaUNrRUJkR29oQ1VFQUlRTWdBU0VDQTBBZ0F5QUhSd1JBSUFsQkFEc0JBQ0FDUVFBN0FRQWdBMEVCYWlFRElBa2dCa0VCZENJQWFpRUpJQUFnQW1vaEFnd0JDd3NnQzBFQklBdEJBVW9iSVJJZ0RFR1FnTkFBYWlFUElBeEJrSURJQUdvaEFDQUlJQVpCQVdvaUFtb2hCeUFDSUFScUlRNGdEQ2dDQkNBQ2FpRU5JQXBCQVNBS1FRRktHeUlVUVFGcklSQWdBU0FDUVFGMGFpRUNRUUFnQm10QkFYUWhGVUVBSVFoQkFTRVRBa0FEUUNBU0lCTkhCRUFnRGlBUWFpRVdJQWNnRUdvaEVVRUJJUWtEUUFKQUFrQUNRQ0FKSUJSSEJFQWdEaTBBQUNBSExRQUFTd1JBSUExQi93RTZBQUFnQWlBVmFpSUVMd0VBSWdOQkVIUkJFSFVpQVVFQVNnUkFJQUlnQVRzQkFDQURRUnhzSUE5cUlnTkJCR3NnRXpZQ0FDQURRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQURRUmhySWdFZ0FTZ0NBQ0FKYWpZQ0FDQURRUlJySWdFZ0FTZ0NBQ0FUYWpZQ0FBd0ZDeUFFUVFKckx3RUFJZ05CRUhSQkVIVWhBU0FFTGdFQ0lnUkJBRW9FUUNBQlFRQktCRUFnQkVFQ2RDQUFha0VFYXlnQ0FDSUJJQU5CQW5RZ0FHcEJCR3NvQWdBaUJFb0VRQ0FDSUFRN0FRQkJBQ0VLSUFoQkFDQUlRUUJLR3lFTElBQWhBd05BSUFvZ0MwWUVRQ0FFSVFFTUNBc2dBU0FES0FJQVJnUkFJQU1nQkRZQ0FBc2dDa0VCYWlFS0lBTkJCR29oQXd3QUN3QUxJQUlnQVRzQkFDQUJJQVJPRFFWQkFDRUtJQWhCQUNBSVFRQktHeUVMSUFBaEF3TkFJQW9nQzBZTkJpQUVJQU1vQWdCR0JFQWdBeUFCTmdJQUN5QUtRUUZxSVFvZ0EwRUVhaUVEREFBTEFBc2dBa0VDYXk0QkFDSURRUUJLQkVBZ0JFRUNkQ0FBYWtFRWF5Z0NBQ0lCSUFOQi8vOERjVUVDZENBQWFrRUVheWdDQUNJRVNnUkFJQUlnQkRzQkFFRUFJUW9nQ0VFQUlBaEJBRW9iSVFzZ0FDRURBMEFnQ2lBTFJnUkFJQVFoQVF3SEN5QUJJQU1vQWdCR0JFQWdBeUFFTmdJQUN5QUtRUUZxSVFvZ0EwRUVhaUVEREFBTEFBc2dBaUFCT3dFQUlBRWdCRTROQkVFQUlRb2dDRUVBSUFoQkFFb2JJUXNnQUNFREEwQWdDaUFMUmcwRklBUWdBeWdDQUVZRVFDQURJQUUyQWdBTElBcEJBV29oQ2lBRFFRUnFJUU1NQUFzQUN5QUNJQVE3QVFBZ0JFRUhiRUVDZENBUGFpSURRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQURRUmhySWdFZ0FTZ0NBQ0FKYWpZQ0FDQURRUlJySWdFZ0FTZ0NBQ0FUYWpZQ0FDQUpJQU5CRUdzaUFTZ0NBRWdFUUNBQklBazJBZ0FMSUFOQkJHc2dFellDQUF3RkN5QUJRUUJLQkVBZ0FpQUJPd0VBSUFOQkIyeEJBblFnRDJvaUEwRWNheUlCSUFFb0FnQkJBV28yQWdBZ0EwRVlheUlCSUFFb0FnQWdDV28yQWdBZ0EwRVVheUlCSUFFb0FnQWdFMm8yQWdBZ0NTQURRUXhySWdFb0FnQktCRUFnQVNBSk5nSUFDeUFEUVFScklCTTJBZ0FNQlFzZ0FrRUNheThCQUNJRFFSQjBRUkIxSWdGQkFFb0VRQ0FDSUFFN0FRQWdBMEVjYkNBUGFpSURRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQURRUmhySWdFZ0FTZ0NBQ0FKYWpZQ0FDQURRUlJySWdFZ0FTZ0NBQ0FUYWpZQ0FDQURRUXhySWdFb0FnQWdDVTROQlNBQklBazJBZ0FNQlFzZ0NFR0FnQUpPQkVCQkFFRURRYm9NUVFBUVBFRi9JUW9NQ1FzZ0FpQUlRUUZxSWdFN0FRQWdBQ0FJUVFKMGFpQUJRUkIwUVJCMU5nSUFJQThnQ0VFY2JHb2lBeUFUTmdJWUlBTWdFellDRkNBRElBazJBaEFnQXlBSk5nSU1JQU1nRXpZQ0NDQURJQWsyQWdRZ0EwRUJOZ0lBSUFFaENBd0VDeUFDUVFBN0FRQWdEVUVBT2dBQURBTUxJQTFCQW1vaERTQUNRUVJxSVFJZ0VVRUNhaUVISUJaQkFtb2hEaUFUUVFGcUlSTU1CUXNnQVVFUWRFRVFkVUVjYkNBUGFpSURRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQURRUmhySWdFZ0FTZ0NBQ0FKYWpZQ0FDQURRUlJySWdFZ0FTZ0NBQ0FUYWpZQ0FBd0JDeUFCUVJCMFFSQjFRUnhzSUE5cUlnTkJCR3NnRXpZQ0FDQURRUnhySWdFZ0FTZ0NBRUVCYWpZQ0FDQURRUmhySWdFZ0FTZ0NBQ0FKYWpZQ0FDQURRUlJySWdFZ0FTZ0NBQ0FUYWpZQ0FBc2dEVUVCYWlFTklBSkJBbW9oQWlBSFFRRnFJUWNnRGtFQmFpRU9JQWxCQVdvaENRd0FDd0FMQ3lBSVFRQWdDRUVBU2h0QkFXb2hBa0VCSVFOQkFTRUhJQUFoQ1FOQUlBSWdBMGNFUUFKQUlBTWdDU2dDQUNJQlJnUkFJQWNpQ2tFQmFpRUhEQUVMSUFGQkFuUWdBR3BCQkdzb0FnQWhDZ3NnQ1NBS05nSUFJQWxCQkdvaENTQURRUUZxSVFNTUFRc0xJQXdnQjBFQmF5SUpOZ0lJUVFBZ0NVVU5BUm9nREVHTWdBaHFJUW9nREVFTWFrRUFJQWxCQW5RUU9pRUxJQXhCa0lBb2FrRUFJQWxCQkhRUU9pRUhRUUFoQXdOQUlBTWdDVTRFUUVFQUlRa2dDRUVBSUFoQkFFb2JJUVFEUUNBRUlBbEdCRUJCQUNFS0lBd29BZ2dpQUVFQUlBQkJBRW9iSVFCQkFDRURBMEFnQUNBRFJnMEZJQWNnQTBFRWRHb2lBU0FCS3dNQUlBc2dBMEVDZEdvb0FnQzNJaGVqT1FNQUlBRWdBU3NEQ0NBWG96a0RDQ0FEUVFGcUlRTU1BQXNBQ3lBTElBQWdDVUVDZEdvb0FnQkJBV3NpQWtFQ2RDSURhaUlCSUFFb0FnQWdEeUFKUVFkc1FRSjBhaUlGS0FJQWFqWUNBQ0FISUFKQkJIUWlBV29pQWlBQ0t3TUFJQVVvQWdTM29Ea0RBQ0FDSUFJckF3Z2dCU2dDQ0xlZ09RTUlJQVVvQWd3aUFpQUJJQXBxSWdFb0FnQklCRUFnQVNBQ05nSUFDeUFGS0FJUUlnSWdDaUFEUVFKMElnTkJCSEpxSWdFb0FnQktCRUFnQVNBQ05nSUFDeUFGS0FJVUlnSWdDaUFEUVFoeWFpSUJLQUlBU0FSQUlBRWdBallDQUFzZ0JTZ0NHQ0lDSUFvZ0EwRU1jbW9pQVNnQ0FFb0VRQ0FCSUFJMkFnQUxJQWxCQVdvaENRd0FDd0FGSUFvZ0EwRUVkR29pQVNBR05nSUFJQUZCQURZQ0JDQUJJQVUyQWdnZ0FVRUFOZ0lNSUFOQkFXb2hBeUFNS0FJSUlRa01BUXNBQ3dBTElBb0xEd3NnQmtVRVFBSi9JQUFoQkVFQUlRTWdBU0lJUVFBZ0FVRUFTaHNoQUNBSElnd29BZ0FpQVNBQ0lnWkJBV3NpQ1NBSWJFRUJkR29oQ3lBQklRSURRQ0FBSUFOSEJFQWdDMEVBT3dFQUlBSkJBRHNCQUNBRFFRRnFJUU1nQWtFQ2FpRUNJQXRCQW1vaEN3d0JDd3NnQmtFQUlBWkJBRW9iSVFjZ0FTQUlRUUZySWdwQkFYUnFJUXRCQUNFRElBRWhBZ05BSUFNZ0IwY0VRQ0FMUVFBN0FRQWdBa0VBT3dFQUlBTkJBV29oQXlBTElBaEJBWFFpQUdvaEN5QUFJQUpxSVFJTUFRc0xJQWxCQVNBSlFRRktHeUVRSUF4QmtJRFFBR29oRFNBTVFaQ0F5QUJxSVFBZ0JDQUlRUUZxSWdKcUlRY2dEQ2dDQkNBQ2FpRU9JQXBCQVNBS1FRRktHeUlTUVFGcklSUWdBU0FDUVFGMGFpRUNRUUFnQ0d0QkFYUWhGVUVBSVFwQkFTRVBBa0FEUUNBUElCQkhCRUFnQnlBVWFpRVdRUUVoQ3dOQUFrQUNRQUpBSUFzZ0VrY0VRQ0FGSUFjdEFBQklCRUFnRGtIL0FUb0FBQ0FDSUJWcUlnUXZBUUFpQTBFUWRFRVFkU0lCUVFCS0JFQWdBaUFCT3dFQUlBTkJIR3dnRFdvaUEwRUVheUFQTmdJQUlBTkJIR3NpQVNBQktBSUFRUUZxTmdJQUlBTkJHR3NpQVNBQktBSUFJQXRxTmdJQUlBTkJGR3NpQVNBQktBSUFJQTlxTmdJQURBVUxJQVJCQW1zdkFRQWlBMEVRZEVFUWRTRUJJQVF1QVFJaUJFRUFTZ1JBSUFGQkFFb0VRQ0FFUVFKMElBQnFRUVJyS0FJQUlnRWdBMEVDZENBQWFrRUVheWdDQUNJRVNnUkFJQUlnQkRzQkFFRUFJUWtnQ2tFQUlBcEJBRW9iSVJFZ0FDRURBMEFnQ1NBUlJnUkFJQVFoQVF3SUN5QUJJQU1vQWdCR0JFQWdBeUFFTmdJQUN5QUpRUUZxSVFrZ0EwRUVhaUVEREFBTEFBc2dBaUFCT3dFQUlBRWdCRTROQlVFQUlRa2dDa0VBSUFwQkFFb2JJUkVnQUNFREEwQWdDU0FSUmcwR0lBUWdBeWdDQUVZRVFDQURJQUUyQWdBTElBbEJBV29oQ1NBRFFRUnFJUU1NQUFzQUN5QUNRUUpyTGdFQUlnTkJBRW9FUUNBRVFRSjBJQUJxUVFScktBSUFJZ0VnQTBILy93TnhRUUowSUFCcVFRUnJLQUlBSWdSS0JFQWdBaUFFT3dFQVFRQWhDU0FLUVFBZ0NrRUFTaHNoRVNBQUlRTURRQ0FKSUJGR0JFQWdCQ0VCREFjTElBRWdBeWdDQUVZRVFDQURJQVEyQWdBTElBbEJBV29oQ1NBRFFRUnFJUU1NQUFzQUN5QUNJQUU3QVFBZ0FTQUVUZzBFUVFBaENTQUtRUUFnQ2tFQVNoc2hFU0FBSVFNRFFDQUpJQkZHRFFVZ0JDQURLQUlBUmdSQUlBTWdBVFlDQUFzZ0NVRUJhaUVKSUFOQkJHb2hBd3dBQ3dBTElBSWdCRHNCQUNBRVFRZHNRUUowSUExcUlnTkJIR3NpQVNBQktBSUFRUUZxTmdJQUlBTkJHR3NpQVNBQktBSUFJQXRxTmdJQUlBTkJGR3NpQVNBQktBSUFJQTlxTmdJQUlBc2dBMEVRYXlJQktBSUFTQVJBSUFFZ0N6WUNBQXNnQTBFRWF5QVBOZ0lBREFVTElBRkJBRW9FUUNBQ0lBRTdBUUFnQTBFSGJFRUNkQ0FOYWlJRFFSeHJJZ0VnQVNnQ0FFRUJhallDQUNBRFFSaHJJZ0VnQVNnQ0FDQUxhallDQUNBRFFSUnJJZ0VnQVNnQ0FDQVBhallDQUNBTElBTkJER3NpQVNnQ0FFb0VRQ0FCSUFzMkFnQUxJQU5CQkdzZ0R6WUNBQXdGQ3lBQ1FRSnJMd0VBSWdOQkVIUkJFSFVpQVVFQVNnUkFJQUlnQVRzQkFDQURRUnhzSUExcUlnTkJIR3NpQVNBQktBSUFRUUZxTmdJQUlBTkJHR3NpQVNBQktBSUFJQXRxTmdJQUlBTkJGR3NpQVNBQktBSUFJQTlxTmdJQUlBTkJER3NpQVNnQ0FDQUxUZzBGSUFFZ0N6WUNBQXdGQ3lBS1FZQ0FBazRFUUVFQVFRTkJ1Z3hCQUJBOFFYOGhDUXdKQ3lBQ0lBcEJBV29pQVRzQkFDQUFJQXBCQW5ScUlBRkJFSFJCRUhVMkFnQWdEU0FLUVJ4c2FpSURJQTgyQWhnZ0F5QVBOZ0lVSUFNZ0N6WUNFQ0FESUFzMkFnd2dBeUFQTmdJSUlBTWdDellDQkNBRFFRRTJBZ0FnQVNFS0RBUUxJQUpCQURzQkFDQU9RUUE2QUFBTUF3c2dEa0VDYWlFT0lBSkJCR29oQWlBV1FRSnFJUWNnRDBFQmFpRVBEQVVMSUFGQkVIUkJFSFZCSEd3Z0RXb2lBMEVjYXlJQklBRW9BZ0JCQVdvMkFnQWdBMEVZYXlJQklBRW9BZ0FnQzJvMkFnQWdBMEVVYXlJQklBRW9BZ0FnRDJvMkFnQU1BUXNnQVVFUWRFRVFkVUVjYkNBTmFpSURRUVJySUE4MkFnQWdBMEVjYXlJQklBRW9BZ0JCQVdvMkFnQWdBMEVZYXlJQklBRW9BZ0FnQzJvMkFnQWdBMEVVYXlJQklBRW9BZ0FnRDJvMkFnQUxJQTVCQVdvaERpQUNRUUpxSVFJZ0IwRUJhaUVISUF0QkFXb2hDd3dBQ3dBTEN5QUtRUUFnQ2tFQVNodEJBV29oQWtFQklRTkJBU0VISUFBaEN3TkFJQUlnQTBjRVFBSkFJQU1nQ3lnQ0FDSUJSZ1JBSUFjaUNVRUJhaUVIREFFTElBRkJBblFnQUdwQkJHc29BZ0FoQ1FzZ0N5QUpOZ0lBSUF0QkJHb2hDeUFEUVFGcUlRTU1BUXNMSUF3Z0IwRUJheUlMTmdJSVFRQWdDMFVOQVJvZ0RFR01nQWhxSVFrZ0RFRU1ha0VBSUF0QkFuUVFPaUVISUF4QmtJQW9ha0VBSUF0QkJIUVFPaUVGUVFBaEF3TkFJQU1nQzA0RVFFRUFJUXNnQ2tFQUlBcEJBRW9iSVFRRFFDQUVJQXRHQkVCQkFDRUpJQXdvQWdnaUFFRUFJQUJCQUVvYklRQkJBQ0VEQTBBZ0FDQURSZzBGSUFVZ0EwRUVkR29pQVNBQkt3TUFJQWNnQTBFQ2RHb29BZ0MzSWhlak9RTUFJQUVnQVNzRENDQVhvemtEQ0NBRFFRRnFJUU1NQUFzQUN5QUhJQUFnQzBFQ2RHb29BZ0JCQVdzaUFrRUNkQ0lEYWlJQklBRW9BZ0FnRFNBTFFRZHNRUUowYWlJR0tBSUFhallDQUNBRklBSkJCSFFpQVdvaUFpQUNLd01BSUFZb0FnUzNvRGtEQUNBQ0lBSXJBd2dnQmlnQ0NMZWdPUU1JSUFZb0Fnd2lBaUFCSUFscUlnRW9BZ0JJQkVBZ0FTQUNOZ0lBQ3lBR0tBSVFJZ0lnQ1NBRFFRSjBJZ05CQkhKcUlnRW9BZ0JLQkVBZ0FTQUNOZ0lBQ3lBR0tBSVVJZ0lnQ1NBRFFRaHlhaUlCS0FJQVNBUkFJQUVnQWpZQ0FBc2dCaWdDR0NJQ0lBa2dBMEVNY21vaUFTZ0NBRW9FUUNBQklBSTJBZ0FMSUF0QkFXb2hDd3dBQ3dBRklBa2dBMEVFZEdvaUFTQUlOZ0lBSUFGQkFEWUNCQ0FCSUFZMkFnZ2dBVUVBTmdJTUlBTkJBV29oQXlBTUtBSUlJUXNNQVFzQUN3QUxJQWtMRHdzQ2Z5QUFJUVlnQVNJSVFRSnRJaEJCQUNBUVFRQktHeUVBSUFjb0FnQWlBeUFDUVFKdEloUkJBV3NpQ2lBUWJFRUJkR29oQ1VFQUlRRWdBeUVFQTBBZ0FDQUJSd1JBSUFsQkFEc0JBQ0FFUVFBN0FRQWdBVUVCYWlFQklBUkJBbW9oQkNBSlFRSnFJUWtNQVFzTElCUkJBQ0FVUVFCS0d5RUNJQU1nRUVFQmF5SU1RUUYwYWlFSlFRQWhBU0FESVFRRFFDQUJJQUpIQkVBZ0NVRUFPd0VBSUFSQkFEc0JBQ0FCUVFGcUlRRWdDU0FRUVFGMElnQnFJUWtnQUNBRWFpRUVEQUVMQ3lBS1FRRWdDa0VCU2hzaEZTQU1RUUVnREVFQlNoc2hGaUFIUVpDQTBBQnFJUTRnQjBHUWdNZ0FhaUVBSUJCQkFXb2lBU0FIS0FJRWFpRU1JQWhCQVhRZ0JtcEJBbW9oRWlBRElBRkJBWFJxSVFSQkFDQVFhMEVCZENFUlFRQWhCa0VCSVEwQ1FBTkFJQTBnRlVjRVFFRUJJUWtEUUFKQUFrQUNRQ0FKSUJaSEJFQWdCU0FTTFFBQVNBUkFJQXhCL3dFNkFBQWdCQ0FSYWlJREx3RUFJZ0pCRUhSQkVIVWlBVUVBU2dSQUlBUWdBVHNCQUNBQ1FSeHNJQTVxSWdKQkJHc2dEVFlDQUNBQ1FSeHJJZ0VnQVNnQ0FFRUJhallDQUNBQ1FSaHJJZ0VnQVNnQ0FDQUphallDQUNBQ1FSUnJJZ0VnQVNnQ0FDQU5hallDQUF3RkN5QURRUUpyTHdFQUlnRkJFSFJCRUhVaEFpQURMZ0VDSWdOQkFFb0VRQ0FDUVFCS0JFQWdBMEVDZENBQWFrRUVheWdDQUNJQ0lBRkJBblFnQUdwQkJHc29BZ0FpQTBvRVFDQUVJQU03QVFCQkFDRUtJQVpCQUNBR1FRQktHeUVMSUFBaEFRTkFJQW9nQzBZRVFDQURJUUlNQ0FzZ0FpQUJLQUlBUmdSQUlBRWdBellDQUFzZ0NrRUJhaUVLSUFGQkJHb2hBUXdBQ3dBTElBUWdBanNCQUNBQ0lBTk9EUVZCQUNFS0lBWkJBQ0FHUVFCS0d5RUxJQUFoQVFOQUlBb2dDMFlOQmlBRElBRW9BZ0JHQkVBZ0FTQUNOZ0lBQ3lBS1FRRnFJUW9nQVVFRWFpRUJEQUFMQUFzZ0JFRUNheTRCQUNJQlFRQktCRUFnQTBFQ2RDQUFha0VFYXlnQ0FDSUNJQUZCLy84RGNVRUNkQ0FBYWtFRWF5Z0NBQ0lEU2dSQUlBUWdBenNCQUVFQUlRb2dCa0VBSUFaQkFFb2JJUXNnQUNFQkEwQWdDaUFMUmdSQUlBTWhBZ3dIQ3lBQ0lBRW9BZ0JHQkVBZ0FTQUROZ0lBQ3lBS1FRRnFJUW9nQVVFRWFpRUJEQUFMQUFzZ0JDQUNPd0VBSUFJZ0EwNE5CRUVBSVFvZ0JrRUFJQVpCQUVvYklRc2dBQ0VCQTBBZ0NpQUxSZzBGSUFNZ0FTZ0NBRVlFUUNBQklBSTJBZ0FMSUFwQkFXb2hDaUFCUVFScUlRRU1BQXNBQ3lBRUlBTTdBUUFnQTBFSGJFRUNkQ0FPYWlJQ1FSeHJJZ0VnQVNnQ0FFRUJhallDQUNBQ1FSaHJJZ0VnQVNnQ0FDQUphallDQUNBQ1FSUnJJZ0VnQVNnQ0FDQU5hallDQUNBSklBSkJFR3NpQVNnQ0FFZ0VRQ0FCSUFrMkFnQUxJQUpCQkdzZ0RUWUNBQXdGQ3lBQ1FRQktCRUFnQkNBQ093RUFJQUZCQjJ4QkFuUWdEbW9pQWtFY2F5SUJJQUVvQWdCQkFXbzJBZ0FnQWtFWWF5SUJJQUVvQWdBZ0NXbzJBZ0FnQWtFVWF5SUJJQUVvQWdBZ0RXbzJBZ0FnQ1NBQ1FReHJJZ0VvQWdCS0JFQWdBU0FKTmdJQUN5QUNRUVJySUEwMkFnQU1CUXNnQkVFQ2F5OEJBQ0lDUVJCMFFSQjFJZ0ZCQUVvRVFDQUVJQUU3QVFBZ0FrRWNiQ0FPYWlJQ1FSeHJJZ0VnQVNnQ0FFRUJhallDQUNBQ1FSaHJJZ0VnQVNnQ0FDQUphallDQUNBQ1FSUnJJZ0VnQVNnQ0FDQU5hallDQUNBQ1FReHJJZ0VvQWdBZ0NVNE5CU0FCSUFrMkFnQU1CUXNnQmtHQWdBSk9CRUJCQUVFRFFib01RUUFRUEVGL0lRb01DUXNnQkNBR1FRRnFJZ0U3QVFBZ0FDQUdRUUowYWlBQlFSQjBRUkIxTmdJQUlBNGdCa0VjYkdvaUFpQU5OZ0lZSUFJZ0RUWUNGQ0FDSUFrMkFoQWdBaUFKTmdJTUlBSWdEVFlDQ0NBQ0lBazJBZ1FnQWtFQk5nSUFJQUVoQmd3RUN5QUVRUUE3QVFBZ0RFRUFPZ0FBREFNTElBeEJBbW9oRENBRVFRUnFJUVFnRFVFQmFpRU5JQWdnRW1wQkJHb2hFZ3dGQ3lBQ1FSQjBRUkIxUVJ4c0lBNXFJZ0pCSEdzaUFTQUJLQUlBUVFGcU5nSUFJQUpCR0dzaUFTQUJLQUlBSUFscU5nSUFJQUpCRkdzaUFTQUJLQUlBSUExcU5nSUFEQUVMSUFKQkVIUkJFSFZCSEd3Z0Rtb2lBa0VFYXlBTk5nSUFJQUpCSEdzaUFTQUJLQUlBUVFGcU5nSUFJQUpCR0dzaUFTQUJLQUlBSUFscU5nSUFJQUpCRkdzaUFTQUJLQUlBSUExcU5nSUFDeUFNUVFGcUlRd2dCRUVDYWlFRUlCSkJBbW9oRWlBSlFRRnFJUWtNQUFzQUN3c2dCa0VBSUFaQkFFb2JRUUZxSVFOQkFTRUJRUUVoRENBQUlRa0RRQ0FCSUFOSEJFQUNRQ0FCSUFrb0FnQWlBa1lFUUNBTUlncEJBV29oREF3QkN5QUNRUUowSUFCcVFRUnJLQUlBSVFvTElBa2dDallDQUNBSlFRUnFJUWtnQVVFQmFpRUJEQUVMQ3lBSElBeEJBV3NpQ1RZQ0NFRUFJQWxGRFFFYUlBZEJqSUFJYWlFTUlBZEJER3BCQUNBSlFRSjBFRG9oQ0NBSFFaQ0FLR3BCQUNBSlFRUjBFRG9oQlVFQUlRRURRQ0FCSUFsT0JFQkJBQ0VKSUFaQkFDQUdRUUJLR3lFRUEwQWdCQ0FKUmdSQVFRQWhDaUFIS0FJSUlnQkJBQ0FBUVFCS0d5RUFRUUFoQVFOQUlBQWdBVVlOQlNBRklBRkJCSFJxSWdJZ0Fpc0RBQ0FJSUFGQkFuUnFLQUlBdHlJWG96a0RBQ0FDSUFJckF3Z2dGNk01QXdnZ0FVRUJhaUVCREFBTEFBc2dDQ0FBSUFsQkFuUnFLQUlBUVFGcklnSkJBblFpQTJvaUFTQUJLQUlBSUE0Z0NVRUhiRUVDZEdvaUJpZ0NBR28yQWdBZ0JTQUNRUVIwSWdGcUlnSWdBaXNEQUNBR0tBSUV0NkE1QXdBZ0FpQUNLd01JSUFZb0FnaTNvRGtEQ0NBR0tBSU1JZ0lnQVNBTWFpSUJLQUlBU0FSQUlBRWdBallDQUFzZ0JpZ0NFQ0lDSUF3Z0EwRUNkQ0lEUVFSeWFpSUJLQUlBU2dSQUlBRWdBallDQUFzZ0JpZ0NGQ0lDSUF3Z0EwRUljbW9pQVNnQ0FFZ0VRQ0FCSUFJMkFnQUxJQVlvQWhnaUFpQU1JQU5CREhKcUlnRW9BZ0JLQkVBZ0FTQUNOZ0lBQ3lBSlFRRnFJUWtNQUFzQUJTQU1JQUZCQkhScUlnSWdFRFlDQUNBQ1FRQTJBZ1FnQWlBVU5nSUlJQUpCQURZQ0RDQUJRUUZxSVFFZ0J5Z0NDQ0VKREFFTEFBc0FDeUFLQ3dzSUFDQUFLQUlRUlFzSkFDQUFFUG9DRURNTEZBQWdBRUg0amdNMkFnQWdBRUVFYWhCSElBQUxDZ0FnQUVFWWRFRVlkUXNVQUNBQVFiaU9BellDQUNBQVFRUnFFRWNnQUFzTUFDQUFFTVFDR2lBQUVETUxDUUFnQUNBQkVQQUVDOU1EQWdKK0FuOGpBRUVnYXlJRUpBQUNRQ0FCUXYvLy8vLy8vLy8vL3dDRElnTkNnSUNBZ0lDQXdJQThmU0FEUW9DQWdJQ0FnTUQvd3dCOVZBUkFJQUZDQklZZ0FFSThpSVFoQXlBQVF2Ly8vLy8vLy8vL0Q0TWlBRUtCZ0lDQWdJQ0FnQWhhQkVBZ0EwS0JnSUNBZ0lDQWdNQUFmQ0VDREFJTElBTkNnSUNBZ0lDQWdJQkFmU0VDSUFCQ2dJQ0FnSUNBZ0lBSVVnMEJJQUlnQTBJQmczd2hBZ3dCQ3lBQVVDQURRb0NBZ0lDQWdNRC8vd0JVSUFOQ2dJQ0FnSUNBd1AvL0FGRWJSUVJBSUFGQ0JJWWdBRUk4aUlSQy8vLy8vLy8vL3dPRFFvQ0FnSUNBZ0lEOC93Q0VJUUlNQVF0Q2dJQ0FnSUNBZ1BqL0FDRUNJQU5DLy8vLy8vLy92Ly9EQUZZTkFFSUFJUUlnQTBJd2lLY2lCVUdSOXdCSkRRQWdCRUVRYWlBQUlBRkMvLy8vLy8vL1A0TkNnSUNBZ0lDQXdBQ0VJZ0lnQlVHQjl3QnJFSXNCSUFRZ0FDQUNRWUg0QUNBRmF4Q0ZBaUFFS1FNSVFnU0dJQVFwQXdBaUFFSThpSVFoQWlBRUtRTVFJQVFwQXhpRVFnQlNyU0FBUXYvLy8vLy8vLy8vRDRPRUlnQkNnWUNBZ0lDQWdJQUlXZ1JBSUFKQ0FYd2hBZ3dCQ3lBQVFvQ0FnSUNBZ0lDQUNGSU5BQ0FDUWdHRElBSjhJUUlMSUFSQklHb2tBQ0FDSUFGQ2dJQ0FnSUNBZ0lDQWY0T0V2d3RGQVFGL0l3QkJFR3NpQlNRQUlBVWdBU0FDSUFNZ0JFS0FnSUNBZ0lDQWdJQi9oUkNmQVNBRktRTUFJUUVnQUNBRktRTUlOd01JSUFBZ0FUY0RBQ0FGUVJCcUpBQUxpUUlBQWtBZ0FBUi9JQUZCL3dCTkRRRUNRRUhNbUFRb0FnQW9BZ0JGQkVBZ0FVR0FmM0ZCZ0w4RFJnMEREQUVMSUFGQi93OU5CRUFnQUNBQlFUOXhRWUFCY2pvQUFTQUFJQUZCQm5aQndBRnlPZ0FBUVFJUEN5QUJRWUJBY1VHQXdBTkhJQUZCZ0xBRFQzRkZCRUFnQUNBQlFUOXhRWUFCY2pvQUFpQUFJQUZCREhaQjRBRnlPZ0FBSUFBZ0FVRUdka0UvY1VHQUFYSTZBQUZCQXc4TElBRkJnSUFFYTBILy96OU5CRUFnQUNBQlFUOXhRWUFCY2pvQUF5QUFJQUZCRW5aQjhBRnlPZ0FBSUFBZ0FVRUdka0UvY1VHQUFYSTZBQUlnQUNBQlFReDJRVDl4UVlBQmNqb0FBVUVFRHdzTFFmQ1dCRUVaTmdJQVFYOEZRUUVMRHdzZ0FDQUJPZ0FBUVFFTC9RRUJBbjhDUUFKQUFrQUNRQ0FCSUFBaUEzTkJBM0VOQUNBQ1FRQkhJUVFDUUNBQlFRTnhSU0FDUlhJTkFBTkFJQU1nQVMwQUFDSUVPZ0FBSUFSRkRRVWdBMEVCYWlFRElBSkJBV3NpQWtFQVJ5RUVJQUZCQVdvaUFVRURjVVVOQVNBQ0RRQUxDeUFFUlEwQ0lBRXRBQUJGRFFNZ0FrRUVTUTBBQTBBZ0FTZ0NBQ0lFUVg5eklBUkJnWUtFQ0d0eFFZQ0Jnb1I0Y1EwQ0lBTWdCRFlDQUNBRFFRUnFJUU1nQVVFRWFpRUJJQUpCQkdzaUFrRURTdzBBQ3dzZ0FrVU5BUXNEUUNBRElBRXRBQUFpQkRvQUFDQUVSUTBDSUFOQkFXb2hBeUFCUVFGcUlRRWdBa0VCYXlJQ0RRQUxDMEVBSVFJTElBTkJBQ0FDRURvYUlBQUxLZ0VCZnlNQVFSQnJJZ1FrQUNBRUlBTTJBZ3dnQUNBQklBSWdBeENKQWlFQUlBUkJFR29rQUNBQUMyWUJBMzlCZnlFQ0FrQWdBRVVnQVVWeURRQkJBQ0VDSUFCQkRHcEJBRUdBQ0JBNkdpQUJJQUFvQWdnZ0FDZ0NCR3hxSVFNRFFDQUJJQU5QRFFFZ0FDQUJMUUFBUVFKMGFpSUVRUXhxSUFRb0FneEJBV28yQWdBZ0FVRUJhaUVCREFBTEFBc2dBZ3V2QVFFR2Z5TUFRZkFCYXlJSEpBQWdCeUFBTmdJQVFRRWhCZ0pBSUFOQkFrZ05BRUVBSUFGcklRa2dBQ0VGQTBBZ0FDQUZJQWxxSWdVZ0JDQURRUUpySWdwQkFuUnFLQUlBYXlJSUlBSVJBd0JCQUU0RVFDQUFJQVVnQWhFREFFRUFUZzBDQ3lBSElBWkJBblJxSUFnZ0JTQUlJQVVnQWhFREFFRUFUaUlJR3lJRk5nSUFJQVpCQVdvaEJpQURRUUZySUFvZ0NCc2lBMEVCU2cwQUN3c2dBU0FISUFZUWpRVWdCMEh3QVdva0FBdmpBUUVDZnlBQ1FRQkhJUU1DUUFKQUFrQWdBRUVEY1VVZ0FrVnlEUUFnQVVIL0FYRWhCQU5BSUFBdEFBQWdCRVlOQWlBQ1FRRnJJZ0pCQUVjaEF5QUFRUUZxSWdCQkEzRkZEUUVnQWcwQUN3c2dBMFVOQVFzQ1FDQUFMUUFBSUFGQi93RnhSaUFDUVFSSmNrVUVRQ0FCUWY4QmNVR0Jnb1FJYkNFREEwQWdBQ2dDQUNBRGN5SUVRWDl6SUFSQmdZS0VDR3R4UVlDQmdvUjRjUTBDSUFCQkJHb2hBQ0FDUVFScklnSkJBMHNOQUFzTElBSkZEUUVMSUFGQi93RnhJUUVEUUNBQklBQXRBQUJHQkVBZ0FBOExJQUJCQVdvaEFDQUNRUUZySWdJTkFBc0xRUUFMd1FFQkEzOENRQ0FCSUFJb0FoQWlBd1IvSUFNRklBSVFtUVVOQVNBQ0tBSVFDeUFDS0FJVUlnVnJTd1JBSUFJZ0FDQUJJQUlvQWlRUkJBQVBDd0pBSUFJb0FsQkJBRWdFUUVFQUlRTU1BUXNnQVNFRUEwQWdCQ0lEUlFSQVFRQWhBd3dDQ3lBQUlBTkJBV3NpQkdvdEFBQkJDa2NOQUFzZ0FpQUFJQU1nQWlnQ0pCRUVBQ0lFSUFOSkRRRWdBQ0FEYWlFQUlBRWdBMnNoQVNBQ0tBSVVJUVVMSUFVZ0FDQUJFRDhhSUFJZ0FpZ0NGQ0FCYWpZQ0ZDQUJJQU5xSVFRTElBUUxqUUVBSUFBZ0FDQUFJQUFnQUVRSjkvME40VDBDUDZKRWlMSUJkZUR2U1QrZ29rUTdqMmkxS0lLa3Y2Q2lSRlZFaUE1Vndjay9vS0pFZlcvckF4TFcxTCtnb2tSVlZWVlZWVlhGUDZBZ0FLSWdBQ0FBSUFBZ0FFU0NraTZ4eGJpelA2SkVXUUdORzJ3RzVyK2dva1RJaWxtYzVTb0FRS0NpUkVzdGlod25PZ1BBb0tKRUFBQUFBQUFBOEQrZ293dU9DZ0VPZnlBQktBSVVJUWtnQVNnQ0VDRURJQUVvQWd3aEN5QUJLQUlJSVFVZ0FDZ0M1QU1vQWhnaERRSkFJQUVvQWdRaUJ5QUJLQUlBSWdaS0JFQWdCaUVLQTBBZ0JTQUxUQVJBSUEwZ0NrRUNkR29vQWdBaERDQUZJUUlEUUNBRElBbE1CRUFnRENBQ1FRWjBhaUFEUVFGMGFpRUFJQU1oQkFOQUlBQXZBUUFFUUNBQklBbzJBZ0FNQndzZ0FFRUNhaUVBSUFRZ0NVY2hDQ0FFUVFGcUlRUWdDQTBBQ3dzZ0FpQUxSeUVBSUFKQkFXb2hBaUFBRFFBTEN5QUhJQXBISVFBZ0NrRUJhaUVLSUFBTkFBc0xJQVloQ2dzQ1FDQUhJQXBLQkVBZ0J5RUlBMEFnQlNBTFRBUkFJQTBnQ0VFQ2RHb29BZ0FoRENBRklRSURRQ0FESUFsTUJFQWdEQ0FDUVFaMGFpQURRUUYwYWlFQUlBTWhCQU5BSUFBdkFRQUVRQ0FCSUFnMkFnUU1Cd3NnQUVFQ2FpRUFJQVFnQ1VjaEJpQUVRUUZxSVFRZ0JnMEFDd3NnQWlBTFJ5RUFJQUpCQVdvaEFpQUFEUUFMQ3lBSUlBcEtJUUFnQ0VFQmF5RUlJQUFOQUFzTElBY2hDQXNDUUNBRklBdElCRUFnQlNFR0EwQWdDQ0FLSWdKT0JFQURRQ0FESUFsTUJFQWdEU0FDUVFKMGFpZ0NBQ0FHUVFaMGFpQURRUUYwYWlFQUlBTWhCQU5BSUFBdkFRQUVRQ0FCSUFZMkFnZ01Cd3NnQUVFQ2FpRUFJQVFnQ1VjaEJ5QUVRUUZxSVFRZ0J3MEFDd3NnQWlBSVJ5RUFJQUpCQVdvaEFpQUFEUUFMQ3lBR0lBdEhJUUFnQmtFQmFpRUdJQUFOQUFzTElBVWhCZ3NDUUNBR0lBdElCRUFnQ3lFSEEwQWdDQ0FLSWdKT0JFQURRQ0FESUFsTUJFQWdEU0FDUVFKMGFpZ0NBQ0FIUVFaMGFpQURRUUYwYWlFQUlBTWhCQU5BSUFBdkFRQUVRQ0FCSUFjMkFnd01Cd3NnQUVFQ2FpRUFJQVFnQ1VjaEJTQUVRUUZxSVFRZ0JRMEFDd3NnQWlBSVJ5RUFJQUpCQVdvaEFpQUFEUUFMQ3lBR0lBZElJUUFnQjBFQmF5RUhJQUFOQUFzTElBc2hCd3NDUUNBRElBbElCRUFnQmtFR2RDRU1JQU1oQlFOQUlBZ2dDaUlDVGdSQUEwQWdCaUFIVEFSQUlBMGdBa0VDZEdvb0FnQWdER29nQlVFQmRHb2hBQ0FHSVFRRFFDQUFMd0VBQkVBZ0FTQUZOZ0lRREFjTElBQkJRR3NoQUNBRUlBZEhJUXNnQkVFQmFpRUVJQXNOQUFzTElBSWdDRWNoQUNBQ1FRRnFJUUlnQUEwQUN3c2dCU0FKUnlFQUlBVkJBV29oQlNBQURRQUxDeUFESVFVTEFrQWdCU0FKU0FSQUlBWkJCblFoRENBSklRSURRQ0FJSUFvaUEwNEVRQU5BSUFZZ0Iwd0VRQ0FOSUFOQkFuUnFLQUlBSUF4cUlBSkJBWFJxSVFBZ0JpRUVBMEFnQUM4QkFBUkFJQUVnQWpZQ0ZBd0hDeUFBUVVCcklRQWdCQ0FIUnlFTElBUkJBV29oQkNBTERRQUxDeUFESUFoSElRQWdBMEVCYWlFRElBQU5BQXNMSUFJZ0JVb2hBQ0FDUVFGcklRSWdBQTBBQ3dzZ0NTRUNDeUFCSUFjZ0JtdEJER3dpQUNBQWJDQUlJQXByUVFSMElnQWdBR3hxSUFJZ0JXc2lEa0VEZENJQUlBQnNhallDR0VFQUlRUWdDQ0FLVGdSQUlBNUJBV3BCQTNFaER3TkFJQVlnQjB3RVFDQU5JQXBCQW5ScUtBSUFJUXdnQmlFREEwQWdBeUVMQWtBZ0FpQUZTQTBBSUF3Z0MwRUdkR29nQlVFQmRHb2hBMEVBSVFrZ0JTRUFJQThFUUFOQUlBQkJBV29oQUNBRUlBTXZBUUJCQUVkcUlRUWdBMEVDYWlFRElBbEJBV29pQ1NBUFJ3MEFDd3NnRGtFRFNRMEFBMEFnQkNBREx3RUFRUUJIYWlBREx3RUNRUUJIYWlBREx3RUVRUUJIYWlBREx3RUdRUUJIYWlFRUlBTkJDR29oQXlBQVFRTnFJUWtnQUVFRWFpRUFJQUlnQ1VjTkFBc0xJQXRCQVdvaEF5QUhJQXRIRFFBTEN5QUlJQXBISVFBZ0NrRUJhaUVLSUFBTkFBc0xJQUVnQkRZQ0hBdkhBZ0VEZnlBQUtBSUVJUU1DUUNBQlFRSlBCRUFnQUNnQ0FDSUNJQUUyQWhnZ0FrRVBOZ0lVSUFBZ0FDZ0NBQ2dDQUJFQkFBd0JDeUFCUVFGSERRQWdBeWdDUkNJQ0JFQURRQ0FDS0FJb0JFQWdBa0VBTmdJb0lBQWdBa0V3YWlBQ0tBSTRFUUlBQ3lBQ0tBSXNJZ0lOQUFzTElBTkJBRFlDUkNBREtBSklJZ0lFUUFOQUlBSW9BaWdFUUNBQ1FRQTJBaWdnQUNBQ1FUQnFJQUlvQWpnUkFnQUxJQUlvQWl3aUFnMEFDd3NnQTBFQU5nSklDeUFESUFGQkFuUnFJZ0VpQUNnQ1BDRUNJQUJCQURZQ1BDQUNCRUFEUUNBQ0tBSUFJUUFnQWlnQ0JDQUNLQUlJYWtFUWFpRUVJQUlRTXlBRElBTW9Ba3dnQkdzMkFrd2dBQ0lDRFFBTEN5QUJLQUkwSVFJZ0FVRUFOZ0kwSUFJRVFBTkFJQUlvQWdBaEFDQUNLQUlFSUFJb0FnaHFRUkJxSVFFZ0FoQXpJQU1nQXlnQ1RDQUJhellDVENBQUlnSU5BQXNMQ3l3QkFYOGdBQkNyQlNBQUtBSUFCRUFnQUJDb0JTQUFFRFFhSUFBb0FnQWhBU0FBRU53QkdpQUJFRE1MQzRrREFRWi9JQUFvQWhnaUFTZ0NCQ0VDSUFFb0FnQWhCQU5BSUFKRkJFQWdBQ0FCS0FJTUVRQUFSUVJBUVFBUEN5QUJLQUlBSVFRZ0FTZ0NCQ0VDQ3lBRVFRRnFJUU1nQWtFQmF5RUNJQVF0QUFCQi93RkhCRUFEUUNBQUtBTFFBeUlFSUFRb0FoaEJBV28yQWhnZ0FTQUNOZ0lFSUFFZ0F6WUNBQ0FDQkg4Z0FnVWdBQ0FCS0FJTUVRQUFSUVJBUVFBUEN5QUJLQUlBSVFNZ0FTZ0NCQXRCQVdzaEFpQURMUUFBSVFRZ0EwRUJhaUVESUFSQi93RkhEUUFMQ3dOQUlBSUVmeUFDQlNBQUlBRW9BZ3dSQUFCRkJFQkJBQThMSUFFb0FnQWhBeUFCS0FJRUMwRUJheUVDSUFNdEFBQWhCU0FEUVFGcUlnUWhBeUFGUWY4QlJnMEFDeUFGUlFSQUlBQW9BdEFESWdNZ0F5Z0NHRUVDYWpZQ0dDQUJJQUkyQWdRZ0FTQUVOZ0lBREFFTEN5QUFLQUxRQXlnQ0dDSURCRUFnQUNnQ0FDSUdJQU0yQWhnZ0JrSDNBRFlDRkNBQUtBSUFJQVUyQWh3Z0FFRi9JQUFvQWdBb0FnUVJBZ0FnQUNnQzBBTkJBRFlDR0FzZ0FDQUZOZ0s0QXlBQklBSTJBZ1FnQVNBRU5nSUFRUUVMR1FBZ0FDZ0NBQ0FCTmdJQUlBQWdBQ2dDQUVFSWFqWUNBQXMrQVFKL0l3QkJFR3NpQkNRQUlBUkJDR29pQXlBQklBSWdBQ2dDQUJFRkFDQURLQUlBRUMwZ0F5Z0NBQ0VBSUFNb0FnQVFMQ0FFUVJCcUpBQWdBQXRSQVFKL0l3QkJFR3NpQWlRQUlBQW9BZ0FoQXlBQ0lBQW9BZ1FpQUVFQmRTQUJhaUlCSUFCQkFYRUVmeUFCS0FJQUlBTnFLQUlBQlNBREN4RUFBRFlDRENBQ0tBSU1JUUFnQWtFUWFpUUFJQUFMQndBZ0FCRVBBQXNKQUNBQVFRRVFmUm9MdlFNQ0FYOERmU01BUVNCcklnWWtBQ0FGQW44Q1FBSkFBa0FnQVVVTkFDQUFJQUVnQkNvQ0NDSUlJQVFxQWd3aUNTQUdRUnhxSUFaQkVHb1EwZ0pCQUVnTkFDQUZBbjhnQmlvQ0hDSUhpME1BQUFCUFhRUkFJQWVvREFFTFFZQ0FnSUI0Q3pZQ0FDQUZBbjhnQmlvQ0VDSUhpME1BQUFCUFhRUkFJQWVvREFFTFFZQ0FnSUI0Q3pZQ0JDQUNSUTBCSUFBZ0FpQUlJQWtnQmtFWWFpQUdRUXhxRU5JQ1FRQklEUUVnQlFKL0lBWXFBaHdpQnlBSGtpQUdLZ0lZa3lJSGkwTUFBQUJQWFFSQUlBZW9EQUVMUVlDQWdJQjRDellDQ0NBRkFuOGdCaW9DRUNJSElBZVNJQVlxQWd5VElnZUxRd0FBQUU5ZEJFQWdCNmdNQVF0QmdJQ0FnSGdMTmdJTUlBTkZEUUlnQUNBRElBZ2dDU0FHUVJScUlBWkJDR29RMGdKQkFFZ05BaUFGQW44Z0Jpb0NGQ0FHS2dJY1F3QUFRRUNVSUFZcUFoaERBQUJBd0pTU2tpSUlpME1BQUFCUFhRUkFJQWlvREFFTFFZQ0FnSUI0Q3pZQ0VDQUdLZ0lJSUFZcUFoQkRBQUJBUUpRZ0Jpb0NERU1BQUVEQWxKS1NJZ2lMUXdBQUFFOWRCRUFnQ0tnTUJBdEJnSUNBZ0hnTUF3c2dCVUovTndJQUN5QUZRbjgzQWdnTElBVkJmellDRUVGL0N6WUNGQ0FHUVNCcUpBQUxUZ0VDZlNBQktnSUFJQUFxQWdDVElnUWdCSlFnQVNvQ0JDQUFLZ0lFa3lJRUlBU1VrcEVpQlVNQUFBQUFYQVJBSUFJZ0JDQUZsVGdDQUNBRElBRXFBZ0FnQUNvQ0FKTWdCWlU0QWdBTEN3Z0FRUXdRVGhCSUN5Y0JBWDhqQUVFUWF5SUNKQUFnQUVFRFFaaXVBa0hRcGdKQjR3QWdBUkFHSUFKQkVHb2tBQXNaQUNBQUlBRkJ2ZDhCUVpQK0EwR3c3UU5Cck8wREVLa0VDeE1BSUFCQmdQRURRYWp0QTBHazdRTVE4d1lML1FNQkNYOGpBRUVRYXlJTEpBQUNRQUpBQWtBQ1FDQUNCRUFnQTBVTkFTQUVSUTBDSUFBZ0FSRGVCU0FDSUFSc2JDSUZOZ0lNSUFNZ0JXd2lEQ0FBS0FJVVJ3UkFJQXdRVGlFRkl3QkJFR3NpRFNRQUl3QkJJR3NpQmlRQUlBMUJDR29pQ1NBRk5nSUFJQVpCR0dvZ0JSQ3FCaUVLUVJBUVRpRUhJd0JCSUdzaUNDUUFJQWdnQlRZQ0RDQUhFUHNESWdkQjFOMEJOZ0lBSUFkQkRHb2dDRUVJYWlBSVFReHFFUFlCRVBZQkdpQUlRU0JxSkFBZ0NTQUhOZ0lFSUFvUXVRRWFJQVlnQlRZQ0JDQUdJQVUyQWdBZ0NpZ0NBQ0VGSUFwQkFEWUNBQ0FGQkVBZ0JSQXpDeUFHUVNCcUpBQWdDU0FBUVJocUVQOERJQWtRMFFFZ0RVRVFhaVFBSUFBb0FoaEZEUVFnQUNnQ0dFVU5CUXNnQUNBTU5nSVVJQUFnQkRZQ0VDQUFJQU0yQWdnZ0FDQUNOZ0lFSUFBZ0FUWUNBQ0FMUVJCcUpBQVBDMEh3cndSQi9Ba1FNa0dhRkJBeVFiOGNFREpCL3dBUU5VSDVJQkF5UWRrakVESVFOaEFBQUF0QjhLOEVRWTRyRURKQm1oUVFNa0cvSEJBeVFZQUJFRFZCK1NBUU1rR1FMeEF5RURZUUFBQUxRZkN2QkVIVXd3QVFNa0dhRkJBeVFiOGNFREpCZ2dFUU5VSDVJQkF5UWZyR0FCQXlFRFlRQUFBTFFmQ3ZCRUhWendBUU1rR2FGQkF5UWI4Y0VESkJsUUVRTlVINUlCQXlRZmpTQUJBeUVEWVFBQUFMUVJBUUNpQUxRWXpYQUJCTEVOMENRWlRWQVVFT0VBa0FDeHNCQVg4Z0FDZ0NBQ0lCUlFSQUR3c2dBUkF6SUFCQkFEWUNBQXNRQUNBQUtBSUFJQUVvQWdCclFRSjFDN3NPQVF4L0l3QkJJR3NpRENRQUFrQWdBaTBBWkFSQUlBd2dBRUhJQUdvaUFCRGxBallDQ0NBTVFSaHFJQXhCQ0dvUW9nRWhBU0FDRUtzQ0VMY0NJUWNnQWhDckFoRGxBaUVESUFFb0FnQWhBU01BUVNCcklnUWtBQ0FFSUFFMkFoZ2dBQ2dDQUNFQklBUWdBQkMzQWpZQ0FDQUJJQVJCR0dvZ0JCRHRBMEVDZEdvaEJRSkFJQWNnQXhEd0JTSUdRUUJNRFFBZ0FCQTBLQUlBSUFBb0FnUWlDV3RCQW5VZ0JrNEVRQ0FFSUFNMkFnQWdDU0FGYXlJS1FRSjFJZ0VnQmtnRVFDQUVJQWMyQWdBZ0JDQUJFTzhGSUFRb0FnQWhEU01BUVJCcklnZ2tBQ0FJSUFBZ0JpQUJheEMxQWlFQ0lBQVFOQ0VMSXdCQkVHc2lBU1FBSUFFZ0F6WUNBQ0FCSUEwMkFnZ0RRQ0FCUVFocUlBRVFnZ0VFUUNBTElBSW9BZ1FnQVVFSWFpSURLQUlBRVBRQklBTVFqZ0lnQWlBQ0tBSUVRUVJxTmdJRURBRUxDeUFCUVJCcUpBQWdBaEJ1SUFoQkVHb2tBQ0FLUVFCTURRSUxJd0JCRUdzaUNDUUFJQWdnQUNJQ0lBa2dCU0FDS0FJRUlnTWdCU0FHUVFKMGFtdHFJZ0ZyUVFKMUVMVUNJZ29vQWdRaEJpQUJJUUFEUUNBQUlBbFBCRUFnQ2hCdUlBRWdCVWNFUUNBRElBRWdCV3NpQUdzZ0JTQUFFTW9DQ3lBSVFSQnFKQUFGSUFJUU5DQUdJQUFROUFFZ0NpQUdRUVJxSWdZMkFnUWdBRUVFYWlFQURBRUxDeUFISUFRb0FnQWdCUkRYQWhvTUFRc2dBQkEwSVFFZ0JDQUFJQUFRUXlBR2FoRGlBaUFGSUFBb0FnQnJRUUoxSUFFUTJRSWhBaU1BUVNCcklnWWtBQ0FHSUFjMkFoZ2dCa0VJYWlBQ1FRaHFJQWNnQXhEd0JSQ2tBeUVCQTBBZ0FTZ0NBQ0FCS0FJRVJ3UkFJQUlvQWhBZ0FTZ0NBQ0FHUVJocUlnTW9BZ0FROUFFZ0FTQUJLQUlBUVFScU5nSUFJQU1RamdJTUFRc0xJQUVRcWdFZ0JrRWdhaVFBSUFBUTZRSWdBaWdDQkNFQklBQVFOQ0FBS0FJQUlBVWdBa0VFYWlJSEVKZ0NJQUFRTkNFR0lBQW9BZ1FoQ1NBQ1FRaHFJUU1EUUNBRklBbEhCRUFnQmlBREtBSUFJQVVROUFFZ0F5QURLQUlBUVFScU5nSUFJQVZCQkdvaEJRd0JDd3NnQUNBSEVFWWdBRUVFYWlBREVFWWdBQkEwSUFJUVBSQkdJQUlnQWlnQ0JEWUNBQ0FBSUFBUVF4QzBBaUFCSVFVZ0FoQzJBZ3NnQlJDVUJCb2dCRUVnYWlRQURBRUxJQXhCQ0dvUVNDRUpJd0JCSUdzaURTUUFRWDhoQkVGL0lRWWdBa0hvQUdvaUNoQkRJUUlnRFVFUWFoQklJUWNnQWdSQUlBY1FqUVFnQWtrRVFCQ2FBUUFMSUFjZ0J4QTBJQUlRbWdZaUNEWUNBQ0FISUFnMkFnUWdCeEEwSUFnZ0FrRURkR28yQWdBZ0IwRUFFSjRESUFjZ0FoQ0RCQXNDUUFOQUlBY1FRaUFGVFFSQUlBWkJmMGNFUUNBSklBb2dCaEE3RUtvQ1FRQWhCUU5BSUFjUVFpQUZUUTBFQWtBZ0JTQUdSZzBBSUFjZ0JSQlNLQUlFSUFjZ0JoQlNLQUlFUmdSQUlBa2dDaUFGRURzUXFnSU1BUXNnQnlBRkVGSWhCQUpBSUFFb0FnUWdBUkEwS0FJQVJ3UkFJQUVnQkJDb0F3d0JDeU1BUVNCcklnc2tBQ0FCRURRaUFpQUxRUWhxSUFFZ0FSQkNRUUZxRUtJRElBRVFRaUFDRUpzRElnSW9BZ2dnQkJEZkFpQUNJQUlvQWdoQkNHbzJBZ2dnQVJEakFpQUJFRFFoRGlBQktBSUFJUThnQVNnQ0JDRUlJQUpCQkdvaEJBTkFJQWdnRDBjRVFDQU9JQVFvQWdCQkNHc2dDRUVJYXlJSUVOOENJQVFnQkNnQ0FFRUlhellDQUF3QkN3c2dBU0FFRUVZZ0FVRUVhaUFDUVFocUVFWWdBUkEwSUFJUVBSQkdJQUlnQWlnQ0JEWUNBQ0FCSUFFUVFoQ2VBeUFDS0FJRUlRUURRQ0FFSUFJb0FnaEhCRUFnQWlnQ0VCb2dBaUFDS0FJSVFRaHJOZ0lJREFFTEN5QUNLQUlBQkVBZ0FpZ0NFQm9nQWlnQ0FDRUVJQUlRdmdZYUlBUVFNd3NnQzBFZ2FpUUFDeUFCRUxjQ0lRSWdBUkRsQWlFTEl3QkJJR3NpQ0NRQUlBZ2dDellDRUNBSUlBSTJBaGdnQ0VFUWFpQUlRUmhxRUowRElRNGpBRUVnYXlJRUpBQWdCQ0FMTmdJUUlBUWdBallDR0FKQUlBNUJBa2dOQUNBRUlBUkJHR29nRGtFQ2EwRUJkaUlDRVBnQk5nSUlJQVFvQWdnZ0JFRVFhaERTQVNnQ0FCQ29Ba1VOQUNBRUlBUW9BaEFwQWdBM0F3QURRQUpBSUFRb0FoQWdCQ2dDQ0NrQ0FEY0NBQ0FFSUFRb0FnZzJBaEFnQWtVTkFDQUVJQVJCR0dvZ0FrRUJhMEVDYlNJQ0VQZ0JOZ0lJSUFRb0FnZ2dCQkNvQWcwQkN3c2dCQ2dDRUNBRUtRTUFOd0lBQ3lBRVFTQnFKQUFnQ0VFZ2FpUUFDeUFGUVFGcUlRVU1BQXNBQ3dVZ0NpQUZFRHNvQWdCQkJHb2dBeENaQXlFQ0lBMUJDR29nQ2lBRkVEc29BZ0FnQWhEeUFTRUlJQWNnQlJCU0lBZ3BBd0EzQWdBZ0FpQUVJQUlnQkVraUFoc2hCQ0FGSUFZZ0Foc2hCaUFGUVFGcUlRVU1BUXNMUWZDdkJFSFB0d0VRTWtHNi9BQVFNa0dEeFFBUU1rR2JBUkExUVpUSkFCQXlRZkczQVJBeUVEWVFBQUFMSUFjUWp3WWdEVUVnYWlRQVFRQWhBZ05BSUFrUVF5QUNUUVJBQWtBZ0FDZ0NaQ0FBS0FKb1RnMEFJQUVROFFVTkFDQUJLQUlBS0FJQUlRSWdBUkR6QlNBQUlBQW9BbVJCQVdvMkFtUWdBQ0FCSUFJZ0F4RHVBd3NnQ1JCMEJTQUFJQUVnQ1NBQ0VEc29BZ0FnQXhEdUF5QUNRUUZxSVFJTUFRc0xDeUFNUVNCcUpBQUxvd0VCQlg5QmlBRVFPU0lCQkVBRFFFRUFJUU1nQWtFRFJrVUVRQU5BSUFOQkJFWkZCRUFnQTBFRGRDSUVJQUVnQWtFRmRDSUZhbW9nQUNBRmFpQUVhaXNEQURrREFDQURRUUZxSVFNTUFRc0xJQUpCQVdvaEFnd0JDd3NnQVVLQWdJQ0FnSUNBOEQ4M0E0QUJJQUZDZ0lDQWdJQ0FnSWpBQURjRGVDQUJRb0NBZ0lESXd1djNQemNEY0NBQlFvQ0FnSUNhcytiY1B6Y0RhQ0FCUVFvMkFtQUxJQUVMV1FFQmZTQUFJQUlxQWdnZ0Fpb0NBQ0FEbENBQ0tnSUVJQVNVa3BJZ0Fpb0NJQ0FDS2dJWUlBT1VJQUlxQWh3Z0JKU1NraUlGbFRnQ0FDQUJJQUlxQWhRZ0Fpb0NEQ0FEbENBQ0tnSVFJQVNVa3BJZ0JaVTRBZ0FMVkFFQmZ5QUFFRWdoQUNBQkJFQWdBQkNTQkNBQlNRUkFFSm9CQUFzZ0FDQUFFRFFnQVJETEJpSUNOZ0lBSUFBZ0FqWUNCQ0FBRURRZ0FpQUJRUUowYWpZQ0FDQUFRUUFRdEFJZ0FDQUJFS1lEQ3lBQUN3c0FJQUFnQVVFa0VEOGFDd29BSUFFZ0FHdEJERzBMV0FFQ2Z5QUNRUUFnQWtFQVNoc2hBZ05BSUFJZ0JFY0VRQ0FESUFNb0FnQkIvWWNOYkVIRHZab0JhaUlGTmdJQUlBQWdCRUVDZEdvZ0FDQUZRUkIyUWYvL0FYRWdBVzlCQW5ScUVFWWdCRUVCYWlFRURBRUxDd3V0QWdFRWZ5QUJJQUFRUXlJRFN3UkFJd0JCSUdzaUJpUUFBa0FnQVNBRGF5SUJJQUFRTkNnQ0FDQUFLQUlFYTBFQ2RVMEVRQ01BUVJCcklnUWtBQ0FFSUFBZ0FSQzFBaUlES0FJRUlRRWdBeWdDQ0NFRkEwQWdBU0FGUmdSQUlBTVFiaUFFUVJCcUpBQUZJQUFRTkNBQklBSVE5QUVnQXlBQlFRUnFJZ0UyQWdRTUFRc0xEQUVMSUFBUU5DRURJQVpCQ0dvZ0FDQUFFRU1nQVdvUTRnSWdBQkJESUFNUTJRSWhBeU1BUVJCcklnUWtBQ0FFSUFOQkNHb2dBUkNrQXlJQktBSUFJUVVEUUNBQktBSUVJQVZIQkVBZ0F5Z0NFQ0FCS0FJQUlBSVE5QUVnQVNBQktBSUFRUVJxSWdVMkFnQU1BUXNMSUFFUXFnRWdCRUVRYWlRQUlBQWdBeERoQWlBREVMWUNDeUFHUVNCcUpBQVBDeUFCSUFOSkJFQWdBQ0FBS0FJQUlBRkJBblJxRUo4RUN3c05BQ0FBS0FJQUdpQUFFUDhGQzBnQkFuOGpBRUVRYXlJQkpBQWpBRUVRYXlJQ0pBQWdBa0VJYWlBQVFRaHFLQUlBRUgwb0FnQWhBQ0FDUVJCcUpBQWdBVUVJYWlBQUVIMG9BZ0FoQUNBQlFSQnFKQUFnQUFzVEFDQUFJQUFvQWdCQkFXc2lBRFlDQUNBQUN4Z0JBWDhqQUVFUWF5SUJKQUFnQUJBeklBRkJFR29rQUF0Z0FnTi9BWHdnQUNnQ0JDSUNJQUVvQWdSR0JFQWdBa0VBSUFKQkFFb2JJUUlEUUNBQ0lBTkdSUVJBSUFOQkEzUWlCQ0FBS0FJQWFpc0RBQ0FCS0FJQUlBUnFLd01Bb2lBRm9DRUZJQU5CQVdvaEF3d0JDd3NnQlE4TFFRQVFBd0FMR1FBZ0FCQ1JCaUlBUVFBMkFnZ2dBRUh3NUFNMkFnQWdBQXNjQUNBQlFmLy8vLzhEU3dSQVFaY0lFSzBCQUFzZ0FVRUNkQkJPQ3hZQVFRRkJJQ0FBUVFGcloydDBJQUFnQUVFQ1R4c0wxd0VDQTM4QmZTTUFRUkJySWdJa0FDQUNJQUUyQWd3Q1FDQUNJQUZCQVVZRWYwRUNCU0FCSUFGQkFXdHhSUTBCSUFFUW9BSUxJZ0UyQWd3TEFrQWdBQkNOQVNJRElBRkpCRUFnQUNBQkVKUUdEQUVMSUFFZ0EwOE5BQ0FERU9FQklRUUNmeUFBRUQwb0FnQ3pJQUFRV1NvQ0FKV05JZ1ZEQUFDQVQxMGdCVU1BQUFBQVlIRUVRQ0FGcVF3QkMwRUFDeUVCSUFJQ2Z5QUVCRUFnQVJEOUF3d0JDeUFCRUtBQ0N6WUNDQ0FDSUFKQkRHb2dBa0VJYWhCNUtBSUFJZ0UyQWd3Z0FTQURUdzBBSUFBZ0FSQ1VCZ3NnQWtFUWFpUUFDeFFBSUFBZ0FSQkdJQUJCQkdvZ0FVRUVhaEJHQ3pRQkFuOUJDQkE1SWdFRWZ5QUJJQUJCQTNRUU9TSUNOZ0lBSUFKRkJFQWdBUkF6UVFBUEN5QUJJQUEyQWdRZ0FRVkJBQXNMQndBZ0FFRThhZ3NrQVFKL0l3QkJFR3NpQUNRQUlBQkJDR3BCQUJCOUtBSUFJUUVnQUVFUWFpUUFJQUVMVXdFRGZ5TUFRUkJySWdNa0FDQURJQUFnQVJDL0JpSUNLQUlFSVFFZ0FpZ0NDQ0VFQTBBZ0FTQUVSZ1JBSUFJUWJpQURRUkJxSkFBRklBQVFOQm9nQVJDWkJpQUNJQUZCQ0dvaUFUWUNCQXdCQ3dzTENRQWdBQ0FCRUtBR0N6d0JBbjhqQUVFUWF5SUJKQUFnQVVFSWFpSUNJQUFvQWdBb0FnQkJRR3NRaHdRYUlBSW9BZ0FRTkJCWklRQWdBaERSQVNBQlFSQnFKQUFnQUFzWkFRRi9JQUFRa2dFaEFpQUFJQUVRandVZ0FDQUNFSjBHQ3lRQUlBQWdBU2dDQURZQ0FDQUFJQUVvQWdRaUFUWUNCQ0FCQkVBZ0FSQ1lBd3NnQUFzcEFRRi9Jd0JCRUdzaUFTUUFJQUZCQURZQ0RDQUFJQUZCREdvUTlnRWhBQ0FCUVJCcUpBQWdBQXNUQUNBQ0lBV2lJQUFnQTZJZ0FTQUVvcUNnQ3hVQUlBQkI2TlFCTmdJQUlBQkJCR29RblFRZ0FBdFNBUUovSUFCQitOUUJOZ0lBSUFCQk9Hb1FkQ0FBUVN4cUVIUWdBRUVnYWlJQkVMb0dJQUVvQWdBRVFDQUJJQUVvQWdBUXRRWWdBUkEwR2lBQktBSUFJUUlnQVJDVEFob2dBaEF6Q3lBQUVJb0VDeFFBSUFJZ0FxSWdBQ0FBb2lBQklBR2lvS0NmQ3cwQUlBQkIvLy8vL3dFUTZ3SUxEUUFnQUNBQ2xDQUJJQUdVa3d0b0FRRi9JQUVRTkJvakFFRVFheUlDSkFBZ0FFSUFOd0lBSUFKQkFEWUNEQ0FBUVFocUVJc0RHaUFDUVJCcUpBQWdBQ0FCS0FJQU5nSUFJQUFnQVNnQ0JEWUNCQ0FCRURRb0FnQWhBaUFBRURRZ0FqWUNBQ0FCRURSQkFEWUNBQ0FCUWdBM0FnQWdBQXNKQUNBQlFRQTJBZ0FMa1FJQ0RIOEJmRUYvSVFvQ1FDQUJLQUlJSWdZZ0FpZ0NCRWNOQUNBQUtBSUVJZ01nQVNnQ0JFY05BQ0FBS0FJSUlnY2dBaWdDQ0VjTkFFRUFJUW9nQTBFQUlBTkJBRW9iSVFzZ0IwRUFJQWRCQUVvYklRd2dCa0VBSUFaQkFFb2JJUTBnQUNnQ0FDRURBMEFnQkNBTFJnMEJJQVFnQm13aERrRUFJUVVEUUNBRklBeEdSUVJBSUFOQ0FEY0RBQ0FDS0FJQUlBVkJBM1JxSVFnZ0FTZ0NBQ0FPUVFOMGFpRUpRUUFoQUVRQUFBQUFBQUFBQUNFUEEwQWdBQ0FOUmtVRVFDQURJQWtyQXdBZ0NDc0RBS0lnRDZBaUR6a0RBQ0FBUVFGcUlRQWdDVUVJYWlFSklBZ2dCMEVEZEdvaENBd0JDd3NnQlVFQmFpRUZJQU5CQ0dvaEF3d0JDd3NnQkVFQmFpRUVEQUFMQUFzZ0Nnc05BQ0FBUWYvLy8vOERFT3NDQzhrQ0FnSi9BWDBDUUFKQUlBWkJBRXdOQUNBRktBSUVJQVpCQVdwTkRRQWdCMEVBVEEwQklBZEJBV29pQ0NBRktBSUlUdzBCSUFVZ0IwRUJheEJOSVFrZ0JTQUhFRTBoQnlBRklBZ1FUU0VJSUFBZ0J5QUdRUUowSWdWcUlnQXFBZ1FnQUVFRWF5SUdLZ0lBazBNQUFBQS9sRGdDQUNBQklBVWdDR29pQVNvQ0FDQUZJQWxxSWdVcUFnQ1RRd0FBQUQrVU9BSUFJQUlnQmlvQ0FDQUFLZ0lBSWdvZ0NwS1RJQUFxQWdTU09BSUFJQU1nQlNvQ0FDQUFLZ0lBSWdvZ0NwS1RJQUVxQWdDU09BSUFJQVFnQlVFRWF5b0NBQ0FCS2dJRWtpQUZLZ0lFSUFGQkJHc3FBZ0NTazBNQUFJQStsRGdDQUE4TFFmQ3ZCRUdId1FFUU1rRytzZ0VRTWtHL0hCQXlRWndDRURWQitTQVFNa0dWdkFFUU1oQTJFQUFBQzBId3J3UkIxY0VCRURKQnZySUJFREpCdnh3UU1rR2RBaEExUWZrZ0VESkJtcjBCRURJUU5oQUFBQXNrQVFGL0l3QkJFR3NpQVNRQUlBRkJDR29nQUJCOUtBSUFJUUFnQVVFUWFpUUFJQUFMS3dBZ0FDZ0NBQm9nQUNnQ0FDQUFFTlFCUVFOMGFob2dBQ2dDQUJvZ0FDZ0NBQ0FBRUVKQkEzUnFHZ3NKQUNBQVFTUVFzUU1MbmdFQkJIOGdBQkRqQmlBQUVEUWFJQUZCQkdvaUF5SUNJQUlvQWdBZ0FDZ0NCQ0FBS0FJQUlnUnJJZ0pCWEcxQkpHeHFJZ1UyQWdBZ0FrRUFTZ1JBSUFVZ0JDQUNFRDhhQ3lBQUlBTVFSaUFBUVFScUlBRkJDR29RUmlBQUVEUWdBUkE5RUVZZ0FTQUJLQUlFTmdJQUlBQVFnd0VhSUFBb0FnQWFJQUFvQWdBZ0FCRDNBVUVrYkdvYUlBQW9BZ0FnQUJEM0FVRWtiR29hSUFBb0FnQWFDeGdBSUFBZ0FTQUNJQU5CSkVIWHlnRkJ4K1B4T0JDbkJBczRBUUY5SUFBZ0FrTUFBSUEvUVFFZ0JIU3lsU0lDbENBQ1F3QUFBRCtVUXdBQUFMK1NJZ1dTT0FJQUlBRWdBeUFDbENBRmtqZ0NBQXNJQUNBQUlBRVFUQXNYQVFGL0lBQVFnd0VoQVNBQUVPRUdJQUFnQVJEZ0Jnc0VBRUVCQ3pFQkFYOGdBQkRaQmlBQUtBSUFCRUFnQUNBQUtBSUFFTmdHSUFBUU5Cb2dBQ2dDQUNFQklBQVFsUUlhSUFFUU13c0xMQUVCZnlBQUVPTUdJQUFvQWdBRVFDQUFFT0VHSUFBUU5Cb2dBQ2dDQUNFQklBQVE5d0VhSUFFUU13c0xHQUVCZnlBQUVFTWhBaUFBSUFFUXp3WWdBQ0FDRUtVREMwSUJBbjhqQUVFZ2F5SUNKQUFnQUJEM0FTQUJTUVJBSUFBUU5DRURJQUFnQWtFSWFpQUJJQUFRZ3dFZ0F4Q1lCQ0lBRUpjRUlBQVFsZ1FMSUFKQklHb2tBQXZvQndFSGZ5QUJJQUFRcGdFaUFrc0VRQ01BUVNCcklnZ2tBQUpBSUFFZ0Ftc2lCU0FBRURRb0FnQWdBQ2dDQkd0QkJYVk5CRUFqQUVFUWF5SURKQUFnQXlBQU5nSUFJQU1nQUNnQ0JDSUJOZ0lFSUFNZ0FTQUZRUVYwYWpZQ0NDQURLQUlFSVFJZ0F5Z0NDQ0VCQTBBZ0FTQUNSZ1JBSUFNUWJpQURRUkJxSkFBRklBQVFOQm9nQWhEV0JpQURJQUpCSUdvaUFqWUNCQXdCQ3dzTUFRc2dBQkEwSVFjZ0NFRUlhaUVDQW44Z0FCQ21BU0FGYWlFREl3QkJFR3NpQmlRQUlBWWdBellDRENNQVFSQnJJZ1FrQUNBQUVEUWFJQVJCLy8vL1B6WUNEQ0FFUWYvLy8vOEhOZ0lJSUFSQkRHb2dCRUVJYWhEOEFTZ0NBQ0VCSUFSQkVHb2tBQ0FCSUFOUEJFQWdBQkNWQWlJRElBRkJBWFpKQkVBZ0JpQURRUUYwTmdJSUlBWkJDR29nQmtFTWFoQjVLQUlBSVFFTElBWkJFR29rQUNBQkRBRUxFSm9CQUFzaEJpQUFFS1lCSVFOQkFDRUJJd0JCRUdzaUJDUUFJQVJCQURZQ0RDQUNRUXhxSUFjUXV3RWdCZ1JBSUFJb0FoQWFJQVpCLy8vL1Awc0VRRUhYeWdFUXJRRUFDeUFHUVFWMEVFNGhBUXNnQWlBQk5nSUFJQUlnQVNBRFFRVjBhaUlETmdJSUlBSWdBellDQkNBQ0VEMGdBU0FHUVFWMGFqWUNBQ0FFUVJCcUpBQWpBRUVRYXlJREpBQWdBeUFDS0FJSU5nSUFJQUlvQWdnaEFTQURJQUpCQ0dvMkFnZ2dBeUFCSUFWQkJYUnFOZ0lFSUFNb0FnQWhCUU5BSUFNb0FnUWdCVWNFUUNBQ0tBSVFHaUFES0FJQUVOWUdJQU1nQXlnQ0FFRWdhaUlGTmdJQURBRUxDeUFERUtvQklBTkJFR29rQUNBQUVOa0dJQUFRTkJvZ0FDZ0NBQ0VESUFBb0FnUWhCU0FDUVFScUlRY0RRQ0FESUFWSEJFQWdCeWdDQUVFZ2F5SUVRZ0EzQWdBZ0JFSUFOd0lRSUFSQ0FEY0NDQ0FFUVJocUlnRVFzZ0lhSUFRZ0JVRWdheUlGS0FJQU5nSUFJQVFnQlNnQ0JEWUNCQ0FFSUFVb0FnZzJBZ2dnQkNBRktBSU1OZ0lNSUFRZ0JTZ0NFRFlDRUNBRUlBVW9BaFEyQWhRZ0FTQUZRUmhxRUtnR0lBY2dCeWdDQUVFZ2F6WUNBQXdCQ3dzZ0FDQUhFRVlnQUVFRWFpQUNRUWhxRUVZZ0FCQTBJQUlRUFJCR0lBSWdBaWdDQkRZQ0FDQUFFS1lCR2lBQUtBSUFHaUFBS0FJQUlBQVFsUUpCQlhScUdpQUFLQUlBSUFBUWxRSkJCWFJxR2lBQUtBSUFHaUFDS0FJRUlRRURRQ0FCSUFJb0FnaEhCRUFnQWlnQ0VCb2dBaUFDS0FJSVFTQnJJZ0EyQWdnZ0FCQ1NBd3dCQ3dzZ0FpZ0NBQVJBSUFJb0FoQWFJQUlvQWdBaEFDQUNFRDBvQWdBZ0FpZ0NBR3NhSUFBUU13c0xJQWhCSUdva0FBOExJQUVnQWtrRVFDQUFLQUlBSUFGQkJYUnFJUUVnQUJDbUFSb2dBQ0FCRU5nR0lBQW9BZ0FhSUFBb0FnQWdBQkNWQWtFRmRHb2FJQUFvQWdBYUlBQW9BZ0FnQUJDbUFVRUZkR29hQ3d1SkFRRUZmd05BSUFaQkEwY0VRQ0FBSUFaQkJIUWlCMm9oQkVFQUlRTURRQ0FEUVFSSEJFQWdBMEVDZENJRklBSWdCMnBxSUFRcUFnZ2dBU0FGYWlJRktnSWdsQ0FFS2dJQUlBVXFBZ0NVSUFRcUFnUWdCU29DRUpTU2tqZ0NBQ0FEUVFGcUlRTU1BUXNMSUFJZ0Iyb2lBeUFFS2dJTUlBTXFBZ3lTT0FJTUlBWkJBV29oQmd3QkN3c0xDUUFnQUVFQkVMRURDMUVCQVg4Z0FCQ3NCU0FBRURRZ0FDZ0NBQ0FBS0FJRUlBRkJCR29pQWhDWUFpQUFJQUlRUmlBQVFRUnFJQUZCQ0dvUVJpQUFFRFFnQVJBOUVFWWdBU0FCS0FJRU5nSUFJQUFnQUJDU0FSRG1CZ3RlQVFKL0l3QkJFR3NpQlNRQUlBVkJBRFlDRENBQVFReHFJQU1RdXdFZ0FRUkFJQUFvQWhBYUlBRVFUaUVFQ3lBQUlBUTJBZ0FnQUNBQ0lBUnFJZ0kyQWdnZ0FDQUNOZ0lFSUFBUVBTQUJJQVJxTmdJQUlBVkJFR29rQUNBQUN5UUFJQUFnQVRZQ0FDQUFJQUVvQWdRaUFUWUNCQ0FBSUFFZ0FpQURkR28yQWdnZ0FBdDFBUUovSXdCQkVHc2lDQ1FBSUFoQkFEWUNEQ0FBUVF4cUlBTVF1d0VnQVFSQUlBQW9BaEFhSUFFZ0Jrc0VRQ0FGRUswQkFBc2dBU0FFYkJCT0lRY0xJQUFnQnpZQ0FDQUFJQWNnQWlBRWJHb2lBallDQ0NBQUlBSTJBZ1FnQUJBOUlBY2dBU0FFYkdvMkFnQWdDRUVRYWlRQUlBQUxKQUFnQUNBQk5nSUFJQUFnQVNnQ0JDSUJOZ0lFSUFBZ0FTQUNJQU5zYWpZQ0NDQUFDMEVCQVg4akFFRVFheUlHSkFBZ0JpQUFFRDQyQWdBZ0JpQUJOZ0lNSUFZZ0JTZ0NBRFlDQkNBR0lBUW9BZ0EyQWdnZ0F5QUNJQVlRQ0JvZ0JrRVFhaVFBQzBzQkFuOGdBQ2dDQkNJSFFRaDFJUVlnQjBFQmNRUkFJQU1vQWdBZ0JoQ3RCQ0VHQ3lBQUtBSUFJZ0FnQVNBQ0lBTWdCbW9nQkVFQ0lBZEJBbkViSUFVZ0FDZ0NBQ2dDRkJFTEFBc2dBQUpBSUFBb0FnUWdBVWNOQUNBQUtBSWNRUUZHRFFBZ0FDQUNOZ0ljQ3d1YUFRQWdBRUVCT2dBMUFrQWdBQ2dDQkNBQ1J3MEFJQUJCQVRvQU5BSkFJQUFvQWhBaUFrVUVRQ0FBUVFFMkFpUWdBQ0FETmdJWUlBQWdBVFlDRUNBRFFRRkhEUUlnQUNnQ01FRUJSZzBCREFJTElBRWdBa1lFUUNBQUtBSVlJZ0pCQWtZRVFDQUFJQU0yQWhnZ0F5RUNDeUFBS0FJd1FRRkhEUUlnQWtFQlJnMEJEQUlMSUFBZ0FDZ0NKRUVCYWpZQ0pBc2dBRUVCT2dBMkN3c0tBQ0FBSUFGcUtBSUFDMTBCQVg4Z0FDZ0NFQ0lEUlFSQUlBQkJBVFlDSkNBQUlBSTJBaGdnQUNBQk5nSVFEd3NDUUNBQklBTkdCRUFnQUNnQ0dFRUNSdzBCSUFBZ0FqWUNHQThMSUFCQkFUb0FOaUFBUVFJMkFoZ2dBQ0FBS0FJa1FRRnFOZ0lrQ3d1K0FRRURmeU1BUVJCcklnTWtBQ0FESUFFMkFnd0NRQUpBQWtBQ1FDQUFFSVlCQkVBZ0FCRHFBU0VCSUFBb0FnUWlCQ0FCUVFGcklnSkdEUUVNQXd0QkFTRUVRUUVoQWlBQUxRQUxJZ0ZCQVVjTkFRc2dBQ0FDUVFFZ0FpQUNFUHNHSUFRaEFTQUFFSVlCRFFFTElBQWlBaUFCUVFGcUVJOEJEQUVMSUFBb0FnQWhBaUFBSUFSQkFXb1FpUUVnQkNFQkN5QUNJQUZCQW5ScUlnQWdBMEVNYWhDc0FTQURRUUEyQWdnZ0FFRUVhaUFEUVFocUVLd0JJQU5CRUdva0FBdTdBUUVEZnlNQVFSQnJJZ01rQUNBRElBRTZBQThDUUFKQUFrQUNRQ0FBRUlZQkJFQWdBQkRxQVNFQklBQW9BZ1FpQkNBQlFRRnJJZ0pHRFFFTUF3dEJDaUVFUVFvaEFpQUFMUUFMSWdGQkNrY05BUXNnQUNBQ1FRRWdBaUFDRUxFRUlBUWhBU0FBRUlZQkRRRUxJQUFpQWlBQlFRRnFFSThCREFFTElBQW9BZ0FoQWlBQUlBUkJBV29RaVFFZ0JDRUJDeUFCSUFKcUlnQWdBMEVQYWhDRkFTQURRUUE2QUE0Z0FFRUJhaUFEUVE1cUVJVUJJQU5CRUdva0FBdXRBUUVEZnlNQVFSQnJJZ1VrQUNBQ1FXOGdBV3ROQkVBZ0FCQStJUVlDZnlBQlFlZi8vLzhIU1FSQUlBVWdBVUVCZERZQ0NDQUZJQUVnQW1vMkFnd2dCVUVNYWlBRlFRaHFFSGtvQWdBUW5RSU1BUXRCYmd0QkFXb2lCeEJPSVFJZ0JBUkFJQUlnQmlBRUVMY0JDeUFESUFSSEJFQWdBaUFFYWlBRUlBWnFJQU1nQkdzUXR3RUxJQUZCQ2tjRVFDQUdFRE1MSUFBZ0FoQ1pBU0FBSUFjUXRBRWdCVUVRYWlRQUR3c1FWUUFMRndBZ0FDZ0NDQkJjUndSQUlBQW9BZ2dReGdRTElBQUxPZ0VCZnlNQVFSQnJJZ01rQUNBRElBSTJBZ3dnQTBFSWFpQURRUXhxRU1vQklRSWdBQ0FCRU5RRElRQWdBaERKQVNBRFFSQnFKQUFnQUFzTEFDQUVJQUkyQWdCQkF3dGFBUUovSXdCQkVHc2lBaVFBSUFJZ0FUWUNEQ0FCSUFBUWh3Y2lBMDBFUUNBQUVOd0JJZ0FnQTBFQmRra0VRQ0FDSUFCQkFYUTJBZ2dnQWtFSWFpQUNRUXhxRUhrb0FnQWhBd3NnQWtFUWFpUUFJQU1QQ3hDYUFRQUxFd0FnQUNBQktBSUFJZ0EyQWdBZ0FCQ1lBd3NOQUNBQUlBRWdBa0VVRUtnRUN4c0JBWDlCQVNFQklBQVFoZ0VFZnlBQUVPb0JRUUZyQlVFQkN3c3hBQ0FDS0FJQUlRSURRQUpBSUFBZ0FVY0VmeUFBS0FJQUlBSkhEUUVnQUFVZ0FRc1BDeUFBUVFScUlRQU1BQXNBQy9rREFRRi9Jd0JCRUdzaURDUUFJQXdnQURZQ0RBSkFBa0FnQUNBRlJnUkFJQUV0QUFCRkRRRkJBQ0VBSUFGQkFEb0FBQ0FFSUFRb0FnQWlBVUVCYWpZQ0FDQUJRUzQ2QUFBZ0J4QTNSUTBDSUFrb0FnQWlBU0FJYTBHZkFVb05BaUFLS0FJQUlRSWdDU0FCUVFScU5nSUFJQUVnQWpZQ0FBd0NDd0pBSUFBZ0JrY05BQ0FIRURkRkRRQWdBUzBBQUVVTkFVRUFJUUFnQ1NnQ0FDSUJJQWhyUVo4QlNnMENJQW9vQWdBaEFDQUpJQUZCQkdvMkFnQWdBU0FBTmdJQVFRQWhBQ0FLUVFBMkFnQU1BZ3RCZnlFQUlBc2dDMEdBQVdvZ0RFRU1haEM1QkNBTGF5SUZRZndBU2cwQklBVkJBblZCd0xnRGFpMEFBQ0VHQWtBQ1FDQUZRWHR4SWdCQjJBQkhCRUFnQUVIZ0FFY05BU0FESUFRb0FnQWlBVWNFUUVGL0lRQWdBVUVCYXkwQUFFSGZBSEVnQWkwQUFFSC9BSEZIRFFVTElBUWdBVUVCYWpZQ0FDQUJJQVk2QUFCQkFDRUFEQVFMSUFKQjBBQTZBQUFNQVFzZ0Fpd0FBQ0lBSUFaQjN3QnhSdzBBSUFJZ0FFR0FBWEk2QUFBZ0FTMEFBRVVOQUNBQlFRQTZBQUFnQnhBM1JRMEFJQWtvQWdBaUFDQUlhMEdmQVVvTkFDQUtLQUlBSVFFZ0NTQUFRUVJxTmdJQUlBQWdBVFlDQUFzZ0JDQUVLQUlBSWdCQkFXbzJBZ0FnQUNBR09nQUFRUUFoQUNBRlFkUUFTZzBCSUFvZ0NpZ0NBRUVCYWpZQ0FBd0JDMEYvSVFBTElBeEJFR29rQUNBQUMxVUJBbjhqQUVFUWF5SUdKQUFnQmtFSWFpSUZJQUVRVHlBRkVKVUJRY0M0QTBIZ3VBTWdBaERvQVNBRElBVVF2d0lpQVJDK0FUWUNBQ0FFSUFFUW5RRTJBZ0FnQUNBQkVKd0JJQVVRUnlBR1FSQnFKQUFMTVFBZ0FpMEFBQ0VDQTBBQ1FDQUFJQUZIQkg4Z0FDMEFBQ0FDUncwQklBQUZJQUVMRHdzZ0FFRUJhaUVBREFBTEFBdnRBd0VCZnlNQVFSQnJJZ3drQUNBTUlBQTZBQThDUUFKQUlBQWdCVVlFUUNBQkxRQUFSUTBCUVFBaEFDQUJRUUE2QUFBZ0JDQUVLQUlBSWdGQkFXbzJBZ0FnQVVFdU9nQUFJQWNRTjBVTkFpQUpLQUlBSWdFZ0NHdEJud0ZLRFFJZ0NpZ0NBQ0VDSUFrZ0FVRUVhallDQUNBQklBSTJBZ0FNQWdzQ1FDQUFJQVpIRFFBZ0J4QTNSUTBBSUFFdEFBQkZEUUZCQUNFQUlBa29BZ0FpQVNBSWEwR2ZBVW9OQWlBS0tBSUFJUUFnQ1NBQlFRUnFOZ0lBSUFFZ0FEWUNBRUVBSVFBZ0NrRUFOZ0lBREFJTFFYOGhBQ0FMSUF0QklHb2dERUVQYWhDOEJDQUxheUlGUVI5S0RRRWdCVUhBdUFOcUxRQUFJUVlDUUFKQUFrQUNRQ0FGUVg1eFFSWnJEZ01CQWdBQ0N5QURJQVFvQWdBaUFVY0VRQ0FCUVFGckxRQUFRZDhBY1NBQ0xRQUFRZjhBY1VjTkJRc2dCQ0FCUVFGcU5nSUFJQUVnQmpvQUFFRUFJUUFNQkFzZ0FrSFFBRG9BQUF3QkN5QUNMQUFBSWdBZ0JrSGZBSEZIRFFBZ0FpQUFRWUFCY2pvQUFDQUJMUUFBUlEwQUlBRkJBRG9BQUNBSEVEZEZEUUFnQ1NnQ0FDSUFJQWhyUVo4QlNnMEFJQW9vQWdBaEFTQUpJQUJCQkdvMkFnQWdBQ0FCTmdJQUN5QUVJQVFvQWdBaUFFRUJhallDQUNBQUlBWTZBQUJCQUNFQUlBVkJGVW9OQVNBS0lBb29BZ0JCQVdvMkFnQU1BUXRCZnlFQUN5QU1RUkJxSkFBZ0FBdFZBUUovSXdCQkVHc2lCaVFBSUFaQkNHb2lCU0FCRUU4Z0JSQ2JBVUhBdUFOQjRMZ0RJQUlRZ3dJZ0F5QUZFSndDSWdFUXZnRTZBQUFnQkNBQkVKMEJPZ0FBSUFBZ0FSQ2NBU0FGRUVjZ0JrRVFhaVFBQzZrWUFRUi9Jd0JCRUdzaUFpUUFBa0FnQWtFTWFpQUNRUWhxRUNNTkFFR0Vsd1FnQWlnQ0RFRUNkRUVFYWhBNUlnQTJBZ0FnQUVVTkFDQUNLQUlJRURraUFBUkFRWVNYQkNnQ0FDQUNLQUlNUVFKMGFrRUFOZ0lBUVlTWEJDZ0NBQ0FBRUNKRkRRRUxRWVNYQkVFQU5nSUFDeUFDUVJCcUpBQkJwYlVFTFFBQVJRUkFRY1NWQXlnQ0FDSURJUUVqQUVFUWF5SUFKQUJCeExJRUVPNEVJZ0pCL0xJRU5nSW9JQUlnQVRZQ0lDQUNRZENWQXpZQ0FDQUNRUUE2QURRZ0FrRi9OZ0l3SUFCQkNHb2lBU0FDRVBZQ0lBSWdBU0FDS0FJQUtBSUlFUUlBSUFFUVJ5QUFRUkJxSkFCQm9LMEVFSVFGSVFKQm1LMEVRYnlQQXpZQ0FDQUNRZENQQXpZQ0FFR2NyUVJCQURZQ0FDQUNRY1N5QkJEMEFpTUFRUkJySWdBa0FFR0Vzd1FRNkFRaUFrRzhzd1EyQWlnZ0FpQUROZ0lnSUFKQnRKWUROZ0lBSUFKQkFEb0FOQ0FDUVg4MkFqQWdBRUVJYWlJQklBSVE5Z0lnQWlBQklBSW9BZ0FvQWdnUkFnQWdBUkJISUFCQkVHb2tBRUg0clFRUTBnUWhBa0h3clFSQjdJOEROZ0lBSUFKQmdKQUROZ0lBUWZTdEJFRUFOZ0lBSUFKQmhMTUVFUFFDUWNTekJFRzA4UUlvQWdBaUFrSDBzd1FRMVFSQnlLNEVRY1N6QkJERkEwSDhzd1FnQWtHc3RBUVEwd1JCbks4RVFmeXpCQkRFQTBHMHRBUkJzUEVDS0FJQUlnSkI1TFFFRU5VRVFmQ3ZCRUcwdEFRUXhRTkJtTEVFUWZDdkJDZ0NBRUVNYXlnQ0FFSHdyd1JxS0FJWUVNVURRZXkwQkNBQ1FaeTFCQkRUQkVIRXNBUkI3TFFFRU1RRFFleXhCRUhFc0FRb0FnQkJER3NvQWdCQnhMQUVhaWdDR0JERUEwR1lyUVFvQWdCQkRHc29BZ0JCbUswRWFrSElyZ1FROFFKQjhLMEVLQUlBUVF4cktBSUFRZkN0QkdwQm5LOEVFUEVDUWZDdkJDZ0NBRUVNYXlnQ0FFSHdyd1JxRU5FRVFjU3dCQ2dDQUVFTWF5Z0NBRUhFc0FScUVORUVRZkN2QkNnQ0FFRU1heWdDQUVId3J3UnFRY2l1QkJEeEFrSEVzQVFvQWdCQkRHc29BZ0JCeExBRWFrR2Nyd1FROFFKQnBiVUVRUUU2QUFBTEl3QkJFR3NpQWlRQUl3QkJJR3NpQUNRQVFjaWpBa0c0cEFKQm9LVUNRUUJCc0tVQ1FUMUJzNlVDUVFCQnM2VUNRUUJCdytrQlFiV2xBa0UrRUJBakFFRVFheUlCSkFCQnlLTUNRUUZCdUtVQ1FiQ2xBa0hrQUVFL0VBOGdBVUVRYWlRQUlBQkJBRFlDSENBQVFjQUFOZ0lZSUFBZ0FDa0RHRGNERUNNQVFSQnJJZ0VrQUNBQklBQXBBaEEzQXdoQnlLTUNRWUQzQVVFRFFieWxBa0hRcGdKQjVRQWdBVUVJYWhEZUFVRUFFQVVnQVVFUWFpUUFJQUJCQURZQ0hDQUFRY0VBTmdJWUlBQWdBQ2tER0RjRENDTUFRUkJySWdFa0FDQUJJQUFwQWdnM0F3aEJ5S01DUWEvNUFVRUVRZUNtQWtId3BnSkI1Z0FnQVVFSWFoRGVBVUVBRUFVZ0FVRVFhaVFBSUFCQkFEWUNIQ0FBUWNJQU5nSVlJQUFnQUNrREdEY0RBQ01BUVJCcklnRWtBQ0FCSUFBcEFnQTNBd2hCeUtNQ1FmWDVBVUVDUWZpbUFrR0Fwd0pCNXdBZ0FVRUlhaERlQVVFQUVBVWdBVUVRYWlRQUl3QkJFR3NpQVNRQUlBRkJ3d0EyQWd4QnlLTUNRZTNyQVVFRFFZU25Ba0dzcHdKQjZBQWdBVUVNYWhEdkFVRUFFQVVnQVVFUWFpUUFJd0JCRUdzaUFTUUFJQUZCeEFBMkFneEJ5S01DUWVuckFVRUVRY0NuQWtIUXB3SkI2UUFnQVVFTWFoRHZBVUVBRUFVZ0FVRVFhaVFBSUFCQklHb2tBQ01BUVNCcklnQWtBRUhBcUFKQmdLa0NRYmlwQWtFQVFiQ2xBa0hGQUVHenBRSkJBRUd6cFFKQkFFRzc2UUZCdGFVQ1FjWUFFQkFqQUVFUWF5SUJKQUJCd0tnQ1FRRkJ5S2tDUWJDbEFrSHFBRUhIQUJBUElBRkJFR29rQUNBQVFRQTJBaHdnQUVISUFEWUNHQ0FBSUFBcEF4ZzNBeEFqQUVFUWF5SUJKQUFnQVNBQUtRSVFOd01JUWNDb0FrR0E5d0ZCQTBITXFRSkIwS1lDUWVzQUlBRkJDR29RM2dGQkFCQUZJQUZCRUdva0FDQUFRUUEyQWh3Z0FFSEpBRFlDR0NBQUlBQXBBeGczQXdnakFFRVFheUlCSkFBZ0FTQUFLUUlJTndNSVFjQ29Ba0d2K1FGQkJFSGdxUUpCOEtZQ1Fld0FJQUZCQ0dvUTNnRkJBQkFGSUFGQkVHb2tBQ0FBUVFBMkFod2dBRUhLQURZQ0dDQUFJQUFwQXhnM0F3QWpBRUVRYXlJQkpBQWdBU0FBS1FJQU53TUlRY0NvQWtIMStRRkJBa0h3cVFKQmdLY0NRZTBBSUFGQkNHb1EzZ0ZCQUJBRklBRkJFR29rQUNNQVFSQnJJZ0VrQUNBQlFjc0FOZ0lNUWNDb0FrSHQ2d0ZCQTBINHFRSkJyS2NDUWU0QUlBRkJER29RN3dGQkFCQUZJQUZCRUdva0FDTUFRUkJySWdFa0FDQUJRY3dBTmdJTVFjQ29Ba0hwNndGQkJFR1FxZ0pCMEtjQ1FlOEFJQUZCREdvUTd3RkJBQkFGSUFGQkVHb2tBQ0FBUVNCcUpBQWpBRUVnYXlJQUpBQkJvS3NDUWVpckFrR3NyQUpCQUVHd3BRSkJ6UUJCczZVQ1FRQkJzNlVDUVFCQnZ1OEJRYldsQWtIT0FCQVFJd0JCRUdzaUFTUUFRYUNyQWtFQlFieXNBa0d3cFFKQjhBQkJ6d0FRRHlBQlFSQnFKQUFnQUVFQU5nSWNJQUJCMEFBMkFoZ2dBQ0FBS1FNWU53TVFJd0JCRUdzaUFTUUFJQUVnQUNrQ0VEY0RDRUdncXdKQmdQY0JRUU5Cd0t3Q1FkQ21Ba0h4QUNBQlFRaHFFTjRCUVFBUUJTQUJRUkJxSkFBZ0FFRUFOZ0ljSUFCQjBRQTJBaGdnQUNBQUtRTVlOd01JSXdCQkVHc2lBU1FBSUFFZ0FDa0NDRGNEQ0VHZ3F3SkJyL2tCUVFSQjRLd0NRZkNtQWtIeUFDQUJRUWhxRU40QlFRQVFCU0FCUVJCcUpBQWdBRUVBTmdJY0lBQkIwZ0EyQWhnZ0FDQUFLUU1ZTndNQUl3QkJFR3NpQVNRQUlBRWdBQ2tDQURjRENFR2dxd0pCOWZrQlFRSkI4S3dDUVlDbkFrSHpBQ0FCUVFocUVONEJRUUFRQlNBQlFSQnFKQUFqQUVFUWF5SUJKQUFnQVVIVEFEWUNERUdncXdKQjdlc0JRUU5CK0t3Q1FheW5Ba0gwQUNBQlFReHFFTzhCUVFBUUJTQUJRUkJxSkFBakFFRVFheUlCSkFBZ0FVSFVBRFlDREVHZ3F3SkI2ZXNCUVFSQmtLMENRZENuQWtIMUFDQUJRUXhxRU84QlFRQVFCU0FCUVJCcUpBQWdBRUVnYWlRQUl3QkJFR3NpQUNRQVFmN3pBVUVFUWFDdEFrSFFwd0pCMVFCQkpSQUdJQUJCRUdva0FFRzM5QUZCSmhEZkFVSE9uQUpCSnhEZkFTTUFRUkJySWdBa0FFSEo3d0ZCQTBHNHJRSkJyS2NDUWRjQVFTZ1FCaUFBUVJCcUpBQWpBRUVRYXlJQUpBQkIwb3dDUVFKQnhLMENRWUNuQWtIWUFFRXBFQVlnQUVFUWFpUUFRZHJ5QVVFcUVOOEJRZlR5QVVFckVOOEJRZWZ5QVVFc0VOTUZJd0JCRUdzaUFDUUFRY2VNQWtFRFFkaXRBa0dzcHdKQjJnQkJMUkFHSUFCQkVHb2tBRUhZckFKQjBQSUJRZVN0QWtIYkFFRzFwUUpCM0FBUU1DQUNRUWhxSWdCQnBZQUNRUUFRa0FOQmwvZ0JRUVFRa0FOQjFlb0JRUWdRa0FOQmp2Y0JRUXdRa0FNYVFkaXNBaEF1UWY3K0FVRXVFTk1GUVl2L0FVRXZFTjhCUWVyOUFVRXdFTjhCSXdCQkVHc2lBU1FBUWRqMkFVRUNRZWl0QWtId3JRSkIzd0JCTVJBR0lBRkJFR29rQUNNQVFSQnJJZ0VrQUVIazlnRkJBVUgwclFKQnNLVUNRZUFBUVRJUUJpQUJRUkJxSkFCQnF2b0JRVE1RMGdWQndmb0JRVFFRMFFWQjJQb0JRVFVRMGdWQjd2b0JRVFlRMFFWQm1QOEJRVGNRNkFOQnFmOEJRVGdRM3dGQmlZQUNRVGtRNkFOQmxvQUNRVG9RM3dGQnV2OEJRVHNRNkFOQnkvOEJRVHdRM3dGQm1aVUNRYlR0QXhCaFFiYVZBa0c4N1FNUVlVRzJqZ0pCdU8wREVHRWdBa0VBTmdJSVFlYVRBaUFBRUdFZ0FrRUJOZ0lJUWZlVEFpQUFFR0VnQWtFQU5nSUlRYnVVQWlBQUVHRWdBa0hrQURZQ0NFSFVrUUlnQUJCaElBSkJBRFlDQ0VHSGxBSWdBQkJoSUFKQkFUWUNDRUdobEFJZ0FCQmhJQUpCQURZQ0NFSFJsQUlnQUJCaElBSkJCVFlDQ0VIR2pRSWdBQkJoSUFKQ2dJQ0FnSUNBZ1BBL053TUlRYitSQWtIMDZRTWdBQ3NEQUJBWElBSkJBRFlDQ0VIdmtRSWdBQkJoSUFKQkFUWUNDRUdhandJZ0FCQmhJQUpCQWpZQ0NFSENqd0lnQUJCaElBSkJBellDQ0VIZ2pnSWdBQkJoSUFKQkJEWUNDRUdzandJZ0FCQmhJQUpCQURZQ0NFSHprQUlnQUJCaElBSkJBVFlDQ0VHSGtBSWdBQkJoSUFKQkFqWUNDRUg1akFJZ0FCQmhJQUpCQXpZQ0NFR2Zrd0lnQUJCaElBSkJBRFlDQ0VIRmt3SWdBQkJoSUFKQkFUWUNDRUhVandJZ0FCQmhJQUpCQWpZQ0NFR0dsZ0lnQUJCaElBSkJBellDQ0VHYmpRSWdBQkJoSUFKQkJEWUNDRUhTbFFJZ0FCQmhJQUpCQlRZQ0NFSEFrQUlnQUJCaElBSkJCallDQ0VIc2xBSWdBQkJoSUFKQkJ6WUNDRUh6amdJZ0FCQmhJQUpCQ0RZQ0NFR1NrUUlnQUJCaElBSkJDVFlDQ0VIM2pRSWdBQkJoSUFKQkVHb2tBRUhjbFFRUWtnSWFRZkNWQkJDU0Fob1FvQVZCekpnRVFhaVhCRFlDQUVHRW1BUkJLallDQUF1YUFRRUVmeU1BUVJCcklnVWtBQ0FCSUFJUTBRTWlCRUh2Ly8vL0EwMEVRQUpBSUFSQkFVMEVRQ0FBSUFRUWp3RWdBQ0VEREFFTElBQWdBQ0FFRUxrQ1FRRnFJZ1lRaWdJaUF4Q1pBU0FBSUFZUXRBRWdBQ0FFRUlrQkN3TkFJQUVnQWtjRVFDQURJQUVRckFFZ0EwRUVhaUVESUFGQkJHb2hBUXdCQ3dzZ0JVRUFOZ0lNSUFNZ0JVRU1haENzQVNBRlFSQnFKQUFQQ3hCVkFBc1dBQ0FBSUFFZ0FrS0FnSUNBZ0lDQWdJQi9FTUlFQzVRRUFnZC9CSDRqQUVFUWF5SUlKQUFDUUFKQUFrQWdBa0VrVEFSQUlBQXRBQUFpQlEwQklBQWhCQXdDQzBId2xnUkJIRFlDQUVJQUlRTU1BZ3NnQUNFRUFrQURRQ0FGUVJoMFFSaDFFTzBCUlEwQklBUXRBQUVoQlNBRVFRRnFJUVFnQlEwQUN3d0JDd0pBSUFRdEFBQWlCVUVyYXc0REFBRUFBUXRCZjBFQUlBVkJMVVliSVFjZ0JFRUJhaUVFQ3dKL0FrQWdBa0Z2Y1EwQUlBUXRBQUJCTUVjTkFFRUJJUWtnQkMwQUFVSGZBWEZCMkFCR0JFQWdCRUVDYWlFRVFSQU1BZ3NnQkVFQmFpRUVJQUpCQ0NBQ0d3d0JDeUFDUVFvZ0Foc0xJZ3FzSVF4QkFDRUNBMEFDUUVGUUlRVUNRQ0FFTEFBQUlnWkJNR3RCL3dGeFFRcEpEUUJCcVg4aEJTQUdRZUVBYTBIL0FYRkJHa2tOQUVGSklRVWdCa0hCQUd0Qi93RnhRUmxMRFFFTElBVWdCbW9pQmlBS1RnMEFJQWdnREVJQUlBdENBQkNIQVVFQklRVUNRQ0FJS1FNSVFnQlNEUUFnQ3lBTWZpSU5JQWFzSWc1Q2Y0VldEUUFnRFNBT2ZDRUxRUUVoQ1NBQ0lRVUxJQVJCQVdvaEJDQUZJUUlNQVFzTElBRUVRQ0FCSUFRZ0FDQUpHellDQUFzQ1FBSkFJQUlFUUVId2xnUkJ4QUEyQWdBZ0IwRUFJQU5DQVlNaURGQWJJUWNnQXlFTERBRUxJQU1nQzFZTkFTQURRZ0dESVF3TElBeW5JQWR5UlFSQVFmQ1dCRUhFQURZQ0FDQURRZ0Y5SVFNTUFnc2dBeUFMV2cwQVFmQ1dCRUhFQURZQ0FBd0JDeUFMSUFlc0lnT0ZJQU45SVFNTElBaEJFR29rQUNBREN6RUJBWDlCekpnRUtBSUFJUUVnQUFSQVFjeVlCRUdvbHdRZ0FDQUFRWDlHR3pZQ0FBdEJmeUFCSUFGQnFKY0VSaHNMcndnQkJYOGdBU2dDQUNFRUFrQUNRQUpBQWtBQ1FBSkFBa0FDZndKQUFrQUNRQUpBSUFORkRRQWdBeWdDQUNJR1JRMEFJQUJGQkVBZ0FpRUREQU1MSUFOQkFEWUNBQ0FDSVFNTUFRc0NRRUhNbUFRb0FnQW9BZ0JGQkVBZ0FFVU5BU0FDUlEwTUlBSWhCZ05BSUFRc0FBQWlBd1JBSUFBZ0EwSC92d054TmdJQUlBQkJCR29oQUNBRVFRRnFJUVFnQmtFQmF5SUdEUUVNRGdzTElBQkJBRFlDQUNBQlFRQTJBZ0FnQWlBR2F3OExJQUloQXlBQVJRMEREQVVMSUFRUW9BRVBDMEVCSVFVTUF3dEJBQXdCQzBFQkN5RUZBMEFnQlVVRVFDQUVMUUFBUVFOMklnVkJFR3NnQmtFYWRTQUZhbkpCQjBzTkF3Si9JQVJCQVdvaUJTQUdRWUNBZ0JCeFJRMEFHaUFGTFFBQVFjQUJjVUdBQVVjRVFDQUVRUUZySVFRTUJ3c2dCRUVDYWlJRklBWkJnSUFnY1VVTkFCb2dCUzBBQUVIQUFYRkJnQUZIQkVBZ0JFRUJheUVFREFjTElBUkJBMm9MSVFRZ0EwRUJheUVEUVFFaEJRd0JDd05BQWtBZ0JFRURjU0FFTFFBQUlnWkJBV3RCL2dCTGNnMEFJQVFvQWdBaUJrR0Jnb1FJYXlBR2NrR0FnWUtFZUhFTkFBTkFJQU5CQkdzaEF5QUVLQUlFSVFZZ0JFRUVhaUVFSUFZZ0JrR0Jnb1FJYTNKQmdJR0NoSGh4UlEwQUN3c2dCa0gvQVhFaUJVRUJhMEgrQUUwRVFDQURRUUZySVFNZ0JFRUJhaUVFREFFTEN5QUZRY0lCYXlJRlFUSkxEUU1nQkVFQmFpRUVJQVZCQW5SQjRJa0RhaWdDQUNFR1FRQWhCUXdBQ3dBTEEwQWdCVVVFUUNBRFJRMEhBMEFDUUFKQUFrQWdCQzBBQUNJRlFRRnJJZ2RCL2dCTEJFQWdCU0VHREFFTElBUkJBM0VnQTBFRlNYSU5BUUpBQTBBZ0JDZ0NBQ0lHUVlHQ2hBaHJJQVp5UVlDQmdvUjRjUTBCSUFBZ0JrSC9BWEUyQWdBZ0FDQUVMUUFCTmdJRUlBQWdCQzBBQWpZQ0NDQUFJQVF0QUFNMkFnd2dBRUVRYWlFQUlBUkJCR29oQkNBRFFRUnJJZ05CQkVzTkFBc2dCQzBBQUNFR0N5QUdRZjhCY1NJRlFRRnJJUWNMSUFkQi9nQkxEUUVMSUFBZ0JUWUNBQ0FBUVFScUlRQWdCRUVCYWlFRUlBTkJBV3NpQXcwQkRBa0xDeUFGUWNJQmF5SUZRVEpMRFFNZ0JFRUJhaUVFSUFWQkFuUkI0SWtEYWlnQ0FDRUdRUUVoQlF3QkN5QUVMUUFBSWdWQkEzWWlCMEVRYXlBSElBWkJHblZxY2tFSFN3MEJBa0FDUUFKL0lBUkJBV29pQnlBRlFZQUJheUFHUVFaMGNpSUZRUUJPRFFBYUlBY3RBQUJCZ0FGcklnZEJQMHNOQVNBRVFRSnFJZ2dnQnlBRlFRWjBjaUlGUVFCT0RRQWFJQWd0QUFCQmdBRnJJZ2RCUDBzTkFTQUhJQVZCQm5SeUlRVWdCRUVEYWdzaEJDQUFJQVUyQWdBZ0EwRUJheUVESUFCQkJHb2hBQXdCQzBId2xnUkJHVFlDQUNBRVFRRnJJUVFNQlF0QkFDRUZEQUFMQUFzZ0JFRUJheUVFSUFZTkFTQUVMUUFBSVFZTElBWkIvd0Z4RFFBZ0FBUkFJQUJCQURZQ0FDQUJRUUEyQWdBTElBSWdBMnNQQzBId2xnUkJHVFlDQUNBQVJRMEJDeUFCSUFRMkFnQUxRWDhQQ3lBQklBUTJBZ0FnQWdzakFRSi9JQUFoQVFOQUlBRWlBa0VFYWlFQklBSW9BZ0FOQUFzZ0FpQUFhMEVDZFFzT0FDQUFFTWdFQkVBZ0FCQXpDd3NYQUNBQUVNUUJRUUJISUFCQklISkI0UUJyUVFaSmNnc25BQ0FBUVFCSElBQkJtSmtEUjNFZ0FFR3dtUU5IY1NBQVFiQzFCRWR4SUFCQnlMVUVSM0VMNmdJQkEzOENRQ0FCTFFBQURRQkJ1WkFDRUlVRElnRUVRQ0FCTFFBQURRRUxJQUJCREd4QjBKa0RhaENGQXlJQkJFQWdBUzBBQUEwQkMwR0NrZ0lRaFFNaUFRUkFJQUV0QUFBTkFRdEJrSndDSVFFTEFrQURRQ0FCSUFKcUxRQUFJZ1JGSUFSQkwwWnlSUVJBUVJjaEJDQUNRUUZxSWdKQkYwY05BUXdDQ3dzZ0FpRUVDMEdRbkFJaEF3SkFBa0FDUUFKQUFrQWdBUzBBQUNJQ1FTNUdEUUFnQVNBRWFpMEFBQTBBSUFFaEF5QUNRY01BUncwQkN5QURMUUFCUlEwQkN5QURRWkNjQWhDakFrVU5BQ0FEUWZPTUFoQ2pBZzBCQ3lBQVJRUkFRZlNZQXlFQ0lBTXRBQUZCTGtZTkFndEJBQThMUWF5MUJDZ0NBQ0lDQkVBRFFDQURJQUpCQ0dvUW93SkZEUUlnQWlnQ0lDSUNEUUFMQzBFa0VEa2lBZ1JBSUFKQjlKZ0RLUUlBTndJQUlBSkJDR29pQVNBRElBUVFQeG9nQVNBRWFrRUFPZ0FBSUFKQnJMVUVLQUlBTmdJZ1FheTFCQ0FDTmdJQUN5QUNRZlNZQXlBQUlBSnlHeUVDQ3lBQ0M0VUJBUVYvSXdCQkVHc2lBU1FBSUFGQkVHb2hCQUpBQTBBZ0FDZ0NKQ0lDSUFBb0FpZ2dBVUVJYWlJRElBUWdBVUVFYWlBQ0tBSUFLQUlVRVFvQUlRVkJmeUVDSUFOQkFTQUJLQUlFSUFOcklnTWdBQ2dDSUJET0FTQURSdzBCQWtBZ0JVRUJhdzRDQVFJQUN3dEJmMEVBSUFBb0FpQVF5UUliSVFJTElBRkJFR29rQUNBQ0N6SUFBa0JCZnlBQUtBSk1FTDhCUlFSQUlBQW9Ba3doQUF3QkN5QUFJQUJCSUJDNUJ5SUFOZ0pNQ3lBQVFSaDBRUmgxQy80Q0FnVi9BWDRqQUVFZ2F5SUNKQUFDUUNBQUxRQTBCRUFnQUNnQ01DRURJQUZGRFFFZ0FFRUFPZ0EwSUFCQmZ6WUNNQXdCQ3lBQ1FRRTJBaGdnQWtFWWFpQUFRU3hxRU00RUtBSUFJZ1JCQUNBRVFRQktHeUVGQWtBRFFDQURJQVZIQkVBZ0FDZ0NJQkR5QWlJR1FYOUdEUUlnQWtFWWFpQURhaUFHT2dBQUlBTkJBV29oQXd3QkN3c0NRQ0FBTFFBMUJFQWdBaUFDTEFBWU5nSVVEQUVMSUFKQkdHb2hBd05BQWtBZ0FDZ0NLQ0lGS1FJQUlRY0NRQ0FBS0FJa0lBVWdBa0VZYWlJRklBUWdCV29pQlNBQ1FSQnFJQUpCRkdvZ0F5QUNRUXhxRU5nRVFRRnJEZ01BQkFFREN5QUFLQUlvSUFjM0FnQWdCRUVJUmcwRElBQW9BaUFROGdJaUJrRi9SZzBESUFVZ0Jqb0FBQ0FFUVFGcUlRUU1BUXNMSUFJZ0Fpd0FHRFlDRkFzQ1FDQUJSUVJBQTBBZ0JFRUFUQTBDSUFSQkFXc2lCQ0FDUVJocWFpd0FBQ0FBS0FJZ0VQTUNRWDlIRFFBTUF3c0FDeUFBSUFJb0FoUTJBakFMSUFJb0FoUWhBd3dCQzBGL0lRTUxJQUpCSUdva0FDQURDd2tBSUFBUXpRTVFNd3NrQVFKL0l3QkJFR3NpQWlRQUlBQWdBUkRsQkNFRElBSkJFR29rQUNBQklBQWdBeHNMaHdNQ0JYOEJmaU1BUVNCcklnSWtBQUpBSUFBdEFEUUVRQ0FBS0FJd0lRTWdBVVVOQVNBQVFRQTZBRFFnQUVGL05nSXdEQUVMSUFKQkFUWUNHQ0FDUVJocUlBQkJMR29RemdRb0FnQWlCRUVBSUFSQkFFb2JJUVVDUUFOQUlBTWdCVWNFUUNBQUtBSWdFUElDSWdaQmYwWU5BaUFDUVJocUlBTnFJQVk2QUFBZ0EwRUJhaUVEREFFTEN3SkFJQUF0QURVRVFDQUNJQUl0QUJnNkFCY01BUXNnQWtFWWFpRURBMEFDUUNBQUtBSW9JZ1VwQWdBaEJ3SkFJQUFvQWlRZ0JTQUNRUmhxSWdVZ0JDQUZhaUlGSUFKQkVHb2dBa0VYYWlBRElBSkJER29RMkFSQkFXc09Bd0FFQVFNTElBQW9BaWdnQnpjQ0FDQUVRUWhHRFFNZ0FDZ0NJQkR5QWlJR1FYOUdEUU1nQlNBR09nQUFJQVJCQVdvaEJBd0JDd3NnQWlBQ0xRQVlPZ0FYQ3dKQUlBRkZCRUFEUUNBRVFRQk1EUUlnQkVFQmF5SUVJQUpCR0dwcUxBQUFFTUlCSUFBb0FpQVE4d0pCZjBjTkFBd0RDd0FMSUFBZ0Fpd0FGeERDQVRZQ01Bc2dBaXdBRnhEQ0FTRUREQUVMUVg4aEF3c2dBa0VnYWlRQUlBTUxDUUFnQUJEUEF4QXpDeEVBSUFBZ0FDZ0NCRUdBd0FCeU5nSUVDeElBSUFBUTNRUWlBRUhBa1FNMkFnQWdBQXRZQVFKL0l3QkJFR3NpQXlRQUlBQVE2QVFpQUNBQk5nSWdJQUJCZ0pnRE5nSUFJQU5CQ0dvaUFTQUFFUFlDSUFFUXd3TWhCQ0FCRUVjZ0FDQUNOZ0lvSUFBZ0JEWUNKQ0FBSUFRUW5nSTZBQ3dnQTBFUWFpUUFDeTBCQVg4Z0FDRUJRUUFoQUFOQUlBQkJBMGNFUUNBQklBQkJBblJxUVFBMkFnQWdBRUVCYWlFQURBRUxDd3RZQVFKL0l3QkJFR3NpQXlRQUlBQVE3Z1FpQUNBQk5nSWdJQUJCbUpjRE5nSUFJQU5CQ0dvaUFTQUFFUFlDSUFFUXhnTWhCQ0FCRUVjZ0FDQUNOZ0lvSUFBZ0JEWUNKQ0FBSUFRUW5nSTZBQ3dnQTBFUWFpUUFDeXdCQVg4Z0FDZ0NBQ0lCQkVBZ0FSRGdCRUYvRUw4QlJRUkFJQUFvQWdCRkR3c2dBRUVBTmdJQUMwRUJDeXdCQVg4Z0FDZ0NBQ0lCQkVBZ0FSRGpCRUYvRUw4QlJRUkFJQUFvQWdCRkR3c2dBRUVBTmdJQUMwRUJDeDBBSUFBZ0FTQUNJQU1nQkNBRklBWWdCeUFBS0FJQUtBSVFFUTBBQ3c0QVFRQWdBQ0FBUVg4UXZ3RWJDNU1CQVFSL0l3QkJFR3NpQlNRQUlBRWdBaENFQkNJRVFXOU5CRUFDUUNBRVFRcE5CRUFnQUNBRUVJOEJJQUFoQXd3QkN5QUFJQVFRblFKQkFXb2lCaEJPSWdNUW1RRWdBQ0FHRUxRQklBQWdCQkNKQVFzRFFDQUJJQUpIQkVBZ0F5QUJFSVVCSUFOQkFXb2hBeUFCUVFGcUlRRU1BUXNMSUFWQkFEb0FEeUFESUFWQkQyb1FoUUVnQlVFUWFpUUFEd3NRVlFBTFZ3RUNmd0pBSUFBb0FnQWlBa1VOQUFKL0lBSW9BaGdpQXlBQ0tBSWNSZ1JBSUFJZ0FTQUNLQUlBS0FJMEVRTUFEQUVMSUFJZ0EwRUVhallDR0NBRElBRTJBZ0FnQVF0QmZ4Qy9BVVVOQUNBQVFRQTJBZ0FMQ3hNQUlBQWdBQ2dDQUVFTWF5Z0NBR29ReUFNTERRQWdBRUdnbFFNMkFnQWdBQXNUQUNBQUlBQW9BZ0JCREdzb0FnQnFFUGdDQ3pFQkFYOGdBQ2dDRENJQklBQW9BaEJHQkVBZ0FDQUFLQUlBS0FJb0VRQUFEd3NnQUNBQlFRUnFOZ0lNSUFFb0FnQUxKd0VCZnlBQUtBSU1JZ0VnQUNnQ0VFWUVRQ0FBSUFBb0FnQW9BaVFSQUFBUEN5QUJLQUlBQ3hBQUlBQVExZ1FnQVJEV0JITkJBWE1MTkFFQmZ5QUFLQUlNSWdFZ0FDZ0NFRVlFUUNBQUlBQW9BZ0FvQWlnUkFBQVBDeUFBSUFGQkFXbzJBZ3dnQVN3QUFCRENBUXNxQVFGL0lBQW9BZ3dpQVNBQUtBSVFSZ1JBSUFBZ0FDZ0NBQ2dDSkJFQUFBOExJQUVzQUFBUXdnRUxFQUFnQUJEWEJDQUJFTmNFYzBFQmN3c05BQ0FBS0FJQUlBRW9BZ0JJQ3hNQUlBQWdBQ2dDQUVFTWF5Z0NBR29RekFNTEV3QWdBQ0FBS0FJQVFReHJLQUlBYWhENkFnc0xBQ0FBUWZpT0F4RHlCZ3NFQUVGL0N3Y0FJQUFRNndRTEVBQWdBRUovTndNSUlBQkNBRGNEQUFzSEFDQUFFT3NFQ3dRQUlBQUxDd0FnQUVHNGpnTVE4Z1lMQndBZ0FCREVBZ3NLQUNBQklBQnJRUUoxQzMwQkEzOGpBRUVRYXlJRkpBQWpBRUVRYXlJREpBQWdBQ0FCRU5FRElRRURRQ0FCQkVBZ0F5QUFOZ0lNSUFNZ0F5Z0NEQ0FCUVFGMklnUkJBblJxTmdJTUlBRWdCRUYvYzJvZ0JDQURLQUlNSUFJUStnRWlCQnNoQVNBREtBSU1RUVJxSUFBZ0JCc2hBQXdCQ3dzZ0EwRVFhaVFBSUFWQkVHb2tBQ0FBQzdZREFnTi9BWDRqQUVFZ2F5SURKQUFDUUNBQlF2Ly8vLy8vLy8vLy93Q0RJZ1ZDZ0lDQWdJQ0F3TUEvZlNBRlFvQ0FnSUNBZ01DL3dBQjlWQVJBSUFGQ0dZaW5JUVFnQUZBZ0FVTC8vLzhQZ3lJRlFvQ0FnQWhVSUFWQ2dJQ0FDRkViUlFSQUlBUkJnWUNBZ0FScUlRSU1BZ3NnQkVHQWdJQ0FCR29oQWlBQUlBVkNnSUNBQ0lXRVFnQlNEUUVnQWlBRVFRRnhhaUVDREFFTElBQlFJQVZDZ0lDQWdJQ0F3UC8vQUZRZ0JVS0FnSUNBZ0lEQS8vOEFVUnRGQkVBZ0FVSVppS2RCLy8vL0FYRkJnSUNBL2dkeUlRSU1BUXRCZ0lDQS9BY2hBaUFGUXYvLy8vLy8vNysvd0FCV0RRQkJBQ0VDSUFWQ01JaW5JZ1JCa2Y0QVNRMEFJQU5CRUdvZ0FDQUJRdi8vLy8vLy96K0RRb0NBZ0lDQWdNQUFoQ0lGSUFSQmdmNEFheENMQVNBRElBQWdCVUdCL3dBZ0JHc1FoUUlnQXlrRENDSUFRaG1JcHlFQ0lBTXBBd0FnQXlrREVDQURLUU1ZaEVJQVVxMkVJZ1ZRSUFCQy8vLy9ENE1pQUVLQWdJQUlWQ0FBUW9DQWdBaFJHMFVFUUNBQ1FRRnFJUUlNQVFzZ0JTQUFRb0NBZ0FpRmhFSUFVZzBBSUFKQkFYRWdBbW9oQWdzZ0EwRWdhaVFBSUFJZ0FVSWdpS2RCZ0lDQWdIaHhjcjRMQ3dBZ0FDQUJFUFVFRUNBTGlnRUJBMzlCaUtVRVFZaWxCQ2dDQUVFQmFpSUZOZ0lBSUFBZ0JUWUNBQ0FEQkVBRFFDQUNJQVJCQTNScUlnWW9BZ0JGQkVBZ0JpQUZOZ0lBSUFJZ0JFRURkR29pQUNBQk5nSUVJQUJCQURZQ0NDQURFQUlnQWc4TElBUkJBV29pQkNBRFJ3MEFDd3NnQUNBQklBSWdBMEVFZEVFSWNoREhBaUFEUVFGMElnQVE5QVFoQVNBQUVBSWdBUXNmQUVHQXBRUW9BZ0JGQkVCQmhLVUVJQUUyQWdCQmdLVUVJQUEyQWdBTEM3WVBBZ1YvRG40akFFSFFBbXNpQlNRQUlBUkMvLy8vLy8vL1A0TWhDaUFDUXYvLy8vLy8veitESVF3Z0FpQUVoVUtBZ0lDQWdJQ0FnSUIvZ3lFTklBUkNNSWluUWYvL0FYRWhDQUpBQWtBZ0FrSXdpS2RCLy84QmNTSUpRZi8vQVd0QmdvQitUd1JBSUFoQi8vOEJhMEdCZ0g1TERRRUxJQUZRSUFKQy8vLy8vLy8vLy8vL0FJTWlEMEtBZ0lDQWdJREEvLzhBVkNBUFFvQ0FnSUNBZ01ELy93QlJHMFVFUUNBQ1FvQ0FnSUNBZ0NDRUlRME1BZ3NnQTFBZ0JFTC8vLy8vLy8vLy8vOEFneUlDUW9DQWdJQ0FnTUQvL3dCVUlBSkNnSUNBZ0lDQXdQLy9BRkViUlFSQUlBUkNnSUNBZ0lDQUlJUWhEU0FESVFFTUFnc2dBU0FQUW9DQWdJQ0FnTUQvL3dDRmhGQUVRQ0FESUFKQ2dJQ0FnSUNBd1AvL0FJV0VVQVJBUWdBaEFVS0FnSUNBZ0lEZy8vOEFJUTBNQXdzZ0RVS0FnSUNBZ0lEQS8vOEFoQ0VOUWdBaEFRd0NDeUFESUFKQ2dJQ0FnSUNBd1AvL0FJV0VVQVJBUWdBaEFRd0NDeUFCSUErRVVBUkFRb0NBZ0lDQWdPRC8vd0FnRFNBQ0lBT0VVQnNoRFVJQUlRRU1BZ3NnQWlBRGhGQUVRQ0FOUW9DQWdJQ0FnTUQvL3dDRUlRMUNBQ0VCREFJTElBOUMvLy8vLy8vL1AxZ0VRQ0FGUWNBQ2FpQUJJQXdnQVNBTUlBeFFJZ1liZVNBR1FRWjByWHluSWdaQkQyc1Fpd0ZCRUNBR2F5RUdJQVVwQThnQ0lRd2dCU2tEd0FJaEFRc2dBa0wvLy8vLy8vOC9WZzBBSUFWQnNBSnFJQU1nQ2lBRElBb2dDbEFpQnh0NUlBZEJCblN0ZktjaUIwRVBheENMQVNBR0lBZHFRUkJySVFZZ0JTa0R1QUloQ2lBRktRT3dBaUVEQ3lBRlFhQUNhaUFLUW9DQWdJQ0FnTUFBaENJU1FnK0dJQU5DTVlpRUlnSkNBRUtBZ0lDQXNPYThndlVBSUFKOUlnUkNBQkNIQVNBRlFaQUNha0lBSUFVcEE2Z0NmVUlBSUFSQ0FCQ0hBU0FGUVlBQ2FpQUZLUU9ZQWtJQmhpQUZLUU9RQWtJL2lJUWlCRUlBSUFKQ0FCQ0hBU0FGUWZBQmFpQUVRZ0JDQUNBRktRT0lBbjFDQUJDSEFTQUZRZUFCYWlBRktRUDRBVUlCaGlBRktRUHdBVUkvaUlRaUJFSUFJQUpDQUJDSEFTQUZRZEFCYWlBRVFnQkNBQ0FGS1FQb0FYMUNBQkNIQVNBRlFjQUJhaUFGS1FQWUFVSUJoaUFGS1FQUUFVSS9pSVFpQkVJQUlBSkNBQkNIQVNBRlFiQUJhaUFFUWdCQ0FDQUZLUVBJQVgxQ0FCQ0hBU0FGUWFBQmFpQUNRZ0FnQlNrRHVBRkNBWVlnQlNrRHNBRkNQNGlFUWdGOUlnSkNBQkNIQVNBRlFaQUJhaUFEUWcrR1FnQWdBa0lBRUljQklBVkI4QUJxSUFKQ0FFSUFJQVVwQTZnQklBVXBBNkFCSWc4Z0JTa0RtQUY4SWdRZ0QxU3RmQ0FFUWdGV3JYeDlRZ0FRaHdFZ0JVR0FBV3BDQVNBRWZVSUFJQUpDQUJDSEFTQUdJQWtnQ0d0cUlRWUNmeUFGS1FOd0loQkNBWVlpRkNBRktRT0lBU0lPUWdHR0lBVXBBNEFCUWorSWhId2lDMExuN0FCOUloVkNJSWdpQWlBTVFvQ0FnSUNBZ01BQWhDSVdRZ0dHSUFGQ1A0aUVJZ3hDSUlnaUJINGlFU0FCUWdHR0lnOUNJSWdpQ2lBTElCVldyU0FMSUJSVXJTQUZLUU40UWdHR0lCQkNQNGlFSUE1Q1A0aDhmSHhDQVgwaUVFSWdpQ0lMZm53aURpQVJWSzBnRGlBT0lCQkMvLy8vL3crREloQWdERUwvLy8vL0Q0TWlGSDU4SWc1V3JYd2dCQ0FMZm53Z0JDQVFmaUlUSUFzZ0ZINThJaEVnRTFTdFFpQ0dJQkZDSUlpRWZDQU9JQTRnRVVJZ2hud2lEbGF0ZkNBT0lBNGdGVUwvLy8vL0Q0TWlGU0FVZmlJVElBSWdDbjU4SWhFZ0UxU3RJQkVnRVNBUUlBOUMvdi8vL3crREloTitmQ0lSVnExOGZDSU9WcTE4SUE0Z0JDQVZmaUlYSUFzZ0UzNThJZ1FnQWlBVWZud2lDeUFLSUJCK2ZDSVFRaUNJSUFzZ0VGYXRJQVFnRjFTdElBUWdDMWF0Zkh4Q0lJYUVmQ0lFSUE1VXJYd2dCQ0FSSUFJZ0UzNGlBaUFLSUJWK2ZDSUtRaUNJSUFJZ0NsYXRRaUNHaEh3aUFpQVJWSzBnQWlBUVFpQ0dmQ0FDVksxOGZDSUNJQVJVclh3aUJFTC8vLy8vLy8vL0FGZ0VRQ0FGUWRBQWFpQUNJQVFnQXlBU0VJY0JJQUZDTVlZZ0JTa0RXSDBnQlNrRFVDSUJRZ0JTclgwaEMwSUFJQUY5SVFvZ0JrSCsvd0JxREFFTElBVkI0QUJxSUFSQ1A0WWdBa0lCaUlRaUFpQUVRZ0dJSWdRZ0F5QVNFSWNCSUFGQ01JWWdCU2tEYUgwZ0JTa0RZQ0lNUWdCU3JYMGhDMElBSUF4OUlRb2dBU0VQSUJZaERDQUdRZi8vQUdvTElnWkIvLzhCVGdSQUlBMUNnSUNBZ0lDQXdQLy9BSVFoRFVJQUlRRU1BUXNDZmlBR1FRQktCRUFnQzBJQmhpQUtRaitJaENFTElBUkMvLy8vLy8vL1A0TWdCcTFDTUlhRUlRd2dDa0lCaGd3QkN5QUdRWTkvVEFSQVFnQWhBUXdDQ3lBRlFVQnJJQUlnQkVFQklBWnJFSVVDSUFWQk1Hb2dEeUFNSUFaQjhBQnFFSXNCSUFWQklHb2dBeUFTSUFVcEEwQWlBaUFGS1FOSUlnd1Fod0VnQlNrRE9DQUZLUU1vUWdHR0lBVXBBeUFpQVVJL2lJUjlJQVVwQXpBaUJDQUJRZ0dHSWdGVXJYMGhDeUFFSUFGOUN5RUVJQVZCRUdvZ0F5QVNRZ05DQUJDSEFTQUZJQU1nRWtJRlFnQVFod0VnRENBQ0lBSWdBeUFDUWdHRElnRWdCSHdpQTFRZ0N5QUJJQU5Xclh3aUFTQVNWaUFCSUJKUkc2MThJZ0pXclh3aUJDQUNJQUlnQkVLQWdJQ0FnSURBLy84QVZDQURJQVVwQXhCV0lBRWdCU2tER0NJRVZpQUJJQVJSRzNHdGZDSUNWcTE4SWdRZ0FpQUVRb0NBZ0lDQWdNRC8vd0JVSUFNZ0JTa0RBRllnQVNBRktRTUlJZ05XSUFFZ0ExRWJjYTE4SWdFZ0FsU3RmQ0FOaENFTkN5QUFJQUUzQXdBZ0FDQU5Od01JSUFWQjBBSnFKQUFMeEFFQ0FYOENma0YvSVFNQ1FDQUFRZ0JTSUFGQy8vLy8vLy8vLy8vL0FJTWlCRUtBZ0lDQWdJREEvLzhBVmlBRVFvQ0FnSUNBZ01ELy93QlJHdzBBUVFBZ0FrTC8vLy8vLy8vLy8vOEFneUlGUW9DQWdJQ0FnTUQvL3dCV0lBVkNnSUNBZ0lDQXdQLy9BRkViRFFBZ0FDQUVJQVdFaEZBRVFFRUFEd3NnQVNBQ2cwSUFXUVJBUVFBZ0FTQUNVeUFCSUFKUkd3MEJJQUFnQVNBQ2hZUkNBRklQQ3lBQVFnQlNJQUVnQWxVZ0FTQUNVUnNOQUNBQUlBRWdBb1dFUWdCU0lRTUxJQU1MaXd3QkJuOGdBQ0FCYWlFRkFrQUNRQ0FBS0FJRUlnSkJBWEVOQUNBQ1FRTnhSUTBCSUFBb0FnQWlBaUFCYWlFQkFrQWdBQ0FDYXlJQVFhU2hCQ2dDQUVjRVFDQUNRZjhCVFFSQUlBQW9BZ2dpQkNBQ1FRTjJJZ0pCQTNSQnVLRUVha1lhSUFBb0Fnd2lBeUFFUncwQ1FaQ2hCRUdRb1FRb0FnQkJmaUFDZDNFMkFnQU1Bd3NnQUNnQ0dDRUdBa0FnQUNBQUtBSU1JZ05IQkVBZ0FDZ0NDQ0lDUWFDaEJDZ0NBRWthSUFJZ0F6WUNEQ0FESUFJMkFnZ01BUXNDUUNBQVFSUnFJZ0lvQWdBaUJBMEFJQUJCRUdvaUFpZ0NBQ0lFRFFCQkFDRUREQUVMQTBBZ0FpRUhJQVFpQTBFVWFpSUNLQUlBSWdRTkFDQURRUkJxSVFJZ0F5Z0NFQ0lFRFFBTElBZEJBRFlDQUFzZ0JrVU5BZ0pBSUFBb0Fod2lCRUVDZEVIQW93UnFJZ0lvQWdBZ0FFWUVRQ0FDSUFNMkFnQWdBdzBCUVpTaEJFR1VvUVFvQWdCQmZpQUVkM0UyQWdBTUJBc2dCa0VRUVJRZ0JpZ0NFQ0FBUmh0cUlBTTJBZ0FnQTBVTkF3c2dBeUFHTmdJWUlBQW9BaEFpQWdSQUlBTWdBallDRUNBQ0lBTTJBaGdMSUFBb0FoUWlBa1VOQWlBRElBSTJBaFFnQWlBRE5nSVlEQUlMSUFVb0FnUWlBa0VEY1VFRFJ3MEJRWmloQkNBQk5nSUFJQVVnQWtGK2NUWUNCQ0FBSUFGQkFYSTJBZ1FnQlNBQk5nSUFEd3NnQkNBRE5nSU1JQU1nQkRZQ0NBc0NRQ0FGS0FJRUlnSkJBbkZGQkVCQnFLRUVLQUlBSUFWR0JFQkJxS0VFSUFBMkFnQkJuS0VFUVp5aEJDZ0NBQ0FCYWlJQk5nSUFJQUFnQVVFQmNqWUNCQ0FBUWFTaEJDZ0NBRWNOQTBHWW9RUkJBRFlDQUVHa29RUkJBRFlDQUE4TFFhU2hCQ2dDQUNBRlJnUkFRYVNoQkNBQU5nSUFRWmloQkVHWW9RUW9BZ0FnQVdvaUFUWUNBQ0FBSUFGQkFYSTJBZ1FnQUNBQmFpQUJOZ0lBRHdzZ0FrRjRjU0FCYWlFQkFrQWdBa0gvQVUwRVFDQUZLQUlJSWdRZ0FrRURkaUlDUVFOMFFiaWhCR3BHR2lBRUlBVW9BZ3dpQTBZRVFFR1FvUVJCa0tFRUtBSUFRWDRnQW5keE5nSUFEQUlMSUFRZ0F6WUNEQ0FESUFRMkFnZ01BUXNnQlNnQ0dDRUdBa0FnQlNBRktBSU1JZ05IQkVBZ0JTZ0NDQ0lDUWFDaEJDZ0NBRWthSUFJZ0F6WUNEQ0FESUFJMkFnZ01BUXNDUUNBRlFSUnFJZ1FvQWdBaUFnMEFJQVZCRUdvaUJDZ0NBQ0lDRFFCQkFDRUREQUVMQTBBZ0JDRUhJQUlpQTBFVWFpSUVLQUlBSWdJTkFDQURRUkJxSVFRZ0F5Z0NFQ0lDRFFBTElBZEJBRFlDQUFzZ0JrVU5BQUpBSUFVb0Fod2lCRUVDZEVIQW93UnFJZ0lvQWdBZ0JVWUVRQ0FDSUFNMkFnQWdBdzBCUVpTaEJFR1VvUVFvQWdCQmZpQUVkM0UyQWdBTUFnc2dCa0VRUVJRZ0JpZ0NFQ0FGUmh0cUlBTTJBZ0FnQTBVTkFRc2dBeUFHTmdJWUlBVW9BaEFpQWdSQUlBTWdBallDRUNBQ0lBTTJBaGdMSUFVb0FoUWlBa1VOQUNBRElBSTJBaFFnQWlBRE5nSVlDeUFBSUFGQkFYSTJBZ1FnQUNBQmFpQUJOZ0lBSUFCQnBLRUVLQUlBUncwQlFaaWhCQ0FCTmdJQUR3c2dCU0FDUVg1eE5nSUVJQUFnQVVFQmNqWUNCQ0FBSUFGcUlBRTJBZ0FMSUFGQi93Rk5CRUFnQVVFRGRpSUNRUU4wUWJpaEJHb2hBUUovUVpDaEJDZ0NBQ0lEUVFFZ0FuUWlBbkZGQkVCQmtLRUVJQUlnQTNJMkFnQWdBUXdCQ3lBQktBSUlDeUVDSUFFZ0FEWUNDQ0FDSUFBMkFnd2dBQ0FCTmdJTUlBQWdBallDQ0E4TFFSOGhBaUFCUWYvLy93ZE5CRUFnQVVFSWRpSUNJQUpCZ1A0L2FrRVFka0VJY1NJRWRDSUNJQUpCZ09BZmFrRVFka0VFY1NJRGRDSUNJQUpCZ0lBUGFrRVFka0VDY1NJQ2RFRVBkaUFESUFSeUlBSnlheUlDUVFGMElBRWdBa0VWYW5aQkFYRnlRUnhxSVFJTElBQWdBallDSENBQVFnQTNBaEFnQWtFQ2RFSEFvd1JxSVFjQ1FBSkFRWlNoQkNnQ0FDSUVRUUVnQW5RaUEzRkZCRUJCbEtFRUlBTWdCSEkyQWdBZ0J5QUFOZ0lBSUFBZ0J6WUNHQXdCQ3lBQlFRQkJHU0FDUVFGMmF5QUNRUjlHRzNRaEFpQUhLQUlBSVFNRFFDQURJZ1FvQWdSQmVIRWdBVVlOQWlBQ1FSMTJJUU1nQWtFQmRDRUNJQVFnQTBFRWNXb2lCMEVRYWlnQ0FDSUREUUFMSUFjZ0FEWUNFQ0FBSUFRMkFoZ0xJQUFnQURZQ0RDQUFJQUEyQWdnUEN5QUVLQUlJSWdFZ0FEWUNEQ0FFSUFBMkFnZ2dBRUVBTmdJWUlBQWdCRFlDRENBQUlBRTJBZ2dMQ3ljQUlBQWdCVG9BRUNBQUlBUTRBZ3dnQUNBRE9BSUlJQUFnQWpnQ0JDQUFJQUU0QWdBZ0FBc1NBQ0FBUlFSQVFRQVBDeUFBSUFFUTFBTUwzQjRDRDM4RmZpTUFRWkFCYXlJRUpBQWdCRUVBUVpBQkVEb2lBMEYvTmdKTUlBTWdBRFlDTENBRFFZWUNOZ0lnSUFNZ0FEWUNWQ0FCSVFRZ0FpRU9RUUFoQUNNQVFiQUNheUlHSkFBZ0F5Z0NUQm9DUUFKQUFrQUNRQ0FES0FJRURRQWdBeENJQXhvZ0F5Z0NCQTBBREFFTElBUXRBQUFpQVVVTkFnSkFBa0FDUUFKQUEwQUNRQUpBSUFGQi93RnhFTzBCQkVBRFFDQUVJZ0ZCQVdvaEJDQUJMUUFCRU8wQkRRQUxJQU5DQUJEREFRTkFBbjhnQXlnQ0JDSUNJQU1vQW1oSEJFQWdBeUFDUVFGcU5nSUVJQUl0QUFBTUFRc2dBeEJRQ3hEdEFRMEFDeUFES0FJRUlRUWdBeWtEY0VJQVdRUkFJQU1nQkVFQmF5SUVOZ0lFQ3lBRUlBTW9BaXhyckNBREtRTjRJQlI4ZkNFVURBRUxBbjhDUUFKQUlBUXRBQUJCSlVZRVFDQUVMUUFCSWdGQktrWU5BU0FCUVNWSERRSUxJQU5DQUJEREFRSkFJQVF0QUFCQkpVWUVRQU5BQW44Z0F5Z0NCQ0lCSUFNb0FtaEhCRUFnQXlBQlFRRnFOZ0lFSUFFdEFBQU1BUXNnQXhCUUN5SUJFTzBCRFFBTElBUkJBV29oQkF3QkN5QURLQUlFSWdFZ0F5Z0NhRWNFUUNBRElBRkJBV28yQWdRZ0FTMEFBQ0VCREFFTElBTVFVQ0VCQ3lBRUxRQUFJQUZIQkVBZ0F5a0RjRUlBV1FSQUlBTWdBeWdDQkVFQmF6WUNCQXNnQVVFQVRnME5RUUFoQnlBTkRRME1Dd3NnQXlnQ0JDQURLQUlzYTZ3Z0F5a0RlQ0FVZkh3aEZDQUVJUUVNQXd0QkFDRUlJQVJCQW1vTUFRc0NRQ0FCRU1RQlJRMEFJQVF0QUFKQkpFY05BQ0FFTFFBQlFUQnJJUUVqQUVFUWF5SUNJQTQyQWd3Z0FpQU9JQUZCQW5SQkJHdEJBQ0FCUVFGTEcyb2lBVUVFYWpZQ0NDQUJLQUlBSVFnZ0JFRURhZ3dCQ3lBT0tBSUFJUWdnRGtFRWFpRU9JQVJCQVdvTElRRkJBQ0VNUVFBaEJDQUJMUUFBRU1RQkJFQURRQ0FCTFFBQUlBUkJDbXhxUVRCcklRUWdBUzBBQVNFQ0lBRkJBV29oQVNBQ0VNUUJEUUFMQ3lBQkxRQUFJZ3BCN1FCSEJIOGdBUVZCQUNFSklBaEJBRWNoRENBQkxRQUJJUXBCQUNFQUlBRkJBV29MSWdKQkFXb2hBVUVESVFVZ0RDRUhBa0FDUUFKQUFrQUNRQUpBSUFwQndRQnJEam9FREFRTUJBUUVEQXdNREFNTURBd01EQXdFREF3TURBUU1EQVFNREF3TURBUU1CQVFFQkFRQUJBVU1BUXdFQkFRTURBUUNCQXdNQkF3Q0RBc2dBa0VDYWlBQklBSXRBQUZCNkFCR0lnSWJJUUZCZmtGL0lBSWJJUVVNQkFzZ0FrRUNhaUFCSUFJdEFBRkI3QUJHSWdJYklRRkJBMEVCSUFJYklRVU1Bd3RCQVNFRkRBSUxRUUloQlF3QkMwRUFJUVVnQWlFQkMwRUJJQVVnQVMwQUFDSUNRUzl4UVFOR0lnVWJJUThDUUNBQ1FTQnlJQUlnQlJzaUMwSGJBRVlOQUFKQUlBdEI3Z0JIQkVBZ0MwSGpBRWNOQVNBRVFRRWdCRUVCU2hzaEJBd0NDeUFJSUE4Z0ZCRDhCQXdDQ3lBRFFnQVF3d0VEUUFKL0lBTW9BZ1FpQWlBREtBSm9Sd1JBSUFNZ0FrRUJhallDQkNBQ0xRQUFEQUVMSUFNUVVBc1E3UUVOQUFzZ0F5Z0NCQ0VDSUFNcEEzQkNBRmtFUUNBRElBSkJBV3NpQWpZQ0JBc2dBaUFES0FJc2E2d2dBeWtEZUNBVWZId2hGQXNnQXlBRXJDSVNFTU1CQWtBZ0F5Z0NCQ0lDSUFNb0FtaEhCRUFnQXlBQ1FRRnFOZ0lFREFFTElBTVFVRUVBU0EwR0N5QURLUU53UWdCWkJFQWdBeUFES0FJRVFRRnJOZ0lFQzBFUUlRSUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FMUWRnQWF3NGhCZ2tKQWdrSkNRa0pBUWtDQkFFQkFRa0ZDUWtKQ1FrREJna0pBZ2tFQ1FrR0FBc2dDMEhCQUdzaUFrRUdTMEVCSUFKMFFmRUFjVVZ5RFFnTElBWkJDR29nQXlBUFFRQVEvd1FnQXlrRGVFSUFJQU1vQWdRZ0F5Z0NMR3VzZlZJTkJRd01DeUFMUWU4QmNVSGpBRVlFUUNBR1FTQnFRWDlCZ1FJUU9ob2dCa0VBT2dBZ0lBdEI4d0JIRFFZZ0JrRUFPZ0JCSUFaQkFEb0FMaUFHUVFBMkFTb01CZ3NnQmtFZ2FpQUJMUUFCSWdKQjNnQkdJZ1ZCZ1FJUU9ob2dCa0VBT2dBZ0lBRkJBbW9nQVVFQmFpQUZHeUVIQW44Q1FBSkFJQUZCQWtFQklBVWJhaTBBQUNJQlFTMUhCRUFnQVVIZEFFWU5BU0FDUWQ0QVJ5RUZJQWNNQXdzZ0JpQUNRZDRBUnlJRk9nQk9EQUVMSUFZZ0FrSGVBRWNpQlRvQWZnc2dCMEVCYWdzaEFRTkFBa0FnQVMwQUFDSUNRUzFIQkVBZ0FrVU5EeUFDUWQwQVJ3MEJEQWdMUVMwaEFpQUJMUUFCSWdkRklBZEIzUUJHY2cwQUlBRkJBV29oQ2dKQUlBY2dBVUVCYXkwQUFDSUJUUVJBSUFjaEFnd0JDd05BSUFGQkFXb2lBU0FHUVNCcWFpQUZPZ0FBSUFFZ0NpMEFBQ0lDU1EwQUN3c2dDaUVCQ3lBQ0lBWnFJQVU2QUNFZ0FVRUJhaUVCREFBTEFBdEJDQ0VDREFJTFFRb2hBZ3dCQzBFQUlRSUxRZ0FoRWtFQUlRVkJBQ0VIUVFBaENpTUFRUkJySWhBa0FBSkFJQUpCQVVjZ0FrRWtUWEZGQkVCQjhKWUVRUncyQWdBTUFRc0RRQUovSUFNb0FnUWlCQ0FES0FKb1J3UkFJQU1nQkVFQmFqWUNCQ0FFTFFBQURBRUxJQU1RVUFzaUJCRHRBUTBBQ3dKQUFrQWdCRUVyYXc0REFBRUFBUXRCZjBFQUlBUkJMVVliSVFvZ0F5Z0NCQ0lFSUFNb0FtaEhCRUFnQXlBRVFRRnFOZ0lFSUFRdEFBQWhCQXdCQ3lBREVGQWhCQXNDUUFKQUFrQUNRQ0FDUVc5eElBUkJNRWR5UlFSQUFuOGdBeWdDQkNJRUlBTW9BbWhIQkVBZ0F5QUVRUUZxTmdJRUlBUXRBQUFNQVFzZ0F4QlFDeUlFUVY5eFFkZ0FSZ1JBUVJBaEFnSi9JQU1vQWdRaUJDQURLQUpvUndSQUlBTWdCRUVCYWpZQ0JDQUVMUUFBREFFTElBTVFVQXNpQkVIUmh3TnFMUUFBUVJCSkRRTWdBeWtEY0VJQVdRUkFJQU1nQXlnQ0JFRUJhellDQkFzZ0EwSUFFTU1CREFZTElBSU5BVUVJSVFJTUFnc2dBa0VLSUFJYklnSWdCRUhSaHdOcUxRQUFTdzBBSUFNcEEzQkNBRmtFUUNBRElBTW9BZ1JCQVdzMkFnUUxJQU5DQUJEREFVSHdsZ1JCSERZQ0FBd0VDeUFDUVFwSERRQWdCRUV3YXlJRlFRbE5CRUJCQUNFQ0EwQWdBa0VLYkNBRmFpSUNRWm16NXN3QlNRSi9JQU1vQWdRaUJDQURLQUpvUndSQUlBTWdCRUVCYWpZQ0JDQUVMUUFBREFFTElBTVFVQXNpQkVFd2F5SUZRUWxOY1EwQUN5QUNyU0VTQ3dKQUlBVkJDVXNOQUNBU1FncCtJUk1nQmEwaEZRTkFBbjhnQXlnQ0JDSUNJQU1vQW1oSEJFQWdBeUFDUVFGcU5nSUVJQUl0QUFBTUFRc2dBeEJRQ3lJRVFUQnJJZ1ZCQ1VzZ0V5QVZmQ0lTUXBxejVzeVpzK2JNR1ZweURRRWdFa0lLZmlJVElBV3RJaFZDZjRWWURRQUxRUW9oQWd3Q0MwRUtJUUlnQlVFSlRRMEJEQUlMSUFJZ0FrRUJhM0VFUUNBRVFkR0hBMm90QUFBaUJ5QUNTUVJBQTBBZ0FpQUZiQ0FIYWlJRlFjZmo4VGhKQW44Z0F5Z0NCQ0lFSUFNb0FtaEhCRUFnQXlBRVFRRnFOZ0lFSUFRdEFBQU1BUXNnQXhCUUN5SUVRZEdIQTJvdEFBQWlCeUFDU1hFTkFBc2dCYTBoRWdzZ0FpQUhUUTBCSUFLdElSTURRQ0FTSUJOK0loVWdCNjFDL3dHREloWkNmNFZXRFFJZ0ZTQVdmQ0VTSUFJQ2Z5QURLQUlFSWdRZ0F5Z0NhRWNFUUNBRElBUkJBV28yQWdRZ0JDMEFBQXdCQ3lBREVGQUxJZ1JCMFljRGFpMEFBQ0lIVFEwQ0lCQWdFMElBSUJKQ0FCQ0hBU0FRS1FNSVVBMEFDd3dCQ3lBQ1FSZHNRUVYyUVFkeFFkR0pBMm9zQUFBaEVTQUVRZEdIQTJvdEFBQWlCU0FDU1FSQUEwQWdCeUFSZENBRmNpSUhRWUNBZ01BQVNRSi9JQU1vQWdRaUJDQURLQUpvUndSQUlBTWdCRUVCYWpZQ0JDQUVMUUFBREFFTElBTVFVQXNpQkVIUmh3TnFMUUFBSWdVZ0FrbHhEUUFMSUFldElSSUxJQUlnQlUwTkFFSi9JQkd0SWhPSUloVWdFbFFOQUFOQUlBV3RRdjhCZ3lBU0lCT0doQ0VTSUFJQ2Z5QURLQUlFSWdRZ0F5Z0NhRWNFUUNBRElBUkJBV28yQWdRZ0JDMEFBQXdCQ3lBREVGQUxJZ1JCMFljRGFpMEFBQ0lGVFEwQklCSWdGVmdOQUFzTElBSWdCRUhSaHdOcUxRQUFUUTBBQTBBZ0FnSi9JQU1vQWdRaUJDQURLQUpvUndSQUlBTWdCRUVCYWpZQ0JDQUVMUUFBREFFTElBTVFVQXRCMFljRGFpMEFBRXNOQUF0QjhKWUVRY1FBTmdJQVFRQWhDa0ovSVJJTElBTXBBM0JDQUZrRVFDQURJQU1vQWdSQkFXczJBZ1FMUVFBZ0VrSi9VU0FLUVFGeUd3UkFRZkNXQkVIRUFEWUNBRUorSVJJTUFRc2dFaUFLckNJVGhTQVRmU0VTQ3lBUVFSQnFKQUFnQXlrRGVFSUFJQU1vQWdRZ0F5Z0NMR3VzZlZFTkJ5QUlSU0FMUWZBQVIzSkZCRUFnQ0NBU1BnSUFEQU1MSUFnZ0R5QVNFUHdFREFJTElBaEZEUUVnQmlrREVDRVNJQVlwQXdnaEV3SkFBa0FDUUNBUERnTUFBUUlFQ3lBSUlCTWdFaER5QkRnQ0FBd0RDeUFJSUJNZ0VoRFNBemtEQUF3Q0N5QUlJQk0zQXdBZ0NDQVNOd01JREFFTElBUkJBV3BCSHlBTFFlTUFSaUlLR3lFRkFrQWdEMEVCUmdSQUlBZ2hBaUFNQkVBZ0JVRUNkQkE1SWdKRkRRY0xJQVpDQURjRHFBSkJBQ0VFQTBBZ0FpRUFBa0FEUUFKL0lBTW9BZ1FpQWlBREtBSm9Sd1JBSUFNZ0FrRUJhallDQkNBQ0xRQUFEQUVMSUFNUVVBc2lBaUFHYWkwQUlVVU5BU0FHSUFJNkFCc2dCa0VjYWlBR1FSdHFRUUVnQmtHb0Ftb1EvZ0lpQWtGK1JnMEFRUUFoQ1NBQ1FYOUdEUXNnQUFSQUlBQWdCRUVDZEdvZ0JpZ0NIRFlDQUNBRVFRRnFJUVFMSUF3Z0JDQUZSbkZGRFFBTFFRRWhCeUFBSUFWQkFYUkJBWElpQlVFQ2RCREhBaUlDRFFFTUN3c0xRUUFoQ1NBQUlRVWdCa0dvQW1vRWZ5QUdLQUtvQWdWQkFBc05DQXdCQ3lBTUJFQkJBQ0VFSUFVUU9TSUNSUTBHQTBBZ0FpRUpBMEFDZnlBREtBSUVJZ0FnQXlnQ2FFY0VRQ0FESUFCQkFXbzJBZ1FnQUMwQUFBd0JDeUFERUZBTElnQWdCbW90QUNGRkJFQkJBQ0VGSUFraEFBd0VDeUFFSUFscUlBQTZBQUFnQkVFQmFpSUVJQVZIRFFBTFFRRWhCMEVBSVFBZ0NTQUZRUUYwUVFGeUlnVVF4d0lpQWcwQUN3d0pDMEVBSVFRZ0NBUkFBMEFDZnlBREtBSUVJZ0FnQXlnQ2FFY0VRQ0FESUFCQkFXbzJBZ1FnQUMwQUFBd0JDeUFERUZBTElnQWdCbW90QUNFRVFDQUVJQWhxSUFBNkFBQWdCRUVCYWlFRURBRUZRUUFoQlNBSUlnQWhDUXdEQ3dBTEFBc0RRQUovSUFNb0FnUWlBQ0FES0FKb1J3UkFJQU1nQUVFQmFqWUNCQ0FBTFFBQURBRUxJQU1RVUFzZ0Jtb3RBQ0VOQUF0QkFDRUFRUUFoQ1VFQUlRVUxJQU1vQWdRaEFpQURLUU53UWdCWkJFQWdBeUFDUVFGcklnSTJBZ1FMSUFNcEEzZ2dBaUFES0FJc2E2eDhJaE5RSUF0QjR3QkdJQklnRTFKeGNnMENJQXdFUUNBSUlBQTJBZ0FMQWtBZ0NnMEFJQVVFUUNBRklBUkJBblJxUVFBMkFnQUxJQWxGQkVCQkFDRUpEQUVMSUFRZ0NXcEJBRG9BQUFzZ0JTRUFDeUFES0FJRUlBTW9BaXhyckNBREtRTjRJQlI4ZkNFVUlBMGdDRUVBUjJvaERRc2dBVUVCYWlFRUlBRXRBQUVpQVEwQkRBZ0xDeUFGSVFBTUFRdEJBU0VIUVFBaENVRUFJUUFNQWdzZ0RDRUhEQU1MSUF3aEJ3c2dEUTBCQzBGL0lRMExJQWRGRFFBZ0NSQXpJQUFRTXdzZ0JrR3dBbW9rQUNBTklRQWdBMEdRQVdva0FDQUFDME1BQWtBZ0FFVU5BQUpBQWtBQ1FBSkFJQUZCQW1vT0JnQUJBZ0lFQXdRTElBQWdBandBQUE4TElBQWdBajBCQUE4TElBQWdBajRDQUE4TElBQWdBamNEQUFzTGtBUUNBMzhCZmdKQUFrQUNmd0pBQWtBQ2Z5QUFLQUlFSWdJZ0FDZ0NhRWNFUUNBQUlBSkJBV28yQWdRZ0FpMEFBQXdCQ3lBQUVGQUxJZ0pCSzJzT0F3QUJBQUVMSUFKQkxVWWdBVVVDZnlBQUtBSUVJZ01nQUNnQ2FFY0VRQ0FBSUFOQkFXbzJBZ1FnQXkwQUFBd0JDeUFBRUZBTElnTkJPbXNpQVVGMVMzSU5BUm9nQUNrRGNFSUFVdzBDSUFBZ0FDZ0NCRUVCYXpZQ0JBd0NDeUFDUVRwcklRRWdBaUVEUVFBTElRUWdBVUYyU1EwQUlBTkJNR3NpQVVFS1NRUkFRUUFoQWdOQUlBTWdBa0VLYkdvaEFRSi9JQUFvQWdRaUFpQUFLQUpvUndSQUlBQWdBa0VCYWpZQ0JDQUNMUUFBREFFTElBQVFVQXNoQXlBQlFUQnJJUUlnQWtITW1iUG1BRWdnQTBFd2F5SUJRUWxOY1EwQUN5QUNyQ0VGQ3dKQUlBRkJDazhOQUFOQUlBT3RJQVZDQ241OFFqQjlJUVVDZnlBQUtBSUVJZ0VnQUNnQ2FFY0VRQ0FBSUFGQkFXbzJBZ1FnQVMwQUFBd0JDeUFBRUZBTElnTkJNR3NpQVVFSlN3MEJJQVZDcm8rRjE4ZkM2Nk1CVXcwQUN3c2dBVUVLU1FSQUEwQUNmeUFBS0FJRUlnRWdBQ2dDYUVjRVFDQUFJQUZCQVdvMkFnUWdBUzBBQUF3QkN5QUFFRkFMUVRCclFRcEpEUUFMQ3lBQUtRTndRZ0JaQkVBZ0FDQUFLQUlFUVFGck5nSUVDMElBSUFWOUlBVWdCQnNoQlF3QkMwS0FnSUNBZ0lDQWdJQi9JUVVnQUNrRGNFSUFVdzBBSUFBZ0FDZ0NCRUVCYXpZQ0JFS0FnSUNBZ0lDQWdJQi9Ed3NnQlFzc0FRRi9JQUFRaGdJZ0FDZ0NBQVJBSUFBUXF3Y2dBQkEwR2lBQUtBSUFJUUVnQUJDOEFSb2dBUkF6Q3d2WU1nTVFmd2QrQVh3akFFRXdheUlNSkFBQ1FDQUNRUUpOQkVBZ0FrRUNkQ0lDUWJ5SEEyb29BZ0FoRHlBQ1FiQ0hBMm9vQWdBaERnTkFBbjhnQVNnQ0JDSUNJQUVvQW1oSEJFQWdBU0FDUVFGcU5nSUVJQUl0QUFBTUFRc2dBUkJRQ3lJQ0VPMEJEUUFMUVFFaEJnSkFBa0FnQWtFcmF3NERBQUVBQVF0QmYwRUJJQUpCTFVZYklRWWdBU2dDQkNJQ0lBRW9BbWhIQkVBZ0FTQUNRUUZxTmdJRUlBSXRBQUFoQWd3QkN5QUJFRkFoQWdzQ1FBSkFBMEFnQlVISDN3RnFMQUFBSUFKQklISkdCRUFDUUNBRlFRWkxEUUFnQVNnQ0JDSUNJQUVvQW1oSEJFQWdBU0FDUVFGcU5nSUVJQUl0QUFBaEFnd0JDeUFCRUZBaEFnc2dCVUVCYWlJRlFRaEhEUUVNQWdzTElBVkJBMGNFUUNBRlFRaEdEUUVnQTBVZ0JVRUVTWElOQWlBRlFRaEdEUUVMSUFFcEEzQWlGRUlBV1FSQUlBRWdBU2dDQkVFQmF6WUNCQXNnQTBVZ0JVRUVTWElOQUNBVVFnQlRJUUlEUUNBQ1JRUkFJQUVnQVNnQ0JFRUJhellDQkFzZ0JVRUJheUlGUVFOTERRQUxDMElBSVJRakFFRVFheUlDSkFBQ2ZpQUdza01BQUlCL2xMd2lBMEgvLy8vL0IzRWlBVUdBZ0lBRWEwSC8vLy8zQjAwRVFDQUJyVUlaaGtLQWdJQ0FnSUNBd0Q5OERBRUxJQU90UWhtR1FvQ0FnSUNBZ01ELy93Q0VJQUZCZ0lDQS9BZFBEUUFhUWdBZ0FVVU5BQm9nQWlBQnJVSUFJQUZuSWdGQjBRQnFFSXNCSUFJcEF3QWhGQ0FDS1FNSVFvQ0FnSUNBZ01BQWhVR0ovd0FnQVd1dFFqQ0doQXNoRlNBTUlCUTNBd0FnRENBVklBTkJnSUNBZ0hoeHJVSWdob1EzQXdnZ0FrRVFhaVFBSUF3cEF3Z2hGQ0FNS1FNQUlSVU1BZ3NDUUFKQUFrQWdCUTBBUVFBaEJRTkFJQVZCeGZVQmFpd0FBQ0FDUVNCeVJ3MEJBa0FnQlVFQlN3MEFJQUVvQWdRaUFpQUJLQUpvUndSQUlBRWdBa0VCYWpZQ0JDQUNMUUFBSVFJTUFRc2dBUkJRSVFJTElBVkJBV29pQlVFRFJ3MEFDd3dCQ3dKQUFrQWdCUTRFQUFFQkFnRUxBa0FnQWtFd1J3MEFBbjhnQVNnQ0JDSUZJQUVvQW1oSEJFQWdBU0FGUVFGcU5nSUVJQVV0QUFBTUFRc2dBUkJRQzBGZmNVSFlBRVlFUUNNQVFiQURheUlDSkFBQ2Z5QUJLQUlFSWdVZ0FTZ0NhRWNFUUNBQklBVkJBV28yQWdRZ0JTMEFBQXdCQ3lBQkVGQUxJUVVDUUFKL0EwQWdCVUV3UndSQUFrQWdCVUV1UncwRUlBRW9BZ1FpQlNBQktBSm9SZzBBSUFFZ0JVRUJhallDQkNBRkxRQUFEQU1MQlNBQktBSUVJZ1VnQVNnQ2FFY0VmMEVCSVFvZ0FTQUZRUUZxTmdJRUlBVXRBQUFGUVFFaENpQUJFRkFMSVFVTUFRc0xJQUVRVUFzaEJVRUJJUVFnQlVFd1J3MEFBMEFnRjBJQmZTRVhBbjhnQVNnQ0JDSUZJQUVvQW1oSEJFQWdBU0FGUVFGcU5nSUVJQVV0QUFBTUFRc2dBUkJRQ3lJRlFUQkdEUUFMUVFFaENndENnSUNBZ0lDQXdQOC9JUlVDUUFOQUFrQWdCVUVnY2lFTEFrQUNRQ0FGUVRCcklnaEJDa2tOQUNBRlFTNUhJQXRCNFFCclFRWlBjUTBFSUFWQkxrY05BQ0FFRFFKQkFTRUVJQlFoRnd3QkN5QUxRZGNBYXlBSUlBVkJPVW9iSVFVQ1FDQVVRZ2RYQkVBZ0JTQUpRUVIwYWlFSkRBRUxJQlJDSEZnRVFDQUNRVEJxSUFVUXB3RWdBa0VnYWlBWklCVkNBRUtBZ0lDQWdJREEvVDhRWFNBQ1FSQnFJQUlwQXpBZ0Fpa0RPQ0FDS1FNZ0loa2dBaWtES0NJVkVGMGdBaUFDS1FNUUlBSXBBeGdnRmlBWUVKOEJJQUlwQXdnaEdDQUNLUU1BSVJZTUFRc2dCVVVnQjNJTkFDQUNRZEFBYWlBWklCVkNBRUtBZ0lDQWdJQ0EvejhRWFNBQ1FVQnJJQUlwQTFBZ0Fpa0RXQ0FXSUJnUW53RWdBaWtEU0NFWVFRRWhCeUFDS1FOQUlSWUxJQlJDQVh3aEZFRUJJUW9MSUFFb0FnUWlCU0FCS0FKb1J3Ui9JQUVnQlVFQmFqWUNCQ0FGTFFBQUJTQUJFRkFMSVFVTUFRc0xRUzRoQlFzQ2ZpQUtSUVJBQWtBQ1FDQUJLUU53UWdCWkJFQWdBU0FCS0FJRUlnVkJBV3MyQWdRZ0EwVU5BU0FCSUFWQkFtczJBZ1FnQkVVTkFpQUJJQVZCQTJzMkFnUU1BZ3NnQXcwQkN5QUJRZ0FRd3dFTElBSkI0QUJxSUFhM1JBQUFBQUFBQUFBQW9oRE5BU0FDS1FOZ0lSWWdBaWtEYUF3QkN5QVVRZ2RYQkVBZ0ZDRVZBMEFnQ1VFRWRDRUpJQlZDQVh3aUZVSUlVZzBBQ3dzQ1FBSkFBa0FnQlVGZmNVSFFBRVlFUUNBQklBTVEvUVFpRlVLQWdJQ0FnSUNBZ0lCL1VnMERJQU1FUUNBQktRTndRZ0JaRFFJTUF3dENBQ0VXSUFGQ0FCRERBVUlBREFRTFFnQWhGU0FCS1FOd1FnQlREUUlMSUFFZ0FTZ0NCRUVCYXpZQ0JBdENBQ0VWQ3lBSlJRUkFJQUpCOEFCcUlBYTNSQUFBQUFBQUFBQUFvaEROQVNBQ0tRTndJUllnQWlrRGVBd0JDeUFYSUJRZ0JCdENBb1lnRlh4Q0lIMGlGRUVBSUE5cnJWVUVRRUh3bGdSQnhBQTJBZ0FnQWtHZ0FXb2dCaENuQVNBQ1FaQUJhaUFDS1FPZ0FTQUNLUU9vQVVKL1F2Ly8vLy8vLzcvLy93QVFYU0FDUVlBQmFpQUNLUU9RQVNBQ0tRT1lBVUovUXYvLy8vLy8vNy8vL3dBUVhTQUNLUU9BQVNFV0lBSXBBNGdCREFFTElBOUI0Z0ZyckNBVVZ3UkFJQWxCQUU0RVFBTkFJQUpCb0FOcUlCWWdHRUlBUW9DQWdJQ0FnTUQvdjM4UW53RWdGaUFZUW9DQWdJQ0FnSUQvUHhEM0JDRUJJQUpCa0FOcUlCWWdHQ0FXSUFJcEE2QURJQUZCQUVnaUF4c2dHQ0FDS1FPb0F5QURHeENmQVNBVVFnRjlJUlFnQWlrRG1BTWhHQ0FDS1FPUUF5RVdJQWxCQVhRZ0FVRUFUbklpQ1VFQVRnMEFDd3NDZmlBVUlBK3NmVUlnZkNJVnB5SUJRUUFnQVVFQVNoc2dEaUFWSUE2dFV4c2lBVUh4QUU0RVFDQUNRWUFEYWlBR0VLY0JJQUlwQTRnRElSY2dBaWtEZ0FNaEdVSUFEQUVMSUFKQjRBSnFSQUFBQUFBQUFQQS9RWkFCSUFGckVPd0JFTTBCSUFKQjBBSnFJQVlRcHdFZ0FrSHdBbW9nQWlrRDRBSWdBaWtENkFJZ0Fpa0QwQUlpR1NBQ0tRUFlBaUlYRUlJRklBSXBBL2dDSVJvZ0Fpa0Q4QUlMSVJVZ0FrSEFBbW9nQ1NBSlFRRnhSU0FXSUJoQ0FFSUFFSWNDUVFCSElBRkJJRWh4Y1NJQmFoQ2hBaUFDUWJBQ2FpQVpJQmNnQWlrRHdBSWdBaWtEeUFJUVhTQUNRWkFDYWlBQ0tRT3dBaUFDS1FPNEFpQVZJQm9RbndFZ0FrR2dBbW9nR1NBWFFnQWdGaUFCRzBJQUlCZ2dBUnNRWFNBQ1FZQUNhaUFDS1FPZ0FpQUNLUU9vQWlBQ0tRT1FBaUFDS1FPWUFoQ2ZBU0FDUWZBQmFpQUNLUU9BQWlBQ0tRT0lBaUFWSUJvUTB3TWdBaWtEOEFFaUZTQUNLUVA0QVNJWFFnQkNBQkNIQWtVRVFFSHdsZ1JCeEFBMkFnQUxJQUpCNEFGcUlCVWdGeUFVcHhDQkJTQUNLUVBnQVNFV0lBSXBBK2dCREFFTFFmQ1dCRUhFQURZQ0FDQUNRZEFCYWlBR0VLY0JJQUpCd0FGcUlBSXBBOUFCSUFJcEE5Z0JRZ0JDZ0lDQWdJQ0F3QUFRWFNBQ1FiQUJhaUFDS1FQQUFTQUNLUVBJQVVJQVFvQ0FnSUNBZ01BQUVGMGdBaWtEc0FFaEZpQUNLUU80QVFzaEZDQU1JQlkzQXhBZ0RDQVVOd01ZSUFKQnNBTnFKQUFnRENrREdDRVVJQXdwQXhBaEZRd0dDeUFCS1FOd1FnQlREUUFnQVNBQktBSUVRUUZyTmdJRUN5QUJJUVVnQmlFSklBTWhDa0VBSVFOQkFDRUdJd0JCa01ZQWF5SUVKQUJCQUNBT0lBOXFJaEpySVJNQ1FBSi9BMEFnQWtFd1J3UkFBa0FnQWtFdVJ3MEVJQVVvQWdRaUFTQUZLQUpvUmcwQUlBVWdBVUVCYWpZQ0JDQUJMUUFBREFNTEJTQUZLQUlFSWdFZ0JTZ0NhRWNFZjBFQklRTWdCU0FCUVFGcU5nSUVJQUV0QUFBRlFRRWhBeUFGRUZBTElRSU1BUXNMSUFVUVVBc2hBa0VCSVFjZ0FrRXdSdzBBQTBBZ0ZFSUJmU0VVQW44Z0JTZ0NCQ0lCSUFVb0FtaEhCRUFnQlNBQlFRRnFOZ0lFSUFFdEFBQU1BUXNnQlJCUUN5SUNRVEJHRFFBTFFRRWhBd3NnQkVFQU5nS1FCaUFNQW40Q1FBSkFBa0FDUUFKQUlBSkJMa1lpQVNBQ1FUQnJJZ2hCQ1UxeUJFQURRQUpBSUFGQkFYRUVRQ0FIUlFSQUlCVWhGRUVCSVFjTUFnc2dBMFVoQVF3RUN5QVZRZ0Y4SVJVZ0JrSDhEMHdFUUNBTklCV25JQUpCTUVZYklRMGdCRUdRQm1vZ0JrRUNkR29pQVNBTEJIOGdBaUFCS0FJQVFRcHNha0V3YXdVZ0NBczJBZ0JCQVNFRFFRQWdDMEVCYWlJQklBRkJDVVlpQVJzaEN5QUJJQVpxSVFZTUFRc2dBa0V3UmcwQUlBUWdCQ2dDZ0VaQkFYSTJBb0JHUWR5UEFTRU5Dd0ovSUFVb0FnUWlBU0FGS0FKb1J3UkFJQVVnQVVFQmFqWUNCQ0FCTFFBQURBRUxJQVVRVUFzaUFrRXVSaUlCSUFKQk1Hc2lDRUVLU1hJTkFBc0xJQlFnRlNBSEd5RVVJQU5GSUFKQlgzRkJ4UUJIY2tVRVFBSkFJQVVnQ2hEOUJDSVdRb0NBZ0lDQWdJQ0FnSDlTRFFBZ0NrVU5CVUlBSVJZZ0JTa0RjRUlBVXcwQUlBVWdCU2dDQkVFQmF6WUNCQXNnQTBVTkF5QVVJQlo4SVJRTUJRc2dBMFVoQVNBQ1FRQklEUUVMSUFVcEEzQkNBRk1OQUNBRklBVW9BZ1JCQVdzMkFnUUxJQUZGRFFJTFFmQ1dCRUVjTmdJQUMwSUFJUlVnQlVJQUVNTUJRZ0FNQVFzZ0JDZ0NrQVlpQVVVRVFDQUVJQW0zUkFBQUFBQUFBQUFBb2hETkFTQUVLUU1BSVJVZ0JDa0RDQXdCQ3lBVUlCVlNJQlZDQ1ZWeUlBNUJIa3hCQUNBQklBNTJHM0pGQkVBZ0JFRXdhaUFKRUtjQklBUkJJR29nQVJDaEFpQUVRUkJxSUFRcEF6QWdCQ2tET0NBRUtRTWdJQVFwQXlnUVhTQUVLUU1RSVJVZ0JDa0RHQXdCQ3lBUFFYNXRyU0FVVXdSQVFmQ1dCRUhFQURZQ0FDQUVRZUFBYWlBSkVLY0JJQVJCMEFCcUlBUXBBMkFnQkNrRGFFSi9Rdi8vLy8vLy83Ly8vd0FRWFNBRVFVQnJJQVFwQTFBZ0JDa0RXRUovUXYvLy8vLy8vNy8vL3dBUVhTQUVLUU5BSVJVZ0JDa0RTQXdCQ3lBUFFlSUJhNndnRkZVRVFFSHdsZ1JCeEFBMkFnQWdCRUdRQVdvZ0NSQ25BU0FFUVlBQmFpQUVLUU9RQVNBRUtRT1lBVUlBUW9DQWdJQ0FnTUFBRUYwZ0JFSHdBR29nQkNrRGdBRWdCQ2tEaUFGQ0FFS0FnSUNBZ0lEQUFCQmRJQVFwQTNBaEZTQUVLUU40REFFTElBc0VRQ0FMUVFoTUJFQWdCRUdRQm1vZ0JrRUNkR29pQVNnQ0FDRUZBMEFnQlVFS2JDRUZJQXRCQVdvaUMwRUpSdzBBQ3lBQklBVTJBZ0FMSUFaQkFXb2hCZ3NDUUNBTklCU25JZ2RLSUExQkNVNXlJQWRCRVVweURRQWdCMEVKUmdSQUlBUkJ3QUZxSUFrUXB3RWdCRUd3QVdvZ0JDZ0NrQVlRb1FJZ0JFR2dBV29nQkNrRHdBRWdCQ2tEeUFFZ0JDa0RzQUVnQkNrRHVBRVFYU0FFS1FPZ0FTRVZJQVFwQTZnQkRBSUxJQWRCQ0V3RVFDQUVRWkFDYWlBSkVLY0JJQVJCZ0FKcUlBUW9BcEFHRUtFQ0lBUkI4QUZxSUFRcEE1QUNJQVFwQTVnQ0lBUXBBNEFDSUFRcEE0Z0NFRjBnQkVIZ0FXcEJBQ0FIYTBFQ2RFR3dod05xS0FJQUVLY0JJQVJCMEFGcUlBUXBBL0FCSUFRcEEvZ0JJQVFwQStBQklBUXBBK2dCRVBZRUlBUXBBOUFCSVJVZ0JDa0QyQUVNQWdzZ0RpQUhRWDFzYWtFYmFpSUJRUjVNUVFBZ0JDZ0NrQVlpQWlBQmRoc05BQ0FFUWVBQ2FpQUpFS2NCSUFSQjBBSnFJQUlRb1FJZ0JFSEFBbW9nQkNrRDRBSWdCQ2tENkFJZ0JDa0QwQUlnQkNrRDJBSVFYU0FFUWJBQ2FpQUhRUUowUWVpR0Eyb29BZ0FRcHdFZ0JFR2dBbW9nQkNrRHdBSWdCQ2tEeUFJZ0JDa0RzQUlnQkNrRHVBSVFYU0FFS1FPZ0FpRVZJQVFwQTZnQ0RBRUxBMEFnQkVHUUJtb2dCaUlDUVFGcklnWkJBblJxS0FJQVJRMEFDMEVBSVFzQ1FDQUhRUWx2SWdORkJFQkJBQ0VCREFFTFFRQWhBU0FEUVFscUlBTWdCMEVBU0JzaEF3SkFJQUpGQkVCQkFDRUNEQUVMUVlDVTY5d0RRUUFnQTJ0QkFuUkJzSWNEYWlnQ0FDSUdiU0VLUVFBaENFRUFJUVVEUUNBRVFaQUdhaUFGUVFKMGFpSU5JQWdnRFNnQ0FDSU5JQVp1SWhCcUlnZzJBZ0FnQVVFQmFrSC9EM0VnQVNBSVJTQUJJQVZHY1NJSUd5RUJJQWRCQ1dzZ0J5QUlHeUVISUFvZ0RTQUdJQkJzYTJ3aENDQUZRUUZxSWdVZ0FrY05BQXNnQ0VVTkFDQUVRWkFHYWlBQ1FRSjBhaUFJTmdJQUlBSkJBV29oQWdzZ0J5QURhMEVKYWlFSEN3TkFJQVJCa0FacUlBRkJBblJxSVFVQ1FBTkFJQWRCSkU0RVFDQUhRU1JIRFFJZ0JTZ0NBRUhSNmZrRVR3MENDeUFDUWY4UGFpRURRUUFoQ0FOQUlBaXRJQVJCa0FacUlBTkIvdzl4SWdaQkFuUnFJZ00xQWdCQ0hZWjhJaFJDZ1pUcjNBTlVCSDlCQUFVZ0ZDQVVRb0NVNjl3RGdDSVZRb0NVNjl3RGZuMGhGQ0FWcHdzaENDQURJQlNuSWdNMkFnQWdBaUFDSUFJZ0JpQURHeUFCSUFaR0d5QUdJQUpCQVd0Qi93OXhSeHNoQWlBR1FRRnJJUU1nQVNBR1J3MEFDeUFMUVIxcklRc2dDRVVOQUFzZ0FpQUJRUUZyUWY4UGNTSUJSZ1JBSUFSQmtBWnFJZ01nQWtIK0QycEIvdzl4UVFKMGFpSUdJQVlvQWdBZ0FrRUJhMEgvRDNFaUFrRUNkQ0FEYWlnQ0FISTJBZ0FMSUFkQkNXb2hCeUFFUVpBR2FpQUJRUUowYWlBSU5nSUFEQUVMQ3dKQUEwQWdBa0VCYWtIL0QzRWhCaUFFUVpBR2FpQUNRUUZyUWY4UGNVRUNkR29oQ0FOQVFRbEJBU0FIUVMxS0d5RUtBa0FEUUNBQklRTkJBQ0VGQWtBRFFBSkFJQU1nQldwQi93OXhJZ0VnQWtZTkFDQUVRWkFHYWlBQlFRSjBhaWdDQUNJQklBVkJBblJCZ0ljRGFpZ0NBQ0lOU1EwQUlBRWdEVXNOQWlBRlFRRnFJZ1ZCQkVjTkFRc0xJQWRCSkVjTkFFSUFJUlJCQUNFRlFnQWhGUU5BSUFJZ0F5QUZha0gvRDNFaUFVWUVRQ0FDUVFGcVFmOFBjU0lDUVFKMElBUnFRUUEyQW93R0N5QUVRWUFHYWlBRVFaQUdhaUFCUVFKMGFpZ0NBQkNoQWlBRVFmQUZhaUFVSUJWQ0FFS0FnSUNBNVpxM2pzQUFFRjBnQkVIZ0JXb2dCQ2tEOEFVZ0JDa0QrQVVnQkNrRGdBWWdCQ2tEaUFZUW53RWdCQ2tENkFVaEZTQUVLUVBnQlNFVUlBVkJBV29pQlVFRVJ3MEFDeUFFUWRBRmFpQUpFS2NCSUFSQndBVnFJQlFnRlNBRUtRUFFCU0FFS1FQWUJSQmRJQVFwQThnRklSVkNBQ0VVSUFRcEE4QUZJUllnQzBIeEFHb2lCeUFQYXlJR1FRQWdCa0VBU2hzZ0RpQUdJQTVJSWdVYklnRkI4QUJNRFFJTUJRc2dDaUFMYWlFTElBTWdBaUlCUmcwQUMwR0FsT3ZjQXlBS2RpRU5RWDhnQ25SQmYzTWhFRUVBSVFVZ0F5RUJBMEFnQkVHUUJtb2dBMEVDZEdvaUVTQUZJQkVvQWdBaUVTQUtkbW9pQlRZQ0FDQUJRUUZxUWY4UGNTQUJJQVZGSUFFZ0EwWnhJZ1ViSVFFZ0IwRUpheUFISUFVYklRY2dFQ0FSY1NBTmJDRUZJQU5CQVdwQi93OXhJZ01nQWtjTkFBc2dCVVVOQVNBQklBWkhCRUFnQkVHUUJtb2dBa0VDZEdvZ0JUWUNBQ0FHSVFJTUF3c2dDQ0FJS0FJQVFRRnlOZ0lBREFFTEN3c2dCRUdRQldwRUFBQUFBQUFBOEQ5QjRRRWdBV3NRN0FFUXpRRWdCRUd3QldvZ0JDa0RrQVVnQkNrRG1BVWdGaUFWRUlJRklBUXBBN2dGSVJrZ0JDa0RzQVVoR0NBRVFZQUZha1FBQUFBQUFBRHdQMEh4QUNBQmF4RHNBUkROQVNBRVFhQUZhaUFXSUJVZ0JDa0RnQVVnQkNrRGlBVVFnQVVnQkVId0JHb2dGaUFWSUFRcEE2QUZJaFFnQkNrRHFBVWlGeERUQXlBRVFlQUVhaUFZSUJrZ0JDa0Q4QVFnQkNrRCtBUVFud0VnQkNrRDZBUWhGU0FFS1FQZ0JDRVdDd0pBSUFOQkJHcEIvdzl4SWdvZ0FrWU5BQUpBSUFSQmtBWnFJQXBCQW5ScUtBSUFJZ3BCLzhtMTdnRk5CRUFnQ2tVZ0EwRUZha0gvRDNFZ0FrWnhEUUVnQkVId0Eyb2dDYmRFQUFBQUFBQUEwRCtpRU0wQklBUkI0QU5xSUJRZ0Z5QUVLUVB3QXlBRUtRUDRBeENmQVNBRUtRUG9BeUVYSUFRcEErQURJUlFNQVFzZ0NrR0F5clh1QVVjRVFDQUVRZEFFYWlBSnQwUUFBQUFBQUFEb1A2SVF6UUVnQkVIQUJHb2dGQ0FYSUFRcEE5QUVJQVFwQTlnRUVKOEJJQVFwQThnRUlSY2dCQ2tEd0FRaEZBd0JDeUFKdHlFYklBSWdBMEVGYWtIL0QzRkdCRUFnQkVHUUJHb2dHMFFBQUFBQUFBRGdQNklRelFFZ0JFR0FCR29nRkNBWElBUXBBNUFFSUFRcEE1Z0VFSjhCSUFRcEE0Z0VJUmNnQkNrRGdBUWhGQXdCQ3lBRVFiQUVhaUFiUkFBQUFBQUFBT2cvb2hETkFTQUVRYUFFYWlBVUlCY2dCQ2tEc0FRZ0JDa0R1QVFRbndFZ0JDa0RxQVFoRnlBRUtRT2dCQ0VVQ3lBQlFlOEFTZzBBSUFSQjBBTnFJQlFnRjBJQVFvQ0FnSUNBZ01EL1B4Q0FCU0FFS1FQUUF5QUVLUVBZQTBJQVFnQVFod0lOQUNBRVFjQURhaUFVSUJkQ0FFS0FnSUNBZ0lEQS96OFFud0VnQkNrRHlBTWhGeUFFS1FQQUF5RVVDeUFFUWJBRGFpQVdJQlVnRkNBWEVKOEJJQVJCb0FOcUlBUXBBN0FESUFRcEE3Z0RJQmdnR1JEVEF5QUVLUU9vQXlFVklBUXBBNkFESVJZQ1FFRitJQkpySUFkQi8vLy8vd2R4VGcwQUlBUWdGVUwvLy8vLy8vLy8vLzhBZ3pjRG1BTWdCQ0FXTndPUUF5QUVRWUFEYWlBV0lCVkNBRUtBZ0lDQWdJQ0EvejhRWFNBRUtRT1FBeUFFS1FPWUEwS0FnSUNBZ0lDQXVNQUFFUGNFSVFJZ0ZTQUVLUU9JQXlBQ1FRQklJZ01iSVJVZ0ZpQUVLUU9BQXlBREd5RVdRUUFnRXlBTElBSkJBRTVxSWd0QjdnQnFUaUFVSUJkQ0FFSUFFSWNDUVFCSElBVWdCU0FCSUFaSGNTQURHM0ViRFFCQjhKWUVRY1FBTmdJQUN5QUVRZkFDYWlBV0lCVWdDeENCQlNBRUtRUHdBaUVWSUFRcEEvZ0NDemNES0NBTUlCVTNBeUFnQkVHUXhnQnFKQUFnRENrREtDRVVJQXdwQXlBaEZRd0VDeUFCS1FOd1FnQlpCRUFnQVNBQktBSUVRUUZyTmdJRUN3d0JDd0pBQW44Z0FTZ0NCQ0lDSUFFb0FtaEhCRUFnQVNBQ1FRRnFOZ0lFSUFJdEFBQU1BUXNnQVJCUUMwRW9SZ1JBUVFFaEJRd0JDMEtBZ0lDQWdJRGcvLzhBSVJRZ0FTa0RjRUlBVXcwRElBRWdBU2dDQkVFQmF6WUNCQXdEQ3dOQUFuOGdBU2dDQkNJQ0lBRW9BbWhIQkVBZ0FTQUNRUUZxTmdJRUlBSXRBQUFNQVFzZ0FSQlFDeUlDUVRCclFRcEpJQUpCd1FCclFScEpjaUFDUWQ4QVJuSkZJQUpCNFFCclFScFBjVVVFUUNBRlFRRnFJUVVNQVFzTFFvQ0FnSUNBZ09ELy93QWhGQ0FDUVNsR0RRSWdBU2tEY0NJWFFnQlpCRUFnQVNBQktBSUVRUUZyTmdJRUN3SkFJQU1FUUNBRkRRRU1CQXNNQVFzRFFDQUZRUUZySVFVZ0YwSUFXUVJBSUFFZ0FTZ0NCRUVCYXpZQ0JBc2dCUTBBQ3d3Q0MwSHdsZ1JCSERZQ0FDQUJRZ0FRd3dFTFFnQWhGQXNnQUNBVk53TUFJQUFnRkRjRENDQU1RVEJxSkFBTDBBWUNCSDhEZmlNQVFZQUJheUlGSkFBQ1FBSkFBa0FnQXlBRVFnQkNBQkNIQWtVTkFBSi9JQVJDLy8vLy8vLy9QNE1oQ1FKL0lBUkNNSWluUWYvL0FYRWlCa0gvL3dGSEJFQkJCQ0FHRFFFYVFRSkJBeUFESUFtRVVCc01BZ3NnQXlBSmhGQUxDeUVISUFKQ01JaW5JZ2hCLy84QmNTSUdRZi8vQVVZTkFDQUhEUUVMSUFWQkVHb2dBU0FDSUFNZ0JCQmRJQVVnQlNrREVDSUJJQVVwQXhnaUFpQUJJQUlROWdRZ0JTa0RDQ0VDSUFVcEF3QWhCQXdCQ3lBQklBSkMvLy8vLy8vL1A0TWdCcTFDTUlhRUlnb2dBeUFFUXYvLy8vLy8veitESUFSQ01JaW5RZi8vQVhFaUI2MUNNSWFFSWdrUWh3SkJBRXdFUUNBQklBb2dBeUFKRUljQ0JFQWdBU0VFREFJTElBVkI4QUJxSUFFZ0FrSUFRZ0FRWFNBRktRTjRJUUlnQlNrRGNDRUVEQUVMSUFZRWZpQUJCU0FGUWVBQWFpQUJJQXBDQUVLQWdJQ0FnSURBdThBQUVGMGdCU2tEYUNJS1FqQ0lwMEg0QUdzaEJpQUZLUU5nQ3lFRUlBZEZCRUFnQlVIUUFHb2dBeUFKUWdCQ2dJQ0FnSUNBd0x2QUFCQmRJQVVwQTFnaUNVSXdpS2RCK0FCcklRY2dCU2tEVUNFREN5QUpRdi8vLy8vLy96K0RRb0NBZ0lDQWdNQUFoQ0VKSUFwQy8vLy8vLy8vUDROQ2dJQ0FnSUNBd0FDRUlRb2dCaUFIU2dSQUEwQUNmaUFLSUFsOUlBTWdCRmF0ZlNJTFFnQlpCRUFnQ3lBRUlBTjlJZ1NFVUFSQUlBVkJJR29nQVNBQ1FnQkNBQkJkSUFVcEF5Z2hBaUFGS1FNZ0lRUU1CUXNnQzBJQmhpQUVRaitJaEF3QkN5QUtRZ0dHSUFSQ1A0aUVDeUVLSUFSQ0FZWWhCQ0FHUVFGcklnWWdCMG9OQUFzZ0J5RUdDd0pBSUFvZ0NYMGdBeUFFVnExOUlnbENBRk1FUUNBS0lRa01BUXNnQ1NBRUlBTjlJZ1NFUWdCU0RRQWdCVUV3YWlBQklBSkNBRUlBRUYwZ0JTa0RPQ0VDSUFVcEF6QWhCQXdCQ3lBSlF2Ly8vLy8vL3o5WUJFQURRQ0FFUWorSUlRRWdCa0VCYXlFR0lBUkNBWVloQkNBQklBbENBWWFFSWdsQ2dJQ0FnSUNBd0FCVURRQUxDeUFJUVlDQUFuRWhCeUFHUVFCTUJFQWdCVUZBYXlBRUlBbEMvLy8vLy8vL1A0TWdCa0g0QUdvZ0IzS3RRakNHaEVJQVFvQ0FnSUNBZ01ERFB4QmRJQVVwQTBnaEFpQUZLUU5BSVFRTUFRc2dDVUwvLy8vLy8vOC9neUFHSUFkeXJVSXdob1FoQWdzZ0FDQUVOd01BSUFBZ0FqY0RDQ0FGUVlBQmFpUUFDNzhDQVFGL0l3QkIwQUJySWdRa0FBSkFJQU5CZ0lBQlRnUkFJQVJCSUdvZ0FTQUNRZ0JDZ0lDQWdJQ0FnUC8vQUJCZElBUXBBeWdoQWlBRUtRTWdJUUVnQTBILy93RkpCRUFnQTBILy93QnJJUU1NQWdzZ0JFRVFhaUFCSUFKQ0FFS0FnSUNBZ0lDQS8vOEFFRjBnQTBIOS93SWdBMEg5L3dKSUcwSCsvd0ZySVFNZ0JDa0RHQ0VDSUFRcEF4QWhBUXdCQ3lBRFFZR0FmMG9OQUNBRVFVQnJJQUVnQWtJQVFvQ0FnSUNBZ0lBNUVGMGdCQ2tEU0NFQ0lBUXBBMEFoQVNBRFFmU0Fma3NFUUNBRFFZMy9BR29oQXd3QkN5QUVRVEJxSUFFZ0FrSUFRb0NBZ0lDQWdJQTVFRjBnQTBIb2dYMGdBMEhvZ1gxS0cwR2EvZ0ZxSVFNZ0JDa0RPQ0VDSUFRcEF6QWhBUXNnQkNBQklBSkNBQ0FEUWYvL0FHcXRRakNHRUYwZ0FDQUVLUU1JTndNSUlBQWdCQ2tEQURjREFDQUVRZEFBYWlRQUN6VUFJQUFnQVRjREFDQUFJQUpDLy8vLy8vLy9QNE1nQkVJd2lLZEJnSUFDY1NBQ1FqQ0lwMEgvL3dGeGNxMUNNSWFFTndNSUN4QUFJQUFnQVNBQ1FRQkJBQkNJQlJvTEVnQWdBQkRkQkNJQVFmaVFBellDQUNBQUM4UUNBQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFJQUZCQ1dzT0VnQUtDd3dLQ3dJREJBVU1Dd3dNQ2dzSENBa0xJQUlnQWlnQ0FDSUJRUVJxTmdJQUlBQWdBU2dDQURZQ0FBOExBQXNnQWlBQ0tBSUFJZ0ZCQkdvMkFnQWdBQ0FCTWdFQU53TUFEd3NnQWlBQ0tBSUFJZ0ZCQkdvMkFnQWdBQ0FCTXdFQU53TUFEd3NnQWlBQ0tBSUFJZ0ZCQkdvMkFnQWdBQ0FCTUFBQU53TUFEd3NnQWlBQ0tBSUFJZ0ZCQkdvMkFnQWdBQ0FCTVFBQU53TUFEd3NBQ3lBQ0lBSW9BZ0JCQjJwQmVIRWlBVUVJYWpZQ0FDQUFJQUVyQXdBNUF3QVBDeUFBSUFJZ0F4RUNBQXNQQ3lBQ0lBSW9BZ0FpQVVFRWFqWUNBQ0FBSUFFMEFnQTNBd0FQQ3lBQ0lBSW9BZ0FpQVVFRWFqWUNBQ0FBSUFFMUFnQTNBd0FQQ3lBQ0lBSW9BZ0JCQjJwQmVIRWlBVUVJYWpZQ0FDQUFJQUVwQXdBM0F3QUxiUUVFZnlBQUtBSUFMQUFBRU1RQlJRUkFRUUFQQ3dOQUlBQW9BZ0FoQTBGL0lRRWdBa0hNbWJQbUFFMEVRRUYvSUFNc0FBQkJNR3NpQkNBQ1FRcHNJZ0ZxSUFSQi8vLy8vd2NnQVd0S0d5RUJDeUFBSUFOQkFXbzJBZ0FnQVNFQ0lBTXNBQUVReEFFTkFBc2dBZ3VXRXdJUmZ3RitJd0JCMEFCcklnY2tBQ0FISUFFMkFrd2dCMEUzYWlFV0lBZEJPR29oRWtFQUlRRUNRQUpBQWtBQ1FBTkFJQUZCLy8vLy93Y2dEV3RLRFFFZ0FTQU5haUVOSUFjb0Frd2lEQ0VCQWtBQ1FBSkFJQXd0QUFBaUN3UkFBMEFDUUFKQUlBdEIvd0Z4SWdoRkJFQWdBU0VMREFFTElBaEJKVWNOQVNBQklRc0RRQ0FCTFFBQlFTVkhEUUVnQnlBQlFRSnFJZ2cyQWt3Z0MwRUJhaUVMSUFFdEFBSWhDaUFJSVFFZ0NrRWxSZzBBQ3dzZ0N5QU1heUlCUWYvLy8vOEhJQTFySWhkS0RRY2dBQVJBSUFBZ0RDQUJFSWdCQ3lBQkRRWkJmeUVRUVFFaENDQUhLQUpNTEFBQkVNUUJJUUVnQnlnQ1RDRUtBa0FnQVVVTkFDQUtMUUFDUVNSSERRQWdDaXdBQVVFd2F5RVFRUUVoRkVFRElRZ0xJQWNnQ0NBS2FpSUJOZ0pNUVFBaERnSkFJQUVzQUFBaUUwRWdheUlLUVI5TEJFQWdBU0VJREFFTElBRWhDRUVCSUFwMElnbEJpZEVFY1VVTkFBTkFJQWNnQVVFQmFpSUlOZ0pNSUFrZ0RuSWhEaUFCTEFBQkloTkJJR3NpQ2tFZ1R3MEJJQWdoQVVFQklBcDBJZ2xCaWRFRWNRMEFDd3NDUUNBVFFTcEdCRUFnQndKL0FrQWdDQ3dBQVJERUFVVU5BQ0FIS0FKTUlnRXRBQUpCSkVjTkFDQUJMQUFCUVFKMElBUnFRY0FCYTBFS05nSUFJQUVzQUFGQkEzUWdBMnBCZ0FOcktBSUFJUTlCQVNFVUlBRkJBMm9NQVFzZ0ZBMEdRUUFoRkVFQUlROGdBQVJBSUFJZ0FpZ0NBQ0lCUVFScU5nSUFJQUVvQWdBaER3c2dCeWdDVEVFQmFnc2lBVFlDVENBUFFRQk9EUUZCQUNBUGF5RVBJQTVCZ01BQWNpRU9EQUVMSUFkQnpBQnFFSVlGSWc5QkFFZ05DQ0FIS0FKTUlRRUxRUUFoQ0VGL0lRa0NmMEVBSUFFdEFBQkJMa2NOQUJvZ0FTMEFBVUVxUmdSQUlBY0Nmd0pBSUFFc0FBSVF4QUZGRFFBZ0J5Z0NUQ0lCTFFBRFFTUkhEUUFnQVN3QUFrRUNkQ0FFYWtIQUFXdEJDallDQUNBQkxBQUNRUU4wSUFOcVFZQURheWdDQUNFSklBRkJCR29NQVFzZ0ZBMEdJQUFFZnlBQ0lBSW9BZ0FpQVVFRWFqWUNBQ0FCS0FJQUJVRUFDeUVKSUFjb0FreEJBbW9MSWdFMkFrd2dDVUYvYzBFZmRnd0JDeUFISUFGQkFXbzJBa3dnQjBITUFHb1FoZ1VoQ1NBSEtBSk1JUUZCQVFzaEZRTkFJQWdoRVVFY0lRc2dBU3dBQUVIN0FHdEJSa2tOQ1NBSElBRkJBV29pRXpZQ1RDQUJMQUFBSVFnZ0V5RUJJQWdnRVVFNmJHcEJ6NEVEYWkwQUFDSUlRUUZyUVFoSkRRQUxBa0FDUUNBSVFSdEhCRUFnQ0VVTkN5QVFRUUJPQkVBZ0JDQVFRUUowYWlBSU5nSUFJQWNnQXlBUVFRTjBhaWtEQURjRFFBd0NDeUFBUlEwSUlBZEJRR3NnQ0NBQ0lBWVFoUVVnQnlnQ1RDRVREQUlMSUJCQkFFNE5DZ3RCQUNFQklBQkZEUWNMSUE1Qi8vOTdjU0lLSUE0Z0RrR0F3QUJ4R3lFSVFRQWhEa0dlNHdFaEVDQVNJUXNDUUFKQUFrQUNmd0pBQWtBQ1FBSkFBbjhDUUFKQUFrQUNRQUpBQWtBQ1FDQVRRUUZyTEFBQUlnRkJYM0VnQVNBQlFROXhRUU5HR3lBQklCRWJJZ0ZCMkFCckRpRUVGQlFVRkJRVUZCUU9GQThHRGc0T0ZBWVVGQlFVQWdVREZCUUpGQUVVRkFRQUN3SkFJQUZCd1FCckRnY09GQXNVRGc0T0FBc2dBVUhUQUVZTkNRd1RDeUFIS1FOQUlSaEJudU1CREFVTFFRQWhBUUpBQWtBQ1FBSkFBa0FDUUFKQUlCRkIvd0Z4RGdnQUFRSURCQm9GQmhvTElBY29Ba0FnRFRZQ0FBd1pDeUFIS0FKQUlBMDJBZ0FNR0FzZ0J5Z0NRQ0FOckRjREFBd1hDeUFIS0FKQUlBMDdBUUFNRmdzZ0J5Z0NRQ0FOT2dBQURCVUxJQWNvQWtBZ0RUWUNBQXdVQ3lBSEtBSkFJQTJzTndNQURCTUxJQWxCQ0NBSlFRaExHeUVKSUFoQkNISWhDRUg0QUNFQkN5QVNJUW9nQVVFZ2NTRVJJQWNwQTBBaUdGQkZCRUFEUUNBS1FRRnJJZ29nR0tkQkQzRkI0SVVEYWkwQUFDQVJjam9BQUNBWVFnOVdJUXdnR0VJRWlDRVlJQXdOQUFzTElBb2hEQ0FJUVFoeFJTQUhLUU5BVUhJTkF5QUJRUVIyUVo3akFXb2hFRUVDSVE0TUF3c2dFaUVCSUFjcEEwQWlHRkJGQkVBRFFDQUJRUUZySWdFZ0dLZEJCM0ZCTUhJNkFBQWdHRUlIVmlFS0lCaENBNGdoR0NBS0RRQUxDeUFCSVF3Z0NFRUljVVVOQWlBSklCSWdER3NpQVVFQmFpQUJJQWxJR3lFSkRBSUxJQWNwQTBBaUdFSUFVd1JBSUFkQ0FDQVlmU0lZTndOQVFRRWhEa0dlNHdFTUFRc2dDRUdBRUhFRVFFRUJJUTVCbitNQkRBRUxRYURqQVVHZTR3RWdDRUVCY1NJT0d3c2hFQ0FZSUJJUW9nSWhEQXNnRlVFQUlBbEJBRWdiRFE0Z0NFSC8vM3R4SUFnZ0ZSc2hDQ0FIS1FOQUloaENBRklnQ1hKRkJFQWdFaUlNSVF0QkFDRUpEQXdMSUFrZ0dGQWdFaUFNYTJvaUFTQUJJQWxJR3lFSkRBc0xJQWNvQWtBaUFVR1Vud0lnQVJzaURDSUxRUUFnQ1VILy8vLy9CeUFKUWYvLy8vOEhTUnNpQ0JEWkF5SUJJQXRySUFnZ0FSc2lBU0FNYWlFTElBbEJBRTRFUUNBS0lRZ2dBU0VKREFzTElBb2hDQ0FCSVFrZ0N5MEFBQTBOREFvTElBa0VRQ0FIS0FKQURBSUxRUUFoQVNBQVFTQWdEMEVBSUFnUWpBRU1BZ3NnQjBFQU5nSU1JQWNnQnlrRFFENENDQ0FISUFkQkNHb2lBVFlDUUVGL0lRa2dBUXNoQzBFQUlRRUNRQU5BSUFzb0FnQWlDa1VOQVNBSFFRUnFJQW9RK2dRaURFRUFTQ0lLSUF3Z0NTQUJhMHR5UlFSQUlBdEJCR29oQ3lBSklBRWdER29pQVVzTkFRd0NDd3NnQ2cwTkMwRTlJUXNnQVVFQVNBMExJQUJCSUNBUElBRWdDQkNNQVNBQlJRUkFRUUFoQVF3QkMwRUFJUWtnQnlnQ1FDRUxBMEFnQ3lnQ0FDSUtSUTBCSUFkQkJHb2dDaEQ2QkNJS0lBbHFJZ2tnQVVzTkFTQUFJQWRCQkdvZ0NoQ0lBU0FMUVFScUlRc2dBU0FKU3cwQUN3c2dBRUVnSUE4Z0FTQUlRWURBQUhNUWpBRWdEeUFCSUFFZ0QwZ2JJUUVNQ0FzZ0ZVRUFJQWxCQUVnYkRRaEJQU0VMSUFBZ0J5c0RRQ0FQSUFrZ0NDQUJJQVVSTGdBaUFVRUFUZzBIREFrTElBY2dCeWtEUUR3QU4wRUJJUWtnRmlFTUlBb2hDQXdFQ3lBSElBRkJBV29pQ0RZQ1RDQUJMUUFCSVFzZ0NDRUJEQUFMQUFzZ0FBMEhJQlJGRFFKQkFTRUJBMEFnQkNBQlFRSjBhaWdDQUNJQUJFQWdBeUFCUVFOMGFpQUFJQUlnQmhDRkJVRUJJUTBnQVVFQmFpSUJRUXBIRFFFTUNRc0xRUUVoRFNBQlFRcFBEUWNEUUNBRUlBRkJBblJxS0FJQURRRWdBVUVCYWlJQlFRcEhEUUFMREFjTFFSd2hDd3dFQ3lBSklBc2dER3NpRVNBSklCRktHeUlLUWYvLy8vOEhJQTVyU2cwQ1FUMGhDeUFQSUFvZ0Rtb2lDU0FKSUE5SUd5SUJJQmRLRFFNZ0FFRWdJQUVnQ1NBSUVJd0JJQUFnRUNBT0VJZ0JJQUJCTUNBQklBa2dDRUdBZ0FSekVJd0JJQUJCTUNBS0lCRkJBQkNNQVNBQUlBd2dFUkNJQVNBQVFTQWdBU0FKSUFoQmdNQUFjeENNQVF3QkN3dEJBQ0VOREFNTFFUMGhDd3RCOEpZRUlBczJBZ0FMUVg4aERRc2dCMEhRQUdva0FDQU5DOVFDQVFSL0l3QkIwQUZySWdVa0FDQUZJQUkyQXN3QklBVkJvQUZxSWdKQkFFRW9FRG9hSUFVZ0JTZ0N6QUUyQXNnQkFrQkJBQ0FCSUFWQnlBRnFJQVZCMEFCcUlBSWdBeUFFRUljRlFRQklCRUJCZnlFQkRBRUxJQUFvQWt4QkFFNGhCaUFBS0FJQUlRY2dBQ2dDU0VFQVRBUkFJQUFnQjBGZmNUWUNBQXNDZndKQUFrQWdBQ2dDTUVVRVFDQUFRZEFBTmdJd0lBQkJBRFlDSENBQVFnQTNBeEFnQUNnQ0xDRUlJQUFnQlRZQ0xBd0JDeUFBS0FJUURRRUxRWDhnQUJDWkJRMEJHZ3NnQUNBQklBVkJ5QUZxSUFWQjBBQnFJQVZCb0FGcUlBTWdCQkNIQlFzaEFpQUlCRUFnQUVFQVFRQWdBQ2dDSkJFRUFCb2dBRUVBTmdJd0lBQWdDRFlDTENBQVFRQTJBaHdnQUNnQ0ZDRUJJQUJDQURjREVDQUNRWDhnQVJzaEFnc2dBQ0FBS0FJQUlnQWdCMEVnY1hJMkFnQkJmeUFDSUFCQklIRWJJUUVnQmtVTkFBc2dCVUhRQVdva0FDQUJDMzhDQVg4QmZpQUF2U0lEUWpTSXAwSC9EM0VpQWtIL0QwY0VmQ0FDUlFSQUlBRWdBRVFBQUFBQUFBQUFBR0VFZjBFQUJTQUFSQUFBQUFBQUFQQkRvaUFCRUlrRklRQWdBU2dDQUVGQWFnczJBZ0FnQUE4TElBRWdBa0grQjJzMkFnQWdBMEwvLy8vLy8vLy9oNEIvZzBLQWdJQ0FnSUNBOEQrRXZ3VWdBQXNMamdJQkEzOENRQ0FCUWY4QmNTSURCRUFnQUVFRGNRUkFBMEFnQUMwQUFDSUNSU0FDSUFGQi93RnhSbklOQXlBQVFRRnFJZ0JCQTNFTkFBc0xBa0FnQUNnQ0FDSUNRWDl6SUFKQmdZS0VDR3R4UVlDQmdvUjRjUTBBSUFJZ0EwR0Jnb1FJYkNJRGN5SUVRWDl6SUFSQmdZS0VDR3R4UVlDQmdvUjRjUTBBQTBBZ0FDZ0NCQ0VDSUFCQkJHb2hBQ0FDUVlHQ2hBaHJJQUpCZjNOeFFZQ0Jnb1I0Y1EwQklBSWdBM01pQkVGL2N5QUVRWUdDaEFocmNVR0FnWUtFZUhGRkRRQUxDeUFDUWY4QmNTSUNSU0FDSUFGQi93RnhSbklOQVFOQUFrQWdBRUVCYWlFQ0lBQXRBQUVpQTBVTkFDQUNJUUFnQXlBQlFmOEJjVWNOQVFzTElBSVBDeUFBRUtBQklBQnFEd3NnQUFzNkFDQUFLQUpNUVFCT0JFQWdBRUlBUVFBUWhnTWdBQ0FBS0FJQVFWOXhOZ0lBRHdzZ0FFSUFRUUFRaGdNZ0FDQUFLQUlBUVY5eE5nSUFDeHNBUVFBZ0FHc2dBSEZCcWN5dk8yeEJHM1pCa1BFQ2Fpd0FBQXVrQVFFRmZ5TUFRWUFDYXlJRUpBQUNRQ0FDUVFKSURRQWdBU0FDUVFKMGFpSUhJQVEyQWdBZ0FFVU5BQ0FFSVFNRFFDQURJQUVvQWdBZ0FFR0FBaUFBUVlBQ1NSc2lCUkEvR2tFQUlRTURRQ0FCSUFOQkFuUnFJZ1lvQWdBZ0FTQURRUUZxSWdOQkFuUnFLQUlBSUFVUVB4b2dCaUFHS0FJQUlBVnFOZ0lBSUFJZ0EwY05BQXNnQUNBRmF5SUFSUTBCSUFjb0FnQWhBd3dBQ3dBTElBUkJnQUpxSkFBTEtRRUJmeUFBS0FJQVFRRnJFSXdGSWdFRWZ5QUJCU0FBS0FJRUVJd0ZJZ0JCSUdwQkFDQUFHd3NMQ3dBZ0FDQUJRUUVRK3dFTHhRUUJCbjhqQUVIUUFXc2lCQ1FBSUFSQ0FUY0RDQUpBSUFFZ0Ftd2lDRVVOQUNBRUlBSTJBaEFnQkNBQ05nSVVRUUFnQW1zaENTQUNJZ0VoQjBFQ0lRWURRQ0FFUVJCcUlBWkJBblJxSUFFaUJTQUNJQWRxYWlJQk5nSUFJQVpCQVdvaEJpQUZJUWNnQVNBSVNRMEFDd0pBSUFBZ0FDQUlhaUFKYWlJRlR3UkFRUUVoQVF3QkMwRUJJUVpCQVNFQkEwQUNmeUFHUVFOeFFRTkdCRUFnQUNBQ0lBTWdBU0FFUVJCcUVOZ0RJQVJCQ0dwQkFoQ0VBeUFCUVFKcURBRUxBa0FnQkVFUWFpQUJRUUZySWdkQkFuUnFLQUlBSUFVZ0FHdFBCRUFnQUNBQ0lBTWdCRUVJYWlBQlFRQWdCRUVRYWhDREF3d0JDeUFBSUFJZ0F5QUJJQVJCRUdvUTJBTUxJQUZCQVVZRVFDQUVRUWhxUVFFUWdnTkJBQXdCQ3lBRVFRaHFJQWNRZ2dOQkFRc2hBU0FFSUFRb0FnaEJBWElpQmpZQ0NDQUFJQUpxSWdBZ0JVa05BQXNMSUFBZ0FpQURJQVJCQ0dvZ0FVRUFJQVJCRUdvUWd3TUNRQ0FCUVFGSERRQWdCQ2dDQ0VFQlJ3MEFJQVFvQWd4RkRRRUxBMEFDZnlBQlFRRk1CRUFnQkVFSWFpSUZJQVVRamdVaUJSQ0VBeUFCSUFWcURBRUxJQVJCQ0dvaUJrRUNFSUlESUFRZ0JDZ0NDRUVIY3pZQ0NDQUdRUUVRaEFNZ0FDQUphaUlISUFSQkVHb2lDQ0FCUVFKcklnVkJBblJxS0FJQWF5QUNJQU1nQmlBQlFRRnJRUUVnQ0JDREF5QUdRUUVRZ2dNZ0JDQUVLQUlJUVFGeU5nSUlJQWNnQWlBRElBWWdCVUVCSUFnUWd3TWdCUXNoQVNBQUlBbHFJUUFnQkNnQ0NDRUZJQUZCQVVjTkFDQUVLQUlNSUFWQkFVZHlEUUFMQ3lBRVFkQUJhaVFBQzBZQkFYOENmMEVBSUFCQkYzWkIvd0Z4SWdGQi93QkpEUUFhUVFJZ0FVR1dBVXNOQUJwQkFFRUJRWllCSUFGcmRDSUJRUUZySUFCeERRQWFRUUZCQWlBQUlBRnhHd3NMRXdBZ0FFRUJkRUdBZ0lBSWFrR0JnSUFJU1FzVkFRRi9Jd0JCRUdzaUFTQUFPQUlNSUFFcUFnd0xFQUFnQVl3Z0FTQUFHeENUQlNBQmxBc01BQ0FBSUFDVElnQWdBSlVMY0FJQ2Z3RitJQUFvQWlnaEFrRUJJUUVDUUNBQVFnQWdBQzBBQUVHQUFYRUVmMEVCUVFJZ0FDZ0NGQ0FBS0FJY1Joc0ZRUUVMSUFJUkV3QWlBMElBVXcwQUlBTWdBQ2dDQ0NJQkJIOGdBRUVFYWdVZ0FDZ0NIQ0lCUlEwQklBQkJGR29MS0FJQUlBRnJySHdoQXdzZ0F3c3JBUUYrQWtBZ0Fhd2hBeUFBS0FKTVFRQklCRUFnQUNBRElBSVFoZ01NQVFzZ0FDQURJQUlRaGdNTEN3d0FJQUFnQUNnQ0FCQ1BCUXRaQVFGL0lBQWdBQ2dDU0NJQlFRRnJJQUZ5TmdKSUlBQW9BZ0FpQVVFSWNRUkFJQUFnQVVFZ2NqWUNBRUYvRHdzZ0FFSUFOd0lFSUFBZ0FDZ0NMQ0lCTmdJY0lBQWdBVFlDRkNBQUlBRWdBQ2dDTUdvMkFoQkJBQXQxQWdKOEFYNGdBQUorRUJRaUFVUUFBQUFBQUVDUFFLTWlBcGxFQUFBQUFBQUE0RU5qQkVBZ0FyQU1BUXRDZ0lDQWdJQ0FnSUNBZndzaUF6NENBQ0FBQW44Z0FTQURRdWdIZnJtaFJBQUFBQUFBUUk5QW9pSUJtVVFBQUFBQUFBRGdRV01FUUNBQnFnd0JDMEdBZ0lDQWVBczJBZ1FMUUFJQmZ3RjhBbjhRRkVRQUFBQUFBRUNQUUtNaUFwbEVBQUFBQUFBQTRFRmpCRUFnQXFvTUFRdEJnSUNBZ0hnTElRRWdBQVJBSUFBZ0FUWUNBQXNnQVF1VkF3SURmd044SXdCQkVHc2lBeVFBQWtBZ0FMd2lCRUgvLy8vL0IzRWlBa0hhbjZUdUJFMEVRQ0FCSUFDN0lnWWdCa1NEeU1sdE1GL2tQNkpFQUFBQUFBQUFPRU9nUkFBQUFBQUFBRGpEb0NJRlJBQUFBRkQ3SWZtL29xQWdCVVJqWWhwaHRCQlJ2cUtnSWdjNUF3QWdCMFFBQUFCZyt5SHB2Mk1oQkFKL0lBV1pSQUFBQUFBQUFPQkJZd1JBSUFXcURBRUxRWUNBZ0lCNEN5RUNJQVFFUUNBQklBWWdCVVFBQUFBQUFBRHd2NkFpQlVRQUFBQlEreUg1djZLZ0lBVkVZMklhWWJRUVViNmlvRGtEQUNBQ1FRRnJJUUlNQWdzZ0IwUUFBQUJnK3lIcFAyUkZEUUVnQVNBR0lBVkVBQUFBQUFBQThEK2dJZ1ZFQUFBQVVQc2grYitpb0NBRlJHTmlHbUcwRUZHK29xQTVBd0FnQWtFQmFpRUNEQUVMSUFKQmdJQ0EvQWRQQkVBZ0FTQUFJQUNUdXprREFFRUFJUUlNQVFzZ0F5QUNJQUpCRjNaQmxnRnJJZ0pCRjNScnZyczVBd2dnQTBFSWFpQURJQUpCQVVFQUVKNEZJUUlnQXlzREFDRUZJQVJCQUVnRVFDQUJJQVdhT1FNQVFRQWdBbXNoQWd3QkN5QUJJQVU1QXdBTElBTkJFR29rQUNBQ0M5VUtBd1I4Qlg4QmZpTUFRVEJySWdja0FBSkFBa0FDUUNBQXZTSUxRaUNJcHlJR1FmLy8vLzhIY1NJSVFmclV2WUFFVFFSQUlBWkIvLzgvY1VIN3d5UkdEUUVnQ0VIOHNvdUFCRTBFUUNBTFFnQlpCRUFnQVNBQVJBQUFRRlQ3SWZtL29DSUFSREZqWWhwaHROQzlvQ0lDT1FNQUlBRWdBQ0FDb1VReFkySWFZYlRRdmFBNUF3aEJBU0VHREFVTElBRWdBRVFBQUVCVSt5SDVQNkFpQUVReFkySWFZYlRRUGFBaUFqa0RBQ0FCSUFBZ0FxRkVNV05pR21HMDBEMmdPUU1JUVg4aEJnd0VDeUFMUWdCWkJFQWdBU0FBUkFBQVFGVDdJUW5Bb0NJQVJERmpZaHBodE9DOW9DSUNPUU1BSUFFZ0FDQUNvVVF4WTJJYVliVGd2YUE1QXdoQkFpRUdEQVFMSUFFZ0FFUUFBRUJVK3lFSlFLQWlBRVF4WTJJYVliVGdQYUFpQWprREFDQUJJQUFnQXFGRU1XTmlHbUcwNEQyZ09RTUlRWDRoQmd3REN5QUlRYnVNOFlBRVRRUkFJQWhCdlB2WGdBUk5CRUFnQ0VIOHNzdUFCRVlOQWlBTFFnQlpCRUFnQVNBQVJBQUFNSDk4MlJMQW9DSUFSTXFVazZlUkR1bTlvQ0lDT1FNQUlBRWdBQ0FDb1VUS2xKT25rUTdwdmFBNUF3aEJBeUVHREFVTElBRWdBRVFBQURCL2ZOa1NRS0FpQUVUS2xKT25rUTdwUGFBaUFqa0RBQ0FCSUFBZ0FxRkV5cFNUcDVFTzZUMmdPUU1JUVgwaEJnd0VDeUFJUWZ2RDVJQUVSZzBCSUF0Q0FGa0VRQ0FCSUFCRUFBQkFWUHNoR2NDZ0lnQkVNV05pR21HMDhMMmdJZ0k1QXdBZ0FTQUFJQUtoUkRGallocGh0UEM5b0RrRENFRUVJUVlNQkFzZ0FTQUFSQUFBUUZUN0lSbEFvQ0lBUkRGallocGh0UEE5b0NJQ09RTUFJQUVnQUNBQ29VUXhZMklhWWJUd1BhQTVBd2hCZkNFR0RBTUxJQWhCK3NQa2lRUkxEUUVMSUFBZ0FFU0R5TWx0TUYva1A2SkVBQUFBQUFBQU9FT2dSQUFBQUFBQUFEakRvQ0lEUkFBQVFGVDdJZm0vb3FBaUFpQURSREZqWWhwaHROQTlvaUlFb1NJRlJCZ3RSRlQ3SWVtL1l5RUpBbjhnQTVsRUFBQUFBQUFBNEVGakJFQWdBNm9NQVF0QmdJQ0FnSGdMSVFZQ1FDQUpCRUFnQmtFQmF5RUdJQU5FQUFBQUFBQUE4TCtnSWdORU1XTmlHbUcwMEQyaUlRUWdBQ0FEUkFBQVFGVDdJZm0vb3FBaEFnd0JDeUFGUkJndFJGVDdJZWsvWkVVTkFDQUdRUUZxSVFZZ0EwUUFBQUFBQUFEd1A2QWlBMFF4WTJJYVliVFFQYUloQkNBQUlBTkVBQUJBVlBzaCtiK2lvQ0VDQ3lBQklBSWdCS0VpQURrREFBSkFJQWhCRkhZaUNTQUF2VUkwaUtkQi93OXhhMEVSU0EwQUlBRWdBaUFEUkFBQVlCcGh0TkE5b2lJQW9TSUZJQU5FYzNBRExvb1pvenVpSUFJZ0JhRWdBS0doSWdTaElnQTVBd0FnQ1NBQXZVSTBpS2RCL3c5eGEwRXlTQVJBSUFVaEFnd0JDeUFCSUFVZ0EwUUFBQUF1aWhtak82SWlBS0VpQWlBRFJNRkpJQ1dhZzNzNW9pQUZJQUtoSUFDaG9TSUVvU0lBT1FNQUN5QUJJQUlnQUtFZ0JLRTVBd2dNQVFzZ0NFR0FnTUQvQjA4RVFDQUJJQUFnQUtFaUFEa0RBQ0FCSUFBNUF3aEJBQ0VHREFFTElBdEMvLy8vLy8vLy93ZURRb0NBZ0lDQWdJQ3d3UUNFdnlFQVFRQWhCa0VCSVFrRFFDQUhRUkJxSUFaQkEzUnFBbjhnQUpsRUFBQUFBQUFBNEVGakJFQWdBS29NQVF0QmdJQ0FnSGdMdHlJQ09RTUFJQUFnQXFGRUFBQUFBQUFBY0VHaUlRQkJBU0VHSUFsQkFYRWhDa0VBSVFrZ0NnMEFDeUFISUFBNUF5QUNRQ0FBUkFBQUFBQUFBQUFBWWdSQVFRTWhDUXdCQzBFQ0lRWURRQ0FIUVJCcUlBWWlDVUVCYXlJR1FRTjBhaXNEQUVRQUFBQUFBQUFBQUdFTkFBc0xJQWRCRUdvZ0J5QUlRUlIyUVpZSWF5QUpRUUVRbmdVaEJpQUhLd01BSVFBZ0MwSUFVd1JBSUFFZ0FKbzVBd0FnQVNBSEt3TUltamtEQ0VFQUlBWnJJUVlNQVFzZ0FTQUFPUU1BSUFFZ0J5c0RDRGtEQ0FzZ0IwRXdhaVFBSUFZTHhCRUNBM3dRZnlNQVFiQUVheUlKSkFBZ0FpQUNRUU5yUVJodElnaEJBQ0FJUVFCS0d5SVNRV2hzYWlFTUlBUkJBblJCc05NQ2FpZ0NBQ0lOSUFOQkFXc2lDMnBCQUU0RVFDQURJQTFxSVFnZ0VpQUxheUVDQTBBZ0NVSEFBbW9nQ2tFRGRHb2dBa0VBU0FSOFJBQUFBQUFBQUFBQUJTQUNRUUowUWNEVEFtb29BZ0MzQ3prREFDQUNRUUZxSVFJZ0NrRUJhaUlLSUFoSERRQUxDeUFNUVJocklROUJBQ0VJSUExQkFDQU5RUUJLR3lFS0lBTkJBRXdoRGdOQUFrQWdEZ1JBUkFBQUFBQUFBQUFBSVFVTUFRc2dDQ0FMYWlFUlFRQWhBa1FBQUFBQUFBQUFBQ0VGQTBBZ0FDQUNRUU4wYWlzREFDQUpRY0FDYWlBUklBSnJRUU4wYWlzREFLSWdCYUFoQlNBQ1FRRnFJZ0lnQTBjTkFBc0xJQWtnQ0VFRGRHb2dCVGtEQUNBSUlBcEdJUUlnQ0VFQmFpRUlJQUpGRFFBTFFTOGdER3NoRkVFd0lBeHJJUkVnREVFWmF5RVZJQTBoQ0FKQUEwQWdDU0FJUVFOMGFpc0RBQ0VGUVFBaEFpQUlJUW9nQ0VFQVRDSVFSUVJBQTBBZ0NVSGdBMm9nQWtFQ2RHb0Nmd0ovSUFWRUFBQUFBQUFBY0Q2aUlnYVpSQUFBQUFBQUFPQkJZd1JBSUFhcURBRUxRWUNBZ0lCNEM3Y2lCa1FBQUFBQUFBQnd3YUlnQmFBaUJabEVBQUFBQUFBQTRFRmpCRUFnQmFvTUFRdEJnSUNBZ0hnTE5nSUFJQWtnQ2tFQmF5SUtRUU4wYWlzREFDQUdvQ0VGSUFKQkFXb2lBaUFJUncwQUN3c0NmeUFGSUE4UTdBRWlCU0FGUkFBQUFBQUFBTUEvb3B4RUFBQUFBQUFBSU1DaW9DSUZtVVFBQUFBQUFBRGdRV01FUUNBRnFnd0JDMEdBZ0lDQWVBc2hEaUFGSUE2M29TRUZBa0FDUUFKQUFuOGdEMEVBVENJV1JRUkFJQWhCQW5RZ0NXb2lBaUFDS0FMY0F5SUNJQUlnRVhVaUFpQVJkR3NpQ2pZQzNBTWdBaUFPYWlFT0lBb2dGSFVNQVFzZ0R3MEJJQWhCQW5RZ0NXb29BdHdEUVJkMUN5SUxRUUJNRFFJTUFRdEJBaUVMSUFWRUFBQUFBQUFBNEQ5bURRQkJBQ0VMREFFTFFRQWhBa0VBSVFvZ0VFVUVRQU5BSUFsQjRBTnFJQUpCQW5ScUloY29BZ0FoRUVILy8vOEhJUk1DZndKQUlBb05BRUdBZ0lBSUlSTWdFQTBBUVFBTUFRc2dGeUFUSUJCck5nSUFRUUVMSVFvZ0FrRUJhaUlDSUFoSERRQUxDd0pBSUJZTkFFSC8vLzhESVFJQ1FBSkFJQlVPQWdFQUFndEIvLy8vQVNFQ0N5QUlRUUowSUFscUloQWdFQ2dDM0FNZ0FuRTJBdHdEQ3lBT1FRRnFJUTRnQzBFQ1J3MEFSQUFBQUFBQUFQQS9JQVdoSVFWQkFpRUxJQXBGRFFBZ0JVUUFBQUFBQUFEd1B5QVBFT3dCb1NFRkN5QUZSQUFBQUFBQUFBQUFZUVJBUVFBaENpQUlJUUlDUUNBSUlBMU1EUUFEUUNBSlFlQURhaUFDUVFGcklnSkJBblJxS0FJQUlBcHlJUW9nQWlBTlNnMEFDeUFLUlEwQUlBOGhEQU5BSUF4QkdHc2hEQ0FKUWVBRGFpQUlRUUZySWdoQkFuUnFLQUlBUlEwQUN3d0RDMEVCSVFJRFFDQUNJZ3BCQVdvaEFpQUpRZUFEYWlBTklBcHJRUUowYWlnQ0FFVU5BQXNnQ0NBS2FpRUtBMEFnQ1VIQUFtb2dBeUFJYWlJTFFRTjBhaUFJUVFGcUlnZ2dFbXBCQW5SQndOTUNhaWdDQUxjNUF3QkJBQ0VDUkFBQUFBQUFBQUFBSVFVZ0EwRUFTZ1JBQTBBZ0FDQUNRUU4wYWlzREFDQUpRY0FDYWlBTElBSnJRUU4wYWlzREFLSWdCYUFoQlNBQ1FRRnFJZ0lnQTBjTkFBc0xJQWtnQ0VFRGRHb2dCVGtEQUNBSUlBcElEUUFMSUFvaENBd0JDd3NDUUNBRlFSZ2dER3NRN0FFaUJVUUFBQUFBQUFCd1FXWUVRQ0FKUWVBRGFpQUlRUUowYWdKL0FuOGdCVVFBQUFBQUFBQndQcUlpQnBsRUFBQUFBQUFBNEVGakJFQWdCcW9NQVF0QmdJQ0FnSGdMSWdLM1JBQUFBQUFBQUhEQm9pQUZvQ0lGbVVRQUFBQUFBQURnUVdNRVFDQUZxZ3dCQzBHQWdJQ0FlQXMyQWdBZ0NFRUJhaUVJREFFTEFuOGdCWmxFQUFBQUFBQUE0RUZqQkVBZ0Jhb01BUXRCZ0lDQWdIZ0xJUUlnRHlFTUN5QUpRZUFEYWlBSVFRSjBhaUFDTmdJQUMwUUFBQUFBQUFEd1B5QU1FT3dCSVFVQ1FDQUlRUUJJRFFBZ0NDRURBMEFnQ1NBRElnQkJBM1JxSUFVZ0NVSGdBMm9nQTBFQ2RHb29BZ0Mzb2prREFDQURRUUZySVFNZ0JVUUFBQUFBQUFCd1BxSWhCU0FBRFFBTElBaEJBRWdOQUNBSUlRSURRQ0FJSUFJaUFHc2hBMFFBQUFBQUFBQUFBQ0VGUVFBaEFnTkFBa0FnQWtFRGRFR1E2UUpxS3dNQUlBa2dBQ0FDYWtFRGRHb3JBd0NpSUFXZ0lRVWdBaUFOVGcwQUlBSWdBMGtoRENBQ1FRRnFJUUlnREEwQkN3c2dDVUdnQVdvZ0EwRURkR29nQlRrREFDQUFRUUZySVFJZ0FFRUFTZzBBQ3dzQ1FBSkFBa0FDUUFKQUlBUU9CQUVDQWdBRUMwUUFBQUFBQUFBQUFDRUdBa0FnQ0VFQVRBMEFJQWxCb0FGcUlBaEJBM1JxS3dNQUlRVWdDQ0VDQTBBZ0NVR2dBV29pQXlBQ1FRTjBhaUFGSUFNZ0FrRUJheUlBUVFOMGFpSURLd01BSWdjZ0J5QUZvQ0lGb2FBNUF3QWdBeUFGT1FNQUlBSkJBVXNoQXlBQUlRSWdBdzBBQ3lBSVFRSklEUUFnQ1VHZ0FXb2dDRUVEZEdvckF3QWhCU0FJSVFJRFFDQUpRYUFCYWlJRElBSkJBM1JxSUFVZ0F5QUNRUUZySWdCQkEzUnFJZ01yQXdBaUJpQUdJQVdnSWdXaG9Ea0RBQ0FESUFVNUF3QWdBa0VDU3lFRElBQWhBaUFERFFBTFJBQUFBQUFBQUFBQUlRWWdDRUVCVEEwQUEwQWdCaUFKUWFBQmFpQUlRUU4wYWlzREFLQWhCaUFJUVFKS0lRQWdDRUVCYXlFSUlBQU5BQXNMSUFrckE2QUJJUVVnQ3cwQ0lBRWdCVGtEQUNBSkt3T29BU0VGSUFFZ0Jqa0RFQ0FCSUFVNUF3Z01Bd3RFQUFBQUFBQUFBQUFoQlNBSVFRQk9CRUFEUUNBSUlnQkJBV3NoQ0NBRklBbEJvQUZxSUFCQkEzUnFLd01Bb0NFRklBQU5BQXNMSUFFZ0Jab2dCU0FMR3prREFBd0NDMFFBQUFBQUFBQUFBQ0VGSUFoQkFFNEVRQ0FJSVFNRFFDQURJZ0JCQVdzaEF5QUZJQWxCb0FGcUlBQkJBM1JxS3dNQW9DRUZJQUFOQUFzTElBRWdCWm9nQlNBTEd6a0RBQ0FKS3dPZ0FTQUZvU0VGUVFFaEFpQUlRUUJLQkVBRFFDQUZJQWxCb0FGcUlBSkJBM1JxS3dNQW9DRUZJQUlnQ0VjaEFDQUNRUUZxSVFJZ0FBMEFDd3NnQVNBRm1pQUZJQXNiT1FNSURBRUxJQUVnQlpvNUF3QWdDU3NEcUFFaEJTQUJJQWFhT1FNUUlBRWdCWm81QXdnTElBbEJzQVJxSkFBZ0RrRUhjUXZvQWdJRGZ3TjlJQUM4SWdKQi8vLy8vd2R4SWdGQmdJQ0E1QVJQQkVBZ0FFUGFEOGsvSUFDWUlBQzhRZi8vLy84SGNVR0FnSUQ4QjBzYkR3c0NRQUovSUFGQi8vLy85Z05OQkVCQmZ5QUJRWUNBZ013RFR3MEJHZ3dDQ3lBQWl5RUFJQUZCLy8vZi9BTk5CRUFnQVVILy83LzVBMDBFUUNBQUlBQ1NRd0FBZ0wrU0lBQkRBQUFBUUpLVklRQkJBQXdDQ3lBQVF3QUFnTCtTSUFCREFBQ0FQNUtWSVFCQkFRd0JDeUFCUWYvLzc0QUVUUVJBSUFCREFBREF2NUlnQUVNQUFNQS9sRU1BQUlBL2twVWhBRUVDREFFTFF3QUFnTDhnQUpVaEFFRURDeUVESUFBZ0FKUWlCU0FGbENJRUlBUkRSeExhdlpSRG1NcE12cEtVSVFZZ0JTQUVJQVJESmF4OFBaUkREZlVSUHBLVVE2bXFxajZTbENFRUlBRkIvLy8vOWdOTkJFQWdBQ0FBSUFZZ0JKS1VrdzhMSUFOQkFuUWlBVUdRMHdKcUtnSUFJQUFnQmlBRWtwUWdBVUdnMHdKcUtnSUFreUFBazVNaUFJd2dBQ0FDUVFCSUd5RUFDeUFBQzUwRUFFSEE2QU5CbzRBQ0VDdEIyT2dEUWFMMkFVRUJRUUZCQUJBcVFlVG9BMEd4OHdGQkFVR0FmMEgvQUJBSFFmem9BMEdxOHdGQkFVR0FmMEgvQUJBSFFmRG9BMEdvOHdGQkFVRUFRZjhCRUFkQmlPa0RRWkhxQVVFQ1FZQ0Fma0gvL3dFUUIwR1U2UU5CaU9vQlFRSkJBRUgvL3dNUUIwR2c2UU5Cb09vQlFRUkJnSUNBZ0hoQi8vLy8vd2NRQjBHczZRTkJsK29CUVFSQkFFRi9FQWRCdU9rRFFiRDRBVUVFUVlDQWdJQjRRZi8vLy84SEVBZEJ4T2tEUWFmNEFVRUVRUUJCZnhBSFFkRHBBMEhWN0FGQ2dJQ0FnSUNBZ0lDQWYwTC8vLy8vLy8vLy8vOEFFUFFHUWR6cEEwSFU3QUZDQUVKL0VQUUdRZWpwQTBISzdBRkJCQkFXUWZUcEEwSGMvQUZCQ0JBV1FiaW1Ba0hDK0FFUUZVR1F6UUpCeXBvQ0VCVkI2TTBDUVFSQnRmZ0JFQTFCeE00Q1FRSkJ6dmdCRUExQm9NOENRUVJCM2ZnQkVBMUJwS2NDUWZEMkFSQXBRZGpQQWtFQVFZV2FBaEFCUVlEUUFrRUFRZXVhQWhBQlFhalFBa0VCUWFPYUFoQUJRZERRQWtFQ1FaV1hBaEFCUWZqUUFrRURRYlNYQWhBQlFhRFJBa0VFUWR5WEFoQUJRY2pSQWtFRlFmbVhBaEFCUWZEUkFrRUVRWkNiQWhBQlFaalNBa0VGUWE2YkFoQUJRWURRQWtFQVFkK1lBaEFCUWFqUUFrRUJRYjZZQWhBQlFkRFFBa0VDUWFHWkFoQUJRZmpRQWtFRFFmK1lBaEFCUWFEUkFrRUVRZVNaQWhBQlFjalJBa0VGUWNLWkFoQUJRY0RTQWtFR1FaK1lBaEFCUWVqU0FrRUhRZFdiQWhBQkN3c0FJQUFnQVVFVUVQc0JDL0FTQVJWL0l3QkJnQXRySWcwa0FDQURRUU4wSWdWQllIRkJCSEloRHlBQ1FRSjBJZ2RCWUhGQkFuSWhFaUFCUVFOMElneEJZSEZCQkhJaEV5QUFLQUxrQXlnQ0dDRVlBa0FnQUNnQ2hBRWlDRUVBVEFSQURBRUxJQThnQlVFY2NpSUtha0VCZFNFVUlCSWdCMEVlY2lJTGFrRUJkU0VWSUJNZ0RFRWNjaUlPYWtFQmRTRVdJQUFvQW9nQklnVW9BZ2doRnlBRktBSUVJUkFnQlNnQ0FDRVJRZi8vLy84SElRd0RRQUovSUFRZ0VXb3RBQUFpQlNBVFNBUkFJQVVnRG10QkFYUWlCeUFIYkNFSElBVWdFMnRCQVhRaUJTQUZiQXdCQ3lBRklBNUtCRUFnQlNBVGEwRUJkQ0lISUFkc0lRY2dCU0FPYTBFQmRDSUZJQVZzREFFTEFuOGdCU0FXVEFSQUlBVWdEbXRCQVhRaUJTQUZiQXdCQ3lBRklCTnJRUUYwSWdVZ0JXd0xJUWRCQUFzaEJnSi9JQVFnRUdvdEFBQWlCU0FTU0FSQUlBWWdCU0FTYTBFRGJDSUdJQVpzYWlFR0lBVWdDMnRCQTJ3aUJTQUZiQXdCQ3lBRklBdEtCRUFnQmlBRklBdHJRUU5zSWdZZ0JteHFJUVlnQlNBU2EwRURiQ0lGSUFWc0RBRUxJQVVnRlV3RVFDQUZJQXRyUVFOc0lnVWdCV3dNQVFzZ0JTQVNhMEVEYkNJRklBVnNDeUFIYWlFSEFuOGdCQ0FYYWkwQUFDSUZJQTlJQkVBZ0JpQUZJQTlySWdZZ0JteHFJUVlnQlNBS2F5SUZJQVZzREFFTElBVWdDa29FUUNBR0lBVWdDbXNpQmlBR2JHb2hCaUFGSUE5cklnVWdCV3dNQVFzZ0JTQVVUQVJBSUFVZ0Ntc2lCU0FGYkF3QkN5QUZJQTlySWdVZ0JXd0xJUWtnRFVHQUEyb2dCRUVDZEdvZ0JqWUNBQ0FISUFscUlnVWdEQ0FGSUF4SUd5RU1JQVJCQVdvaUJDQUlSdzBBQ3lBSVFRRnhJUVVDUUNBSVFRRkdCRUJCQUNFTFFRQWhCQXdCQ3lBSVFYNXhJUWRCQUNFTFFRQWhCRUVBSVFZRFFDQU1JQTFCZ0FOcUlBUkJBblJxS0FJQVRnUkFJQTFCZ0FGcUlBdHFJQVE2QUFBZ0MwRUJhaUVMQ3lBTUlBMUJnQU5xSUFSQkFYSWlDRUVDZEdvb0FnQk9CRUFnRFVHQUFXb2dDMm9nQ0RvQUFDQUxRUUZxSVFzTElBUkJBbW9oQkNBR1FRSnFJZ1lnQjBjTkFBc0xJQVZGRFFBZ0RVR0FBMm9nQkVFQ2RHb29BZ0FnREVvTkFDQU5RWUFCYWlBTGFpQUVPZ0FBSUF0QkFXb2hDd3RCL3dBaEJpQU5RWUFEYWlFRUEwQWdCRUwvLy8vLzkvLy8vLzhBTndJWUlBUkMvLy8vLy9mLy8vLy9BRGNDRUNBRVF2Ly8vLy8zLy8vLy93QTNBZ2dnQkVMLy8vLy85Ly8vLy84QU53SUFJQVJCSUdvaEJDQUdRUWRHSVFVZ0JrRUlheUVHSUFWRkRRQUxJQXRCQUVvRVFFRUFJUllEUUNBUElBMUJnQUZxSUJacUxRQUFJZ29nQUNnQ2lBRWlCeWdDQ0dvdEFBQnJJZ2hCQkhRaUJVSEFBbW9oRGlBRlFjQUJhaUVVSUFWQlFHc2hGU0FUSUFjb0FnQWdDbW90QUFCcklnbEJCblFpRjBHQUFtb2hFRUVISVFVZ0RVR0FBMm9oQkNBTklRWWdFaUFIS0FJRUlBcHFMUUFBYXlJUlFjZ0FiRUdRQVdvaURDRUhJQkZCQTJ3aUVTQVJiQ0FKUVFGMElna2dDV3hxSUFnZ0NHeHFJaEVoQ1FOQUlBUW9BZ0FnQ1VvRVFDQUVJQWsyQWdBZ0JpQUtPZ0FBQ3lBSklCVnFJZ2dnQkNnQ0JFZ0VRQ0FFSUFnMkFnUWdCaUFLT2dBQkN5QUlJQlJxSWdnZ0JDZ0NDRWdFUUNBRUlBZzJBZ2dnQmlBS09nQUNDeUFJSUE1cUlnZ2dCQ2dDREVnRVFDQUVJQWcyQWd3Z0JpQUtPZ0FEQ3lBRklnaEJBV3NoQlNBSElBbHFJUWtnQmtFRWFpRUdJQVJCRUdvaEJDQUhRYUFDYWlFSElBZ05BQXRCQnlFRklBd2hCeUFRSUJGcUloQWhDUU5BSUFRb0FnQWdDVW9FUUNBRUlBazJBZ0FnQmlBS09nQUFDeUFKSUJWcUlnZ2dCQ2dDQkVnRVFDQUVJQWcyQWdRZ0JpQUtPZ0FCQ3lBSUlCUnFJZ2dnQkNnQ0NFZ0VRQ0FFSUFnMkFnZ2dCaUFLT2dBQ0N5QUlJQTVxSWdnZ0JDZ0NERWdFUUNBRUlBZzJBZ3dnQmlBS09nQURDeUFGSWdoQkFXc2hCU0FISUFscUlRa2dCa0VFYWlFR0lBUkJFR29oQkNBSFFhQUNhaUVISUFnTkFBdEJCeUVGSUF3aEJ5QVFJQmRxUVlBR2FpSVFJUWtEUUNBRUtBSUFJQWxLQkVBZ0JDQUpOZ0lBSUFZZ0Nqb0FBQXNnQ1NBVmFpSUlJQVFvQWdSSUJFQWdCQ0FJTmdJRUlBWWdDam9BQVFzZ0NDQVVhaUlJSUFRb0FnaElCRUFnQkNBSU5nSUlJQVlnQ2pvQUFnc2dDQ0FPYWlJSUlBUW9BZ3hJQkVBZ0JDQUlOZ0lNSUFZZ0Nqb0FBd3NnQlNJSVFRRnJJUVVnQnlBSmFpRUpJQVpCQkdvaEJpQUVRUkJxSVFRZ0IwR2dBbW9oQnlBSURRQUxJQkFnRjJwQmdBcHFJUWxCQnlFRkEwQWdCQ2dDQUNBSlNnUkFJQVFnQ1RZQ0FDQUdJQW82QUFBTElBa2dGV29pQnlBRUtBSUVTQVJBSUFRZ0J6WUNCQ0FHSUFvNkFBRUxJQWNnRkdvaUJ5QUVLQUlJU0FSQUlBUWdCellDQ0NBR0lBbzZBQUlMSUFjZ0Rtb2lCeUFFS0FJTVNBUkFJQVFnQnpZQ0RDQUdJQW82QUFNTElBVWlCMEVCYXlFRklBa2dER29oQ1NBR1FRUnFJUVlnQkVFUWFpRUVJQXhCb0FKcUlRd2dCdzBBQ3lBV1FRRnFJaFlnQzBjTkFBc0xJQUZCZkhFaEJVRUFJUWNnRFNFRUlBTkJmSEZCQVhRaEFDQUNRWGh4SWdOQkFYSkJCblFoRENBRFFRSnlRUVowSVFZZ0EwRURja0VHZENFSUlBTkJCSEpCQm5RaENTQURRUVZ5UVFaMElRb2dBMEVHY2tFR2RDRUxJQUpCQjNKQkJuUWhEd05BSUJnZ0JTQUhha0VDZEdvb0FnQWlBU0FEUVFaMGFpQUFhaUlDSUFRdEFBQkJBV283QVFBZ0FpQUVMUUFCUVFGcU93RUNJQUlnQkMwQUFrRUJhanNCQkNBQ0lBUXRBQU5CQVdvN0FRWWdBU0FNYWlBQWFpSUNJQVF0QUFSQkFXbzdBUUFnQWlBRUxRQUZRUUZxT3dFQ0lBSWdCQzBBQmtFQmFqc0JCQ0FDSUFRdEFBZEJBV283QVFZZ0FTQUdhaUFBYWlJQ0lBUXRBQWhCQVdvN0FRQWdBaUFFTFFBSlFRRnFPd0VDSUFJZ0JDMEFDa0VCYWpzQkJDQUNJQVF0QUF0QkFXbzdBUVlnQVNBSWFpQUFhaUlDSUFRdEFBeEJBV283QVFBZ0FpQUVMUUFOUVFGcU93RUNJQUlnQkMwQURrRUJhanNCQkNBQ0lBUXRBQTlCQVdvN0FRWWdBU0FKYWlBQWFpSUNJQVF0QUJCQkFXbzdBUUFnQWlBRUxRQVJRUUZxT3dFQ0lBSWdCQzBBRWtFQmFqc0JCQ0FDSUFRdEFCTkJBV283QVFZZ0FTQUthaUFBYWlJQ0lBUXRBQlJCQVdvN0FRQWdBaUFFTFFBVlFRRnFPd0VDSUFJZ0JDMEFGa0VCYWpzQkJDQUNJQVF0QUJkQkFXbzdBUVlnQVNBTGFpQUFhaUlDSUFRdEFCaEJBV283QVFBZ0FpQUVMUUFaUVFGcU93RUNJQUlnQkMwQUdrRUJhanNCQkNBQ0lBUXRBQnRCQVdvN0FRWWdBU0FQYWlBQWFpSUJJQVF0QUJ4QkFXbzdBUUFnQVNBRUxRQWRRUUZxT3dFQ0lBRWdCQzBBSGtFQmFqc0JCQ0FCSUFRdEFCOUJBV283QVFZZ0JFRWdhaUVFSUFkQkFXb2lCMEVFUncwQUN5QU5RWUFMYWlRQUM4c0RBUVIvSUFBb0F1UURJQUJCQVVIOER5QUFLQUlFS0FJQUVRUUFJZ0JCL0FkcUlnRTJBaWdnQUVMLy8vLy9EemNDK0FjZ0FFS0JnSUNBSURjQ2dBZ2dBRUtEZ0lDQXdBQTNBb2dJSUFCQy9mLy8vMjgzQXZBSElBQkNoWUNBZ09BQU53S1FDQ0FBUXZ2Ly8vOVBOd0xvQnlBQVFvZUFnSUNBQVRjQ21BZ2dBRUw1Ly8vL3IzODNBdUFISUFCQ2lZQ0FnS0FCTndLZ0NDQUFRdmYvLy8rUGZ6Y0MyQWNnQUVLTGdJQ0F3QUUzQXFnSUlBQkM5Zi8vLys5K053TFFCeUFBUW8yQWdJRGdBVGNDc0FnZ0FFTHovLy8vejM0M0FzZ0hJQUJCRHpZQ3VBZ2dBRUx4Ly8vL3IzNDNBc0FIUVJBaEFrRVFJUU1EUUNBQklBTkJBblFpQUdvZ0FqWUNBQ0FCSUFCclFRQWdBbXNpQkRZQ0FDQUJJQUJCQkhKcUlBSTJBZ0FnQVNBRFFYOXpRUUowYWlBRU5nSUFJQUpCQVdvaEFrRXdJUUFnQTBFQ2FpSURRVEJIRFFBTEEwQWdBU0FBUVFKMElnSnFRU0EyQWdBZ0FTQUNhMEZnTmdJQUlBRWdBa0VFY21wQklEWUNBQ0FCSUFCQmYzTkJBblJxUVdBMkFnQWdBU0FDUVFoeWFrRWdOZ0lBSUFGQmZpQUFhMEVDZEdwQllEWUNBQ0FCSUFKQkRISnFRU0EyQWdBZ0FVRjlJQUJyUVFKMGFrRmdOZ0lBSUFCQkJHb2lBRUdBQWtjTkFBc0w5d0lCQ244Z0FDZ0M1QU1pQkNBQUtBSllJZ0ZCQVVZaUFqWUNIQ0FFSUFCQkFVSCtCVUdBQWlBQ0d5QUFLQUo0SUFBb0FnUW9BZ2dSQ0FBMkFoZ2dBQ2dDZUVFQVNnUkFJQVFvQWhRaEJpQUJRUUZISVFnRFFDQUdJQVFnQjBFQ2RDSUJhaWdDSUNJQ2JTRUdJQWhGQkVBZ0JDZ0NHQ0FCYWlJRElBTW9BZ0JCL3dGcU5nSUFDeUFDUWY0QmFpQUNRUUZySWdsQkFYUWlDbTBoQlNBRUtBSVlJQUZxS0FJQUlRRkJBQ0VDUVFBaEF3TkFJQU1nQlVvRVFBTkFJQU1nQWtFQmFpSUNRUUYwUVFGeVFmOEJiQ0FKYWlBS2JTSUZTZzBBQ3dzZ0FTQURhaUFDSUFac09nQUFJQU5CQVdvaUEwR0FBa2NOQUFzZ0NFVUVRRUVCSVFJRFFDQUJJQUpySWdVZ0FTMEFBRG9BQUNBQklBSnFJZ01nQVMwQS93RTZBUDhCSUFFZ0FrRi9jMm9nQVMwQUFEb0FBQ0FESUFFdEFQOEJPZ0NBQWlBRlFRSnJJQUV0QUFBNkFBQWdBeUFCTFFEL0FUb0FnUUlnQWtFRGFpSUNRWUFDUncwQUN3c2dCMEVCYWlJSElBQW9BbmhJRFFBTEN3c1lBQ0FBS0FJQUlnRkJNellDRkNBQUlBRW9BZ0FSQVFBTCtnTUJDWDlCOEpQcjNBTWdBbTRoQ0NBQUtBSUVJUVFnQWtIeGsrdmNBMDhFUUNBQUtBSUFJZ2RCeUFBMkFoUWdBQ0FIS0FJQUVRRUFDeUFFSUFnZ0F5QURJQWhLR3lJSU5nSlFJQUFnQVNBRFFRSjBFTTBDSVFvZ0F3UkFJQUZCQWtraEMwRUFJUWNEUUNBQUtBSUVJUVVnQ0NBRElBZHJJZ1FnQkNBSVN4c2lDQ0FDYkNJRVFmR1Q2OXdEVHdSQUlBQW9BZ0JDdUlDQWdEQTNBaFFnQUNBQUtBSUFLQUlBRVFFQUN5QUVRUWdnQkVFSGNTSUdhMEVBSUFZYmFpRUdJQXRGQkVBZ0FDZ0NBQ0lFSUFFMkFoZ2dCRUVQTmdJVUlBQWdBQ2dDQUNnQ0FCRUJBQXNnQmtFUWFpSUpFRGtpQkVVRVFDQUFLQUlBUXJpQWdJREFBRGNDRkNBQUlBQW9BZ0FvQWdBUkFRQUxJQVVnQlNnQ1RDQUphallDVENBRklBRkJBblJxSWdVb0Fqd2hDU0FFUVFBMkFnZ2dCQ0FHTmdJRUlBUWdDVFlDQUNBRklBUTJBandDUUNBSVJRMEFJQVJCRUdvaEJVRUFJUVlnQ0NJRVFRTnhJZ2tFUUFOQUlBb2dCMEVDZEdvZ0JUWUNBQ0FFUVFGcklRUWdBaUFGYWlFRklBZEJBV29oQnlBR1FRRnFJZ1lnQ1VjTkFBc0xJQWhCQVd0QkEwa05BQU5BSUFvZ0IwRUNkR29pQmlBRk5nSUFJQVlnQWlBRmFpSUZJQUpxSWdrZ0Ftb2lERFlDRENBR0lBazJBZ2dnQmlBRk5nSUVJQWRCQkdvaEJ5QUNJQXhxSVFVZ0JFRUVheUlFRFFBTEN5QURJQWRMRFFBTEN5QUtDL1FEQVFsL1FmQ1Q2OXdESUFKQkIzUWlDMjRoQlNBQUtBSUVJUVFnQzBIeGsrdmNBMDhFUUNBQUtBSUFJZ1pCeUFBMkFoUWdBQ0FHS0FJQUVRRUFDeUFFSUFVZ0F5QURJQVZLR3lJRk5nSlFJQUFnQVNBRFFRSjBFTTBDSVFvZ0F3UkFJQUZCQWtraERDQUNRUWQwSVFsQkFDRUdBMEFnQUNnQ0JDRUVJQXNnQlNBRElBWnJJZ0lnQWlBRlN4c2lCV3dpQjBIeGsrdmNBMDhFUUNBQUtBSUFRcmlBZ0lBd053SVVJQUFnQUNnQ0FDZ0NBQkVCQUFzZ0RFVUVRQ0FBS0FJQUlnSWdBVFlDR0NBQ1FRODJBaFFnQUNBQUtBSUFLQUlBRVFFQUN5QUhRUkJ5SWdnUU9TSUNSUVJBSUFBb0FnQkN1SUNBZ01BQU53SVVJQUFnQUNnQ0FDZ0NBQkVCQUFzZ0JDQUVLQUpNSUFocU5nSk1JQVFnQVVFQ2RHb2lCQ2dDUENFSUlBSkJBRFlDQ0NBQ0lBYzJBZ1FnQWlBSU5nSUFJQVFnQWpZQ1BBSkFJQVZGRFFBZ0FrRVFhaUVDUVFBaEJ5QUZJUVFnQlVFRGNTSUlCRUFEUUNBS0lBWkJBblJxSUFJMkFnQWdCRUVCYXlFRUlBWkJBV29oQmlBQ0lBbHFJUUlnQjBFQmFpSUhJQWhIRFFBTEN5QUZRUUZyUVFOSkRRQURRQ0FLSUFaQkFuUnFJZ2NnQWpZQ0FDQUhJQUlnQ1dvaUFpQUphaUlJTmdJSUlBY2dBallDQkNBSElBZ2dDV29pQWpZQ0RDQUNJQWxxSVFJZ0JrRUVhaUVHSUFSQkJHc2lCQTBBQ3dzZ0F5QUdTdzBBQ3dzZ0Nnc01BQ0FBSUFBb0FnQVFvUVVMY3dFRGZ5QUFSUVJBUVFCQkEwSC9QMEVBRUR3UEN5QUFLQUlBSWdGRkJFQVBDeUFCS0FJQUVETkJBQ0VCQTM4Z0FDZ0NBQ0lES0FJSUlRSWdBeWdDRENBQlRBUi9JQUlRTXlBQUtBSUFFRE1nQUVFQU5nSUFRUUFGSUFJZ0FVRU1iR29vQWdBUU15QUJRUUZxSVFFTUFRc0xHZ3RTQUNBQVFnQTNBbWdnQUVIZUFUWUNFQ0FBUWQ4Qk5nSU1JQUJCNEFFMkFnZ2dBRUhoQVRZQ0JDQUFRZUlCTmdJQUlBQkNBRGNDZkNBQVF2NEFOd0owSUFCQm9Md0NOZ0p3SUFCQkFEWUNGQ0FBQ3pVQUlBQW9BZ0FhSUFBb0FnQWdBQkRjQVVFVWJHb2FJQUFvQWdBZ0FCQ0FBVUVVYkdvYUlBQW9BZ0FnQUJEY0FVRVViR29hQ3l3QUlBQW9BZ0FhSUFBb0FnQWdBQkRiQVdvYUlBQW9BZ0FnQUJDU0FXb2FJQUFvQWdBZ0FCRGJBV29hQzlrQkFRTi9Ba0FnQUNnQ3RBSU5BQUpBSUFBb0FpaEJBMnNPQlFBQkFRRUFBUXNnQUNnQ0pFRURSdzBBSUFBb0FpeEJBa2NOQUNBQUtBSjRRUU5IRFFBZ0FDZ0NzQUlOQUNBQUtBTFlBU0lCS0FJSVFRSkhEUUFnQVNnQ1lFRUJSdzBBSUFFb0FyZ0JRUUZIRFFBZ0FTZ0NERUVDU2cwQUlBRW9BbVJCQVVjTkFDQUJLQUs4QVVFQlJ3MEFJQUVvQWlRaUFpQUFLQUxFQWtjTkFDQUJLQUo4SUFKSERRQWdBU2dDMUFFZ0FrY05BQ0FCS0FJb0lnSWdBQ2dDeUFKSERRQWdBU2dDZ0FFZ0FrY05BQ0FCS0FMWUFTQUNSaUVEQ3lBREN5d0JBWDhnQUJDc0JTQUFLQUlBQkVBZ0FCQ1lCU0FBRURRYUlBQW9BZ0FoQVNBQUVOc0JHaUFCRURNTEN3b0FJQUFvQWdBZ0FXb0w4d0VCQm44Z0FDZ0M0QU1pQVNBQVFRRkJnQWdnQUNnQ0JDZ0NBQkVFQURZQ0NDQUJJQUJCQVVHQUNDQUFLQUlFS0FJQUVRUUFOZ0lNSUFFZ0FFRUJRWUFJSUFBb0FnUW9BZ0FSQkFBMkFoQWdBU0FBUVFGQmdBZ2dBQ2dDQkNnQ0FCRUVBQ0lETmdJVUlBRW9BaEFoQkNBQktBSU1JUVVnQVNnQ0NDRUdRUUFoQVVHQWZ5RUFBMEFnQmlBQlFRSjBJZ0pxSUFCQjZjMEZiRUdBZ0FKcVFSQjFOZ0lBSUFJZ0JXb2dBRUdpaXdkc1FZQ0FBbXBCRUhVMkFnQWdBaUFFYWlBQVFhNlNmV3cyQWdBZ0FpQURhaUFBUWVmUGZteEJnSUFDYWpZQ0FDQUFRUUZxSVFBZ0FVRUJhaUlCUVlBQ1J3MEFDd3ZoQmdFSWYwRUJJUUVDUUFKQUlBQW9BdFFDSWdKQkFVWUVRQ0FBSUFBb0F0Z0NJZ0lvQWh3MkF1Z0NJQUFnQWlnQ0lDSUROZ0xzQWlBQ1FRRTJBa0FnQWtLQmdJQ0FFRGNDT0NBQ1FRRTJBa2dnQWlBQ0tBSWtOZ0pFSUFJZ0F5QUNLQUlNSWdKd0lnTWdBaUFER3pZQ1RDQUFRZ0UzQS9BQ0RBRUxJQUpCQld0QmUwMEVRQ0FBS0FJQUlnRWdBallDR0NBQlFSczJBaFFnQUNnQ0FFRUVOZ0ljSUFBZ0FDZ0NBQ2dDQUJFQkFBc2dBQ0FBS0FJY0lBQW9BcXdESUFBb0Fyd0NiQkJzTmdMb0FpQUFLQUlnSUFBb0Fxd0RJQUFvQXNBQ2JCQnNJUUlnQUVFQU5nTHdBaUFBSUFJMkF1d0NJQUFvQXRRQ1FRQk1EUUVnQUVIMEFtb2hCQU5BSUFBZ0EwRUNkR29vQXRnQ0lnRWdBU2dDQ0NJRk5nSTRJQUVnQVNnQ0RDSUdOZ0k4SUFFZ0JTQUdiQ0lDTmdKQUlBRWdCU0FCS0FJa2JEWUNSQ0FCSUFFb0Fod2dCWEFpQ0NBRklBZ2JOZ0pJSUFFZ0FTZ0NJQ0FHY0NJQklBWWdBUnMyQWt3Z0FpQUhha0VMVGdSQUlBQW9BZ0FpQVVFT05nSVVJQUFnQVNnQ0FCRUJBQXNDUUNBQ1FRQk1EUUFnQWtFQmF5RUZRUUFoQVNBQ1FRTnhJZ1lFUUFOQUlBQWdBQ2dDOEFJaUIwRUJhallDOEFJZ0FDQUhRUUowYWlBRE5nTDBBaUFDUVFGcklRSWdBVUVCYWlJQklBWkhEUUFMQ3lBRlFRTkpEUUFEUUNBQUlBQW9BdkFDSWdGQkFXbzJBdkFDSUFRZ0FVRUNkR29nQXpZQ0FDQUFJQUFvQXZBQ0lnRkJBV28yQXZBQ0lBUWdBVUVDZEdvZ0F6WUNBQ0FBSUFBb0F2QUNJZ0ZCQVdvMkF2QUNJQVFnQVVFQ2RHb2dBellDQUNBQUlBQW9BdkFDSWdGQkFXbzJBdkFDSUFRZ0FVRUNkR29nQXpZQ0FDQUNRUVZySVFFZ0FrRUVheUVDSUFGQmZra05BQXNMSUFOQkFXb2lBeUFBS0FMVUFpSUJTQVJBSUFBb0F2QUNJUWNNQVFzTElBRkJBRXdOQVF0QkFDRUNBMEFnQUNBQ1FRSjBhaWdDMkFJaUF5Z0NVRVVFUUFKQUlBTW9BaEFpQVVFRFRRUkFJQUFnQVVFQ2RHb29BcVFCRFFFTElBQW9BZ0FpQkNBQk5nSVlJQVJCTmpZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMSUFNZ0FFRUJRWVFCSUFBb0FnUW9BZ0FSQkFBZ0FDQUJRUUowYWlnQ3BBRkJoQUVRUHpZQ1VDQUFLQUxVQWlFQkN5QUNRUUZxSWdJZ0FVZ05BQXNMSUFBZ0FDZ0MxQU1vQWdBUkFRQWdBQ0FBS0FMRUF5Z0NBQkVCQUNBQUtBTE1BeUFBS0FMRUF5Z0NCRFlDQUF1cVF3TXRmd2Q4QVg0akFFRVFheUluSkFBZ0JVRUFJQVZCQUVvYklUUURRQ0F0SURSSEJFQWdDeUF1UVFoMGFpSWZJQVFnTFVHdzhRUnNhaUlGS0FJQU5nSUFBa0FnQ1NBRkt3TUl0aUFGS3dNUXRpQW5RUXhxSUNkQkNHb1E0Z0ZCQUVnTkFDQWZJQ2NxQWd5N09RTTRJQjlCUUdzZ0p5b0NDTHM1QXdBZ0JVRWNhaUUxSUFWQjNMZ0NhaUUySUFVb0FoZ2FJQVZCblBFRWFpRXpJQjlCeUFCcUlTOGdIMEdvQVdvaEtDTUFRUkJySWlNa0FFRUNFSUFFSVJoQkFoQ0FCQ0VnUVFKQkFoQzZBU0VaUVFBaEZ3Si9Ba0FEUUNBWFFRUkhCRUFDZnlBeklCZEJBV29pRzBFQ2RHb29BZ0FpRGlBeklCZEJBblJxS0FJQUlnVnJRUUZxdDBTYW1abVptWm1wUDZKRUFBQUFBQUFBNEQrZ0lqc2dCYmVnSWp5WlJBQUFBQUFBQU9CQll3UkFJRHlxREFFTFFZQ0FnSUI0Q3lFRkFuOGdEcmNnTzZFaU81bEVBQUFBQUFBQTRFRmpCRUFnTzZvTUFRdEJnSUNBZ0hnTElBVnJJaEJCZnlBUVFRQk9HMEVCYWlFUlFRQWhEaUFRUVFGcVFRSVF1Z0VoSVFOQUlBNGdFVWNFUUNBSklEVWdCU0FPYWtFQ2RDSVFhaWdDQUxJZ0VDQTJhaWdDQUxJZ0kwRU1haUFqUVFocUVPSUJRUUJJRFFRZ0lTZ0NBQ0FPUVFSMGFpSVFJQ01xQWd5N09RTUFJQkFnSXlvQ0NMczVBd2dnRGtFQmFpRU9EQUVMQzBGL0lSTUNRQ0FoS0FJRUloWkJBa2dOQUNBaEtBSUlJZ1ZCQWtnTkFDQVpLQUlJSUFWSERRQWdGaUFGSUFVZ0Zrb2JJZzRnR1NnQ0JFY05BQ0FZS0FJRUlBNUhEUUFnSUNnQ0JDQUZSdzBBQW44Z0lTZ0NCQ0FoS0FJSUVMb0JJaEFFUUVGL0lROENRQ0FRS0FJRUlnNGdJU2dDQkVjTkFDQVFLQUlJSWhJZ0lTZ0NDRWNOQUVFQUlROGdEa0VBSUE1QkFFb2JJUlVnRWtFQUlCSkJBRW9iSVJwQkFDRU9BMEFnRGlBVlJnMEJJQTRnRW13aEZFRUFJUkVEUUNBUklCcEhCRUFnRVNBVWFrRURkQ0lkSUJBb0FnQnFJQ0VvQWdBZ0hXb3JBd0E1QXdBZ0VVRUJhaUVSREFFTEN5QU9RUUZxSVE0TUFBc0FDeUFRSUE5QkFFNE5BUm9nRUJCRkMwRUFDeUlhUlEwQVFRQWhEa0VBSVE5QmZ5RVJBa0FnR2lnQ0JDSVNRUUJNRFFBZ0dpZ0NDQ0lRUVFCTURRQWdJQ2dDQkNBUVJ3MEFBMEFnRGlBUVJ3UkFJQ0FvQWdBZ0RrRURkR3BDQURjREFDQU9RUUZxSVE0TUFRc0xJQm9vQWdBaEVRTkFJQThnRWtZRVFDQVN0eUU3UVFBaEVVRUFJUTREUUNBT0lCQkdEUU1nSUNnQ0FDQU9RUU4wYWlJUElBOHJBd0FnTzZNNUF3QWdEa0VCYWlFT0RBQUxBQVVnSUNnQ0FDRU9RUUFoRlFOQUlCQWdGVWNFUUNBT0lCRXJBd0FnRGlzREFLQTVBd0FnRlVFQmFpRVZJQTVCQ0dvaERpQVJRUWhxSVJFTUFRc0xJQTlCQVdvaER3d0JDd0FMQUFzQ1FDQVJRUUJJRFFCQmZ5RVZBa0FnR2lnQ0NDSU9JQ0FvQWdSSERRQkJBQ0VWSUE1QkFDQU9RUUJLR3lFUUlCb29BZ1FpRGtFQUlBNUJBRW9iSVJRZ0dpZ0NBQ0VPUVFBaEVRTkFJQkVnRkVZTkFTQWdLQUlBSVJKQkFDRVBBMEFnRHlBUVJ3UkFJQTRnRGlzREFDQVNLd01Bb1RrREFDQVBRUUZxSVE4Z0RrRUlhaUVPSUJKQkNHb2hFZ3dCQ3dzZ0VVRUJhaUVSREFBTEFBc2dGVUVBU0EwQUlCYTNueUU3UVFBaERpQUZJQlpzSWdWQkFDQUZRUUJLR3lFRkEwQWdCU0FPUndSQUlCb29BZ0FnRGtFRGRHb2lFQ0FRS3dNQUlEdWpPUU1BSUE1QkFXb2hEZ3dCQ3dzQ2YwRUFJUTVCZnlFUkFrQUNRQ0FhS0FJRUloQkJBa2dOQUNBYUtBSUlJZ1ZCQWtnTkFDQVpLQUlJSUFWSERRQWdCU0FRSUFVZ0VFZ2JJaFFnR1NnQ0JFY05BQ0FZS0FJRUlCUkhEUUFDUUNBVUlCUWdGQkM2QVNJV0tBSUVSZ1JBSUJZb0FnZ2dGRVlOQVFzTUFnc0NRQ0FGSUJCTklqZEZCRUJCZnlFVkFrQWdHaWdDQkNJVElCWW9BZ1JIRFFBZ0ZpZ0NDQ0FUUncwQVFRQWhGU0FUUVFBZ0UwRUFTaHNoSWlBYUtBSUlJaDFCQUNBZFFRQktHeUVjSUJZb0FnQWlIaUVGQTBBZ0RpQWlSZzBCSUE0Z0hXd2hLVUVBSVJFRFFBSkFJQkVnRTBjRVFDQU9JQkZMQkVBZ0JTQWVJQkVnRTJ3Z0RtcEJBM1JxS3dNQU9RTUFEQUlMSUJvb0FnQWhFQ0FGUWdBM0F3QWdFQ0FwUVFOMGFpRVNJQkFnRVNBZGJFRURkR29oRDBFQUlSQkVBQUFBQUFBQUFBQWhPd05BSUJBZ0hFWU5BaUFGSUJJckF3QWdEeXNEQUtJZ082QWlPemtEQUNBUVFRRnFJUkFnRDBFSWFpRVBJQkpCQ0dvaEVnd0FDd0FMSUE1QkFXb2hEZ3dDQ3lBUlFRRnFJUkVnQlVFSWFpRUZEQUFMQUFzQUN5QVZRUUJPRFFFTUF3dEJmeUVRQWtBZ0dpZ0NDQ0lSSUJZb0FnUkhEUUFnRmlnQ0NDQVJSdzBBUVFBaEVDQVJRUUFnRVVFQVNoc2hIU0FhS0FJRUlnVkJBQ0FGUVFCS0d5RWlJQllvQWdBaUhDRVRBMEJCQUNFRklBNGdIVVlOQVFOQUFrQWdCU0FSUndSQUlBVWdEa2tFUUNBVElCd2dCU0FSYkNBT2FrRURkR29yQXdBNUF3QU1BZ3NnR2lnQ0FDRVBJQk5DQURjREFDQVBJQVZCQTNScUlSSWdEeUFPUVFOMGFpRVBRUUFoRlVRQUFBQUFBQUFBQUNFN0EwQWdGU0FpUmcwQ0lCTWdEeXNEQUNBU0t3TUFvaUE3b0NJN09RTUFJQlZCQVdvaEZTQVNJQkZCQTNRaUhtb2hFaUFQSUI1cUlROE1BQXNBQ3lBT1FRRnFJUTRNQWdzZ0JVRUJhaUVGSUJOQkNHb2hFd3dBQ3dBTEFBc2dFRUVBVGcwQURBSUxJd0JCRUdzaUlpUUFRWDhoRVFKQUlCWW9BZ1FpSFVFQ1NBMEFJQjBnRmlnQ0NFY05BQ0FZS0FJRUlCMUhEUUFnSFJDQUJDSXBSUTBBSUNJZ0hVRUJheUlWTmdJTUlDSWdLU2dDQUVFSWFqWUNDRUVBSVJBakFFRVFheUlUSkFCQmZ5RWtBa0FnRmlnQ0NDSVBJQllvQWdSSERRQWdEeUFZS0FJRVJ3MEFJQThnSWlnQ0RFRUJha2NOQUNBUFFRSnJJaHhCQUNBY1FRQktHeUVxQTBBQ1FDQXFJQkFpRWtjRVFDQVNRUU4wSWlRZ0dDZ0NBR29nRmlnQ0FDQVBJQkpzUVFOMGFpSWVJQ1JxS3dNQU9RTUFJQk1nSGlBU1FRRnFJaEJCQTNRaUsyb2lMRFlDQ0NBVElBOGdFa0YvYzJvaUpUWUNERUVBSVFVQ1FDQVRRUWhxSWc0Z0RoRDZBNThpTzBRQUFBQUFBQUFBQUdFTkFDQU9LQUlBSWlZZ0ppc0RBQ0k4SUR1YUlEc2dQRVFBQUFBQUFBQUFBR01iSWp1Z0lqdzVBd0JFQUFBQUFBQUE4RDhnT3lBOG9wK2pJVHdnRGlnQ0JDSU9RUUFnRGtFQVNoc2hEZ05BSUFVZ0RrWU5BU0FtSUFWQkEzUnFJakFnUENBd0t3TUFvamtEQUNBRlFRRnFJUVVNQUFzQUN5QWlLQUlJSUNScUlEdWFJanM1QXdBZ0VDRUZJRHRFQUFBQUFBQUFBQUJoRFFJRFFFUUFBQUFBQUFBQUFDRTdJQkFoRGlBRklBOU9EUUlEUUNBRklBNU5CRUFnQlNBUGJDRWtJQVVoRGdOQUlBNGdEMGdFUUNBV0tBSUFJQTRnSkdwQkEzUnFLd01BSUI0Z0RrRURkR29yQXdDaUlEdWdJVHNnRGtFQmFpRU9EQUVMQ3lBWUtBSUFJQVZCQTNScUlEczVBd0FnQlVFQmFpRUZEQUlGSUJZb0FnQWdEaUFQYkNBRmFrRURkR29yQXdBZ0hpQU9RUU4wYWlzREFLSWdPNkFoT3lBT1FRRnFJUTRNQVFzQUN3QUxBQXNDUUFKQUlBOUJBazRFUUNBWUtBSUFJZ1VnSEVFRGRDSU9haUFXS0FJQUloQWdEeUFjYkNJU0lCeHFRUU4wYWlzREFEa0RBQ0FpS0FJSUlBNXFJQkFnRDBFQmF5SU9JQkpxUVFOMGFpc0RBRGtEQUF3QkN5QVBRUUZIRFFFZ0dDZ0NBQ0VGSUJZb0FnQWhFRUVBSVE0TElBVWdEa0VEZEdvZ0VDQU9JQTlzSUE1cVFRTjBhaXNEQURrREFBdEJBQ0VrSUE5QkFDQVBRUUJLR3lFbUlBOGhCUU5BSUFWQkFFd05BeUFXS0FJQUlBVkJBV3NpRUNBUGJFRURkR29oSGdKQUlBVWdIRW9OQUNBUElBVnJJU1VnSGlBRlFRTjBhaUVxSUFVaEVnTkFJQThnRWt3TkFTQVRJQ1UyQWd3Z0V5QWxOZ0lFSUJNZ0tqWUNDQ0FUSUJZb0FnQWdEeUFTYkNJcklBVnFRUU4wYWpZQ0FDQVRRUWhxSUJNUStnT2FJVHNnQlNFT0EwQWdEaUFQU0FSQUlCWW9BZ0FnRGlBcmFrRURkR29pTENBN0lCNGdEa0VEZEdvckF3Q2lJQ3dyQXdDZ09RTUFJQTVCQVdvaERnd0JDd3NnRWtFQmFpRVNEQUFMQUF0QkFDRU9BMEFnRGlBbVJ3UkFJQjRnRGtFRGRHcENBRGNEQUNBT1FRRnFJUTRNQVFzTElCNGdFRUVEZEdwQ2dJQ0FnSUNBZ1BnL053TUFJQkFoQlF3QUN3QUxJQk1nSlRZQ0RDQVRJQ1UyQWdRZ0V5QXNOZ0lJSUJNZ0dDZ0NBQ0FyYWpZQ0FDQVRRUWhxSUJNUStnTkVBQUFBQUFBQTRMK2lJVHNnRHlFRkEwQWdCVUVCYXlJRklCSk1EUUVnR0NnQ0FDSWtJQVZCQTNRaURtb2lKU0E3SUE0Z0htb3JBd0FpUEtJZ0pTc0RBS0FpUFRrREFDQUZJQTlzSVNVZ0JTRU9BMEFnRGlBUFRnMEJJQllvQWdBZ0RpQWxha0VEZEdvaUppQW1Ld01BSUR3Z0pDQU9RUU4wSWlacUt3TUFvaUE5SUI0Z0ptb3JBd0Npb0tFNUF3QWdEa0VCYWlFT0RBQUxBQXNBQ3dBTElCTkJFR29rQUFKQUlDUkJBRWdOQUNBcEtBSUFJaE5DQURjREFDQVZJUkFEUUNBUUlnVWlFVUVBVEFSQVFRQWhCUU5BSUFVZ0ZVWUVRRUVBSVJFTUJBc2dHQ2dDQUNJUElBVkJBM1JxSWhJckF3QWlQQ0U3SUFWQkFXb2lFQ0VSSUFVaERnTkFJQkVnSFVnRVFDQVBJQkZCQTNScUt3TUFJajBnT3lBN0lEMWpJaE1iSVRzZ0VTQU9JQk1iSVE0Z0VVRUJhaUVSREFFTEN5QVBJQTVCQTNScUlEdzVBd0FnRWlBN09RTUFJQllvQWdBaUR5QUZJQjFzUVFOMGFpRVJJQThnRGlBZGJFRURkR29oRGtFQUlRVURRQ0FGSUIxR0JFQWdFQ0VGREFJRklBNHJBd0FoT3lBT0lCRXJBd0E1QXdBZ0VTQTdPUU1BSUFWQkFXb2hCU0FSUVFocUlSRWdEa0VJYWlFT0RBRUxBQXNBQ3dBTEEwQUNRQ0FSSWc1QkFFd0VRRUVBSVE0TUFRc2dFeUFPUVFOMEloQnFLd01BbVNBWUtBSUFJZzhnRGtFQmF5SVJRUU4wYWlzREFKa2dEeUFRYWlzREFKbWdSSTN0dGFEM3hyQStvbVFOQVFzTElBVkJBV3NoRUNBRklBNUdEUUFnRGlBRklBVWdEa2diSVNZZ0V5QUZRUU4wSWlwcUlTUWdEa0VEZENJcklCTnFJU3hCQUNFUkEwQWdFVUhrQUVZTkFTQVJRUUZxSVJJZ0dDZ0NBQ0ljSUN0cUt3TUFJQndnS21vaU1Dc0RBQ0k3b1NBa0t3TUFJandnUEtJaVBDQWNJQkJCQTNScUlqZ3JBd0FnTzZGRUFBQUFBQUFBNEQraUlqc2dQQ0E3SUR1aW9KOGlQSm9nUENBN1JBQUFBQUFBQUFBQVl4dWdvNkFoUGlBc0t3TUlJVDBnRGlFRkEwQWdCU0FtUndSQUFrQWdQcGtpT3lBOW1XWUVRQ0E3Ukx5SjJKZXkwcHc4WkVVRVFFUUFBQUFBQUFEd1B5RTdSQUFBQUFBQUFBQUFJVHdNQWdzZ1Bab2dQcU1pTzBRQUFBQUFBQUR3UHlBN0lEdWlSQUFBQUFBQUFQQS9vSitqSWp1aUlUd01BUXNnUHBvZ1BhTWlPMFFBQUFBQUFBRHdQeUE3SUR1aVJBQUFBQUFBQVBBL29KK2pJanlpSVRzTElCd2dCVUVEZENJbGFpSVJJQkVyQXdBaVB5QThJRDhnSENBRlFRRnFJZzlCQTNRaUVXb2lNU3NEQUNJL29TSkFJRHlpSURzZ082QWdFU0FUYWlJZUt3TUFvcUNpSWtHaE9RTUFJREVnUHlCQm9Ea0RBQ0FGSUE1S0JFQWdFeUFsYWlJUklEc2dFU3NEQUtJZ1BTQThvcUU1QXdBTElEeWFJVDhnSGlBOElEc2dRS0lnUEVRQUFBQUFBQUFBd0tJZ0hpc0RBQ0pBb3FDaUlFQ2dPUU1BSUE4Z0hXd2hNU0FGSUIxc0lUbEJBQ0VSQTBBZ0VTQWRSd1JBSUJZb0FnQWlNaUFSSURscVFRTjBhaUk2SURzZ09pc0RBQ0krb2lBeUlCRWdNV3BCQTNScUlqSXJBd0FpUFNBL29xQTVBd0FnTWlBOElENmlJRHNnUGFLZ09RTUFJQkZCQVdvaEVRd0JDd3NnQlNBUVRpRVJJQThoQlNBUkRRRWdIaXNEQUNFK0lCTWdKV29pRVNBN0lCRXJBeEFpTzZJNUF4QWdPeUEvb2lFOURBRUxDeUFTSVJFZ0pDc0RBSmtnT0NzREFKa2dNQ3NEQUptZ1JJM3R0YUQzeHJBK29tUU5BQXNNQUFzQUN5QXBFTm9DQ3lBaVFSQnFKQUFnRVVFQVNBMEJBa0FnTjBVRVFFRUFJUTVCZnlFUEFrQWdHaWdDQkNJRlFRQk1EUUFnR2lnQ0NDSVRRUUJNRFFBZ0ZpZ0NCQ0FGUncwQUlCWW9BZ2dnQlVjTkFDQVpLQUlFSUFWSERRQWdHU2dDQ0NBVFJ3MEFJQmdvQWdRZ0JVY05BQ0FaS0FJQUlSVURRQUpBSUFVZ0RrWUVRQ0FGSVE0TUFRc2dHQ2dDQUNBT1FRTjBhaXNEQUNJN1JMeUoySmV5MHB3OFl3MEFJQVVnRG13aEZFUUFBQUFBQUFEd1B5QTdtWitqSVR4QkFDRVJBMEFnRVNBVFJ3UkFJQm9vQWdBZ0VVRURkR29oRUNBV0tBSUFJQlJCQTNScUlROUJBQ0VTUkFBQUFBQUFBQUFBSVRzRFFDQUZJQkpIQkVBZ0VrRUJhaUVTSUE4ckF3QWdFQ3NEQUtJZ082QWhPeUFRSUJOQkEzUnFJUkFnRDBFSWFpRVBEQUVMQ3lBVklEd2dPNkk1QXdBZ0VVRUJhaUVSSUJWQkNHb2hGUXdCQ3dzZ0RrRUJhaUVPREFFTEN5QU9JQVVnQlNBT1NCc2hCVUVBSVE4Z0UwRUFJQk5CQUVvYklSQURRQ0FGSUE1R0RRRWdHQ2dDQUNBT1FRTjBha0lBTndNQVFRQWhFZ05BSUJBZ0VrY0VRQ0FWUWdBM0F3QWdFa0VCYWlFU0lCVkJDR29oRlF3QkN3c2dEa0VCYWlFT0RBQUxBQXNnRDBFQVRnMEJEQU1MUVFBaEJTQVVRUUFnRkVFQVNoc2hEaUFaS0FJQUlSQWdGaWdDQUNFU0EwQUNRQ0FGSUE1SEJFQkJBQ0VSSUJnb0FnQWdCVUVEZEdvckF3QkV2SW5ZbDdMU25EeGpSUTBCSUFVaERnc2dEaUFVSUE0Z0ZFb2JJUVVEUUNBRklBNUdEUU1nR0NnQ0FDQU9RUU4wYWtJQU53TUFRUUFoRVFOQUlCRWdGRWNFUUNBUVFnQTNBd0FnRVVFQmFpRVJJQkJCQ0dvaEVBd0JDd3NnRGtFQmFpRU9EQUFMQUFzRFFDQVJJQlJIQkVBZ0VDQVNLd01BT1FNQUlCRkJBV29oRVNBUVFRaHFJUkFnRWtFSWFpRVNEQUVMQ3lBRlFRRnFJUVVNQUFzQUN5QVdFRVZCQUNFUkN5QVJEQUVMSUJZUVJVRi9DeUVUSUJvUVJVRUFJUTRnR0NnQ0JDSUZRUUFnQlVFQVNoc2hFRVFBQUFBQUFBQUFBQ0U3UVFBaEJRTkFJQVVnRUVZRVFBTkFJQTRnRUVZTkJDQVlLQUlBSUE1QkEzUnFJZ1VnQlNzREFDQTdvemtEQUNBT1FRRnFJUTRNQUFzQUJTQTdJQmdvQWdBZ0JVRURkR29yQXdDZ0lUc2dCVUVCYWlFRkRBRUxBQXNBQ3lBYUVFVUxJQk5CQUVnTkFpQXZJQmRCR0d4cUlnVWdHU2dDQUNJT0t3TUlJanM1QXdBZ0JTQU9Ld01BSWp5YU9RTUlJQVVnT3lBZ0tBSUFJZ1VyQXdDaUlEd2dCU3NEQ0tLaG1qa0RFQ0FoRUVVZ0d5RVhEQUVMQ3lBWkVFVWdJQkRhQWlBWUVOb0NRUUFoRGdOQVFRQWdEa0VFUmcwQ0drRi9JQzhnRGtFQmEwRURjVUVZYkdvaUJTc0RBQ0F2SUE1QkdHeHFJaEFyQXdnaVBLSWdCU3NEQ0NJOUlCQXJBd0Npb1NJN21VUXRReHpyNGpZYVAyTU5BaG9nS0NBT1FRUjBhaUlSSUQwZ0VDc0RFS0lnQlNzREVDQThvcUVnTzZNNUF3QWdFU0FRS3dNQUlBVXJBeENpSUJBckF4QWdCU3NEQUtLaElEdWpPUU1JSUE1QkFXb2hEZ3dBQ3dBTElDRVFSU0FaRUVVZ0lCRGFBaUFZRU5vQ1FYOExJUVVnSTBFUWFpUUFJQVZCQUVnTkFDQWZRUWhxSVJNZ0gwRVVhaUVoSUI5QktHb2hJaUFmUVF4cUlSSWdIMEVZYWlFYUlCOUJNR29oRmlBZlFmQUJhaUVPSUI5QitBRnFJU0FqQUVHUTRBQnJJaGdrQUVFQklRVUNRQ0FJUVFKclFRSkxEUUFnRFVHT0ZrWUVRQ0FIUVFKQkRrRXFJQUFnQVNBQ0lBTWdDU0FvUkFBQUFBQUFBT3cvSUJoQkVHb1F0QU5CQUVnRVFDQVNRWDgyQWdCQmVpRUZEQUlMSUJoQkVHb2hHU0FPSVJGQkFDRVBRUUFoQlNNQVFiQUJheUliSkFBZ0cwTERnWUNBMEFFM0E1Z0JJQnRDZ0lDQWdPQVdOd09RQVVIL0FTRVhBMEFnRDBFRVJ3UkFJQmtnRzBHUUFXb2dEMEVDZEdvb0FnQnFMUUFBSWc0Z0YwSC9BWEVpRUNBT0lCQkpHeUVYSUE0Z0JVSC9BWEVpQlNBRklBNUpHeUVGSUE5QkFXb2hEd3dCQ3dzQ2Z5QUZRZjhCY1NJRklCZEIvd0Z4SWc1clFSMU1CRUFnR2tFQU5nSUFJQlpDZ0lDQWdJQ0FnUGkvZnpjREFFRitEQUVMSUFVZ0RtcEJBWFloSFVFQUlRVkJBQ0VQSUJZQ2ZBSkFBa0FDUUFOQUlBOUJCRVlFUUFKQUFrQUNRQU5BSUFVaUVFRUVSZzBCSUJCQkFXb2hCU0FiUWF3QmFpQVFhaTBBQUVFQlJ3MEFJQnRCckFGcUlBVkJBM0ZxTFFBQVFRRkhEUUFnRzBHc0FXb2dFRUVDYWtFRGNXb3RBQUFOQUF0QkFDRVVRZmNBSVJWQkRTRUZRZjhCSVJjQ1FDQVFJZzRPQkFJSEJnTUFDeUFhSUJBMkFnQkVBQUFBQUFBQThEOE1DQXNnR2tFQU5nSUFJQlpDZ0lDQWdJQ0FnUGkvZnpjREFFRjlEQWdMQTBBZ0RrRU9SZzBHSUE1QkRtd2hJeUFPUWY3Ly8vOEhjU0VGUVFBaER3TkFJQTlCRGtjRVFBSkFJQTVCQTBrZ0QwRURhMEVIUzNKRklBNUJDMGx4RFFBZ0QwSCsvLy8vQjNFaUZDQUZja1VOQUNBRlFReEdJaHdnRkVWeElCUkJERVlnSEhGeURRQWdGU0FiYWlBWklBOGdJMnBxTFFBQUlCMXJJaFJCSDNZNkFBQWdGQ0FVUVI5MUloeHpJQnhySWhRZ0Z5QVVJQmRJR3lFWElCVkJBV3NoRlFzZ0QwRUJhaUVQREFFTEN5QU9RUUZxSVE0TUFBc0FDd1VnRzBHc0FXb2dEMm9nSFNBWklCdEJrQUZxSUE5QkFuUnFLQUlBYWkwQUFFczZBQUFnRDBFQmFpRVBEQUVMQ3dOQVFRQWhEeUFGUVFCSURRTWdCVUYrY1NFT0lBVkJBMnNoSXdOQUlBOUJEa2NFUUFKQUlBOUJBMGtnSTBFSFMzSkZJQTlCQzBseERRQkJBQ0FPUVF4R0lBOUIvdi8vL3dkeEloUWJJQTRnRkhKRklBNUZJQlJCREVaeGNuSU5BQ0FWSUJ0cUlCa2dEMEVPYkNBRmFtb3RBQUFnSFdzaUZFRWZkam9BQUNBVUlCUkJIM1VpSEhNZ0hHc2lGQ0FYSUJRZ0YwZ2JJUmNnRlVFQmF5RVZDeUFQUVFGcUlROE1BUXNMSUFWQkFXc2hCUXdBQ3dBTEEwQWdCVUVBU0EwQ0lBVkJEbXdoRkNBRlFYNXhJU05CRFNFUEEwQWdEMEVBVGdSQUFrQWdCVUVEU1NBUFFRTnJRUWRMY2tVZ0JVRUxTWEVOQUNBUFFYNXhJZzVCREVZaUhDQWpRUXhHY1EwQUlCd2dCVUVDU1NJZWNTQU9SU0FlY1hJTkFDQVZJQnRxSUJrZ0R5QVVhbW90QUFBZ0hXc2lEa0VmZGpvQUFDQU9JQTVCSDNVaUhITWdIR3NpRGlBWElBNGdGMGdiSVJjZ0ZVRUJheUVWQ3lBUFFRRnJJUThNQVFzTElBVkJBV3NoQlF3QUN3QUxBMEFnRkVFT1JnMEJJQlJCL3YvLy93ZHhJUVVnRkVFRGF5RWpRUTBoRHdOQUlBOUJBRTRFUUFKQUlBOUJBMGtnSTBFSFMzSkZJQTlCQzBseERRQWdCVVVnRDBGK2NTSU9RUXhHY1EwQUlBVkJERVlpSENBT1FReEdjU0FjSUE5QkFrbHhjZzBBSUJVZ0cyb2dHU0FQUVE1c0lCUnFhaTBBQUNBZGF5SU9RUjkyT2dBQUlBNGdEa0VmZFNJY2N5QWNheUlPSUJjZ0RpQVhTQnNoRnlBVlFRRnJJUlVMSUE5QkFXc2hEd3dCQ3dzZ0ZFRUJhaUVVREFBTEFBc2dHaUFRTmdJQVJBQUFBQUFBQVBBL0lCZEJIa29OQUJvZ0Y3ZEVBQUFBQUFBQVBrQ2pDemtEQUVGOFFZNFdRZ0FnR3lBYlFZZ0JhaEN5QnlJRlFRQklEUUFhSUJFRVFDQVJJQVUyQWdBTElCZ2dHeWtEaUFFM0F3aEJBQXNoQlNBYlFiQUJhaVFBSUFWQkFFZ0VRQ0FTUVg4MkFnQU1BZ3NnR0NrRENDSkNRbjlSQkVBZ0VrRi9OZ0lBUVhzaEJRd0NDeUFTSUVLblFmLy9BWEZCQUNCQ1FvQ0EvdjhQZzFBYk5nSUFJQ0JGRFFFZ0lDQkNOd01BREFFTElBZEJBaUFOUWY4QmNTSVBJQTlCQTJ3Z0FDQUJJQUlnQXlBSklDZ2dDaUFZUVJCcUVMUURRUUJJQkVBZ0VrRi9OZ0lBUVhvaEJRd0JDeUFZUVJCcUlSVWdEaUVSUVFBaEJVRUFJUTVDQUNGQ0l3QkJNR3NpRnlRQUFuOGdEMEVKYTBGNVRRUkFJQkpCZnpZQ0FDQWFRUUEyQWdBZ0ZrS0FnSUNBZ0lDQStMOS9Od01BUVg4TUFRc2dGMEVBTmdJUUlCY2dEMEVCYXlJUU5nSWNJQmNnRHlBUGJDSVVRUUZyTmdJWUlCY2dEeUFRYkRZQ0ZFSC9BU0ViQTBBZ0JVRUVSd1JBSUJVZ0YwRVFhaUFGUVFKMGFpZ0NBR290QUFBaUdTQWJRZjhCY1NJYklCa2dHMGtiSVJzZ0dTQU9RZjhCY1NJT0lBNGdHVWtiSVE0Z0JVRUJhaUVGREFFTEN5QU9RZjhCY1NJRklCdEIvd0Z4SWc1clFSMU1CRUFnRWtGL05nSUFJQnBCQURZQ0FDQVdRb0NBZ0lDQWdJRDR2MzgzQXdCQmZnd0JDeUFGSUE1cVFRRjJJUmxCQUNFT1FRQWhCUUpBQTBBZ0JVRUVSZ1JBQWtBQ1FBTkFJQTRpQlVFRVJnMEJJQVZCQVdvaERpQVhRU3hxSUFWcUxRQUFRUUZIRFFBZ0YwRXNhaUFPUVFOeGFpMEFBRUVCUncwQUlCZEJMR29nQlVFQ2FrRURjV290QUFBTkFBc2dHaUFGTmdJQVFRQWhCVUgvQVNFYkEwQWdCU0FVUndSQUlBVWdGV29pRGlBT0xRQUFJZzRnR1VrNkFBQWdEaUFaYXlJT0lBNUJIM1VpRG5NZ0Rtc2lEaUFiSUE0Z0cwZ2JJUnNnQlVFQmFpRUZEQUVMQ3lBUUlRNENRQUpBQWtBZ0dpZ0NBQTRFQUFFQ0JBY0xJQThoR1VFQUlRNERRQ0FPSUJsR0RRY2dEaUFQYkNFVVFRQWhCUU5BSUFVZ0QwY0VRQUpBSUFVZ0RuSkZEUUFnRGlBUVJpSWRJQVZGY1NBRklCQkdJQjF4Y2cwQUlCVWdCU0FVYW1vdEFBQkJBRWV0SUVKQ0FZYUVJVUlMSUFWQkFXb2hCUXdCQ3dzZ0RrRUJhaUVPREFBTEFBc2dEeUVaUVFBaERnTkFJQTRnR1VZTkJpQVFJUVVEUUNBRlFRQk9CRUFDUUNBT1JTQUZJQkJHY1EwQUlBNGdFRVlpRkNBRklCQkdjU0FVSUFWRmNYSU5BQ0FWSUFVZ0Qyd2dEbXBxTFFBQVFRQkhyU0JDUWdHR2hDRkNDeUFGUVFGcklRVU1BUXNMSUE1QkFXb2hEZ3dBQ3dBTEEwQWdEa0VBU0EwRklBNGdEMndoR1NBUUlRVURRQ0FGUVFCT0JFQWdCU0FRUmlJVUlBNGdFRVp4SUFVZ0RuSkZJQlFnRGtWeGNuSkZCRUFnRlNBRklCbHFhaTBBQUVFQVI2MGdRa0lCaG9RaFFnc2dCVUVCYXlFRkRBRUxDeUFPUVFGcklRNE1BQXNBQ3lBU1FYODJBZ0FnR2tFQU5nSUFJQlpDZ0lDQWdJQ0FnUGkvZnpjREFFRjlEQVFMQlNBWFFTeHFJQVZxSUJrZ0ZTQVhRUkJxSUFWQkFuUnFLQUlBYWkwQUFFczZBQUFnQlVFQmFpRUZEQUVMQ3lBUElSa0RRQ0FPUVFCSURRRkJBQ0VGQTBBZ0JTQVpSd1JBSUFVZ0RuSkZJQTVGSUFVZ0VFWnhja0VBSUE0Z0VFWWdCUnR5UlFSQUlCVWdCU0FQYkNBT2Ftb3RBQUJCQUVldElFSkNBWWFFSVVJTElBVkJBV29oQlF3QkN3c2dEa0VCYXlFT0RBQUxBQXNnRmlBYnQwUUFBQUFBQUFBK1FLTkVBQUFBQUFBQThEOGdHMEVlVEJzNUF3QUNRQUpBQWtBZ0RVR0ZDa1lnRFVHRUNHdEJBa2x5RFFBZ0RVR0RCRWNFUUNBTlFZUUdSZzBCSUExQmd3SkhEUUlnRnlCQ3AwR3czd0JxTUFBQU53TUlRcGJUcGJPWnphWEw2UUFnUW9oQ0FZTlFEUU1nRWtGL05nSUFJQlpDZ0lDQWdJQ0FnUGkvZnpjREFFRjhEQVFMSUJjZ1FxZEI4TjRBYWpBQUFEY0RDQ0JDUXYvLy8vOFBneUZDSUJFRVFDQVJRdjdPNys3YjkvYnovZ0FnUW9pblFRRnhOZ0lBQzBLQXNKQ0JvSWlBZ0lGL0lFS0lRZ0dEVUEwQ0lCSkJmellDQUNBV1FvQ0FnSUNBZ0lENHYzODNBd0JCZkF3REN5QU5JRUpCQUNBWFFRaHFFTElISWdWQkFFZ0VRQ0FTUVg4MkFnQWdGa0tBZ0lDQWdJQ0ErTDkvTndNQVFYd01Bd3NnRVVVZ0JVVnlEUUVnRVNBRk5nSUFEQUVMSUJjZ1FqY0RDQXNnRWlBWEtRTUlQZ0lBUVFBTElRVWdGMEV3YWlRQUlDQkZEUUFnSUVJQU53TUFDd0pBSUFoQkFrWWdDRUVFUzNJTkFBSi9JQVpGQkVBZ0UwRi9OZ0lBUVg4TUFRc0NRQUpBSUFnT0JBQUJBUUFCQ3lBSFFRQWdCaWdDSENJT0lBNUJBblFnQUNBQklBSWdBeUFKSUNnZ0NpQVlRUkJxRUxRRFFRQklCRUFnRTBGL05nSUFRWG9NQWdzZ0JrRUFJQmhCRUdvZ0JpZ0NIQ0FUSUNFZ0loREhCd3dCQ3lBSFFRRWdCaWdDSENJT0lBNUJBblFnQUNBQklBSWdBeUFKSUNnZ0NpQVlRUkJxRUxRRFFRQklCRUFnRTBGL05nSUFRWG9NQVFzZ0JrRUJJQmhCRUdvZ0JpZ0NIQ0FUSUNFZ0loREhCd3NoRGlBRlFRRkdCRUFnRGlFRkRBRUxJQTVCQVVZTkFDQUZJQTV4UVI5MUlBNXhJUVVMSUJoQmtPQUFhaVFBSUFWQkJtb2lCVUVHVFFSQUlCOGdCVUVDZEVITTNnQnFLQUlBTmdMc0FRc2dDRUVDVFFSQUlCOGdFeUFTSUFoQkFra2lCUnNvQWdBMkFnUWdIeUFoSUJvZ0JSc29BZ0EyQWhBZ0h5QWlJQllnQlJzckF3QTVBeUFMSUM1QkFXb2hMZ3NnTFVFQmFpRXREQUVMQ3lBTUlDNDJBZ0FnSjBFUWFpUUFRUUFMandnQkRuOGdBQ2dDQUNFTElBQW9BZ1FoREVFQlFid2dFUHdDSWdWRkJFQkJBRUVEUWFRT1FRQVFQRUVCRUFNQUMwRUVFRTRRaUFRaURRSi9RUmdRVGhDSUJDSUpRUVJxRUpJQ0drSElCaEJPSWdOQkRHb1FTQm9nQTBGQWF4Q3lBaG9nQTBISUFHb1FrZ0lhSUFOQjNBQnFJZ0ZCNk5RQk5nSUFJQUZCQkdvUVNCb2dBVUlBTndJWUlBRkNBRGNDRUNBQlFmalVBVFlDQUNBQlFTQnFFRWdhSUFGQkxHb1FTQm9nQVVFNGFoQklHaUFEUWFBQmFpSUJRb3FBZ0lDZ0FUY0NDQ0FCUWdBM0FnQWdBVUVRYWhCSUdpQUJRUUU2QUJ3Z0FVRWdhaEJJUWdBM0Fnd2dBVUtBZ0lDQWdJQ0FrTUVBTndJMElBRkJQR29RU0JvZ0FVSElBR29RU0JvZ0FVR0FnTUNJQkRZQ1dDQUJRZHdBYWlJQ1FnQTNBZ3dnQWtJQU53SUFJQUpDQURjQ0ZDQUNRUnhxRUVnYUlBSkJLR29RU0JvZ0FVR1FBV29RU0NFQ0lBRkJpQ2NRNVFZZ0FrRWtFSmNDSUFFaENDQURRYndDYWlJQlFhRGFBVUVNRVBVQklBRkJNR3BCME5vQlFRd1E5UUVnQVVIZ0FHcEJnTnNCUVF3UTlRRWdBVUdRQVdwQnNOc0JRUXdROVFFZ0FVSEFBV3BCNE5zQlFRd1E5UUVnQVVId0FXcEJrTndCUVF3UTlRRWdBVUxObWJQNGc0Q0E4TUFBTndLNEFpQUJRczJacy9hejVzejVQamNDc0FJZ0FVS0FnSUQwNDh5WjB6NDNBcWdDSUFGQ3pabXo3clBtekprK053S2dBaUFEUWZ3RWFoQklRYlBtelBrRE5nSU1JQU5CakFWcUlnRkNBRGNDQUNBQlFRRTZBQkFnQVVJQU53SUlJQUZCRkdwQkFFSElBQkE2R2lBQlFkd0FhaENTQWhvZ0FVSHdBR29RU0JvZ0FVSDhBR29RU0JvZ0EwR1VCbW9RU0NJR1FReHFFRWdhSUFaQkdHb2lBUkJJR2lBR1FZRElBQkNYQWdKQUlBRVFRaUlDUVlBSVNRUkFJd0JCSUdzaUNpUUFBa0JCZ0FnZ0Ftc2lCeUFCRURRb0FnQWdBU2dDQkd0QkEzVk5CRUFnQVNBSEVJTUVEQUVMSUFFUU5DRUNJQXBCQ0dvZ0FTQUJFRUlnQjJvUW9nTWdBUkJDSUFJUW13TWhCQ01BUVJCcklnSWtBQ0FDSUFRb0FnZzJBZ0FnQkNnQ0NDRU9JQUlnQkVFSWFqWUNDQ0FDSUE0Z0IwRURkR28yQWdRZ0FpZ0NBQ0VIQTBBZ0FpZ0NCQ0FIUndSQUlBUW9BaEFhSUFJb0FnQVFtUVlnQWlBQ0tBSUFRUWhxSWdjMkFnQU1BUXNMSUFJUXFnRWdBa0VRYWlRQUlBRWdCQkNnQXlBRUVKOERDeUFLUVNCcUpBQU1BUXNnQWtHQUNFc0VRQ0FCS0FJQVFZQkFheUVDSUFFUVFpRUVJQUVnQWhDbkF5QUJJQVFRbFFRTEN5QUdRVEkyQWpBZ0JrR29DRFlDTENBR1FZQUlOZ0lvSUFaREN0Y2pQRGdDSkNBSVF3QUFRRUE0QWpRZ0NFTUFBSUJBT0FJNElBaEI5QU1RNVFZZ0EwRUJPZ0FJSUFOQ2lJQ0FnSUNBZ0tEQUFEY0NBQ0FKSUFNUXNRWWdDUXNRc3dZZ0JVS0JnSUNBY0RjQ0ZDQUZJQXcyQWhBZ0JTQUxOZ0lNSUFWQkFUWUNDQ0FGSUFBMkFnUWdCU0FOTmdJQUlBVUxKZ0VCZnlBQUtBSUVJZ0VFUUNBQUlBRW9BaWdSQVFBTElBQkJBRFlDRkNBQVFRQTJBZ1FMT3dFQmZ5QUFLQUlFSWdFRVFDQUFRUUVnQVNnQ0pCRUNBQ0FBS0FJUUJFQWdBRUVBTmdLNEFpQUFRY2dCTmdJVUR3c2dBRUhrQURZQ0ZBc0wvd2dDQzM4Q2ZTTUFRVEJySWdRa0FDQUVRb2lBZ0lBUU53SWtJQVFnQURZQ0lDQUVRUUUyQWhnZ0JDQUROZ0lVSUFRZ0FUWUNFQ0FFUVFnMkFnZ2dCQ0FETmdJRUlBUWdBallDQUFKQUFuOGdCQ0lKS0FJSUlBUW9BZ1FRM0FZaUFBUkFRWDhoQmdKQUlBQW9BZ1FpQWlBSktBSUlSdzBBSUFBb0FnZ2lBU0FKS0FJRVJ3MEFRUUFoQmlBQ1FRQWdBa0VBU2hzaEJ5QUJRUUFnQVVFQVNoc2hDQ0FBS0FJQUlRTkJBQ0VCQTBBZ0FTQUhSZzBCSUFrb0FnQWdBVUVDZEdvaEJFRUFJUVVEUUNBRklBaEhCRUFnQXlBRUtnSUFPQUlBSUFWQkFXb2hCU0FEUVFScUlRTWdCQ0FDUVFKMGFpRUVEQUVMQ3lBQlFRRnFJUUVNQUFzQUN5QUFJQVpCQUU0TkFSb2dBQkJGQzBFQUN5SU5SUVJBUVg4aEFnd0JDd0pBSUEwZ0NSRFRCaUlMUlFSQVFYOGhBZ3dCQ3dKQUlBMGdDVUVRYWhEVEJpSU9SUVJBUVg4aEFnd0JDMEVBSVFKQkFDRURJQXNvQWdBaEJ5QUxLQUlFSVFaQkFDRUFJd0JCMEE5cklnZ2tBQUpBSUFaQjlBTktEUUFDUUFKQUFrQWdCZzRDQXdBQkN5QUhRd0FBZ0Q4Z0J5b0NBSlU0QWdBTUFRc2dCa0VBSUFaQkFFb2JJUXdEUUNBQUlBeEdCRUFEUUNBRElBeEdCRUJCQUNFREEwQWdEQ0FESWdCR0RRVURRQUpBSUFBZ0JrWUVRQ0FHSVFBTUFRc2dDQ0FBUVFKMGFpZ0NBQ0FEUmcwQUlBQkJBV29oQUF3QkN3c2dDQ0FBUVFKMElnRnFJQWdnQTBFQ2RDSUFhaWdDQURZQ0FDQUFJQWRxSVFBZ0FTQUhhaUVFUVFBaEJRTkFJQVVnREVjRVFDQUVLZ0lBSVE4Z0JDQUFLZ0lBT0FJQUlBQWdEemdDQUNBRlFRRnFJUVVnQUNBR1FRSjBJZ0ZxSVFBZ0FTQUVhaUVFREFFTEN5QURRUUZxSVFNTUFBc0FDME1BQUFBQUlROUJmeUVGSUFjZ0F5SUFJQVpzUVFKMGFpSUJJUVFEUUNBQUlBWkhCRUFnQkNvQ0FJc2lFQ0FQSUE4Z0VGMGlDaHNoRHlBQUlBVWdDaHNoQlNBQVFRRnFJUUFnQkNBR1FRSjBhaUVFREFFTEMwRUFJUUFnQlVGL1JpQVBRLy9tMnk1ZmNnMEVJQWdnQlVFQ2RHb2lBQ2dDQUNFRUlBQWdDQ0FEUVFKMGFpSUFLQUlBTmdJQUlBQWdCRFlDQUNBSElBVWdCbXhCQW5ScUlRQkJBQ0VGSUFFaEJBTkFJQVVnQmtjRVFDQUFLZ0lBSVE4Z0FDQUVLZ0lBT0FJQUlBUWdEemdDQUNBRlFRRnFJUVVnQkVFRWFpRUVJQUJCQkdvaEFBd0JDd3NnQVNvQ0FDRVBRUUVoQkNBQklRQURRQ0FFSUFaSEJFQWdBQ0FBS2dJRUlBK1ZPQUlBSUFSQkFXb2hCQ0FBUVFScUlRQU1BUXNMSUFCREFBQ0FQeUFQbFRnQ0FFRUFJUW9EUUNBR0lBcEhCRUFnQXlBS1J3UkFJQWNnQmlBS2JFRUNkR29pQUNvQ0FJd2hEMEVCSVFRZ0FTRUZBMEFnQkNBR1J3UkFJQUFnRHlBRktnSUFsQ0FBS2dJRWtqZ0NBQ0FGUVFScUlRVWdCRUVCYWlFRUlBQkJCR29oQUF3QkN3c2dBQ0FGS2dJQUlBK1VPQUlBQ3lBS1FRRnFJUW9NQVFzTElBTkJBV29oQXd3QUN3QUZJQWdnQUVFQ2RHb2dBRFlDQUNBQVFRRnFJUUFNQVFzQUN3QUxJQWNoQUFzZ0NFSFFEMm9rQUFKQVFRQkJmeUFBRzBFQVNBUkFRWDhoQWd3QkN5QUpRU0JxSUFzZ0RoREVCaG9MSUE0UVJRc2dDeEJGQ3lBTkVFVUxJQWxCTUdva0FDQUNDeFlCQVg5QkVCQk9JZ0VnQVAwQUFnRDlDd0lBSUFFTDl3SUNCWDhGZlNNQVFSQnJJZ1VrQUVGL0lRY2pBRUZBYWlJR0pBQUNmeUFBS2dJY0lBQXFBaXdpQ2lBRGxKTWhEU0FBS2dJZ0lnc2dBNVFnQUNvQ0VKTWhEaUFBS2dJTUlBb2dBcFNUSVFwQmZ5QUxJQUtVSUFBcUFnQ1RJZ3NnQUNvQ0pDSU1JQU9VSUFBcUFoU1RJZ09VSUE0Z0RDQUNsQ0FBS2dJRWt5SU1sSk1pQWtNQUFBQUFXdzBBR2lBRklBTWdDcFFnRFNBTWpKU1NJQUtWT0FJTUlBVWdDeUFObENBS0lBNlVreUFDbFRnQ0NFRUFDeUVBSUFaQlFHc2tBQUpBSUFCQkFFZ05BQUovSUFVcUFnd2dBU29DRENJQ2xFTXpNOHRCbFVNQUFBQS9raUlEaTBNQUFBQlBYUVJBSUFPb0RBRUxRWUNBZ0lCNEN5SUFRUUJJRFFBZ0FTZ0NCQ0lJSUFCTURRQUNmeUFCS0FJSUlnbXlJQUlnQlNvQ0NKUkRNelBMd1pXU1F3QUFBRCtTSWdLTFF3QUFBRTlkQkVBZ0FxZ01BUXRCZ0lDQWdIZ0xJZ1pCQUVnZ0JpQUpUbklOQUNBRUlBRW9BZ0FnQmlBSWJDQUFhbW90QUFBNkFBQkJBQ0VIQ3lBRlFSQnFKQUFnQndzTkFDQUFLQUlBSUFGQkJIUnFDeTBCQVg4Z0FDZ0NCQ0VDQTBBZ0FTQUNSd1JBSUFBUU5DQUNRUXhySWdJUXV3VU1BUXNMSUFBZ0FUWUNCQXNIQUNBQkVEZ2FDMWNCQTM4Z0FDZ0NCQ0VCQTBBZ0FTQUFLQUlJUndSQUlBQW9BaEFoQWlBQUlBQW9BZ2hCREdzaUF6WUNDQ0FDSUFNUXV3VU1BUXNMSUFBb0FnQUVRQ0FBS0FJUUdpQUFLQUlBSVFFZ0FCQ3VBeG9nQVJBekN3dVNBUUVFZnlBQUVJWUNJQUFRTkJvZ0FDZ0NBQ0VFSUFBb0FnUWhBaUFCUVFScUlRTURRQ0FDSUFSSEJFQWdBeWdDQUVFTWF5SUZJQUpCREdzaUFpa0NBRGNDQUNBRklBSW9BZ2cyQWdnZ0FoRFVCQ0FESUFNb0FnQkJER3MyQWdBTUFRc0xJQUFnQXhCR0lBQkJCR29nQVVFSWFoQkdJQUFRTkNBQkVEMFFSaUFCSUFFb0FnUTJBZ0FnQUNBQUVGWVFyd01MR1FBZ0FDQUJJQUlnQTBFTVFiYjVBVUhWcXRXcUFSQ25CQXZDQWdJQmZ3UjlJd0JCUUdvaUJpUUFBa0FnQUFSQUlBQkJDR29nQVNBR1FSQnFFTEFEUVg4aEFTQUFRYmdCYWlJQUlBWXFBaHdnQmlvQ0VDQUNsQ0FHS2dJVUlBT1VrcElnQmlvQ1BDQUdLZ0l3SUFLVUlBWXFBalFnQTVTU2tpSUhsU0lJSUFZcUFpd2dCaW9DSUNBQ2xDQUdLZ0lrSUFPVWtwSWdCNVVpQWlBRUlBVVFja0VBU0EwQklBQWdCQ29DQUNBRktnSUFJQVpCREdvZ0JrRUlhaERpQVVFQVNBMEJRWDlCQUNBSUlBWXFBZ3lUSWdNZ0E1UWdBaUFHS2dJSWt5SUNJQUtVa2tNQUFJQS9YaHNoQVF3QkN5QUJLZ0ljSVFjZ0FTb0NGQ0VJSUFFcUFoQWhDU0FFSUFFcUFnd2dBU29DQUNBQ2xDQUJLZ0lFSUFPVWtwSWdBU29DTENBQktnSWdJQUtVSUFFcUFpUWdBNVNTa2lJS2xUZ0NBQ0FGSUFjZ0NTQUNsQ0FJSUFPVWtwSWdDcFU0QWdCQkFDRUJDeUFHUVVCckpBQWdBUXNKQUNBQVFSQVFzUU1MZHdFQmZ5QUFFTXNGSUFBUU5DQUFLQUlBSUFBb0FnUWdBVUVFYWlJQ0VKZ0NJQUFnQWhCR0lBQkJCR29nQVVFSWFoQkdJQUFRTkNBQkVEMFFSaUFCSUFFb0FnUTJBZ0FnQUJDNEFSb2dBQ2dDQUJvZ0FDZ0NBQ0FBRUlzQ1FRUjBhaG9nQUNnQ0FDQUFFSXNDUVFSMGFob2dBQ2dDQUJvTGV3RUNmeU1BUVJCcklnVWtBQ0FGUVFBMkFnd2dBRUVNYWlBREVMc0JJQUVFUUNBQUtBSVFHaUFCUWYvLy8vOEFTd1JBUWJiNUFSQ3RBUUFMSUFGQkJIUVFUaUVFQ3lBQUlBUTJBZ0FnQUNBRUlBSkJCSFJxSWdJMkFnZ2dBQ0FDTmdJRUlBQVFQU0FFSUFGQkJIUnFOZ0lBSUFWQkVHb2tBQ0FBQzVJQkFRTi9Jd0JCRUdzaUFpUUFJQUlnQVRZQ0RDTUFRUkJySWdNa0FDQUFFRFFhSUFOQi8vLy8vd0EyQWd3Z0EwSC8vLy8vQnpZQ0NDQURRUXhxSUFOQkNHb1EvQUVvQWdBaEJDQURRUkJxSkFBZ0FTQUVUUVJBSUFBUWl3SWlBQ0FFUVFGMlNRUkFJQUlnQUVFQmREWUNDQ0FDUVFocUlBSkJER29RZVNnQ0FDRUVDeUFDUVJCcUpBQWdCQThMRUpvQkFBc05BQ0FBSUFFZ0FrRUVFS1lFQ3gwQUlBRkIvLy8vL3dOTEJFQkJ0dmtCRUswQkFBc2dBVUVDZEJCT0M2a0NBUWQvSUFBUVNpRUNBa0FnQVFSQUlBQWdBaUFCRUlvQ0VLd0NJQUFRU2lBQk5nSUFRUUFoQWdOQUlBRWdBa1lFUUNBQVFRaHFJZ0lvQWdBaUEwVU5BeUFBSUFNb0FnUWdBUkJiSWdjUU95QUNOZ0lBQTBBZ0F5Z0NBQ0lDUlEwRUFrQWdBaWdDQkNBQkVGc2lCQ0FIUmcwQUlBSWhCU0FBSUFRUU95Z0NBRVVFUUNBQUlBUVFPeUFETmdJQUlBUWhCd3dCQ3dOQUFrQWdCU0lHS0FJQVJRUkFRUUFoQlF3QkN5QUFFRmtnQWtFSWFpQUdLQUlBUVFocUVOQUJJUWdnQmlnQ0FDRUZJQWdOQVFzTElBTWdCVFlDQUNBR0lBQWdCQkE3S0FJQUtBSUFOZ0lBSUFBZ0JCQTdLQUlBSUFJMkFnQU1BUXNnQWlFRERBQUxBQVVnQUNBQ0VEdEJBRFlDQUNBQ1FRRnFJUUlNQVFzQUN3QUxJQUJCQUJDc0FpQUFFRXBCQURZQ0FBc0xQd0VCZnlBQUtBSUFJUUVnQUVFQU5nSUFJQUVFUUNBQUVFb2lBQzBBQkFSQUlBQW9BZ0FnQVVFSWFoREpCUXNnQVFSQUlBQW9BZ0FhSUFFUU13c0xDOWNCQWdOL0FYMGpBRUVRYXlJQ0pBQWdBaUFCTmdJTUFrQWdBaUFCUVFGR0JIOUJBZ1VnQVNBQlFRRnJjVVVOQVNBQkVLQUNDeUlCTmdJTUN3SkFJQUFRalFFaUF5QUJTUVJBSUFBZ0FSREdCUXdCQ3lBQklBTlBEUUFnQXhEaEFTRUVBbjhnQUJBOUtBSUFzeUFBRUZrcUFnQ1ZqU0lGUXdBQWdFOWRJQVZEQUFBQUFHQnhCRUFnQmFrTUFRdEJBQXNoQVNBQ0FuOGdCQVJBSUFFUS9RTU1BUXNnQVJDZ0FnczJBZ2dnQWlBQ1FReHFJQUpCQ0dvUWVTZ0NBQ0lCTmdJTUlBRWdBMDhOQUNBQUlBRVF4Z1VMSUFKQkVHb2tBQXNMQUNBQlFRaHFFTm9GR2dzTEFDQUFJQUZCRUJEN0FRczFBQ0FBS0FJQUdpQUFLQUlBSUFBUWl3SkJCSFJxR2lBQUtBSUFJQUFRdUFGQkJIUnFHaUFBS0FJQUlBQVFpd0pCQkhScUdndmFDZ0lLZndGOUlBTW9BaGdoREFKQVFRRWdBblJCb09BQmNVVWdBa0VPUzNKRkJFQkJBQ0FES0FJUUlnSnJJZ2NnQXlnQ0ZFRUJhaUlJSUFjZ0NFb2JJUTVCQUNBREtBSUlJZ2hySWdrZ0F5Z0NERUVCYWlJTElBa2dDMG9iSVE4Z0FDQUVJQWhCQVhScklBVWdBa0VCZEdzZ0FXeHFhaUVBSUFGQkFYUWhCRUVBSVFzRFFDQUpJUUlnQUNFSUlBY2dEa1lOQWdOQUlBSWdEMFpGQkVBZ0RDOEJBQ0lGUVlBZ1J3UkFJQXNnQ0MwQUFDSUJhaUVMSUFFZ0JXd2dEV29oRFNBQklBRnNJQXBxSVFvTElBSkJBV29oQWlBTVFRSnFJUXdnQ0VFQ2FpRUlEQUVMQ3lBSFFRRnFJUWNnQUNBRWFpRUFEQUFMQUFzZ0FrRUJUUVJBUVFBZ0F5Z0NFR3NpQnlBREtBSVVRUUZxSWdJZ0FpQUhTQnNoRGdOQUlBY2dEa1lOQWtFQUlBTW9BZ2dpQW1zaUNDQURLQUlNUVFGcUlna2dDQ0FKU2hzaER5QUFJQWRCQVhRZ0JXb2dBV3dnQkdvZ0FrRUJkR3RCQTJ4cUlRSURRQ0FJSUE5R1JRUkFJQXd2QVFBaUVFR0FJRWNFUUNBTElBSXRBQUlnQWkwQUFTQUNMUUFBYW1wQkEyNGlDV29oQ3lBSklCQnNJQTFxSVEwZ0NTQUpiQ0FLYWlFS0N5QUlRUUZxSVFnZ0RFRUNhaUVNSUFKQkJtb2hBZ3dCQ3dzZ0IwRUJhaUVIREFBTEFBc2dBa0YrY1VFQ1JnUkFRUUFnQXlnQ0VHc2lCeUFES0FJVVFRRnFJZ0lnQWlBSFNCc2hEZ05BSUFjZ0RrWU5Ba0VBSUFNb0FnZ2lBbXNpQ0NBREtBSU1RUUZxSWdrZ0NDQUpTaHNoRHlBQUlBZEJBWFFnQldvZ0FXd2dCR29nQWtFQmRHdEJBblJxSVFJRFFDQUlJQTlHUlFSQUlBd3ZBUUFpRUVHQUlFY0VRQ0FMSUFJdEFBSWdBaTBBQVNBQ0xRQUFhbXBCQTI0aUNXb2hDeUFKSUJCc0lBMXFJUTBnQ1NBSmJDQUthaUVLQ3lBSVFRRnFJUWdnREVFQ2FpRU1JQUpCQ0dvaEFnd0JDd3NnQjBFQmFpRUhEQUFMQUFzZ0FrRjljVUVFUmdSQVFRQWdBeWdDRUdzaUJ5QURLQUlVUVFGcUlnSWdBaUFIU0JzaERnTkFJQWNnRGtZTkFrRUFJQU1vQWdnaUFtc2lDQ0FES0FJTVFRRnFJZ2tnQ0NBSlNoc2hEeUFBSUFkQkFYUWdCV29nQVd3Z0JHb2dBa0VCZEd0QkFuUnFJUUlEUUNBSUlBOUdSUVJBSUF3dkFRQWlFRUdBSUVjRVFDQUxJQUl0QUFNZ0FpMEFBaUFDTFFBQmFtcEJBMjRpQ1dvaEN5QUpJQkJzSUExcUlRMGdDU0FKYkNBS2FpRUtDeUFJUVFGcUlRZ2dERUVDYWlFTUlBSkJDR29oQWd3QkN3c2dCMEVCYWlFSERBQUxBQXNDUUFKQUlBSkJCMnNPQWdBQkFndEJBQ0FES0FJUWF5SUhJQU1vQWhSQkFXb2lBaUFDSUFkSUd5RU9BMEFnQnlBT1JnMENRUUFnQXlnQ0NDSUlheUlDSUFNb0FneEJBV29pQ1NBQ0lBbEtHeUVQSUFBZ0IwRUJkQ0FGYWlBQmJDQUVhaUFJUVFGMGEwRUJkR29oQ0FOQUlBSWdEMFpGQkVBZ0RDOEJBQ0lRUVlBZ1J3UkFJQXNnQ0MwQUFTSUphaUVMSUFrZ0VHd2dEV29oRFNBSklBbHNJQXBxSVFvTElBSkJBV29oQWlBTVFRSnFJUXdnQ0VFRWFpRUlEQUVMQ3lBSFFRRnFJUWNNQUFzQUMwRUFJQU1vQWhCcklnY2dBeWdDRkVFQmFpSUNJQUlnQjBnYklRNERRQ0FISUE1R0RRRkJBQ0FES0FJSUlnaHJJZ0lnQXlnQ0RFRUJhaUlKSUFJZ0NVb2JJUThnQUNBSFFRRjBJQVZxSUFGc0lBUnFJQWhCQVhSclFRRjBhaUVJQTBBZ0FpQVBSa1VFUUNBTUx3RUFJaEJCZ0NCSEJFQWdDeUFJTFFBQUlnbHFJUXNnQ1NBUWJDQU5haUVOSUFrZ0NXd2dDbW9oQ2dzZ0FrRUJhaUVDSUF4QkFtb2hEQ0FJUVFScUlRZ01BUXNMSUFkQkFXb2hCd3dBQ3dBTFFRQWhEQ0FHSUFzZ0Myd2dBeWdDSkNJQWJTSUJJQXBIQkg4Z0RTQURLQUlnSUF0c0lBQnRhMEhrQUd3Z0F5Z0NIRzFCNUFCc0FuOGdDaUFCYTdLUkloR0xRd0FBQUU5ZEJFQWdFYWdNQVF0QmdJQ0FnSGdMYlFWQkFBczJBZ0FMUlFFQ2ZTQUJLZ0lBSUFBcUFnQWlBNU1nQWlvQ0JDQUFLZ0lFSWdTVGxDQUJLZ0lFSUFTVElBSXFBZ0FnQTVPVWswTUFBQUEvbENJRGpDQURJQU5EQUFBQUFGMGJDd1FBUVFJTEJBQkJCQXVhRFFNUGZRWi9BWDRqQUVFZ2F5SVZKQUFDUUFKQUlBSkJBRWdOQUFKQUFrQUNRQUpBQWtBZ0FnNEVBQUVDQXdRTElBVkJBbTJ5SVFvZ0JFRUNiYkloQ3lBRlFRaHRzaUVNSUFSQkNHMnlJUWtnQlVFSGJFRUliYkloRFNBRVFRZHNRUWh0c2lFT1FRQWhBa0YvSVFVRFFBSkFBa0FDUUNBQUlBSkJHR3hxSWdFb0FneEJBV29PQWdJQUFRc2dBU29DRUNJR0lBbGRJQVlnRGw1eURRQWdBU29DRkNJSElBeGRJQWNnRFY1eURRQWdCaUFMa3lJR0lBYVVJQWNnQ3BNaUJpQUdsSklpQmlBSVhrVU5BQ0FDSVFVZ0JpRUlDeUFDUVFGcUlRSU1BUXNMUVg4aEFpQUZRWDlHRFFVZ0FDQUZRUmhzYWtFQk5nSU1JQVVoQWd3RkN5QUZRUWh0c2lFS0lBUkJDRzJ5SVFzZ0JVRUhiRUVJYmJJaERDQUVRUWRzUVFodHNpRUpRWDhoQlVFQUlRSURRQUpBQWtBQ1FDQUFJQUpCR0d4cUlnRW9BZ3hCQVdvT0FnSUFBUXNnQVNvQ0VDSUdJQXRkSUFZZ0NWNXlEUUFnQVNvQ0ZDSUhJQXBkSUFjZ0RGNXlEUUFnQmlBREtnSUFreUlHSUFhVUlBY2dBeW9DQkpNaUJpQUdsSklpQmlBSVhrVU5BQ0FHSVFnZ0FpRUZDeUFDUVFGcUlRSU1BUXNMUVg4aEFpQUZRWDlHRFFRZ0FDQUZRUmhzYWtFQk5nSU1JQVVoQWd3RUN5QUZRUWh0c2lFS0lBUkJDRzJ5SVFzZ0JVRUhiRUVJYmJJaERDQUVRUWRzUVFodHNpRUpRWDhoQlVFQUlRSURRQUpBQWtBQ1FDQUFJQUpCR0d4cUlnRW9BZ3hCQVdvT0FnSUFBUXNnQVNvQ0VDSUdJQXRkSUFZZ0NWNXlEUUFnQVNvQ0ZDSUhJQXBkSUFjZ0RGNXlEUUFnQmlBREtnSUFJZ2FUSUFNcUFnd2dBeW9DQkNJTms1UWdBeW9DQ0NBR2t5QUhJQTJUbEpNaUJpQUdsQ0lHSUFoZVJRMEFJQVloQ0NBQ0lRVUxJQUpCQVdvaEFnd0JDd3RCZnlFQ0lBVkJmMFlOQXlBQUlBVkJHR3hxUVFFMkFnd2dCU0VDREFNTElBTWdBMEVJYWlBVlFSeHFJQlZCR0dvUTVnTWdBeUFEUVJCcUlCVkJGR29nRlVFUWFoRG1BMEVDUVFFZ0ZTb0NGQ0lISUJVcUFoZ2lDcFFpQ0NBVktnSWNJZ3NnRlNvQ0VDSU1sQ0lHazBNQUFBQUFZQ0lZR3lFV1FRRkJBaUFZR3lFWklBWWdDSk1oRGlBRFFSaHFJUm9nQlVFSWJiSWhEeUFFUVFodHNpRVFJQVZCQjJ4QkNHMnlJUkVnQkVFSGJFRUliYkloRWlBS2pDRVRJQXlNSVJSQmZ5RUNRUUFoQkVNQUFBQUFJUWdEUUFKQUFrQUNRQ0FBSUFSQkdHeHFJZ0VvQWd4QkFXb09BZ0lBQVFzZ0FTb0NFQ0lHSUJCZElBWWdFbDV5RFFBZ0FTb0NGQ0lKSUE5ZElBa2dFVjV5RFFBZ0F5QUdPQUlZSUFNZ0FTb0NGRGdDSENBRElCb2dGVUVNYWlBVlFRaHFFT1lEQWtBZ0dFVWdGU29DRENJR0lBcVVJQXNnRlNvQ0NDSU5qQ0lKbEpKREFBQUFBR0JGY2tVRVFFRURRUUlnQmlBTWxDQUhJQW1Va2tNQUFBQUFZQ0lCR3lFRlFRSkJBeUFCR3lFQlFRRWhGd3dCQ3lBR0lBeVVJQWNnQ1pTU1F3QUFBQUJnUlNBT1F3QUFBQUJnUlhKRkJFQkJBMEVCSUFZZ0NwUWdDeUFKbEpKREFBQUFBR0FpQVJzaEJVRUJRUU1nQVJzaEFVRUNJUmNNQVFzZ0N5QU5sQ0FHSUJPVWtrTUFBQUFBWUVVTkFVRURJUmNnR1NFQklCWWhCU0FISUEyVUlBWWdGSlNTUXdBQUFBQmdSUTBCQ3lBRElBTWdGMEVEZEdvZ0F5QUJRUU4wYWlJQkVNMEZJQU1nQVNBRElBVkJBM1JxRU0wRmtpSUdJQWhlUlEwQUlBWWhDQ0FFSVFJTElBUkJBV29oQkF3QkN3c2dBa0YvUmcwQ0lBQWdBa0VZYkdwQkFUWUNEQXdDQ3dKQUEwQUNRQUpBQWtBZ0FTQVdRUmhzYWlJREtBSU1RUUZxRGdJQ0FBRUxJQU5CQVRZQ0RFRUFJUUlEUUFKQUFrQWdBQ0FDUVJoc2FpSUVLQUlNUVFGcURnSURBQUVMSUFNb0FnQWdCQ2dDQUVjTkFDQURLQUlFSUFBZ0FrRVliR29pQlNnQ0JFY05BQ0FES0FJSUlBVW9BZ2hHRFFVTElBSkJBV29oQWd3QUN3QUxJQlpCQVdvaEZnd0JDd3NnQVVGL05nSU1RUUFoQWtISWxRUkJBRUhJbFFRb0FnQWlBUVIvSUFFRlFlaVlCRUVBRUpzRlFRRnJyVGNEQUVISWxRUW9BZ0FMUVFGcUlnRWdBVUdBQVVZYk5nSUFRUUFoQkFOQUFrQUNRQUpBSUFBZ0FrRVliR29vQWd4QkFXb09BZ0lBQVFzZ0JFRUJhaUVFQ3lBQ1FRRnFJUUlNQVFzTElBUkZEUUVDZjBIb21BUkI2SmdFS1FNQVFxMysxZVRVaGYybzJBQitRZ0Y4SWhzM0F3QWdCTElnRzBJaGlLZXlsRU1BQUFBd2xDSUlpME1BQUFCUFhRUkFJQWlvREFFTFFZQ0FnSUI0Q3lFQlFRQWhCRUVBSVFVRFFBSkFBa0FnQUNBRVFSaHNhaUlES0FJTUlnSkJBV29PQWdVQUFRc2dBU0FGUmdSQUlBTkJBVFlDRENBRUlRSU1CUXNnQlVFQmFpRUZDeUFFUVFGcUlRUU1BQXNBQ3lBRVFRRTJBZ3dNQVF0QmZ5RUNDeUFWUVNCcUpBQWdBZ3NuQVFGL0l3QkJFR3NpQWlRQUlBQkJBa0dNcmdKQmxLNENRZUlBSUFFUUJpQUNRUkJxSkFBTEp3RUJmeU1BUVJCcklnSWtBQ0FBUVFOQitLMENRWVN1QWtIaEFDQUJFQVlnQWtFUWFpUUFDeWNCQVg4akFFRVFheUlDSkFBZ0FFRURRY3l0QWtHc3B3SkIyUUFnQVJBR0lBSkJFR29rQUF1N0JBSVRmUUYvSXdCQk1Hc2lGeVFBQWtBZ0FBUkFJQUJCQ0dvZ0FTQVhFTEFESUJjcUFod2lDQ0FYS2dJUUloQWdBaW9DQUNJRWxDSVBJQUlxQWdRaUJTQVhLZ0lVSWdlVUlncVNraUFYS2dJc0lnc2dGeW9DSUNJTUlBU1VJaEVnQlNBWEtnSWtJZzJVSWhLU2tpSUdsU0VKSUJjcUFnd2lEaUFYS2dJQUloTWdCSlFpRkNBRklCY3FBZ1FpRlpRaUZwS1NJQWFWSVFZZ0NDQVBJQVZEQUFBZ1FaSWlCU0FIbEpLU0lBc2dFU0FGSUEyVWtwSWlCNVVoRHlBT0lCUWdCU0FWbEpLU0lBZVZJUWNnQ0NBUUlBUkRBQUFnUVpJaUJKUWdDcEtTSUFzZ0RDQUVsQ0FTa3BJaUJaVWhDQ0FPSUJNZ0JKUWdGcEtTSUFXVklRUU1BUXNnQVNvQ0hDSUpJQUVxQWhBaUNDQUNLZ0lBSWdTVUloQWdBaW9DQkNJRlF3QUFJRUdTSWdZZ0FTb0NGQ0lLbEpLU0lBRXFBaXdpQ3lBQktnSWdJZ3dnQkpRaUVTQUdJQUVxQWlRaURaU1NraUlIbFNFUElBRXFBZ3dpRGlBQktnSUFJaElnQkpRaUV5QUdJQUVxQWdRaUJwU1NraUFIbFNFSElBa2dDQ0FFUXdBQUlFR1NJZ1NVSUFVZ0NwUWlDcEtTSUFzZ0RDQUVsQ0FGSUEyVUlneVNraUlObFNFSUlBNGdFaUFFbENBRklBYVVJZ1dTa2lBTmxTRUVJQWtnRUNBS2twSWdDeUFSSUF5U2tpSUdsU0VKSUE0Z0V5QUZrcElnQnBVaEJnc2dBeUFFSUFhVElnUWdCSlFnQ0NBSmt5SUVJQVNVa2lJRUlBY2dCcE1pQlNBRmxDQVBJQW1USWdVZ0JaU1NJZ1VnQkNBRlhTSUFHNUZEWEk4aVFKUTRBZ1FnQXlBRklBUWdBQnVSUTF5UElrQ1VPQUlBSUJkQk1Hb2tBQXVDQXdFRWZ3SkFBa0FDUUFKQUlBQW9BaGdPQXdBQUFRSUxJQUFvQWl3aUFVRUFJQUZCQUVvYklRTkJBQ0VCQTBBZ0FTQURSZzBEQWtBZ0FDQUJRUWgwYWlJQ1FUUnFLQUlBUVFCSURRQWdBaXNEVUVRQUFBQUFBQURnUDJORkRRQWdBa0YvTmdJNElBSkJmellDTkNBQ1FRWTJBcHdDQ3lBQlFRRnFJUUVNQUFzQUN5QUFLQUlzSWdGQkFDQUJRUUJLR3lFRFFRQWhBUU5BSUFFZ0EwWU5BZ0pBSUFBZ0FVRUlkR29pQWtFMGFpZ0NBRUVBU0EwQUlBSXJBMUJFQUFBQUFBQUE0RDlqUlEwQUlBSkJmellDUENBQ1FYODJBalFnQWtFR05nS2NBZ3NnQVVFQmFpRUJEQUFMQUFzZ0FDZ0NMQ0lCUVFBZ0FVRUFTaHNoQkVFQUlRRURRQ0FCSUFSR0RRRkJBQ0VEQWtBZ0FDQUJRUWgwYWlJQ1FUaHFLQUlBUVFCSURRQWdBaXNEV0VRQUFBQUFBQURnUDJORkRRQWdBa0YvTmdJNFFRRWhBd3NDUUNBQ0tBSThRUUJJRFFBZ0Fpc0RZRVFBQUFBQUFBRGdQMk5GRFFBZ0FrRi9OZ0k4SUFORkRRQWdBa0VHTmdLY0Fnc2dBVUVCYWlFQkRBQUxBQXNMSWdBQ1FDQUFCRUFnQUNBQklBSWdBeERVQlF3QkMwRUFJQUVnQWlBREVOUUZDd3VrQVFFQ2Z5QUFLQUlFSUFBUU5DZ0NBRWNFUUNNQVFSQnJJZ01rQUNBRElBQkJBUkRFQlNFQ0lBQVFOQ0FDS0FJRUlBRVFqd01nQWlBQ0tBSUVRUkJxTmdJRUlBSVFiaUFEUVJCcUpBQVBDeU1BUVNCcklnTWtBQ0FBRURRaUFpQURRUWhxSUFBZ0FCQzRBVUVCYWhEREJTQUFFTGdCSUFJUXdnVWlBaWdDQ0NBQkVJOERJQUlnQWlnQ0NFRVFhallDQ0NBQUlBSVF3UVVnQWhEQUJTQURRU0JxSkFBTDNRVUNDbjhCZlNNQVFTQnJJZ1FrQUNBRUlBQVEyd0kyQWhBZ0JFRVlhaUVISXdCQklHc2lBU1FBUWZDVkJCQTlHaUFBS0FJQUlRVkI4SlVFRUkwQklRSWdBVUVBT2dBZkFrQUNRQ0FDUlEwQVFmQ1ZCQ0FGSUFJUVd5SUdFRHNvQWdBaUEwVU5BQU5BSUFNb0FnQWlBMFVOQVNBRklBTW9BZ1JIQkVBZ0F5Z0NCQ0FDRUZzZ0JrY05BZ3RCOEpVRUVGa2dBMEVJYWlBQUVOQUJSUTBBQ3d3QkN5TUFRUkJySWdna0FFSHdsUVFRTkNFQUlBRkJFR3BCeUFFUVRpQUlRUWhxSUFCQkFCQ3VBaEN0QWlJQUtBSUFRUWhxSVFrZ0JDZ0NFQ0VLSXdCQkVHc2lBeVFBSUFNZ0NqWUNDQ0FKSUFNb0FnZ29BZ0EyQWdBZ0NVRUlha0VBUWJnQkVEb2FJQU5CRUdva0FDQUFFRXBCQVRvQUJDQUFLQUlBSUFVMkFnUWdBQ2dDQUVFQU5nSUFJQWhCRUdva0FFSHdsUVFRUFNnQ0FDRUFRZkNWQkJCWklRTUNRQ0FDQkVBZ0FFRUJhck1nQXlvQ0FDQUNzNVJlUlEwQkN5QUJJQUlRNFFGQkFYTWdBa0VCZEhJMkFnd2dBUUovUWZDVkJCQTlLQUlBUVFGcXMwSHdsUVFRV1NvQ0FKV05JZ3REQUFDQVQxMGdDME1BQUFBQVlIRUVRQ0FMcVF3QkMwRUFDellDQ0VId2xRUWdBVUVNYWlBQlFRaHFFSGtvQWdBUXlBVWdCVUh3bFFRUWpRRWlBaEJiSVFZTEFrQkI4SlVFSUFZUU95Z0NBQ0lBUlFSQUlBRW9BaEJCK0pVRUtBSUFOZ0lBUWZpVkJDQUJLQUlRTmdJQVFmQ1ZCQ0FHRUR0QitKVUVOZ0lBSUFFb0FoQW9BZ0JGRFFFZ0FTZ0NFQ0VBUWZDVkJDQUJLQUlRS0FJQUtBSUVJQUlRV3hBN0lBQTJBZ0FNQVFzZ0FTZ0NFQ0FBS0FJQU5nSUFJQUFnQVNnQ0VEWUNBQXNnQVVFUWFpSUFFTGtCSVFOQjhKVUVFRDBpQWlBQ0tBSUFRUUZxTmdJQUlBRkJBVG9BSHlBQUtBSUFJUUlnQUVFQU5nSUFJQUlFUUNBQUVFb2lBQzBBQkFSQUlBQW9BZ0FhQ3lBQ0JFQWdBQ2dDQUJvZ0FoQXpDd3NMSUFjZ0FVRVFhaUFERUgwZ0FVRWZhaEN2QWlBQlFTQnFKQUFnQnhCdklRQWdCRUVnYWlRQUlBQkJDR29MTVFFQmZ5QUFFTXNGSUFBb0FnQUVRQ0FBSUFBb0FnQVF5Z1VnQUJBMEdpQUFLQUlBSVFFZ0FCQ0xBaG9nQVJBekN3c1pBQ0FBUWZ3Q2FoRFpCUUpBSUFCQjJBSnFFT2NGQ3lBQUMvQUJBUUovSUFBb0F0Z0JJZ0VFUUFKQUlBRkZEUUFnQVNnQzhJYXZBMFVOQUNBQlFRQTJBdkNHcndNTElBQW9BdGdCSWdFRVFDQUJLQUtJaDY4RElnSUVRQ0FDRUVVZ0FVRUFOZ0tJaDY4REN5QUJLQUxnaHFjQ0VETWdBVUhraHFjQ2FpZ0NBQkF6SUFFUU13c2dBRUVBTmdMWUFRc2dBQ2dDM0FFRVFDQUFLQUxjQVNJQkJFQWdBUkRzQXlBQUtBTGNBUkF6SUFCQkFEWUMzQUVMSUFCQkFEWUMzQUVMSUFBb0FzQUJCRUFDUUNBQVFjQUJhaUlCUlEwQUlBRW9BZ0FpQWtVTkFDQUNLQUs0QVJBeklBRW9BZ0FvQXJ3QkVETWdBU2dDQUJBeklBRkJBRFlDQUFzZ0FFRUFOZ0xBQVFzTGxRRUJBMzhqQUVFZ2F5SURKQUFnQXlBQ05nSWNJQU1nQVJCTElRUWdBeWdDSENFQ0l3QkJnQkJySWdFa0FDQUJRWUFRSUFRUVBpQUNFSWtDR2lBRFFSQnFJZ1VnQVJCTEdpQUJRWUFRYWlRQVFRQWhBZ05BSUFBUVFpQUNTd1JBSUFBZ0FoQlNLQUlBSWdGQkNDQUZJQUVvQWdBb0FnZ1JCUUFnQWtFQmFpRUNEQUVMQ3lBRkVEZ2FJQVFRT0JvZ0EwRWdhaVFBQzdFQkFRSi9JQUJCQVRZQ0VDQUFJQVEyQWdnZ0FDQUROZ0lFSUFBZ0FqWUNBQ0FBSUFRZ0JXdzJBaFFqQUVFUWF5SUhKQUFnQUNBQk5nSVlRUkFRVGlFR0l3QkJJR3NpQkNRQUlBUWdBVFlDRENBR0VQc0RJZ1pCeU53Qk5nSUFJQVpCREdvZ0JFRUlhaUFFUVF4cUVQWUJFUFlCR2lBRVFTQnFKQUFnQUNBR05nSWNJQWNnQVRZQ0JDQUhJQUUyQWdBZ0IwRVFhaVFBSUFBZ0JVRUFTQVIvSUFJUTNnVWdBMndGSUFVTE5nSU1JQUFMUlFFQmZ5TUFRUkJySWdFa0FBSkFBa0FDUUNBQVFRRnJEZ0lDQVFBTFFSQVFDaUFCUWFYYkFCQkxFTjBDUVpUVkFVRU9FQWtBQzBFRUlRQUxJQUZCRUdva0FDQUFDMmdCQW44akFFR1FBbXNpQVNRQUlBRkJqQUpxSWdJUW13VWFRZlNXQkVINGxnUkIvSllFRUNnZ0FrSEFsd1FRSjBIb2x3UkJnSmNFUWZ5V0JFSGdsd1FvQWdBYktBSUFOZ0lBSUFGQmdBSkI5d2hCd0pjRUVERWFJQUFnQVJCTEdpQUJRWkFDYWlRQUMrY0NBUWgvSXdCQkVHc2lCeVFBSUFBb0FnQWhBaUFIUVFBNkFBOGdCMEVQYWlFSUFrQWdBRUVFYWlJRUVKSUJJZ01nQVNBQ2JDSUNTUVJBSXdCQklHc2lDU1FBQWtBZ0FpQURheUlDSUFRUU5DZ0NBQ0FFS0FJRWEwMEVRQ01BUVJCcklnVWtBQ0FGSUFRZ0FoQ3RBeUlES0FJRUlRSWdBeWdDQ0NFR0EwQWdBaUFHUmdSQUlBTVFiaUFGUVJCcUpBQUZJQVFRTkNBQ0lBZ1FyQU1nQXlBQ1FRRnFJZ0kyQWdRTUFRc0xEQUVMSUFRUU5DRURJQWxCQ0dvZ0JDQUVFSklCSUFKcUVLc0RJQVFRa2dFZ0F4Q2xCQ0VESXdCQkVHc2lCU1FBSUFVZ0EwRUlhaUFDRUl3R0lnSW9BZ0FoQmdOQUlBSW9BZ1FnQmtjRVFDQURLQUlRSUFJb0FnQWdDQkNzQXlBQ0lBSW9BZ0JCQVdvaUJqWUNBQXdCQ3dzZ0FoQ3FBU0FGUVJCcUpBQWdCQ0FERUtRRUlBTVFvd1FMSUFsQklHb2tBQXdCQ3lBQ0lBTkpCRUFnQkNBRUtBSUFJQUpxRUlZRUN3c2dBRUVRYWlBQkVLNEdJQWRCRUdva0FBc2dBQ0FBRURRYUEwQWdBUVJBSUFFb0FnQWhBQ0FCRURNZ0FDRUJEQUVMQ3d1K0FnRUhmeUFBRUVvYUFrQWdBUVJBSUFFaUFrSC8vLy8vQTBzRVFFR1doZ0VRclFFQUN5QUFJQUpCQW5RUVRoQ3NBaUFBRUVvZ0FqWUNBRUVBSVFFRFFDQUJJQUpHQkVBZ0FFRUlhaUlCS0FJQUlnTkZEUU1nQUNBREtBSUVJQUlRV3lJSEVEc2dBVFlDQUFOQUlBTW9BZ0FpQVVVTkJBSkFJQUVvQWdRZ0FoQmJJZ1FnQjBZTkFDQUJJUVVnQUNBRUVEc29BZ0JGQkVBZ0FDQUVFRHNnQXpZQ0FDQUVJUWNNQVFzRFFBSkFJQVVpQmlnQ0FFVUVRRUVBSVFVTUFRc2dBQkJaSUFGQkNHb2dCaWdDQUVFSWFoRFFBU0VJSUFZb0FnQWhCU0FJRFFFTEN5QURJQVUyQWdBZ0JpQUFJQVFRT3lnQ0FDZ0NBRFlDQUNBQUlBUVFPeWdDQUNBQk5nSUFEQUVMSUFFaEF3d0FDd0FGSUFBZ0FSQTdRUUEyQWdBZ0FVRUJhaUVCREFFTEFBc0FDeUFBUVFBUXJBSWdBQkJLUVFBMkFnQUxDNG9EQWdOL0FYd2pBRUVRYXlJQkpBQUNRQ0FBdkNJRFFmLy8vLzhIY1NJQ1FkcWZwUG9EVFFSQUlBSkJnSUNBekFOSkRRRWdBTHNReFFFaEFBd0JDeUFDUWRHbjdZTUVUUVJBSUFDN0lRUWdBa0hqbDl1QUJFMEVRQ0FEUVFCSUJFQWdCRVFZTFVSVSt5SDVQNkFReGdHTUlRQU1Bd3NnQkVRWUxVUlUreUg1djZBUXhnRWhBQXdDQzBRWUxVUlUreUVKd0VRWUxVUlUreUVKUUNBRFFRQk9HeUFFb0pvUXhRRWhBQXdCQ3lBQ1FkWGppSWNFVFFSQUlBSkIzOXUvaFFSTkJFQWdBTHNoQkNBRFFRQklCRUFnQkVUU0lUTi9mTmtTUUtBUXhnRWhBQXdEQ3lBRVJOSWhNMzk4MlJMQW9CREdBWXdoQUF3Q0MwUVlMVVJVK3lFWlFFUVlMVVJVK3lFWndDQURRUUJJR3lBQXU2QVF4UUVoQUF3QkN5QUNRWUNBZ1B3SFR3UkFJQUFnQUpNaEFBd0JDd0pBQWtBQ1FBSkFJQUFnQVVFSWFoQ2NCVUVEY1E0REFBRUNBd3NnQVNzRENCREZBU0VBREFNTElBRXJBd2dReGdFaEFBd0NDeUFCS3dNSW1oREZBU0VBREFFTElBRXJBd2dReGdHTUlRQUxJQUZCRUdva0FDQUFDL1FDQWdOL0FYd2pBRUVRYXlJQkpBQUNmU0FBdkNJRFFmLy8vLzhIY1NJQ1FkcWZwUG9EVFFSQVF3QUFnRDhnQWtHQWdJRE1BMGtOQVJvZ0FMc1F4Z0VNQVFzZ0FrSFJwKzJEQkUwRVFDQUNRZVNYMjRBRVR3UkFSQmd0UkZUN0lRbEFSQmd0UkZUN0lRbkFJQU5CQUVnYklBQzdvQkRHQVl3TUFnc2dBTHNoQkNBRFFRQklCRUFnQkVRWUxVUlUreUg1UDZBUXhRRU1BZ3RFR0MxRVZQc2grVDhnQktFUXhRRU1BUXNnQWtIVjQ0aUhCRTBFUUNBQ1FlRGJ2NFVFVHdSQVJCZ3RSRlQ3SVJsQVJCZ3RSRlQ3SVJuQUlBTkJBRWdiSUFDN29CREdBUXdDQ3lBRFFRQklCRUJFMGlFemYzelpFc0FnQUx1aEVNVUJEQUlMSUFDN1JOSWhNMzk4MlJMQW9CREZBUXdCQ3lBQUlBQ1RJQUpCZ0lDQS9BZFBEUUFhQWtBQ1FBSkFBa0FnQUNBQlFRaHFFSndGUVFOeERnTUFBUUlEQ3lBQkt3TUlFTVlCREFNTElBRXJBd2lhRU1VQkRBSUxJQUVyQXdnUXhnR01EQUVMSUFFckF3Z1F4UUVMSVFBZ0FVRVFhaVFBSUFBTFdBRUNmeUFBRUQwb0FnQUVRQ0FBSUFCQkNHb2lBU2dDQUJEaEJTQUJRUUEyQWdBZ0FCQ05BU0VDUVFBaEFRTkFJQUVnQWtZRVFDQUFFRDFCQURZQ0FBVWdBQ0FCRUR0QkFEWUNBQ0FCUVFGcUlRRU1BUXNMQ3d1b0JBSUhmd1Y4SXdCQm9BRnJJZ2NrQUVGL0lRVUNRQ0FCS0FJSUlnWkJBMGdOQUNBR1FlQUFiQkE1SWdoRkJFQkJBRUVEUWRzTFFRQVFQQXdCQ3lBR1FRUjBFRGtpQ1FSQVFRQWhCZ05BUVFBaEJTQUdRUU5HQkVCQkFDRUdBa0FEUUNBQUlBTWdCMEV3YWhEM0JrUUFBQUFBQUFBQUFDRU1RUUFoQlFOQUlBRW9BZ2dpQWlBRlNnUkFJQWRCa0FGcUlBZEJNR29nQVNnQ0JDQUZRUmhzYWhDSkJrRUFTQTBESUFWQkJIUWlBaUFCS0FJQWFpSUtLd01BSVEwZ0J5c0RrQUVoRHlBQ0lBbHFJZ0lnQ2lzRENDQUhLd09ZQWFFaURqa0RDQ0FDSUEwZ0Q2RWlEVGtEQUNBTUlBMGdEYUlnRGlBT29xQ2dJUXdnQlVFQmFpRUZEQUVMQ3dKQUlBd2dBcmVqSWd3Z0FDc0RhR01OQUFKQUlBWkZEUUFnRENBQUt3TjRZMFVOQUNBQUt3TndJQXdnRUtOakRRRUxRUUFoQlNBR0lBQW9BbUJHRFFBRFFDQUNJQVZLQkVBZ0NDQUZRZUFBYkdvZ0FDQURJQUVvQWdRZ0JVRVliR29RaEFaQkFFZ05CQ0FGUVFGcUlRVWdBU2dDQ0NFQ0RBRUxDeUFISUFrZ0NDQUNRUUYwRVA0RlFRQklEUUlnQXlBSEVQZ0ZJQVpCQVdvaEJpQU1JUkFNQVFzTElBUWdERGtEQUNBSUVETWdDUkF6UVFBaEJRd0VDeUFJRURNZ0NSQXpRWDhoQlF3REJRTkFJQVZCQkVjRVFDQUZRUU4wSWdvZ0F5QUdRUVYwSWd0cWFpQUNJQXRxSUFwcUt3TUFPUU1BSUFWQkFXb2hCUXdCQ3dzZ0JrRUJhaUVHREFFTEFBc0FDMEVBUVFOQjJ3dEJBQkE4SUFnUU13c2dCMEdnQVdva0FDQUZDeFFBSUFBZ0FFRUlhaWdDQUJEaEJTQUFFTEFDQ3pBQkFuMENmMEVCSUFBcUFnQWlBaUFCS2dJQUlnTmREUUFhUVFBZ0FpQURYZzBBR2lBQUtBSUVJQUVvQWdSSUN3dHRBQ0FBS2dJZ0lBRXFBaUNVSUFBcUFod2dBU29DSEpRZ0FDb0NHQ0FCS2dJWWxDQUFLZ0lVSUFFcUFoU1VJQUFxQWhBZ0FTb0NFSlFnQUNvQ0RDQUJLZ0lNbENBQUtnSUlJQUVxQWdpVUlBQXFBZ0FnQVNvQ0FKUWdBQ29DQkNBQktnSUVsSktTa3BLU2twS1NDeEFBSUFCQ0FEY0NBQ0FBUVFBMkFnZ0xaUUVDZlNBQUtnSVFJQUFxQWhRZ0FDb0NIQ0FBS2dJZ0VLUUJJUUVnQUNvQ0RDQUFLZ0lVSUFBcUFoZ2dBQ29DSUJDa0FTRUNJQUFxQWd3Z0FDb0NFQ0FBS2dJWUlBQXFBaHdRcEFFZ0FDb0NDSlFnQVNBQUtnSUFsQ0FDSUFBcUFnU1VrNUlMREFBZ0FDQUJLUUlBTndJQUM5Z0NBUXA5SUFVZ0Jpb0NBQ0FIS2dJQWtpQUlLZ0lBa2lBSktnSUFra01BQUlBK2xDSUtPQUlBSUFVZ0Jpb0NCQ0FIS2dJRWtpQUlLZ0lFa2lBSktnSUVra01BQUlBK2xDSUxPQUlFSUFZcUFnQWdDcE1pRENBTWxDQUdLZ0lFSUF1VElnMGdEWlNTa1NBSEtnSUFJQXFUSWc0Z0RwUWdCeW9DQkNBTGt5SVBJQStVa3BHU0lBZ3FBZ0FnQ3BNaUVDQVFsQ0FJS2dJRUlBdVRJaEVnRVpTU2taSWdDU29DQUNBS2t5SUtJQXFVSUFrcUFnUWdDNU1pQ3lBTGxKS1Jra01BQUlBK2xDSVNRd0FBQUFCY0JFQWdCRU1BQUlBL0lCS1Z1MFROTzM5bW5xRDJQNksySWhNNEFnQWdBQ0FNSUJPVU9BSUFJQUFnRFNBRUtnSUFsRGdDQkNBQklBNGdCQ29DQUpRNEFnQWdBU0FQSUFRcUFnQ1VPQUlFSUFJZ0VDQUVLZ0lBbERnQ0FDQUNJQkVnQkNvQ0FKUTRBZ1FnQXlBS0lBUXFBZ0NVT0FJQUlBTWdDeUFFS2dJQWxEZ0NCQXNnRWtNQUFBQUFYQXNrQVFGL0l3QkJFR3NpQVNRQUlBRWdBRFlDQ0NBQktBSUlJUUFnQVVFUWFpUUFJQUFMRWdBZ0FDQUFLQUlBSUFGQkFuUnFOZ0lBQ3pBQkFYOGpBRUVRYXlJQ0pBQWdBaUFCTmdJQUlBSWdBRFlDQ0NBQ0lBSkJDR29RN1FNaEFDQUNRUkJxSkFBZ0FBc05BQ0FBS0FJQUlBQW9BZ1JHQzFjQkFuOGpBRUVnYXlJREpBQWdBQkEwSWdJZ0EwRUlhaUFBSUFBUVFrRUJhaENpQXlBQUVFSWdBaENiQXlJQ0tBSUlJQUVRM3dJZ0FpQUNLQUlJUVFocU5nSUlJQUFnQWhDZ0F5QUNFSjhESUFOQklHb2tBQXV2QkFJSmZ3RitJQUFRdHdJaEFpQUFFT1VDSVFNakFFRWdheUlHSkFBZ0JpQUROZ0lRSUFZZ0FqWUNHQ0FHUVJCcUlBWkJHR29RblFNaEJTTUFRUkJySWdRa0FDQUVJQU0yQWdBZ0JDQUNOZ0lJSUFWQkFrNEVRQ0FFS0FJSUlRSWdCQkRTQVNnQ0FDRURJd0JCRUdzaUFTUUFJQUVnQWlrQ0FDSUtOd01JSUFJZ0F5a0NBRGNDQUNBRElBbzNBZ0FnQVVFUWFpUUFJQVFvQWdnaEFpQUVLQUlBR2lNQVFUQnJJZ0VrQUNBQklBSTJBaUFnQVNBQ05nSW9JQUZCSUdvZ0FVRW9haENkQXlFQ0FrQWdCVUVCYXlJRlFRSklEUUFnQlVFQ2EwRUJkaUlKSUFKSURRQWdBU0FCUVNocUlBSkJBWFFpQTBFQmNpSUNFUGdCTmdJWUFrQWdBMEVDYWlJRElBVk9EUUFnQVVFWWFpSUhLQUlBSVFnZ0FTQUhRUUVRK0FFMkFoQWdDQ0FCS0FJUUVLZ0NSUTBBSUFGQkdHb1Fvd0VhSUFNaEFnc2dBU2dDR0NBQktBSWdFS2dDRFFBZ0FTQUJLQUlnS1FJQU53TVFBMEFDUUNBQktBSWdJQUVvQWhncEFnQTNBZ0FnQVNBQktBSVlOZ0lnSUFJZ0NVb05BQ0FCSUFGQktHb2dBa0VCZENJRFFRRnlJZ0lRK0FFMkFoZ0NRQ0FEUVFKcUlnTWdCVTROQUNBQlFSaHFJZ2NvQWdBaENDQUJJQWRCQVJENEFUWUNDQ0FJSUFFb0FnZ1FxQUpGRFFBZ0FVRVlhaENqQVJvZ0F5RUNDeUFCS0FJWUlBRkJFR29RcUFKRkRRRUxDeUFCS0FJZ0lBRXBBeEEzQWdBTElBRkJNR29rQUFzZ0JFRVFhaVFBSUFaQklHb2tBQ0FBS0FJRVFRaHJJUUlnQUJCQ0lRTWdBQ0FDRUtjRElBQWdBeENWQkF1NUFnSUJmUUYvSUFJZ0FSRHJCU0lEaTJBaUJFVUVRQ0FBUXdBQWdEOGdBNVVpQWlBQktnSVFJQUVxQWhRZ0FTb0NIQ0FCS2dJZ0VLUUJsRGdDQUNBQUlBSWdBU29DQ0NBQktnSUVJQUVxQWlBZ0FTb0NIQkNrQVpRNEFnUWdBQ0FDSUFFcUFnUWdBU29DQ0NBQktnSVFJQUVxQWhRUXBBR1VPQUlJSUFBZ0FpQUJLZ0lVSUFFcUFnd2dBU29DSUNBQktnSVlFS1FCbERnQ0RDQUFJQUlnQVNvQ0FDQUJLZ0lJSUFFcUFoZ2dBU29DSUJDa0FaUTRBaEFnQUNBQ0lBRXFBZ2dnQVNvQ0FDQUJLZ0lVSUFFcUFnd1FwQUdVT0FJVUlBQWdBaUFCS2dJTUlBRXFBaEFnQVNvQ0dDQUJLZ0ljRUtRQmxEZ0NHQ0FBSUFJZ0FTb0NCQ0FCS2dJQUlBRXFBaHdnQVNvQ0dCQ2tBWlE0QWh3Z0FDQUNJQUVxQWdBZ0FTb0NCQ0FCS2dJTUlBRXFBaEFRcEFHVU9BSWdDeUFFUlF0cUFRSi9JQUFRU0NFQUlBRUVRQ0FBRUkwRUlBRkpCRUFRbWdFQUN5QUFFRFFhSUFGQi8vLy8vd0ZMQkVCQjVKZ0JFSzBCQUFzZ0FDQUJRUU4wSWdNUVRpSUNOZ0lBSUFBZ0FqWUNCQ0FBRURRZ0FpQURhallDQUNBQVFRQVFuZ01nQUNBQkVJTUVDeUFBQ3lFQUlBQW9BZ1FnQUJBMEtBSUFSd1JBSUFBZ0FSQ29BdzhMSUFBZ0FSRHlCUXNJQUNBQVFmd0FhZ3V3QndJR2Z3UjhJd0JCZ0FKcklnSWtBQUpBSUFFckF4QWlDQ0FJb2lBQkt3TUFJZ2dnQ0tJZ0FTc0RDQ0lKSUFtaW9LQWlDVVFBQUFBQUFBQUFBR0VFUUNBQ1FnQTNBOGdCSUFKQ2dJQ0FnSUNBZ1BnL053UEFBVVFBQUFBQUFBQUFBQ0VJREFFTElBSWdDQ0FKbnlJSW96a0R3QUVnQWlBQkt3TUlJQWlqT1FQSUFTQUJLd01RSUFpaklRb0xJQUlnQ0RrRDJBRWdBaUFLT1FQUUFTQUNJQUVyQXhnNUErQUJJQUlnQVNzRElEa0Q2QUVnQWlBQkt3TW9PUVB3QVNBQ0t3UFlBU0lKSVFnakFFRVFheUlCSkFBQ2ZDQUl2VUlnaUtkQi8vLy8vd2R4SWdOQis4T2svd05OQkVCRUFBQUFBQUFBOEQ4Z0EwR2V3WnJ5QTBrTkFSb2dDRVFBQUFBQUFBQUFBQkRNQWd3QkN5QUlJQWloSUFOQmdJREEvd2RQRFFBYUFrQUNRQUpBQWtBZ0NDQUJFSjBGUVFOeERnTUFBUUlEQ3lBQkt3TUFJQUVyQXdnUXpBSU1Bd3NnQVNzREFDQUJLd01JUVFFUXl3S2FEQUlMSUFFckF3QWdBU3NEQ0JETUFwb01BUXNnQVNzREFDQUJLd01JUVFFUXl3SUxJUWdnQVVFUWFpUUFJQUlnQ0NJS0lBSXJBOEFCSWdnZ0NLSkVBQUFBQUFBQThEOGdDcUVpQ0tLZ09RTmdJQUlnQWlzRHdBRWdBaXNEeUFHaUlBaWlJQUlyQTlBQklBa1FnUU1pQ2FLaE9RTm9JQUlnQWlzRHdBRWdBaXNEMEFHaUlBaWlJQWtnQWlzRHlBR2lvRGtEY0NBQ0lBSXJBK0FCT1FONElBSWdBaXNEeUFFZ0Fpc0R3QUdpSUFpaUlBa2dBaXNEMEFHaW9Ea0RnQUVnQWlBS0lBSXJBOGdCSWdzZ0M2SWdDS0tnT1FPSUFTQUNJQUlyQThnQklBSXJBOUFCb2lBSW9pQUpJQUlyQThBQm9xRTVBNUFCSUFJZ0Fpc0Q2QUU1QTVnQklBSWdBaXNEMEFFZ0Fpc0R3QUdpSUFpaUlBa2dBaXNEeUFHaW9Ua0RvQUVnQWlBQ0t3UFFBU0FDS3dQSUFhSWdDS0lnQ1NBQ0t3UEFBYUtnT1FPb0FTQUNJQW9nQWlzRDBBRWlDU0FKb2lBSW9xQTVBN0FCSUFJZ0Fpc0Q4QUU1QTdnQkEzOGdCRUVEUmdSL0EzOUJBQ0VCSUFaQkEwWUVmeUFDUVlBQ2FpUUFRUUFGQTBBZ0FVRUVSd1JBSUFGQkEzUWlCQ0FBSUFaQkJYUWlBMnBxSUFJZ0Eyb2dCR29yQXdBNUF3QWdBVUVCYWlFQkRBRUxDeUFHUVFGcUlRWU1BUXNMQlNBQUlBUkJCWFFpQjJvaUF5c0RFQ0VJSUFNckF3Z2hDU0FES3dNQUlRcEJBQ0VCQTBBZ0FVRUVSd1JBSUFGQkEzUWlCU0FDSUFkcWFpQUlJQUpCNEFCcUlBVnFJZ1ZCUUdzckF3Q2lJQW9nQlNzREFLSWdDU0FGS3dNZ29xQ2dPUU1BSUFGQkFXb2hBUXdCQ3dzZ0FpQUhhaUlCSUFNckF4Z2dBU3NER0tBNUF4Z2dCRUVCYWlFRURBRUxDeG9McmdFQkEzOGpBRUVRYXlJSEpBQWdCUkJ3SVFVZ0FDQUVFRUlRbHdNZ0IwRU1haUVJQTBBZ0JCQkNJQVpMQkVBZ0IwRUlhaUFJSUFFZ0F5QUVJQVlRVWlnQ0JCQnRLZ0lBSUFNZ0JDQUdFRklvQWdRUWJTb0NCQkR3QXlBRklBY3FBZ2dnQWlBRUlBWVFVaWdDQUJCdEtnSUFreEJ3SUFjcUFnd2dBaUFFSUFZUVVpZ0NBQkJ0S2dJRWt4QndrbUFFUUNBQUlBUWdCaEJTRVBZRkN5QUdRUUZxSVFZTUFRc0xJQWRCRUdva0FBdTFMUUlmZnc5OUl3QkJRR29pRkNRQUlCUkJNR29nQXhCQ0VQVUZJUjhnRkVFZ2FpQURFRUlROVFVaElBTi9JQU1RUWlBUlRRUi9RUUFoRVNBVVFRQTJBaGdnRkVFQU5nSU1JQlJDQURjREFDQVVJQWF5SWlZNEFod2dGQ0FtT0FJVUlCUWdCYklpSmpnQ0VDQVVJQ1k0QWdnZ0gwRUFFRkloRnlBZ1FRQVFVaUVZSUFSQkRHb2lBU0FERUVJaUdSQ1JBaUFBSVE4Z0ZDRUFJQVJCR0dvaEZTQUVLZ0lrSVNZZ0JDZ0NLQ0VkSUFRb0Fpd2hKQ0FFS0FJd0lRSWpBRUVRYXlJYkpBQUNRQ0FFSWlFUVF5QWRRUWxzVHdSQUlBRVFReUFaVHdSQUlCVVFRaUFkVHdSQUlCbEJCRWdOQXlBYlFkSUpOZ0lNSUFGQkFCQTdJUk1nSmhCd0lTNGdBaUFaRUp3RElTVWdFeUFaRUlVR0lCTWdHU0FaSUJ0QkRHb1E5QU1EUUNBT0lCMU9JQXdnSkU1eVJRUkFJQk1nR1VFRUlCdEJER29ROUFNZ0Z5QVRLQUlNUVFOMElnSnFJUUVnQWlBWWFpRUNRUUFoQXdKQUlCY2dFeWdDQUVFRGRDSUphaUlFSUJjZ0V5Z0NCRUVEZENJSWFpSUtJQmNnRXlnQ0NFRURkQ0lRYWlJSEVLa0JRd0FBQUFCZUlBa2dHR29pQ1NBSUlCaHFJZ2dnRUNBWWFpSVFFS2tCUXdBQUFBQmVjdzBBSUFvZ0J5QUJFS2tCUXdBQUFBQmVJQWdnRUNBQ0VLa0JRd0FBQUFCZWN3MEFJQWNnQVNBRUVLa0JRd0FBQUFCZUlCQWdBaUFKRUtrQlF3QUFBQUJlY3cwQUlBRWdCQ0FLRUtrQlF3QUFBQUJlSUFJZ0NTQUlFS2tCUXdBQUFBQmVjMFVoQXdzQ1FDQURSUTBBSUNFZ0RrRUpiQ0lpRURzaEFTQVhJQk1vQWdCQkEzUWlBbW9oQXlBWElCTW9BZ1JCQTNRaUJHb2hDaUFYSUJNb0FnaEJBM1FpQjJvaENTQVhJQk1vQWd4QkEzUWlDR29oRUNBQ0lCaHFJUklnQkNBWWFpRVdJQWNnR0dvaEJ5QUlJQmhxSVFoQkFDRUNJd0JCa0FGcklnUWtBQUpBSUFSQlFHc2dCRUU0YWlBRVFUQnFJQVJCS0dvZ0JFSGNBR29nQkVIUUFHb2dBeUFLSUFrZ0VCRHRCVVVOQUNBRVFTQnFJQVJCR0dvZ0JFRVFhaUFFUVFocUlBUkIyQUJxSUFSQnlBQnFJQklnRmlBSElBZ1E3UVZGRFFBZ0JFSGdBR29oRUNNQVFhQUNheUlLSkFBZ0NpQUVRVUJySUFSQklHb1FsQU1nQ2tISUFHb2lDU0FFUVRocUlBUkJHR29RbEFNZ0NrR1FBV29pQ0NBRVFUQnFJQVJCRUdvUWxBTWdDa0hZQVdvaUN5QUVRU2hxSUFSQkNHb1FsQU5CQUNFU1FRQWhGaU1BUWFBQ2F5SURKQUFqQUVFZ2F5SUhKQUFnQnlBS0VGZzRBZ0FnQnlBS1FTUnFJZzBRV0RnQ0JDQUhJQWtRV0RnQ0NDQUhJQXBCN0FCcUVGZzRBZ3dnQnlBSUVGZzRBaEFnQnlBS1FiUUJhaEJZT0FJVUlBY2dDeEJZT0FJWUlBY2dDa0g4QVdvUVdEZ0NIQ0FIUVFkQkJrRUZRUVJCQTBFQ0lBY3FBZ1FnQnlvQ0FGNGlDU0FIS2dJSUlBY2dDVUVDZEdvcUFnQmVHeUlKSUFjcUFnd2dCeUFKUVFKMGFpb0NBRjRiSWdrZ0J5b0NFQ0FISUFsQkFuUnFLZ0lBWGhzaUNTQUhLZ0lVSUFjZ0NVRUNkR29xQWdCZUd5SUpJQWNxQWhnZ0J5QUpRUUowYWlvQ0FGNGJJZ2tnQnlvQ0hDQUhJQWxCQW5ScUtnSUFYaHNpQ1VFQ2RHb2lDQ29DQUNJbVF3QUFBQUJjQkVBZ0NpQUtJQWxCSkd4cUVMRUJJQU1nQ2tNQUFJQS9JQWdxQWdDUmxSRFBBU0FEUVNScUlBMUJQeEQxQVFzZ0IwRWdhaVFBQWtBZ0prTUFBQUFBV3cwQUl3QkJJR3NpQnlRQUlBTkJKR29pQ1NBRElBcEJKR29pQ0JCa0lBTkJ5QUJxSWdzZ0F5QUtRY2dBYWhCa0lBTkI3QUJxSWcwZ0F5QUtRZXdBYWhCa0lBTkJrQUZxSWhvZ0F5QUtRWkFCYWhCa0lBTkJ0QUZxSWh3Z0F5QUtRYlFCYWhCa0lBTkIyQUZxSWg0Z0F5QUtRZGdCYWhCa0lBTkIvQUZxSWlNZ0F5QUtRZndCYWhCa0lBY2dDUkJZT0FJQUlBY2dDeEJZT0FJRUlBY2dEUkJZT0FJSUlBY2dHaEJZT0FJTUlBY2dIQkJZT0FJUUlBY2dIaEJZT0FJVUlBY2dJeEJZT0FJWUlBZEJCa0VGUVFSQkEwRUNJQWNxQWdRZ0J5b0NBRjRpQ3lBSEtnSUlJQWNnQzBFQ2RHb3FBZ0JlR3lJTElBY3FBZ3dnQnlBTFFRSjBhaW9DQUY0Yklnc2dCeW9DRUNBSElBdEJBblJxS2dJQVhoc2lDeUFIS2dJVUlBY2dDMEVDZEdvcUFnQmVHeUlMSUFjcUFoZ2dCeUFMUVFKMGFpb0NBRjRiSWd0QkFuUnFJZzBxQWdBaUprTUFBQUFBWEFSQUlBa2dDU0FMUVNSc0lndHFFTEVCSUFnZ0NDQUxhaEN4QVNBSklBbERBQUNBUHlBTktnSUFrWlVRendFTElBZEJJR29rQUNBbVF3QUFBQUJiRFFBakFFRWdheUlISkFBZ0EwSElBR29pQ1NBRFFTUnFJZ2dnQ2tISUFHb2lDeEJrSUFOQjdBQnFJZzBnQ0NBS1Fld0FhaEJrSUFOQmtBRnFJaG9nQ0NBS1FaQUJhaEJrSUFOQnRBRnFJaHdnQ0NBS1FiUUJhaEJrSUFOQjJBRnFJaDRnQ0NBS1FkZ0JhaEJrSUFOQi9BRnFJaU1nQ0NBS1Fmd0JhaEJrSUFjZ0NSQllPQUlBSUFjZ0RSQllPQUlFSUFjZ0doQllPQUlJSUFjZ0hCQllPQUlNSUFjZ0hoQllPQUlRSUFjZ0l4QllPQUlVSUFkQkJVRUVRUU5CQWlBSEtnSUVJQWNxQWdCZUlnZ2dCeW9DQ0NBSElBaEJBblJxS2dJQVhoc2lDQ0FIS2dJTUlBY2dDRUVDZEdvcUFnQmVHeUlJSUFjcUFoQWdCeUFJUVFKMGFpb0NBRjRiSWdnZ0J5b0NGQ0FISUFoQkFuUnFLZ0lBWGhzaUNFRUNkR29pRFNvQ0FDSW1Rd0FBQUFCY0JFQWdDU0FKSUFoQkpHd2lDR29Rc1FFZ0N5QUlJQXRxRUxFQklBa2dDVU1BQUlBL0lBMHFBZ0NSbFJEUEFRc2dCMEVnYWlRQUlDWkRBQUFBQUZzTkFDTUFRU0JySWdja0FDQURRZXdBYWlJSklBTkJ5QUJxSWdnZ0NrSHNBR29pQ3hCa0lBTkJrQUZxSWcwZ0NDQUtRWkFCYWhCa0lBTkJ0QUZxSWhvZ0NDQUtRYlFCYWhCa0lBTkIyQUZxSWh3Z0NDQUtRZGdCYWhCa0lBTkIvQUZxSWg0Z0NDQUtRZndCYWhCa0lBY2dDUkJZT0FJQUlBY2dEUkJZT0FJRUlBY2dHaEJZT0FJSUlBY2dIQkJZT0FJTUlBY2dIaEJZT0FJUUlBZEJCRUVEUVFJZ0J5b0NCQ0FIS2dJQVhpSUlJQWNxQWdnZ0J5QUlRUUowYWlvQ0FGNGJJZ2dnQnlvQ0RDQUhJQWhCQW5ScUtnSUFYaHNpQ0NBSEtnSVFJQWNnQ0VFQ2RHb3FBZ0JlR3lJSVFRSjBhaUlOS2dJQUlpWkRBQUFBQUZ3RVFDQUpJQWtnQ0VFa2JDSUlhaEN4QVNBTElBZ2dDMm9Rc1FFZ0NTQUpRd0FBZ0Q4Z0RTb0NBSkdWRU04QkN5QUhRU0JxSkFBZ0prTUFBQUFBV3cwQUl3QkJFR3NpQnlRQUlBTkJrQUZxSWdrZ0EwSHNBR29pQ0NBS1FaQUJhaUlMRUdRZ0EwRzBBV29pRFNBSUlBcEJ0QUZxRUdRZ0EwSFlBV29pR2lBSUlBcEIyQUZxRUdRZ0EwSDhBV29pSENBSUlBcEIvQUZxRUdRZ0J5QUpFRmc0QWdBZ0J5QU5FRmc0QWdRZ0J5QWFFRmc0QWdnZ0J5QWNFRmc0QWd3Z0IwRURRUUlnQnlvQ0JDQUhLZ0lBWGlJSUlBY3FBZ2dnQnlBSVFRSjBhaW9DQUY0YklnZ2dCeW9DRENBSElBaEJBblJxS2dJQVhoc2lDRUVDZEdvaURTb0NBQ0ltUXdBQUFBQmNCRUFnQ1NBSklBaEJKR3dpQ0dvUXNRRWdDeUFJSUF0cUVMRUJJQWtnQ1VNQUFJQS9JQTBxQWdDUmxSRFBBUXNnQjBFUWFpUUFJQ1pEQUFBQUFGc05BQ01BUVJCcklnY2tBQ0FEUWJRQmFpSUpJQU5Ca0FGcUlnZ2dDa0cwQVdvaUN4QmtJQU5CMkFGcUlnMGdDQ0FLUWRnQmFoQmtJQU5CL0FGcUlob2dDQ0FLUWZ3QmFoQmtJQWNnQ1JCWU9BSUVJQWNnRFJCWU9BSUlJQWNnR2hCWU9BSU1JQWRCQkdvaUNFRUNJQWdxQWdRZ0NDb0NBRjRpRFNBSUtnSUlJQWdnRFVFQ2RHb3FBZ0JlR3lJSVFRSjBhaUlOS2dJQUlpWkRBQUFBQUZ3RVFDQUpJQWtnQ0VFa2JDSUlhaEN4QVNBTElBZ2dDMm9Rc1FFZ0NTQUpRd0FBZ0Q4Z0RTb0NBSkdWRU04QkN5QUhRUkJxSkFBZ0prTUFBQUFBV3cwQUl3QkJFR3NpQnlRQUlBTkIyQUZxSWdrZ0EwRzBBV29pQ3lBS1FkZ0JhaUlJRUdRZ0EwSDhBV29pRFNBTElBcEIvQUZxRUdRZ0J5QUpFRmc0QWdnZ0J5QU5FRmc0QWd3Z0IwRUlhaUFIS2dJTUlBY3FBZ2hlSWd0QkFuUnFJZzBxQWdBaUprTUFBQUFBWEFSQUlBa2dDU0FMUVNSc0lndHFFTEVCSUFnZ0NDQUxhaEN4QVNBSklBbERBQUNBUHlBTktnSUFrWlVRendFTElBZEJFR29rQUNBbVF3QUFBQUJiRFFBZ0EwSDhBV29pQnlBRFFkZ0JhaUFLUWZ3QmFoQmtJQWNRV0NJbVF3QUFBQUJjQkVBZ0J5QUhRd0FBZ0Q4Z0pwR1ZFTThCQ3lBbVF3QUFBQUJiRFFBakFFR0FBMnNpQnlRQUlBY2dCeUFEUVFBUTRBRTRBdEFDSUFjZ0IwRWthaUFEUVFFUTRBRTRBdFFDSUFjZ0IwSElBR29nQTBFQ0VPQUJPQUxZQWlBSElBZEI3QUJxSUFOQkF4RGdBVGdDM0FJZ0J5QUhRWkFCYWlBRFFRUVE0QUU0QXVBQ0lBY2dCMEcwQVdvZ0EwRUZFT0FCT0FMa0FpQUhJQWRCMkFGcUlBTkJCaERnQVRnQzZBSWdCeUFIUWZ3QmFpQURRUWNRNEFFNEF1d0NJQWNnQjBHZ0Ftb2dBMEVJRU9BQk9BTHdBaUFIUWRBQ2FpSUpRUWhCQjBFR1FRVkJCRUVEUVFJZ0NTb0NCQ0FKS2dJQVhpSUlJQWtxQWdnZ0NTQUlRUUowYWlvQ0FGNGJJZ2dnQ1NvQ0RDQUpJQWhCQW5ScUtnSUFYaHNpQ0NBSktnSVFJQWtnQ0VFQ2RHb3FBZ0JlR3lJSUlBa3FBaFFnQ1NBSVFRSjBhaW9DQUY0YklnZ2dDU29DR0NBSklBaEJBblJxS2dJQVhoc2lDQ0FKS2dJY0lBa2dDRUVDZEdvcUFnQmVHeUlJSUFrcUFpQWdDU0FJUVFKMGFpb0NBRjRiSWdsQkFuUnFLZ0lBSWlaREFBQUFBRndFUUNBUUlBY2dDVUVrYkdvUThnTUxJQWRCZ0FOcUpBQWdKa01BQUFBQVhDRVdDeUFEUWFBQ2FpUUFJQllFUUNBUUVPc0ZpN3RFOFdqamlMWDQ1RDVqUlNFU0N5QUtRYUFDYWlRQUlCSkZEUUFnQkNvQ1ZDRXFJQVFxQWxBaEx5QUVLZ0pzSVRBZ0JDb0NUQ0VvSUFRcUFuQWhLeUFFS2dKNElTa2dCQ29DWUNFc0lBRWdCQ29DU0NJdElBUXFBbndpTVpRZ0JDb0NaQ0FFS2dKWUlpZVZraUl5SUFRcUFsd2lKcFE0QWdRZ0FTQXBJQzJVSUN3Z0o1V1NJaXdnSnBRNEFnQWdCQ29DU0NFdElBUXFBb0FCSVRNZ0JDb0NhQ0UwSUFFZ01TQW9sQ0FySUNlVmtpSXJJQ2FVT0FJUUlBRWdLU0FvbENBd0lDZVZraUlvSUNhVU9BSU1JQUVnS293Z0pwUWlLU0F5bENBdmpDQW1sQ0lxSUN5VUlETWdMWlFnTkNBbmxaS1NramdDQ0NBQklDa2dLNVFnS2lBb2xDQUVLZ0tBQVNBRUtnSk1sQ0FFS2dKMElDZVZrcEtTT0FJVUlBRWdCQ29DZUNBbWxDSW5PQUlZSUFFZ0JDb0NmQ0FtbENJbU9BSWNJQUVnQkNvQ2dBRWdKeUFFS2dKUWxKTWdKaUFFS2dKVWxKTTRBaUJCQVNFQ0N5QUVRWkFCYWlRQUlBSkZEUUFnSVNBaUVEc2hFa0VBSVFzakFFRXdheUlJSkFBZ0NFRW9haUlCSUJJZ0FCRHhBU0FJUVNCcUlnSWdFaUFBUVFocUlnb1E4UUVnQ0VFWWFpSURJQklnQUVFUWFpSVFFUEVCSUFoQkVHb2dBUkRzQlNBSVFRaHFJQUlRN0FVQ1FDQUFJQW9nRUNBQklBSWdBeENWQTBVTkFFRURJUllnQ0VFWWFpRUJJQWhCSUdvaEFpQUlRU2hxSVFNZ0FDRUpJQW9oQndOQUlCWkJCRWNFUUNBRElnUWdFaUFRUVFocUloQVE4UUVnRmtFQmFpRVdJQWxCQ0dvaUNTQUhRUWhxSWdjZ0VDQUNJQUVnQXhDVkF5RWlJQUloQXlBQklRSWdCQ0VCSUNJTkFRd0NDd3NnQnlBUUlBQWdBaUFCSUFoQkVHb1FsUU5GRFFBZ0VDQUFJQW9nQVNBSVFSQnFJQWhCQ0dvUWxRTWhDd3NnQ0VFd2FpUUFJQXRGRFFBZ0RrRUJhaUVPQ3lBTVFRRnFJUXdNQVFzTElBNUZCRUJCQUNFT0RBUUxRd0FBZ0Q4Z0xwVWhKa0VBSVFBZ0RrRUFJQTVCQUVvYklRRkJBQ0VNQTBBZ0FTQU1SZ1JBQTBBZ0FDQVpTQ0FPUVFKS2NVVUVRQ0FPUVFFZ0RrRUJTaHNoQUNBVlFRQVFVaWdDQkNFQklCVkJBQkJTS2dJQUlTWkJBU0VNQTBBZ0FDQU1SZ1JBSUE4Z0lTQUJRUWxzRURzUThnTWdEeW9DSUNFbUlBOUJnSUNBL0FNMkFpQWdEeUFQS2dJQVF3QUFnRDhnSnBVaUpwUTRBZ0FnRHlBbUlBOHFBZ1NVT0FJRUlBOGdKaUFQS2dJSWxEZ0NDQ0FQSUNZZ0R5b0NESlE0QWd3Z0R5QW1JQThxQWhDVU9BSVFJQThnSmlBUEtnSVVsRGdDRkNBUElDWWdEeW9DR0pRNEFoZ2dEeUFtSUE4cUFoeVVPQUljUVFFaERnd0pCU0FtSUJVZ0RCQlNLZ0lBWGdSQUlCVWdEQkJTS2dJQUlTWWdGU0FNRUZJb0FnUWhBUXNnREVFQmFpRU1EQUVMQUFzQUN5QUFJQ1VnR1NBQWF4Q2NBeUFBYWlJRUlBQWdCRW9iSVFwQkFDRUJBMEFnQVNBT1JnUkFJQlZCQUJCU0lRa2dEa0VDYlNBT1FRRnhha0VCYXlFSVFRQWhEQ01BUVJCckloSWtBQ0FTUVFocUVMSUNJUWNDUUFKQUlBNGlDa0VBU2dSQUlBaEJBRXdOQVNBS1FRRnJJUTRnQ1NBSVFRRnJJaDFCQTNScUlSQURRQ0FNSUE1SUJFQWdCeUFRS2dJQU9BSUFJQWNnRUNnQ0JEWUNCQ0FPSVFBZ0RDRUJBMEFnQVNFQ0EwQWdBaUlCUVFGcUlRSWdDU0FCUVFOMGFpSVdJQWNRNkFVTkFBc2dBQ0VEQTBBZ0F5SUFRUUZySVFNZ0J5QUpJQUJCQTNScUlnc1E2QVVOQUFzZ0FDQUJUZ1JBSUJZZ0N4RElBU0FDSVFFZ0F5RUFDeUFBSUFGT0RRQUxJQTRnQUNBQklBaElHeUVPSUFFZ0RDQUFJQjFJR3lFTURBRUxDeUFiSUJBcEFnQTNBZ0FnRWtFUWFpUUFEQUlMUWZDdkJFR2J5d0VRTWtHNHl3RVFNa0dEeFFBUU1rSFNBQkExUVpUSkFCQXlRYnJOQVJBeUVEWVFBQUFMUWZDdkJFSGZ6UUVRTWtHNHl3RVFNa0dEeFFBUU1rSFRBQkExUVpUSkFCQXlRZnpOQVJBeUVEWVFBQUFMSUFwQkFYVWhEaUFFSVFBTUFnc2dJU0FWSUFFUVVpZ0NCRUVKYkJBN0lRY2dBQ0VNQTBBZ0NpQU1SZ1JBSUFGQkFXb2hBUXdDQlNBWElCTWdERUVDZEdvb0FnQkJBM1FpQ1dvaEF5TUFRUkJySWdJa0FDQUNRUWhxSUFKQkRHb2dCeUFES2dJQUlBTXFBZ1FROEFNZ0FpQUNLZ0lJSUFrZ0dHb2lBeW9DQUpNNEFnQWdBaUFDS2dJTUlBTXFBZ1NUT0FJRUlBSXFBZ0FpSnlBbmxDQUNLZ0lFSWljZ0o1U1NJQ2FVUXdBQWdEK1NFTmNHSVNjZ0FrRVFhaVFBSUJVZ0FSQlNJZ0lnSnlBQ0tnSUFramdDQUNBTVFRRnFJUXdNQVFzQUN3QUxBQXNBQlNBVklBd1FVa0VBTmdJQUlCVWdEQkJTSUF3MkFnUWdERUVCYWlFTURBRUxBQXNBQzBId3J3UkI3OGdCRURKQmxzVUJFREpCZzhVQUVESkIrUUFRTlVHVXlRQVFNa0hteVFFUU1oQTJFQUFBQzBId3J3UkJyTWNCRURKQmxzVUJFREpCZzhVQUVESkIrQUFRTlVHVXlRQVFNa0dSeUFFUU1oQTJFQUFBQzBId3J3UkIzTVFCRURKQmxzVUJFREpCZzhVQUVESkI5d0FRTlVHVXlRQVFNa0hFeGdFUU1oQTJFQUFBQ3lBYlFSQnFKQUFnRGdSQUl3QkI4QUJySWdBa0FBSi9RUUFnQUVFZ2FpQVBRNnpGSnpjUTlBVkZEUUFhSUFCQ0FEY0RHQ0FBUVFBMkFoUWdBQ0FGc2lJbU9BSVFJQUFnQnJJaUp6Z0NEQ0FBSUNZNEFnZ2dBQ0FuT0FJRUlBQkJBRFlDQUNBQVFlZ0FhaUlDSUFCQklHb2lBU0FBUVJocUVQRUJJQUJCNEFCcUlnUWdBU0FBUVJCcUVQRUJJQUJCMkFCcUlnTWdBU0FBUVFocUVQRUJJQUJCMEFCcUlnd2dBU0FBRVBFQkl3QkJNR3NpQVNRQUlBRkJLR29pRHlBRUlBSVExUUlnQVVFZ2FpSU9JQU1nQWhEVkFpQUJRUmhxSWhzZ0RDQUNFTlVDSUFGQkVHb2lBaUFFSUFNUTFRSWdBVUVJYWlJRUlBd2dBeERWQWlBUElBNFFrd01oSmlBT0lCc1Frd01oSnlBUElCc1Frd01oS0NBQ0lBUVFrd01oS1NBbUlDY1FsZ01nS0JDV0F5QXBFSllESVNZZ0FVRXdhaVFBUVFBZ0JTQUdiTGRFTFVNYzYrSTJHaitpdGlBbVhnMEFHaUFBUWVnQWFpSUJJQUJCNEFCcUlnSWdBRUhZQUdvaUF4Q3BBU0VtUVFGQmZ5QUNJQU1nQUVIUUFHb2lCQkNwQVVNQUFBQUFYaHRCQVVGL0lDWkRBQUFBQUY0YmFrRUJRWDhnQXlBRUlBRVFxUUZEQUFBQUFGNGJha0VCUVg4Z0JDQUJJQUlRcVFGREFBQUFBRjRiYWlJQklBRkJIM1VpQVhNZ0FXdEJCRVlMSVJFZ0FFSHdBR29rQUFzZ0lCRGtBU0FmRU9RQklCUkJRR3NrQUNBUkJTQUJJQU1nRVJCU0tBSUFFRzBxQWdBaEppQWdJQkVRVWlBbU9BSUFJQUVnQXlBUkVGSW9BZ0FRYlNvQ0JDRW1JQ0FnRVJCU0lDWTRBZ1FnQWlBRElCRVFVaWdDQkJCdEtnSUFJU1lnSHlBUkVGSWdKamdDQUNBQ0lBTWdFUkJTS0FJRUVHMHFBZ1FoSmlBZklCRVFVaUFtT0FJRUlCRkJBV29oRVF3QkN3c0xnQWdDQTM4R2ZTTUFRU0JySWdRa0FDQUVJQU1nQVNnQ1dHOGdBU2dDVkc4Z0FTZ0NORzhpQlRZQ0RDQUVJQU1nQldzZ0FTZ0NXRzhnQVNnQ1ZHOGdBU2dDTkcwaUJUWUNDQ0FFSUFNZ0JDZ0NEQ0FCS0FJMElBVnNhbXNnQVNnQ1dHOGdBU2dDVkcwaUJUWUNCQ0FFSUFNZ0JDZ0NEQ0FCS0FKVUlBVnNJQUVvQWpRZ0JDZ0NDR3hxYW1zZ0FTZ0NXRzBpQXpZQ0FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FDQUVLQUlNSWdWQkFFNEVRQ0FGSUFFb0FqUk9EUUVnQkNnQ0NDSUZRUUJJRFFJZ0JTQUJLQUk0VGcwRElBUW9BZ1FpQlVFQVNBMEVJQVVnQVNnQ1BFNE5CU0FEUVFCSURRWWdBeUFCS0FKQVRnMEhEQWtMUWZDdkJFRzh1Z0VRTWtIZHVnRVFNa0dEeFFBUU1rRytBUkExUVpUSkFCQXlRYVc4QVJBeUVEWU1Cd3RCOEs4RVFiZThBUkF5UWQyNkFSQXlRWVBGQUJBeVFiOEJFRFZCbE1rQUVESkJwYndCRURJUU5nd0dDMEh3cndSQnFyMEJFREpCM2JvQkVESkJnOFVBRURKQndBRVFOVUdVeVFBUU1rSEx2UUVRTWhBMkRBVUxRZkN2QkVHdnZnRVFNa0hkdWdFUU1rR0R4UUFRTWtIQkFSQTFRWlRKQUJBeVFjdTlBUkF5RURZTUJBdEI4SzhFUWRlK0FSQXlRZDI2QVJBeVFZUEZBQkF5UWNJQkVEVkJsTWtBRURKQnNMOEJFRElRTmd3REMwSHdyd1JCL0w4QkVESkIzYm9CRURKQmc4VUFFREpCd3dFUU5VR1V5UUFRTWtHd3Z3RVFNaEEyREFJTFFmQ3ZCRUhpd0FFUU1rSGR1Z0VRTWtHRHhRQVFNa0hFQVJBMVFaVEpBQkF5UWIvQkFSQXlFRFlNQVF0QjhLOEVRWTdDQVJBeVFkMjZBUkF5UVlQRkFCQXlRY1VCRURWQmxNa0FFREpCdjhFQkVESVFOZ3NRQUFBTElBQVFsZ0lnQVJEM0JSQkRJUVVnQVNnQ2NDRURBa0FnQWhCQ0lBVlBCRUFnQlVFQUlBVkJBRW9iSVFVRFFDQUZJQVpHRFFJZ0F5b0NCQ0VISUFNcUFnZ2hDQ0FES2dJTUlRa2dCQ2dDQ0xkRUFBQUFBQUFBNEQrZ3RpRUtJQVFvQWdTM1JBQUFBQUFBQU9BL29MWWhDeUFFS0FJQXQwUUFBQUFBQUFEZ1A2QzJJUXdnQkNBREtnSUFJQVFvQWd5M1JBQUFBQUFBQU9BL29MYVRpemdDSENBRUlBY2dDcE9MT0FJWUlBUWdDU0FNazRzNEFoQWdCQ0FJSUF1VGl5SUhJQUVvQWp5eUlBZVRFSllESWdjNEFoUWdCME1BQUFBQVlBUkFBa0FnQkNvQ0hFTUFBSUEvWFVVTkFDQUVLZ0lZUXdBQWdEOWRSUTBBSUFRcUFoUkRBQUNBUDExRkRRQWdCQ29DRUVNQUFJQS9YVVVOQUNBQUlBSWdBUkQzQlNBR0VEc29BZ0FRVWhEMkJRc2dBMEVRYWlFRElBWkJBV29oQmd3QkJVSHdyd1JCOThJQkVESkIzYm9CRURKQmc4VUFFREpCelFJUU5VR1V5UUFRTWtIYnd3RVFNaEEyRUFBQUN3QUxBQXRCOEs4RVFjVzVBUkF5UWJvOEVESkJnOFVBRURKQjFnSVFOVUdVeVFBUU1rSHp1UUVRTWhBMkVBQUFDeUFFUVNCcUpBQUwwUmtEQ24wUmZ3SjhJd0JCTUdzaUZpUUFJQlpCSUdvZ0F4QkNRUUowRVBFRElSa2dGa0VRYWlBREVFSkJBblFROFFNaEdnSkFBMzhnQXhCQ0lCTk5CSDhnQkxJaUNFUE56RXcrbENBSWtpSUlqQ0VKSUFXeUlncER6Y3hNUHBRZ0NwSWlDb3doQ3lBQVFRbzJBa0FnQUVFTU5nSThJQUJCQURZQ09DQUFRUUEyQWpRZ0FFS0FnSUQ4aTRDQXdEODNBaVFnQUNBS09BSWdJQUFnQ3pnQ0hDQUFJQWc0QWhnZ0FDQUpPQUlVSUFCQmdJQ0FpUVEyQWl3Z0FFRUFOZ0pVSUFCQkFEWUNXRU1BQUNCQkVOY0dJUWdnQUVFQk9nQVFJQUJEQUFDQVB5QUlsVGdDTUNBQVFkd0FhaUlCRU9VRklBQWdCMEVCZGJJNEFnd2dBQ0FHUVFGMXNqZ0NDQ0FBSUFjMkFnUWdBQ0FHTmdJQUlCbEJBQkE3SVJzZ0drRUFFRHNoSENBREVFSWhFa0VBSVFNakFFRVFheUlUSkFBZ0FSRGxCU0FTQkVBZ0FFSHdBR29pSFNBU1FRSjBFSmNDSUFCQi9BQnFJaDRnRWhDUkFpQUFMUUFRQkVBQ1FDTUFRUkJySWhna0FDQUFLQUlBSUFBb0FnUVFzd0loQVNBWUlCSVE4UU1oRkFKQUFrQWdFa0VBU2dSQUlBQW9BZ0JCQUV3TkFTQUFLQUlFUVFCTURRSWdIRUVNYWlFQ0lCdEJER29oQkNBQnNpRUlRUUFoQmdOQUlBWWdFa1lFUUFKOUlCUkJBQkE3SVJVZ0ZCQkRJZ0ZCQW0wZ0FVRUJjV3BCQVdzaEYwRUFJUVlDUUNBQlFRQktCRUFnRjBFQVRBMEJJQUZCQVdzaEJ5QVZJQmRCQVdzaUgwRUNkR29oSUFOQUlDQXFBZ0FoQ0NBSElnRWdCaUlDU2dSQUEwQWdBaUVFQTBBZ0JDSUNRUUZxSVFRZ0ZTQUNRUUowYWlJaEtnSUFJQWhkRFFBTElBRWhCUU5BSUFVaUFVRUJheUVGSUFnZ0ZTQUJRUUowYWlJaUtnSUFYUTBBQ3lBQklBSk9CRUFnSVNBaUVMc0dJQVFoQWlBRklRRUxJQUVnQWs0TkFBc2dCeUFCSUFJZ0YwZ2JJUWNnQWlBR0lBRWdIMGdiSVFZTUFRc0xJQWdNQWd0QjhLOEVRZFNsQVJBeVFhV21BUkF5UWI4Y0VESkJOUkExUWZrZ0VESkIwS29CRURJUU5oQUFBQXRCOEs4RVFheXJBUkF5UWFXbUFSQXlRYjhjRURKQk5oQTFRZmtnRURKQnRxd0JFRElRTmhBQUFBc2hDQ0FBUVFVQ2Z5QUFLZ0lZSUFBcUFoU1RJQWhEQUFDQVBwUWlDSldOSWdtTFF3QUFBRTlkQkVBZ0NhZ01BUXRCZ0lDQWdIZ0xFTE1DTmdJMElBQkJCUUovSUFBcUFpQWdBQ29DSEpNZ0NKV05JZ2lMUXdBQUFFOWRCRUFnQ0tnTUFRdEJnSUNBZ0hnTEVMTUNJZ0UyQWpnZ0FDQUJJQUFvQWpSc0lnRTJBbFFnQUNBQUtBSThJQUZzTmdKWUlCUVFkQ0FZUVJCcUpBQU1CUVVnQkNBR1FRUjBJZ0ZxS2dJQUlBRWdBbW9xQWdBUTFBSWhDU0FVSUFZUU95QUpJQWlVT0FJQUlBWkJBV29oQmd3QkN3QUxBQXRCOEs4RVFkM3NBQkF5UVpvVEVESkJ2eHdRTWtIUUFSQTFRZmtnRURKQit1NEFFRElRTmd3SEMwSHdyd1JCNWZRQUVESkJtaE1RTWtHL0hCQXlRZEVCRURWQitTQVFNa0gvOWdBUU1oQTJEQVlMUWZDdkJFR2Ird0FRTWtHYUV4QXlRYjhjRURKQjBnRVFOVUg1SUJBeVFlajlBQkF5RURZTUJRc0xJQkpCQUNBU1FRQktHeUVZUVFBaEFnTkFJQU1nR0VZRVFDQWRJQUpCQW5RUWx3SWdIaUFDRUpFQ0JTQWJJQU5CQkhRaUJHb2lBU29DQUNFTklBRXFBZ1FoRGlBQktnSUlJUWdnQVNvQ0RDRUxJQVFnSEdvaUFTb0NBQ0VKSUFFcUFnUWhDaUFCS2dJSUlRd2dBU29DRENFUEl3QkJFR3NpQVNRQUlCTWdDQ0FNa3lJSU9BSUVSQmd0UkZUN0lSbEFJU01DUUNBSXV5SWtSQmd0UkZUN0lRbkFaVVVFUUVRWUxVUlUreUVad0NFaklDUkVHQzFFVlBzaENVQmtSUTBCQ3lBVElDTWdKS0MySWdnNEFnUUxBa0FDUUNBSXV5SWpSQmd0UkZUN0lRbkFaQVJBSUNORUdDMUVWUHNoQ1VCbFJRMEJJQk1nQ3lBUEVOUUNJZ2c0QWdBZ0V5b0NCQ0lMRU9RRklRd2dDeERqQlNFTElBRWdEQ0FJbENJTU9BSU1JQUVnRERnQ0FDQUJJQXNnQ0pRaUNEZ0NDQ0FCSUFpTU9BSUVJQk1nRXlvQ0FCQ25BaUFBS2dJd2xEZ0NBQ0FCS2dJSUlRZ2dBU29DRENFTElCTWdEU0FCS2dJQUlnMGdDWlFnQVNvQ0JDSU1JQXFVa3BNZ0RTQUFLZ0lJbENBTUlBQXFBZ3lVa3BJNEFnd2dFeUFPSUFnZ0NaUWdDeUFLbEpLVElBZ2dBQ29DQ0pRZ0N5QUFLZ0lNbEpLU09BSUlJQUZCRUdva0FBd0NDMEh3cndSQnNjTUFFREpCalA4QUVESkJ2eHdRTWtIVUF4QTFRZmtnRURKQnhzY0FFRElRTmd3SEMwSHdyd1JCanM0QUVESkJqUDhBRURKQnZ4d1FNa0hWQXhBMVFma2dFREpCeHNjQUVESVFOZ3dHQ3dKL0lCTXFBZ2doQ0NBVEtnSUVJUXNnRXlvQ0FDRUpRUUFoRlFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlCTXFBZ3dpQ2lBQUtnSVVJZzFkRFFBZ0FDb0NHQ0lPSUFwZkRRQWdBQ29DSENJTUlBaGVEUUFnQUNvQ0lDSVBJQWhmRFFBZ0M3c2lJMFFZTFVSVSt5RUp3R1VnSTBRWUxVUlUreUVKUUdSeURRQWdBQ29DSkNJUUlBbGVEUUFnQUNvQ0tDSVJJQWxmRFFBZ0NpQU5ZRVVOQVNBS0lBNWRSUTBDSUFnZ0RHQkZEUU1nQ0NBUFhVVU5CQ0FqUkJndFJGVDdJUW5BWkVVTkJTQWpSQmd0UkZUN0lRbEFaVVVOQmlBSklCQmdSUTBISUFrZ0VWMUZEUWdnQUNnQ05DRUJJQUFnQ2lBQUtnSVVJZ3FUSUFBcUFoZ2dDcE1RMUFJZ0FiS1VPQUpFSUFBb0FqZ2hBU0FBSUFnZ0FDb0NIQ0lJa3lBQUtnSWdJQWlURU5RQ0lBR3lsRGdDU0NBQUlBdTdSQmd0UkZUN0lRbEFvRVNEeU1sdE1GL0VQNklnQUNnQ1BMZWl0amdDVENBQUtBSkFJUUVnQUNBSklBQXFBaVFpQ0pNZ0FDb0NLQ0FJa3hEVUFpQUJzcFE0QWxBZ0FDb0NSRU1BQUFDL2tvNGhDQ0FBS2dKSVF3QUFBTCtTamlFSklBQXFBbEJEQUFBQXY1S09JUW9DZnlBQUtnSk1Rd0FBQUwrU2ppSUxpME1BQUFCUFhRUkFJQXVvREFFTFFZQ0FnSUI0Q3lBQUtBSThJaGRxSUJkdklRWUNmeUFJaTBNQUFBQlBYUVJBSUFpb0RBRUxRWUNBZ0lCNEN5RUJBbjhnQ1l0REFBQUFUMTBFUUNBSnFBd0JDMEdBZ0lDQWVBc2hCQ0FCUVFCSUlRY0NmeUFLaTBNQUFBQlBYUVJBSUFxb0RBRUxRWUNBZ0lCNEN5RUZJQWNOQUNBRVFRQklJQUZCQVdvaUJ5QUFLQUkwVG5JTkFFRUFJQVJCQVdvaUVpQUFLQUk0VGcwS0dpQUZRUUJJRFFBZ0JVRUJhaUlVSUFBb0FrQk9EUUFnQUNBQUlBRWdCQ0FHSUFVUW1BRVFsd0VnQUNBQUlBY2dCQ0FHSUFVUW1BRVFsd0VnQUNBQUlBY2dFaUFHSUFVUW1BRVFsd0VnQUNBQUlBY2dFaUFHUVFGcUlCZHZJaFVnQlJDWUFSQ1hBU0FBSUFBZ0J5QVNJQlVnRkJDWUFSQ1hBU0FBSUFBZ0J5QVNJQVlnRkJDWUFSQ1hBU0FBSUFBZ0J5QUVJQlVnQlJDWUFSQ1hBU0FBSUFBZ0J5QUVJQlVnRkJDWUFSQ1hBU0FBSUFBZ0J5QUVJQVlnRkJDWUFSQ1hBU0FBSUFBZ0FTQVNJQVlnQlJDWUFSQ1hBU0FBSUFBZ0FTQVNJQlVnQlJDWUFSQ1hBU0FBSUFBZ0FTQVNJQlVnRkJDWUFSQ1hBU0FBSUFBZ0FTQVNJQVlnRkJDWUFSQ1hBU0FBSUFBZ0FTQUVJQlVnQlJDWUFSQ1hBU0FBSUFBZ0FTQUVJQlVnRkJDWUFSQ1hBU0FBSUFBZ0FTQUVJQVlnRkJDWUFSQ1hBVUVCSVJVTElCVU1DUXRCOEs4RVFaWUpFREpCalA4QUVESkJ2eHdRTWtIb0FoQTFRZmtnRURKQm15UVFNaEEyREFjTFFmQ3ZCRUduS2hBeVFZei9BQkF5UWI4Y0VESkI2UUlRTlVINUlCQXlRWnNrRURJUU5nd0dDMEh3cndSQnN6RVFNa0dNL3dBUU1rRy9IQkF5UWVvQ0VEVkIrU0FRTWtIM05SQXlFRFlNQlF0QjhLOEVRYjgrRURKQmpQOEFFREpCdnh3UU1rSHJBaEExUWZrZ0VESkI5elVRTWhBMkRBUUxRZkN2QkVHeHd3QVFNa0dNL3dBUU1rRy9IQkF5UWV3Q0VEVkIrU0FRTWtIR3h3QVFNaEEyREFNTFFmQ3ZCRUdPemdBUU1rR00vd0FRTWtHL0hCQXlRZTBDRURWQitTQVFNa0hHeHdBUU1oQTJEQUlMUWZDdkJFSEgwd0FRTWtHTS93QVFNa0cvSEJBeVFlNENFRFZCK1NBUU1rSFoxZ0FRTWhBMkRBRUxRZkN2QkVIWDJ3QVFNa0dNL3dBUU1rRy9IQkF5UWU4Q0VEVkIrU0FRTWtIWjFnQVFNaEEyQ3d3R0N3UkFJQjBnQWtFQ2RCQTdJZ0VnQUNvQ1JEZ0NBQ0FCSUFBcUFrZzRBZ1FnQVNBQUtnSk1PQUlJSUFFZ0FDb0NVRGdDRENBZUlBSVFPeUFETmdJQUlBSkJBV29oQWdzZ0EwRUJhaUVEREFFTEN3c2dFMEVRYWlRQUl3QkJFR3NpQVNRQUlCWkJBRFlDRENBV1FYODJBZ2dnQVVFSWFpQUFRZHdBYWhEM0F4Q3hBaUVBQTBBZ0FDQUJFR3NRc1FJUWdnRUVRQ0FBRUc4aEFpQVdLZ0lNSUFJb0FnU3pYUVJBSUJZZ0FCQnZLQUlBTmdJSUlCWWdBQkJ2S0FJRXN6Z0NEQXNnQUJEMkF3d0JDd3NnQVVFUWFpUUFJQllvQWdnaEFDQVdLZ0lNSVFnZ0doQjBJQmtRZENBV1FUQnFKQUJCZnlBQUlBaERBQUJBUUYwYkJTQUJJQU1nRXhCU0tBSUFFRzBoRWlBQ0lBTWdFeEJTS0FJRUVHMGhGQ0FaSUJOQkFuUWlGeEE3SWhVZ0Vpb0NBRGdDQUNBVklCSXFBZ1E0QWdRZ0ZTQVNLZ0lJT0FJSUlCVWdFaW9DRERnQ0RDQWFJQmNRT3lJU0lCUXFBZ0E0QWdBZ0VpQVVLZ0lFT0FJRUlCSWdGQ29DQ0RnQ0NDQVNJQlFxQWd3NEFnd2dFMEVCYWlFVERBRUxDdzhMRUFBQUMxUUJBWDhqQUVFUWF5SUVKQUFnQkNBQUlBTVE2Z0loQXlBQUVEUWFJQUlnQVdzaUFFRUFTZ1JBSUFNb0FnUWdBU0FBRUQ4YUlBTWdBeWdDQkNBQVFReHVRUXhzYWpZQ0JBc2dBeEJ1SUFSQkVHb2tBQXZTQVFFQmZ5TUFRVEJySWdRa0FDQUVRb2FBZ0lBUU53SWtJQVFnQURZQ0lDQUVRUUUyQWhnZ0JDQUROZ0lVSUFRZ0FUWUNFQ0FFUVFZMkFnZ2dCQ0FETmdJRUlBUWdBallDQUFKQUlBUVF6Z1lpQTBVRVFFRi9JUUlNQVFzQ1FDQURJQVFRNUFJaUFFVUVRRUYvSVFJZ0F5RUJEQUVMQWtBZ0F5QUVRUkJxRU9RQ0lnRkZCRUJCZnlFQ0lBQWhBUXdCQzBFQUlRSUNRQ0FBRUtFRFFRQklCRUJCZnlFQ0RBRUxJQVJCSUdvZ0FDQUJFSkVFR2dzZ0F4QkZJQUFoQXdzZ0F4QkZDeUFCRUVVTElBUkJNR29rQUNBQ0N3OEFJQUFnQUNnQ0FDZ0NBRFlDQUFzSkFDQUJRUVJxRUhRTGlRRUJBbjhqQUVFUWF5SUVKQUFnQVJBMElRRWdBRUVZRUU0Z0JFRUlhaUFCUVFBUXJnSVFyUUlpQUNnQ0FFRUlhaUVGSUFNb0FnQWhBeU1BUVJCcklnRWtBQ0FCSUFNMkFnZ2dCU0FCS0FJSUtBSUFOZ0lBSUFWQkJHb1FTQm9nQVVFUWFpUUFJQUFRU2tFQk9nQUVJQUFvQWdBZ0FqWUNCQ0FBS0FJQVFRQTJBZ0FnQkVFUWFpUUFDN2tDQUNBQUtBSUFJQUVvQWdBUWNTQUFLQUlFSUFFb0FnUVFjV29nQUNnQ0NDQUJLQUlJRUhGcUlBQW9BZ3dnQVNnQ0RCQnhhaUFBS0FJUUlBRW9BaEFRY1dvZ0FDZ0NGQ0FCS0FJVUVIRnFJQUFvQWhnZ0FTZ0NHQkJ4YWlBQUtBSWNJQUVvQWh3UWNXb2dBQ2dDSUNBQktBSWdFSEZxSUFBb0FpUWdBU2dDSkJCeGFpQUFLQUlvSUFFb0FpZ1FjV29nQUNnQ0xDQUJLQUlzRUhGcUlBQW9BakFnQVNnQ01CQnhhaUFBS0FJMElBRW9BalFRY1dvZ0FDZ0NPQ0FCS0FJNEVIRnFJQUFvQWp3Z0FTZ0NQQkJ4YWlBQUtBSkFJQUVvQWtBUWNXb2dBQ2dDUkNBQktBSkVFSEZxSUFBb0FrZ2dBU2dDU0JCeGFpQUFLQUpNSUFFb0Frd1FjV29nQUNnQ1VDQUJLQUpRRUhGcUlBQW9BbFFnQVNnQ1ZCQnhhaUFBS0FKWUlBRW9BbGdRY1dvZ0FDZ0NYQ0FCS0FKY0VIRnFDd29BSUFCQkRHb29BZ0FMOUFzQ0JuOEtmQ01BUWVBQmF5SUZKQUFnQlVIUUFHb2hCeU1BUWVBR2F5SUVKQUFnQlNBQ0t3TVFJQU1yQXhBaUM2SWdBaXNEQUNBREt3TUFvaUFDS3dNSUlBTXJBd2dpREtLZ29DQUNLd01Zb0RrRENDQUZJQUlyQXpnZ0N5QUNLd013b2lBQ0t3TWdJQU1yQXdBaUNxSWdEQ0FDS3dNb29xQ2dvRGtERUNBRklBSXJBMWdnQ3lBQ0t3TlFvaUFLSUFJckEwQ2lJQUlyQTBnZ0F5c0RDQ0lMb3FDZ29Ea0RHQ0FFSUFzZ0Fpc0RBQ0lPb2prRHlBUWdCQ0FLSUE2aU9RUEFCQ0FFSUE0Z0F5c0RFQ0lNb2prRDBBUWdCQ0FNSUFJckF3Z2lENkk1QStnRUlBUWdDeUFQb2prRDRBUWdCQ0FLSUEraU9RUFlCQ0FFSUFJckF4QWlEVGtEbUFVZ0JDQVBPUU9RQlNBRUlBNDVBNGdGSUFRZ0RDQU5vamtEZ0FVZ0JDQUxJQTJpT1FQNEJDQUVJQW9nRGFJNUEvQUVJQVFnRENBQ0t3TWdJZzZpT1FPd0JTQUVJQXNnRHFJNUE2Z0ZJQVFnQ2lBT29qa0RvQVVnQkNBTUlBSXJBeWdpRDZJNUE4Z0ZJQVFnQ3lBUG9qa0R3QVVnQkNBS0lBK2lPUU80QlNBRUlBSXJBekFpRFRrRCtBVWdCQ0FQT1FQd0JTQUVJQTQ1QStnRklBUWdEQ0FOb2prRDRBVWdCQ0FMSUEyaU9RUFlCU0FFSUFvZ0RhSTVBOUFGSUFRZ0RDQUNLd05BSWc2aU9RT1FCaUFFSUFzZ0RxSTVBNGdHSUFRZ0NpQU9vamtEZ0FZZ0JDQU1JQUlyQTBnaUQ2STVBNmdHSUFRZ0N5QVBvamtEb0FZZ0JDQUtJQStpT1FPWUJpQUVJQUlyQTFBaURUa0QyQVlnQkNBUE9RUFFCaUFFSUE0NUE4Z0dJQVFnRENBTm9qa0R3QVlnQkNBTElBMmlPUU80QmlBRUlBb2dEYUk1QTdBR0lBUkJBRUhBQUJBNklnSkNBRGNEU0NBQ1FVQnJRb0NBZ0lDQWdJRDR2MzgzQXdBZ0FrSUFOd05RSUFKQ0FEY0RXQ0FDUWdBM0EyQWdBa0tBZ0lDQWdJQ0ErRDgzQTJnZ0FrSHdBR3BCQUVFd0VEb2FJQUpDZ0lDQWdJQ0FnUGcvTndPZ0FTQUNRYWdCYWtFQVFjZ0FFRG9hSUFKQ2dJQ0FnSUNBZ1BpL2Z6Y0Q4QUVnQWtINEFXcEJBRUV3RURvYUlBSkNBRGNEc0FJZ0FrS0FnSUNBZ0lDQStMOS9Od09vQWlBQ1FnQTNBN2dDSUFKQ0FEY0R3QUlnQWtJQU53UElBaUFDUW9DQWdJQ0FnSUQ0UHpjRDBBSWdBa0hZQW1wQkFFSHdBQkE2R2lBQ1FvQ0FnSUNBZ0lENFB6Y0R5QU1nQWtIUUEycEJBRUV3RURvYUlBSkNnSUNBZ0lDQWdQZy9Od09BQkNBQ1FZZ0Vha0VBUVRBUU9ob2dBa0tBZ0lDQWdJQ0ErRDgzQTdnRUEwQkJBQ0VESUFaQkEwY0VRQU5BSUFOQkJrY0VRQ0FEUVFOMElnZ2dCeUFHUVRCc2Ftb2hDVUVBSVFKRUFBQUFBQUFBQUFBaENnTkFJQUpCREVjRVFDQUVRY0FFYWlBR1FlQUFiR29nQWtFRGRHb3JBd0FnQkNBQ1FUQnNhaUFJYWlzREFLSWdDcUFoQ2lBQ1FRRnFJUUlNQVFzTElBa2dDamtEQUNBRFFRRnFJUU1NQVFzTElBWkJBV29oQmd3QkN3c2dCRUhnQm1va0FFRi9JUU1DUUNBQkt3TllJQUVyQTFBZ0JTc0RHQ0lNb2lBQkt3TkFJZ3NnQlNzRENDSU9vaUFGS3dNUUlnOGdBU3NEU0tLZ29LQWlDa1FBQUFBQUFBQUFBR0lFZnlBQkt3TTRJUkFnQVNzRE1DRVJJQUVyQXlnaEVpQUJLd01nSVJNZ0JTQUJLd01BSWcwZ0NxSWdBU3NER0NBQkt3TVFJQXlpSUEwZ0RxSWdEeUFCS3dNSW9xQ2dvQ0lOSUF1aW9TQUtJQXFpSWd1ak9RTWdJQVVnQVNzRENDQUtvaUFOSUFFckEwaWlvU0FMb3prREtDQUZJQUVyQXhBZ0NxSWdEU0FCS3dOUW9xRWdDNk01QXpBZ0JTQUJLd01nSUFxaUlCQWdFU0FNb2lBVElBNmlJQThnRXFLZ29LQWlEQ0FCS3dOQW9xRWdDNk01QXpnZ0JTQUJLd01vSUFxaUlBd2dBU3NEU0tLaElBdWpPUU5BSUFVZ0FTc0RNQ0FLb2lBTUlBRXJBMUNpb1NBTG96a0RTRUVBQlVGL0MwRUFUZ1JBUVFBaEFnTkFRUUFoQXlBQ1FRSkdEUUlEUUNBRFFRWkhCRUFnQTBFRGRDSUVJQUFnQWtFd2JHcHFJUVpCQUNFQlJBQUFBQUFBQUFBQUlRb0RRQ0FCUVFOSEJFQWdCVUVnYWlBQ1FSaHNhaUFCUVFOMGFpc0RBQ0FGUWRBQWFpQUJRVEJzYWlBRWFpc0RBS0lnQ3FBaENpQUJRUUZxSVFFTUFRc0xJQVlnQ2prREFDQURRUUZxSVFNTUFRc0xJQUpCQVdvaEFnd0FDd0FMUVFCQkEwR0ZGMEVBRUR3TElBVkI0QUZxSkFBZ0F3cy9BUUovQWtBZ0FVRUFUQTBBSUFCQkFEWUNBRUVCSVFJRFFDQUJJQUpHRFFFZ0FDQUNRUUowYWlBRFFRRnFJZ00yQWdBZ0FrRUJhaUVDREFBTEFBc0xDQUFnQUVIb0FHb0xDd0FnQUVFQUlBRVFPaG9MdHhJQ0ZIOEJmU01BUVRCcklnd2tBQUpBQWtBQ1FBSkFBa0FDUUFKQUlBQkJER29pQ1NnQ0JDQUFLQUpzRUxNQ0lBVk9CRUFnQVVFQkVKb0RJQUVRcXdJZ0JSQ1JBaUFGUVFBZ0JVRUFTaHNoQWdOQUlBSWdCa1lOQWlBRUlBWkJBblJxS0FJQUlRQWdBUkNyQWlBR0VEc2dBRFlDQUNBR1FRRnFJUVlNQUFzQUN5QU1RUmhxRUpJQ0lRY2dBaUVWSUFNaER5TUFRUkJySWhNa0FBSkFBa0FDUUFKQUlBa29BZ1FnQ1VFTWFpSVpFRU5HQkVBZ0QwRUFUQTBCSUFVZ0Qwb05BaUFKS0FJRUlBVktEUU1nRTBGL05nSU1JQWxCR0dvaURTQUZJQk5CREdvUTlRTWdFMEYvTmdJSUlBbEJKR29pR0NBRklCTkJDR29ROVFNZ0NVRXdhaUlRSUFVUWtRSWdFRUVBRURzZ0VCQkRFSVVHUVg4aEF3TkFJQWtvQWdnZ0NFd0VRQ0FKS0FJRUlCa1FRMGNFUUVId3J3UkJ2cEVCRURKQi9KRUJFREpCZzhVQUVESkJ1d0VRTlVHVXlRQVFNa0hTbEFFUU1oQTJEQTRMQlNBUVFRQVFPeUFRRUVNZ0NTZ0NCQ0FKS0FJQUVQUURJQkJCQUJBN0lRNGdDU2dDQkNFTFFRQWhGRUVBSVFJQ1FBSkFBa0FDUUNBWUVFTWdCVVlFUUNBUFFRQk1EUUVnQlNBUFNnMENJQXRCQUV3TkF5QUZRUUFnQlVFQVNoc2hFUU5BSUJFZ0ZFWU5CU0FFSUJSQkFuUnFJUkpCQUNFV1FYOGhCZ05BSUFzZ0ZrWUVRQ0FVUVFGcUlSUWdBaUFHYWlFQ0RBSUZJQVlnRlNBU0tBSUFRZUFBYkdvZ0ZTQUVJQTRnRmtFQ2RHb2lGeWdDQUVFQ2RHb29BZ0JCNEFCc2FoQ1pBeUlLU3dSQUlCY29BZ0FoQmlBWUlCUVFPeUFHTmdJQUlBb2hCZ3NnRmtFQmFpRVdEQUVMQUFzQUN3QUxRZkN2QkVHVitnQVFNa0g4a1FFUU1rR0R4UUFRTWtIR0FSQTFRWlRKQUJBeVFhaWtBUkF5RURZUUFBQUxRZkN2QkVIL2x3RVFNa0g4a1FFUU1rR0R4UUFRTWtISEFSQTFRWlRKQUJBeVFhaVpBUkF5RURZUUFBQUxRZkN2QkVIV213RVFNa0g4a1FFUU1rR0R4UUFRTWtISUFSQTFRWlRKQUJBeVFZMmRBUkF5RURZUUFBQUxRZkN2QkVHanFBRVFNa0g4a1FFUU1rR0R4UUFRTWtISkFSQTFRWlRKQUJBeVFiQ3FBUkF5RURZUUFBQUxJQUlnQTBrRVFDQU5JQmdRcVFNZ0dVRUFFRHNnRUVFQUVEc2dDU2dDQkJEMUFTQUNJUU1MSUFoQkFXb2hDQXdCQ3dzZ0UwRVFhaVFBREFRTFFmQ3ZCRUcra1FFUU1rSDhrUUVRTWtHRHhRQVFNa0dhQVJBMVFaVEpBQkF5UWRLVUFSQXlFRFlNQ2d0QjhLOEVRZitYQVJBeVFmeVJBUkF5UVlQRkFCQXlRWnNCRURWQmxNa0FFREpCcUprQkVESVFOZ3dKQzBId3J3UkIxcHNCRURKQi9KRUJFREpCZzhVQUVESkJuQUVRTlVHVXlRQVFNa0dOblFFUU1oQTJEQWdMUWZDdkJFSHZvQUVRTWtIOGtRRVFNa0dEeFFBUU1rR2RBUkExUVpUSkFCQXlRZTJoQVJBeUVEWU1Cd3NnQ1VFWWFpSU5FRU1nQlVjTkFVRUFJUVlDUUFOQUFrQWdEUkJESUFaTkJFQWdCeENEQmtFQlJ3MEJJQUZCQVJDYUF5QUJFS3NDSUFVUWtRSkJBQ0VHSUFWQkFDQUZRUUJLR3lFQ0EwQWdBaUFHUmcwRUlBUWdCa0VDZEdvb0FnQWhBQ0FCRUtzQ0lBWVFPeUFBTmdJQUlBWkJBV29oQmd3QUN3QUxJQTBnQmhBN0tBSUFRWDlHRFFVZ0RTQUdFRHNvQWdBZ0JVNE5CaUFFSUEwZ0JoQTdLQUlBUVFKMGFpZ0NBQ0FQVGcwSElBUWdEU0FHRURzb0FnQkJBblJxSVFvakFFRWdheUlSSkFBZ0VTQUtFTnNDTmdJUUlCRkJHR29oRnlBUlFSQnFJUU5CQUNFT0l3QkJJR3NpQ0NRQUlBY1FQUm9nQ2lnQ0FDRVNJQWNRalFFaEFpQUlRUUE2QUI4Q1FBSkFJQUpGRFFBZ0J5QVNJQUlRV3lJT0VEc29BZ0FpQzBVTkFBTkFJQXNvQWdBaUMwVU5BU0FTSUFzb0FnUkhCRUFnQ3lnQ0JDQUNFRnNnRGtjTkFnc2dCeEJaSUF0QkNHb2dDaERRQVVVTkFBc01BUXNnQ0VFUWFpQUhJQklnQXhDQkJpQUhFRDBvQWdBaENpQUhFRmtoQXdKQUlBSUVRQ0FLUVFGcXN5QURLZ0lBSUFLemxGNUZEUUVMSUFnZ0FoRGhBVUVCY3lBQ1FRRjBjallDRENBSUFuOGdCeEE5S0FJQVFRRnFzeUFIRUZrcUFnQ1ZqU0lhUXdBQWdFOWRJQnBEQUFBQUFHQnhCRUFnR3FrTUFRdEJBQXMyQWdnZ0J5QUlRUXhxSUFoQkNHb1FlU2dDQUJEK0F5QVNJQWNRalFFaUFoQmJJUTRMQWtBZ0J5QU9FRHNvQWdBaUEwVUVRQ0FJS0FJUUlBZEJDR29pQXlnQ0FEWUNBQ0FISUFnb0FoQTJBZ2dnQnlBT0VEc2dBellDQUNBSUtBSVFLQUlBUlEwQklBZ29BaEFoQXlBSElBZ29BaEFvQWdBb0FnUWdBaEJiRURzZ0F6WUNBQXdCQ3lBSUtBSVFJQU1vQWdBMkFnQWdBeUFJS0FJUU5nSUFDeUFJUVJCcUlnTVF1UUVoQ3lBSEVEMGlBaUFDS0FJQVFRRnFOZ0lBSUFoQkFUb0FIeUFES0FJQUlRb2dBMEVBTmdJQUlBb0VRQ0FERUVvaUFpMEFCQVJBSUFJb0FnQWdDa0VJYWhDQUJnc2dDZ1JBSUFJb0FnQWFJQW9RTXdzTEN5QVhJQWhCRUdvZ0N4QjlJQWhCSDJvUXJ3SWdDRUVnYWlRQUlCY1FieUVDSUJGQklHb2tBQ0FDUVFScUlBUWdCa0VDZEdvUXFnSWdCa0VCYWlFR0RBRUxDeUFCRUlZR0lRVWdCeENEQmlFRUl3QkJJR3NpQXlRQUlBVVEwd0VnQkVrRVFDQUZFRFFoQWlBRklBTkJDR29nQkNBRkVFTWdBaERaQWlJQ0VPRUNJQUlRdGdJTElBTkJJR29rQUNBTVFSQnFJQWNROXdNUXNRSWhCQU5BSUFRZ0RFRUlhaEJyRUxFQ0VJSUJSUTBCSUFRUWIwRUVhaEJEUlEwSFFZQUJFRTRoQlNBQUVJb0dJUU1nRlNBRUVHOG9BZ0JCNEFCc2FpRUNJQVZCQVRvQVpDQUZJQU0yQWdBZ0JVSG9BR29RU0JvZ0JVSDBBR29RU0JvZ0JVRUVhaUFDUWVBQUVEOGFJQXdnQlRZQ0NDQUZRUUFRbWdNZ0FSQ0dCaUFNUVFocUVLb0NJQVFRYnlFQ0lBQWdEQ2dDQ0NBVklBOGdBa0VFYWlJQ1FRQVFPeUFDRUVNUWlBWWdCQkQyQXd3QUN3QUxJQWNvQWdnaEFDQUhFRFFoQWdOQUlBQUVRQ0FBS0FJQUlRRWdBaUFBUVFocUVJQUdJQUFRTXlBQklRQU1BUXNMSUFjUXNBSUxJQXhCTUdva0FBOExRZkN2QkVHVitnQVFNa0c2L0FBUU1rR0R4UUFRTWtIckFoQTFRWlRKQUJBeVFZcUFBUkF5RURZTUJBdEI4SzhFUWVLQ0FSQXlRYnI4QUJBeVFZUEZBQkF5UWUwQ0VEVkJsTWtBRURKQjFJUUJFRElRTmd3REMwSHdyd1JCb1ljQkVESkJ1dndBRURKQmc4VUFFREpCN2dJUU5VR1V5UUFRTWtHZmlRRVFNaEEyREFJTFFmQ3ZCRUhaaWdFUU1rRzYvQUFRTWtHRHhRQVFNa0h2QWhBMVFaVEpBQkF5UVorSkFSQXlFRFlNQVF0QjhLOEVRYmVOQVJBeVFicjhBQkF5UVlQRkFCQXlRWU1ERURWQmxNa0FFREpCa0k0QkVESVFOZ3NRQUFBTHJRRUNDSHdCZjBGL0lRc2dBU3NEV0NBQkt3TlFJQUlyQXhBaUE2SWdBU3NEUUNBQ0t3TUFJZ1NpSUFJckF3Z2lCU0FCS3dOSW9xQ2dvQ0lHUkFBQUFBQUFBQUFBWWdSL0lBRXJBemdoQnlBQkt3TXdJUWdnQVNzREtDRUpJQUVyQXlBaENpQUFJQUVyQXhnZ0FTc0RFQ0FEb2lBQkt3TUFJQVNpSUFVZ0FTc0RDS0tnb0tBZ0JxTTVBd0FnQUNBSElBZ2dBNklnQ2lBRW9pQUZJQW1pb0tDZ0lBYWpPUU1JUVFBRlFYOExDeE1BSUFBZ0FDZ0NCQ0lBUVFGcU5nSUVJQUFMQ1FBZ0FFRUFPZ0FBQ3lnQkFYOGdBQ0FCS0FJQU5nSUFJQUVvQWdBaEF5QUFJQUUyQWdnZ0FDQUNJQU5xTmdJRUlBQUxSUUVEZnlBQVFlZ0FhaUVCQTBBZ0FSQkRJQUpMQkVBZ0FTQUNFRHNvQWdBaUF3UkFJQU1RalFZTElBTVFNeUFDUVFGcUlRSU1BUXNMSUFCQjlBQnFFSFFnQVJCMEN5VUJBWDhnQUNnQ0FDRUNJQUFnQVRZQ0FDQUNCRUFnQWdSQUlBSVFqUVlMSUFJUU13c0xNUUVCZnlBQUVPTUNJQUFvQWdBRVFDQUFJQUFvQWdBUXB3TWdBQkEwR2lBQUtBSUFJUUVnQUJEVUFSb2dBUkF6Q3d0akFRRi9JQUVFUUNBQlFTUnFJZ0JCMUFCcUVJOEdJQUJCeUFCcUVIUWdBRUVNYWlJQ1FUQnFFSFFnQWtFa2FoQjBJQUpCR0dvUWRDQUNRUXhxRUhRZ0FFRUlha0VBRUk0R0lBRkJDR29pQUVFUWFoRGVBeUFBUVFScUVLNEZDeUFCRURNTEZBQWdBRUVBTmdJRUlBQkJ1T1FETmdJQUlBQUxDUUFnQUNBQk5nSUlDeE1BSUFCQkNEWUNCQ0FBUVF4cVFRZ1FrUUlMcVFJQkIzOGdBQkJLSVFJQ1FDQUJCRUFnQUNBQ0lBRVEvQU1RckFJZ0FCQktJQUUyQWdCQkFDRUNBMEFnQVNBQ1JnUkFJQUJCQ0dvaUFpZ0NBQ0lEUlEwRElBQWdBeWdDQkNBQkVGc2lCeEE3SUFJMkFnQURRQ0FES0FJQUlnSkZEUVFDUUNBQ0tBSUVJQUVRV3lJRUlBZEdEUUFnQWlFRklBQWdCQkE3S0FJQVJRUkFJQUFnQkJBN0lBTTJBZ0FnQkNFSERBRUxBMEFDUUNBRklnWW9BZ0JGQkVCQkFDRUZEQUVMSUFBUVdTQUNRUWhxSUFZb0FnQkJDR29RMEFFaENDQUdLQUlBSVFVZ0NBMEJDd3NnQXlBRk5nSUFJQVlnQUNBRUVEc29BZ0FvQWdBMkFnQWdBQ0FFRURzb0FnQWdBallDQUF3QkN5QUNJUU1NQUFzQUJTQUFJQUlRTzBFQU5nSUFJQUpCQVdvaEFnd0JDd0FMQUFzZ0FFRUFFS3dDSUFBUVNrRUFOZ0lBQ3dzSUFDQUFJQUVRZlFza0FFSFlsUVF0QUFCQkFYRkZCRUJCekpVRUVLTURRZGlWQkVFQk9nQUFDMEhNbFFRTG9RRUJCWDhqQUVFUWF5SURKQUFnQUJBOUdpQUJLQUlBSVFRQ1FBSkFJQUFRalFFaUJVVU5BQ0FBSUFRZ0JSQmJJZ1lRT3lnQ0FDSUNSUTBBQTBBZ0FpZ0NBQ0lDUlEwQklBUWdBaWdDQkVjRVFDQUNLQUlFSUFVUVd5QUdSdzBDQ3lBRUlBSW9BZ1JIRFFBZ0FCQlpJQUpCQ0dvZ0FSRFFBVVVOQUFzZ0EwRUlhaUFDRUgwb0FnQWhBZ3dCQ3lBREVJSUVJZ0kyQWdnTElBTkJFR29rQUNBQ0N3b0FJQUZCQkdvUS9nUUxDQUFnQUJDeUFob0xIQUFnQVVILy8vLy9BVXNFUUVHWENCQ3RBUUFMSUFGQkEzUVFUZ3RBQVFGL0lBQVFod2NnQVVrRVFCQ2FBUUFMSUFBZ0FCQTBJQUVRaGdjaUFqWUNBQ0FBSUFJMkFnUWdBQkEwSUFJZ0FVRVViR28yQWdBZ0FFRUFFUGtHQzFZQkFYOGpBRUVRYXlJRUpBQWdCQ0FBSUFNUXR3UWhBeUFBRURRaEFBTkFJQUVnQWtjRVFDQUFJQU1vQWdRZ0FSQzFBeUFESUFNb0FnUkJGR28yQWdRZ0FVRVVhaUVCREFFTEN5QURFRzRnQkVFUWFpUUFDeVlBSUFBb0FnQWFJQUFvQWdBZ0FCRGJBV29hSUFBb0FnQWFJQUFvQWdBZ0FCQ1NBV29hQ3dRQUlBRUxJUUVCZnlBQklBQnJJUU1nQUNBQlJ3UkFJQUlnQUNBREVNb0NDeUFDSUFOcUN3Y0FJQUVnQUdzTFRnRUJmeU1BUVJCcklnUWtBQ0FFSUFBZ0F4Q3RBeUVESUFBUU5Cb2dBaUFCYXlJQVFRQktCRUFnQXlnQ0JDQUJJQUFRUHhvZ0F5QURLQUlFSUFCcU5nSUVDeUFERUc0Z0JFRVFhaVFBQ3hjQUlBQkNBRGNDQUNBQVFRRTZBQkFnQUVJQU53SUlDeXdBSUFBb0FnQWFJQUFvQWdBZ0FCRGNBVUVVYkdvYUlBQW9BZ0FhSUFBb0FnQWdBQkNBQVVFVWJHb2FDMU1CQTM4akFFRVFheUlESkFBZ0F5QUFJQUVRdHdRaUFpZ0NCQ0VCSUFJb0FnZ2hCQU5BSUFFZ0JFWUVRQ0FDRUc0Z0EwRVFhaVFBQlNBQUVEUWFJQUVRb2dZZ0FpQUJRUlJxSWdFMkFnUU1BUXNMQ3d3QUlBQW9BZ0FhSUFFUU13c0tBQ0FCUVFScUVORUJDeWtCQVg4RFFDQUNRUWhHUlFSQUlBRWdBbW9nQUNBQ2F5MEFCem9BQUNBQ1FRRnFJUUlNQVFzTEN5b0JBWDhqQUVFUWF5SUNKQUFnQWtFSWFpQUJFSWNFSWdFZ0FCRC9BeUFCRU5FQklBSkJFR29rQUFzWkFRRi9JQUFRZ0FFaEFpQUFJQUVRb1FVZ0FDQUNFS01HQ3lrQkFYOGpBRUVRYXlJQ0pBQWdBaUFCTmdJTUlBQWdBa0VNYWhEMkFTRUFJQUpCRUdva0FDQUFDOHdFQWdoL0FYMGpBRUVnYXlJRkpBQWdCU0FCRU5zQ05nSVFJQVZCR0dvaENDQUZRUkJxSVFrakFFRWdheUlDSkFBZ0FCQTlHaUFCS0FJQUlRWWdBQkNOQVNFRElBSkJBRG9BSHdKQUFrQWdBMFVOQUNBQUlBWWdBeEJiSWdjUU95Z0NBQ0lFUlEwQUEwQWdCQ2dDQUNJRVJRMEJJQVlnQkNnQ0JFY0VRQ0FFS0FJRUlBTVFXeUFIUncwQ0N5QUFFRmtnQkVFSWFpQUJFTkFCUlEwQUN3d0JDeUFDUVJCcUlBQWdCaUFKRUlFR0lBQVFQU2dDQUNFQklBQVFXU0VFQWtBZ0F3UkFJQUZCQVdxeklBUXFBZ0FnQTdPVVhrVU5BUXNnQWlBREVPRUJRUUZ6SUFOQkFYUnlOZ0lNSUFJQ2Z5QUFFRDBvQWdCQkFXcXpJQUFRV1NvQ0FKV05JZ3BEQUFDQVQxMGdDa01BQUFBQVlIRUVRQ0FLcVF3QkMwRUFDellDQ0NBQUlBSkJER29nQWtFSWFoQjVLQUlBRVA0RElBWWdBQkNOQVNJREVGc2hCd3NDUUNBQUlBY1FPeWdDQUNJQlJRUkFJQUlvQWhBZ0FFRUlhaUlCS0FJQU5nSUFJQUFnQWlnQ0VEWUNDQ0FBSUFjUU95QUJOZ0lBSUFJb0FoQW9BZ0JGRFFFZ0FpZ0NFQ0VCSUFBZ0FpZ0NFQ2dDQUNnQ0JDQURFRnNRT3lBQk5nSUFEQUVMSUFJb0FoQWdBU2dDQURZQ0FDQUJJQUlvQWhBMkFnQUxJQUpCRUdvaUFSQzVBU0VFSUFBUVBTSUFJQUFvQWdCQkFXbzJBZ0FnQWtFQk9nQWZJQUVvQWdBaEFDQUJRUUEyQWdBZ0FBUkFJQUVRU2lJQkxRQUVCRUFnQVNnQ0FDQUFRUWhxRUpnR0N5QUFCRUFnQVNnQ0FCb2dBQkF6Q3dzTElBZ2dBa0VRYWlBRUVIMGdBa0VmYWhDdkFpQUNRU0JxSkFBZ0NCQnZJUUFnQlVFZ2FpUUFJQUJCQkdvTEtRRUJmd05BSUFKQkJFWkZCRUFnQVNBQ2FpQUFJQUpyTFFBRE9nQUFJQUpCQVdvaEFnd0JDd3NMN1JJQ0ZIOEJmRUhHQUNFVlFjQ0VQU0VXSUFOQkFVWUVRQ0FCUVFKdElRRkJrS0VQSVJaQkVTRVZJQUJCQW0waEFBc2dCVUVBTmdJQUlBSkJrSURJQUdvaEV5QUJRUUpySVJnZ0FFRUNheUVaUVFBaEFRTkFBa0FnQWlnQ0NDQUJUQVJBSUFVb0FnQWhCZ3dCQ3dKQUlBSWdBVUVDZEdvaUZ5Z0NEQ0lHSUJWSUlBWWdGa3B5RFFBZ0FpQUJRUVIwYWlJUlFZeUFDR29pQ0NnQ0FFRUJSZzBBSUJGQmtJQUlhaWdDQUNBWlJnMEFJQkZCbElBSWFpZ0NBRUVCUmcwQUlCRkJtSUFJYWlnQ0FDQVlSZzBBSUFJb0FnQWhEQ0FCUVFGcUlRb2dCQ0FGS0FJQVFiRHhCR3hxSVFrakFFR0E4UVJySWcwa0FDQU1JQWdvQWdBaUJpQUlLQUlJSWdzZ0FHeHFRUUYwYWlFSElBZ29BZ1FoQ0FKL0FrQUNRQU5BSUFZZ0NFb05BUUpBSUFjdUFRQWlEa0VBU2dSQUlBNUIvLzhEY1VFQ2RDQVRha0VFYXlnQ0FDQUtSZzBCQ3lBSFFRSnFJUWNnQmtFQmFpRUdEQUVMQ3lBR1FYOUhEUUVMUVFCQkEwR3pERUVBRUR4QmZ3d0JDeUFKSUFzMkF0eTRBaUFKSUFZMkFod2dDVUVCTmdJWUlBbEJIR29oQ0VFQklRcEJCU0VIQWtBRFFDQU1JQXBCQW5RaURpQUphaUlLUWRpNEFtb29BZ0FnQUd3Z0NpZ0NHQ0lQYWtFQmRHb2hFaUFIUVFWcUlRZEJBQ0VLQWtBRFFBSkFJQWRCQ0c4aEJ5QUtRUWhHRFFBZ0VpQUhRUUowSWhCQjRNRUFhaWdDQUNJVUlBQnNJQkJCd01FQWFpZ0NBQ0lRYWtFQmRHb3VBUUJCQUVvTkFpQUtRUUZxSVFvZ0IwRUJhaUVIREFFTEMwRUFRUU5CckJoQkFCQThRWDhNQXdzZ0NDQU9haUFQSUJCcU5nSUFJQWtnQ1NnQ0dFRUNkR29pQ2tIY3VBSnFJQlFnQ2tIWXVBSnFLQUlBYWpZQ0FBSkFJQWdnQ1NnQ0dDSUtRUUowSWc1cUtBSUFJQVpIRFFBZ0NTQU9ha0hjdUFKcUtBSUFJQXRIRFFBZ0NrRUJJQXBCQVVvYklRNUJBQ0VNUVFBaENFRUJJUWNNQWdzZ0NTQUtRUUZxSWdvMkFoZ2dDa0dQemdCSERRQUxRUUJCQTBId0hVRUFFRHhCZnd3QkN3TkFJQWNnRGtjRVFDQUpJQWRCQW5ScUlnOUIzTGdDYWlnQ0FDQUxheUlTSUJKc0lBOG9BaHdnQm1zaUR5QVBiR29pRHlBTUlBd2dEMGdpRHhzaERDQUhJQWdnRHhzaENDQUhRUUZxSVFjTUFRc0xRUUFoQmlBSVFRQWdDRUVBU2hzaEJ3Ti9JQVlnQjBZRWZ5QUpRUnhxSVFzZ0NVSGN1QUpxSVF3Z0NDRUdBMzhnQmlBS1RnUi9RUUFoQmdOQUlBWWdCMGNFUUNBSklBWWdDR3NpQ2lBSktBSVlha0VDZEdvZ0JrRUNkQ0lMSUExQndMZ0NhbW9vQWdBMkFod2dDU0FKS0FJWUlBcHFRUUowYWtIY3VBSnFJQXNnRFdvb0FnQTJBZ0FnQmtFQmFpRUdEQUVMQ3lBSlFSeHFJQWtvQWhoQkFuUnFJQWtvQWh3MkFnQWdDVUhjdUFKcUlBa29BaGhCQW5ScUlBa29BdHk0QWpZQ0FDQUpJQWtvQWhoQkFXbzJBaGhCQUFVZ0N5QUdJQWhyUVFKMElncHFJQXNnQmtFQ2RDSU9haWdDQURZQ0FDQUtJQXhxSUF3Z0Rtb29BZ0EyQWdBZ0JrRUJhaUVHSUFrb0FoZ2hDZ3dCQ3dzRklBWkJBblFpQ3lBTlFjQzRBbXBxSUFrZ0Myb2lEQ2dDSERZQ0FDQUxJQTFxSUF4QjNMZ0NhaWdDQURZQ0FDQUdRUUZxSVFZTUFRc0xDeUVHSUExQmdQRUVhaVFBSUFaQkFFZ05BQ0FYS0FJTUlRd2dCQ0FGS0FJQVFiRHhCR3hxSVFwQkFDRUlJd0JCOEFCcklnY2tBQ0FLS0FJWVFRRnJJZ1pCQVNBR1FRRktHeUVPSUFwQjNMZ0NhaUVKSUFwQkhHb2hDeUFLS0FMY3VBSWhEeUFLS0FJY0lSSkJBQ0VHUVFFaERRTkFJQTBnRGtjRVFDQUtJQTFCQW5ScUloQkIzTGdDYWlnQ0FDQVBheUlVSUJSc0lCQW9BaHdnRW1zaUVDQVFiR29pRUNBSUlBZ2dFRWdpRUJzaENDQU5JQVlnRUJzaEJpQU5RUUZxSVEwTUFRc0xJQWRCQURZQ0RDQUhRUUEyQWp3Q1FDQUxJQWxCQUNBR0lBeTNSQUFBQUFBQUFPZy9vMFI3Rks1SDRYcUVQNkpFQUFBQUFBQUE4RCtpSWhvZ0IwRkFheUFIUVR4cUVQTUJRUUJJQkVCQmZ5RU5EQUVMUVg4aERTQUxJQWtnQmlBS0tBSVlRUUZySUJvZ0IwRVFhaUFIUVF4cUVQTUJRUUJJRFFBQ2Z5QUhLQUk4SWdoQkFVY2dCeWdDRENJTVFRRkhja1VFUUNBSEtBSVFJUWdnQmlFSklBY29Ba0FNQVFzZ0NFRUNTQ0FNY2tVRVFDQUhRUUEyQWp3Z0IwRUFOZ0lNSUFzZ0NVRUFJQVpCQW0waUNDQWFJQWRCUUdzZ0IwRThhaER6QVVFQVNBMENJQXNnQ1NBSUlBWWdHaUFIUVJCcUlBZEJER29ROHdGQkFFZ05BaUFIS0FJOFFRRkhEUUlnQnlnQ0RFRUJSdzBDSUFjb0FoQWhDU0FHSVFnZ0J5Z0NRQXdCQ3lBSUlBeEJBa2h5RFFFZ0NpZ0NHQ0VJSUFkQkFEWUNQQ0FIUVFBMkFnd2dDeUFKSUFZZ0JpQUlha0VCYTBFQ2JTSUlJQm9nQjBGQWF5QUhRVHhxRVBNQlFRQklEUUVnQ3lBSklBZ2dDaWdDR0VFQmF5QWFJQWRCRUdvZ0IwRU1haER6QVVFQVNBMEJJQWNvQWp4QkFVY05BU0FIS0FJTVFRRkhEUUVnQnlnQ0VDRUlJQWNvQWtBaENTQUdDeUVHUVFBaERTQUtRUUEyQXB6eEJDQUtRYWp4QkdvZ0NEWUNBQ0FLUWFUeEJHb2dDVFlDQUNBS1FhRHhCR29nQmpZQ0FDQUtRYXp4QkdvZ0NpZ0NHRUVCYXpZQ0FBc2dCMEh3QUdva0FDQU5RUUJJRFFBZ0JDQUZLQUlBUWJEeEJHeHFJQmNvQWd3MkFnQWdCQ0FGS0FJQUlnWkJzUEVFYkdvaUNDQVJRWkNBS0dvckF3QTVBd2dnQ0NBUlFaaUFLR29yQXdBNUF4QWdCU0FHUVFGcUlnZzJBZ0JCUENFR0lBaEJQRVlOQVFzZ0FVRUJhaUVCREFFTEMwRUFJUUpCQUNFQkEwQWdBU0FHVGdSQUEwQWdBaUFHU0FSQUlBUWdBaUlCUWJEeEJHeHFLQUlBUlFSQUEwQWdCaUFCUVFGcUlnQktCRUFnQkNBQlFiRHhCR3hxSUFRZ0FFR3c4UVJzYWtHdzhRUVFQeG9nQlNnQ0FDRUdJQUFoQVF3QkN3c2dCU0FHUVFGcklnWTJBZ0FMSUFKQkFXb2hBZ3dCQ3dzQ1FDQURRUUZIRFFCQkFDRUFBMEFnQUNBR1RnMEJJQVFnQkNnQ0FFRUNkRFlDQUNBRUlBUXJBd2dpR2lBYW9Ea0RDQ0FFSUFRckF4QWlHaUFhb0RrREVDQUVLQUlZSVFOQkFDRUJBMEFnQVNBRFNBUkFJQVFnQVVFQ2RHb2lBaUFDS0FJY1FRRjBOZ0ljSUFKQjNMZ0NhaUlDSUFJb0FnQkJBWFEyQWdBZ0FVRUJhaUVCREFFTEN5QUFRUUZxSVFBZ0JFR3c4UVJxSVFRZ0JTZ0NBQ0VHREFBTEFBdEJBQThMSUFRZ0FVR3c4UVJzYWlFSUlBRkJBV29pQUNFQkEwQWdBU0FHVGdSQUlBQWhBUXdDQlNBSUt3TUlJQVFnQVVHdzhRUnNhaUlHS3dNSW9TSWFJQnFpSUFnckF4QWdCaXNERUtFaUdpQWFvcUFoR2dKQUFrQWdDQ2dDQUNJSklBWW9BZ0FpRTBvRVFDQWFJQWxCQkcyM1l3MEJEQUlMSUFnaEJpQWFJQk5CQkcyM1kwVU5BUXNnQmtFQU5nSUFDeUFCUVFGcUlRRWdCU2dDQUNFR0RBRUxBQXNBQ3dBTGdnSUJCSDhnQVNBQUVJQUJJZ0pMQkVBakFFRWdheUlFSkFBQ1FDQUJJQUpySWdNZ0FCQTBLQUlBSUFBb0FnUnJRUlJ0VFFSQUlBQWdBeENrQmd3QkN5QUFFRFFoQVNBRVFRaHFJQUFnQUJDQUFTQURhaEMxQkNBQUVJQUJJQUVRandjaEFpTUFRUkJySWdFa0FDQUJJQUlvQWdnMkFnQWdBaWdDQ0NFRklBRWdBa0VJYWpZQ0NDQUJJQVVnQTBFVWJHbzJBZ1FnQVNnQ0FDRURBMEFnQVNnQ0JDQURSd1JBSUFJb0FoQWFJQUVvQWdBUW9nWWdBU0FCS0FJQVFSUnFJZ00yQWdBTUFRc0xJQUVRcWdFZ0FVRVFhaVFBSUFBZ0FoQ05CeUFDRUlvSEN5QUVRU0JxSkFBUEN5QUJJQUpKQkVBZ0FDQUFLQUlBSUFGQkZHeHFFS2tHQ3d1ZkFRRUVmeU1BUVNCcklnSWtBQ0FBSUFFMkFnQWdBa0VZYWlBQkVLb0dJUU5CRUJCT0lRUWpBRUVnYXlJRkpBQWdCU0FCTmdJTUlBUVErd01pQkVINDFRRTJBZ0FnQkVFTWFpQUZRUWhxSUFWQkRHb1E5Z0VROWdFYUlBVkJJR29rQUNBQUlBUTJBZ1FnQXhDNUFSb2dBaUFCTmdJRUlBSWdBVFlDQUNBREtBSUFJUUVnQTBFQU5nSUFJQUVFUUNBRElBRVFrQVlMSUFKQklHb2tBQ0FBQzU0QkFRSi9JQUJDQURjQ0FDQUFRUWhxSWdGQkFEWUNBQ0FCUVFScUVFZ2FJQUZCRUdvUVNCb2dBRUVrYWlJQlF0SUpOd0lBSUFGQkNHb1FpQVFhSUFGQkRHb2lBa0lBTndJRUlBSWdBVFlDQUNBQ1FReHFFRWdhSUFKQkdHb1FTQm9nQWtFa2FoQklHaUFDUVRCcUVFZ2FJQUZCeUFCcUVFZ2FJQUZCMUFCcUVLTURJQUZCRURZQ2JDQUJRZ0EzQW1RZ0FoQ1RCaUFDUVFFUWtnWWdBQXVrQWdFRGZ5QUFLQUlBSVFJZ0FDQUJOZ0lBSUFJRVFDQUNCRUFnQWtHVUJtb2lBRUVZYWhEa0FTQUFRUXhxRUhRZ0FCQjBJQUpCakFWcUlnQkIvQUJxRUhRZ0FFSHdBR29RZENBQVFkd0FhaERuQlNBQ1Fmd0VhaERrQVNBQ1FhQUJhaUlBUVpBQmFoQjBJQUJCM0FCcUlnRkJLR29RblFRZ0FVRWNhaEIwSUFCQnlBQnFFSjRFSUFCQlBHb1FuZ1FnQUVFZ2FoQ2RCQ0FBUVJCcUlnQVFoZ0lnQUNnQ0FBUkFJQUFnQUNnQ0FCRFZCaUFBRURRYUlBQW9BZ0FoQVNBQUVMd0JHaUFCRURNTElBSkIzQUJxRUlzRUdpQUNRY2dBYWlJREtBSUlJUUFnQXhBMElRUURRQ0FBQkVBZ0FDZ0NBQ0VCSUFRZ0FFRUlhaENtQmlBQUVETWdBU0VBREFFTEN5QURFTEFDSUFKQlFHc1EwUUVnQWtFTWFoRGtBUXNnQWhBekN3dm1BUUVGZnlNQVFjQUJheUlDSkFBZ0FDQUNRUWhxSWdFUXJBWWdBRUVFYWlBQlFRUnlFS3dHQTBBQ1FFRUFJUUVnQTBFRFJnUkFJQUFvQXJBQklnTkJBM1JCcUtrQmFpZ0NBQ0lFUVFBZ0JFRUFTaHNoQkFOQUlBRWdCRVlOQWlBQUlBRkJBM1FpQldwQjZBQnFJQUlnQldwQjhBQnFFS2NHSUFGQkFXb2hBUXdBQ3dBRkEwQWdBVUVFUmtVRVFDQUJRUU4wSWdRZ0FDQURRUVYwSWdWcWFrRUlhaUFDSUFWcUlBUnFRUkJxRUtjR0lBRkJBV29oQVF3QkN3c2dBMEVCYWlFRERBSUxBQXNMSUFJZ0F6WUN1QUVnQUNBQ1FRaHFRYmdCRUQ4YUlBSkJ3QUZxSkFBTFlRRURmeUFBS0FJQUlRSWdBQ0FCTmdJQUlBSUVRQ0FDQkVBZ0FrRUVhaUlES0FJSUlRQWdBeEEwSVFRRFFDQUFCRUFnQUNnQ0FDRUJJQVFnQUVFSWFoQ1lCaUFBRURNZ0FTRUFEQUVMQ3lBREVMQUNJQUpCQUJDeEJnc2dBaEF6Q3dzSkFDQUJRUUE3QVFBTEN3QWdBQ0FCUVFJUSt3RUxnZ3NCRm53Q1FBSkFBa0FDUUFKQUFrQWdCVUVCYXc0RUFRSURBQVVMSUFBckF4QWlFVVFBQUFBQUFBQVlRS0loRnlBQUt3TVlJaEpFQUFBQUFBQUFHRUNpSVJnZ0FpQUFLd000SWhtaElBQXJBeWdpR3FNaUNpQUtvaUVDSUFFZ0FDc0RNQ0lib1NBQUt3TWdJZzZqSWdrZ0NhSWhBU0FBS3dOQUlSVWdBQ3NEQ0NFVElBQXJBd0FoRkNBU0lCS2dJUThnRVNBUm9DRVdRUUVoQlNBS0lRWWdDU0VIQTBBQ1FBSkFJQUZFQUFBQUFBQUFBQUJpSUFKRUFBQUFBQUFBQUFCaWNrVUVRRVFBQUFBQUFBQUFBQ0VIREFFTElBWWdEeUFISUJJZ0FTQUJvQ0FDSUFHZ0loQ2dvaUFUSUJDaUlCQ2lJQlFnRUtKRUFBQUFBQUFBOEQrZ29DSUxJQWVpSUFZZ0ZpQUhvcUtnb0NBSm9TQVlJQWVpSUJZZ0JxSWdFeUFDSUFLaUlBRkVBQUFBQUFBQUZFQ2lJQUdpSUFJZ0FVUUFBQUFBQUFBSVFLSWlCNklpREtDZ29pQVVJQWNnQXFDaVJBQUFBQUFBQVBBL29LQ2dvS09oSWdlaUlnMGdCcUlnQ3lBR29pQVJJQUlnQXFBZ0VLQ2lvS0FnQ3FFZ0RTQVhJQWFpSUJNZ0FrUUFBQUFBQUFBVVFLSWdBcUlnQVNBQm9pQU1vS0NpSUJRZ0FrUUFBQUFBQUFBSVFLSWdBYUNpUkFBQUFBQUFBUEEvb0tDZ29LT2hJUVlnQlVFRVJ3MEJJQVloQ0FzZ0F5QWJJQTRnQjZJZ0ZhT2dPUU1BSUJrZ0dpQUlvaUFWbzZBaEFnd0ZDeUFGUVFGcUlRVWdCaUFHb2lFQ0lBY2dCNkloQVF3QUN3QUxJQUVnQUNzREFDSUxvU0lCSUFHaUlBSWdBQ3NEQ0tFaUJpQUdvcUFpQjU4aUFwb2hEQ0FBS3dNWVJBQUFBQUNFMTVkQm95SUlSQUFBQUFBQUFBakFvaUVOSUFpYUlRcEJBU0VGQTBCRUFBQUFBQUFBQUFBaENBSkFJQUpFQUFBQUFBQUFBQUJpQkVBZ0JpQUNJQW9nQjZKRUFBQUFBQUFBOEQrZ0lBS2lJQXlnSUEwZ0I2SkVBQUFBQUFBQThEK2dvNkVpQ0tJZ0FxTWhCaUFCSUFpaUlBS2pJUUVnQlVFRFJ3MEJJQUVoQ1NBR0lRZ0xJQU1nQ3lBSklBQXJBeENqb0RrREFDQUlJQUFyQXhDaklBQXJBd2lnSVFJTUJBc2dCVUVCYWlFRklBRWdBYUlnQmlBR29xQWlCNThoQWd3QUN3QUxJQUVnQUNzREFDSU9vU0lHSUFhaUlBSWdBQ3NEQ0tFaUJ5QUhvcUFpQXA4aUFab2hEeUFBS3dNWVJBQUFBQUNFMTVkQm95SUpSQUFBQUFBQUFBakFvaUVMSUFBckF5QkVBQUFBQUlUWGwwR2pSQUFBQUFBQWF2aEFveUlJUkFBQUFBQUFBQlRBb2lFTUlBbWFJUTBnQ0pvaENrRUJJUVVEUUVRQUFBQUFBQUFBQUNFSlJBQUFBQUFBQUFBQUlRZ0NRQ0FCUkFBQUFBQUFBQUFBWWdSQUlBY2dBU0FDSUFxaUlBS2lJQTBnQXFKRUFBQUFBQUFBOEQrZ29DQUJvaUFQb0NBTUlBS2lJQUtpSUFzZ0FxSkVBQUFBQUFBQThEK2dvS09oSWdLaUlBR2pJUWNnQmlBQ29pQUJveUVHSUFWQkEwY05BU0FHSVFrZ0J5RUlDeUFESUE0Z0NTQUFLd01RbzZBNUF3QWdDQ0FBS3dNUW95QUFLd01Jb0NFQ0RBTUxJQVZCQVdvaEJTQUdJQWFpSUFjZ0I2S2dJZ0tmSVFFTUFBc0FDeUFCSUFBckF3QWlEcUVnQUNzREdLTWlCaUFHb2lBQ0lBQXJBd2loSWdjZ0I2S2dJZ0tmSWdHYUlROGdBQ3NESUVRQUFBQUFoTmVYUWFNaUNVUUFBQUFBQUFBSXdLSWhDeUFBS3dNb1JBQUFBQUNFMTVkQm8wUUFBQUFBQUdyNFFLTWlDRVFBQUFBQUFBQVV3S0loRENBSm1pRU5JQWlhSVFwQkFTRUZBMEJFQUFBQUFBQUFBQUFoQ1VRQUFBQUFBQUFBQUNFSUFrQWdBVVFBQUFBQUFBQUFBR0lFUUNBSElBRWdBaUFLb2lBQ29pQU5JQUtpUkFBQUFBQUFBUEEvb0tBZ0FhSWdENkFnRENBQ29pQUNvaUFMSUFLaVJBQUFBQUFBQVBBL29LQ2pvU0lDb2lBQm95RUhJQVlnQXFJZ0FhTWhCaUFGUVFOSERRRWdCaUVKSUFjaENBc2dBeUFPSUFrZ0FDc0RFS09nT1FNQUlBZ2dBQ3NERUtNZ0FDc0RDS0FoQWd3Q0N5QUZRUUZxSVFVZ0JpQUdvaUFISUFlaW9DSUNueUVCREFBTEFBc2dCQ0FDT1FNQUN3c05BQ0FBUVlEc0F6WUNBQ0FBQ3hVQUlBQkIxTlVCTmdJQUlBQkJCR29RT0JvZ0FBdE5BUUovSXdCQklHc2lBeVFBSUFBZ0F5QUFRVGhxUVFBUU95QUNLQUlBSUFJb0FnUWdBaWdDQ0NBQ0tBSU1FTjBGSWdRZ0FoRGVBaUFBSUFFZ0JCRGVBaUFFRUpJRElBTkJJR29rQUFzMUFDQUFLQUlBR2lBQUtBSUFJQUFRa3dKQkFYUnFHaUFBS0FJQUlBQVFsQUpCQVhScUdpQUFLQUlBSUFBUWt3SkJBWFJxR2dzY0FRRjlJQUFxQWdBaEFpQUFJQUVxQWdBNEFnQWdBU0FDT0FJQUN3d0FJQUFnQVJENkFVRUJjd3ZrQVFFQmZ5TUFRU0JySWdNa0FDQURJQUUyQWhBZ0F5QUFOZ0lZSUFNZ0FqWUNDQ0FES0FJUUlBTW9BaGdRbEFFaEFTQURLQUlJSUFNb0FoQVFsQUVoQUFKQUFuOENmeUFCUlFSQVFRQWhBaUFBUlEwRElBTW9BaEFnQXlnQ0NCRElBVUVCSVFJZ0F5Z0NFQ0FES0FJWUVKUUJSUTBESUFOQkVHb2hBQ0FEUVJocURBRUxJQU1vQWhnaEFTQUFCRUFnQTBFSWFpRUFRUUVNQWdzZ0FTQURLQUlRRU1nQlFRRWhBaUFES0FJSUlBTW9BaEFRbEFGRkRRSWdBMEVJYWlFQUlBTkJFR29MS0FJQUlRRkJBZ3NoQWlBQklBQW9BZ0FReUFFTElBTkJJR29rQUNBQ0N4SUFJQUFRUFNnQ0FDQUFLQUlBYTBFRGRRc05BQ0FBSUFFZ0FrRURFS1lFQ3dzQUlBQkJBRUVrRURvYUM1RUJBUU4vSXdCQkVHc2lBaVFBSUFJZ0FUWUNEQ01BUVJCcklnTWtBQ0FBRURRYUlBTkJ4K1B4T0RZQ0RDQURRZi8vLy84SE5nSUlJQU5CREdvZ0EwRUlhaEQ4QVNnQ0FDRUVJQU5CRUdva0FDQUJJQVJOQkVBZ0FCRDNBU0lBSUFSQkFYWkpCRUFnQWlBQVFRRjBOZ0lJSUFKQkNHb2dBa0VNYWhCNUtBSUFJUVFMSUFKQkVHb2tBQ0FFRHdzUW1nRUFDd3NBSUFFZ0FrRWtFRDhhQ3cwQUlBQWdBU0FDUVNRUXFBUUxqUUlDREg4QmZVRi9JUW9DUUNBQktBSUlJZ1lnQWlnQ0JFY05BQ0FBS0FJRUlnTWdBU2dDQkVjTkFDQUFLQUlJSWdjZ0FpZ0NDRWNOQUVFQUlRb2dBMEVBSUFOQkFFb2JJUXNnQjBFQUlBZEJBRW9iSVF3Z0JrRUFJQVpCQUVvYklRMGdBQ2dDQUNFREEwQWdCQ0FMUmcwQklBUWdCbXdoRGtFQUlRVURRQ0FGSUF4R1JRUkFRUUFoQUNBRFFRQTJBZ0FnQWlnQ0FDQUZRUUowYWlFSUlBRW9BZ0FnRGtFQ2RHb2hDVU1BQUFBQUlROERRQ0FBSUExR1JRUkFJQU1nQ1NvQ0FDQUlLZ0lBbENBUGtpSVBPQUlBSUFCQkFXb2hBQ0FKUVFScUlRa2dDQ0FIUVFKMGFpRUlEQUVMQ3lBRlFRRnFJUVVnQTBFRWFpRUREQUVMQ3lBRVFRRnFJUVFNQUFzQUN5QUtDeXNCQVg4Z0FDQUJLQUlBTmdJQUlBRW9BZ0FoQXlBQUlBRTJBZ2dnQUNBRElBSkJER3hxTmdJRUlBQUxmd0VEZnlBQUVJWUNJQUFRTkJvZ0FDZ0NBQ0VFSUFBb0FnUWhBeUFCUVFScUlRSURRQ0FESUFSSEJFQWdBaWdDQUVFTWF5QURRUXhySWdNUWp3UWFJQUlnQWlnQ0FFRU1hellDQUF3QkN3c2dBQ0FDRUVZZ0FFRUVhaUFCUVFocUVFWWdBQkEwSUFFUVBSQkdJQUVnQVNnQ0JEWUNBQ0FBSUFBUVZoQ3ZBd3RaQVFKL0l3QkJFR3NpQWlRQUlBSWdBRUVJYWlBQkVNVUdJZ0VvQWdBaEF3TkFJQUVvQWdRZ0EwY0VRQ0FBS0FJUUdpQUJLQUlBRUtNRElBRWdBU2dDQUVFTWFpSUROZ0lBREFFTEN5QUJFS29CSUFKQkVHb2tBQXNaQUNBQUlBRWdBaUFEUVF4QjE4b0JRZFdxMWFvQkVLY0VDMU1CQTM4akFFRVFheUlESkFBZ0F5QUFJQUVRNmdJaUFpZ0NCQ0VCSUFJb0FnZ2hCQU5BSUFFZ0JFWUVRQ0FDRUc0Z0EwRVFhaVFBQlNBQUVEUWFJQUVRb3dNZ0FpQUJRUXhxSWdFMkFnUU1BUXNMQ3hJQUlBQVFQU2dDQUNBQUtBSUFhMEVDZFFzZEFDQUJRZi8vLy84RFN3UkFRZGZLQVJDdEFRQUxJQUZCQW5RUVRnc0pBQ0FBSUFFUWtBUUxXQUVDZnlNQVFSQnJJZ0lrQUNBQ0lBQkJDR29nQVJDa0F5SUJLQUlBSVFNRFFDQUJLQUlFSUFOSEJFQWdBQ2dDRUNBQktBSUFFTXdHSUFFZ0FTZ0NBRUVFYWlJRE5nSUFEQUVMQ3lBQkVLb0JJQUpCRUdva0FBdkhBUUVKZnlBQUtBSUlJQUFvQWdRUXVnRWlBZ1JBUVg4aEJ3SkFJQUlvQWdRaUF5QUFLQUlJUncwQUlBSW9BZ2dpQVNBQUtBSUVSdzBBUVFBaEJ5QURRUUFnQTBFQVNoc2hDQ0FCUVFBZ0FVRUFTaHNoQ1NBQ0tBSUFJUVJCQUNFQkEwQWdBU0FJUmcwQklBQW9BZ0FnQVVFRGRHb2hCVUVBSVFZRFFDQUdJQWxIQkVBZ0JDQUZLd01BT1FNQUlBWkJBV29oQmlBRVFRaHFJUVFnQlNBRFFRTjBhaUVGREFFTEN5QUJRUUZxSVFFTUFBc0FDeUFIUVFCT0JFQWdBZzhMSUFJUVJRdEJBQXNMQUNBQUlBRkJCQkQ3QVFzTUFDQUFJQUFvQWdBUXp3WUxDd0FnQUNBQlFTUVErd0VMTGdFQmZ5QUFLQUlFSVFJRFFDQUJJQUpIQkVBZ0FCQTBHaUFDUVF4cklnSVE1QUVNQVFzTElBQWdBVFlDQkFzdUFRRi9JQUFvQWdRZ0FTZ0NDQkRjQmlJQ0JFQWdBaUFBSUFFUXhBWkJBRTRFUUNBQ0R3c2dBaEJGQzBFQUN6RUJBWDhnQUJDR0FpQUFLQUlBQkVBZ0FDQUFLQUlBRU5JR0lBQVFOQm9nQUNnQ0FDRUJJQUFRdkFFYUlBRVFNd3NMTGdFQmZ5QUFLQUlFSVFJRFFDQUJJQUpIQkVBZ0FCQTBHaUFDUVF4cklnSVExQVlNQVFzTElBQWdBVFlDQkFzZ0FDQUFRZ0EzQWdBZ0FFSUFOd0lRSUFCQ0FEY0NDQ0FBUVJocUVMSUNHZ3NIQUNBQUVLY0NDeTRCQVg4Z0FDZ0NCQ0VDQTBBZ0FTQUNSd1JBSUFBUU5Cb2dBa0VnYXlJQ0VKSUREQUVMQ3lBQUlBRTJBZ1FMTlFBZ0FDZ0NBQm9nQUNnQ0FDQUFFSlVDUVFWMGFob2dBQ2dDQUNBQUVLWUJRUVYwYWhvZ0FDZ0NBQ0FBRUpVQ1FRVjBhaG9MN3dFQkJYOGpBRUVRYXlJREpBQUNRQ0FBUlFSQVFYOGhCQXdCQ3lBQUtBTDBocThESUFGR0RRQWdBQ2dDaUlldkF5SUNCRUFnQWhCRklBQkJBRFlDaUlldkF3c0NRQUpBQWtBQ1FDQUJEZ1VEQUFBQUFRSUxJQUFvQWlRaEJTQUFLQUlvSVFaQmtCQVFPU0lDQkVBZ0FpQUdOZ0lJSUFJZ0JUWUNCQ0FDUVFBMkFnQUxJQUFnQWpZQ2lJZXZBd3dDQ3lBQVFvR0FnSUFRTndPQWg2OERRUVFoQVF3QkMwRUFJUUZCQUVFRFFkVVlRUUFRUEFzZ0FDQUJOZ0wwaHE4RElBQW9BZ0JCQVVjTkFDQURJQUZCQW5SQnNEVnFLQUlBTmdJQVFRQkJBMEhFT1NBREVEd0xJQU5CRUdva0FDQUVDd3dBSUFBZ0FDZ0NBQkNuQXdzTEFDQUFJQUZCQWhEckJndjZCQVFFZndKOEFYMEJmZ0o5SUFHOElnUVFrZ1VoQWdKQUFrQUNRQUpBSUFDOElnTkJnSUNBL0FkclFZQ0FnSWg0VHdSQUlBSU5BUXdEQ3lBQ1JRMEJDME1BQUlBL0lRZ2dBMEdBZ0lEOEEwWU5BaUFFUVFGMElnSkZEUUlnQUNBQmtpQUNRWUdBZ0hoSklBTkJBWFFpQWtHQWdJQjRUWEZGRFFNYUlBSkJnSUNBK0FkR0RRSkRBQUFBQUNBQklBR1VJQVJCZjNOQkgzWWdBa0dBZ0lENEIwbEdHd3dEQ3lBREVKSUZCRUFnQUNBQWxDRUlJQU5CQUVnRVFDQUlqQ0FJSUFRUWtRVkJBVVliSVFnTElBUkJBRTROQWtNQUFJQS9JQWlWRUpNRkRBTUxJQU5CQUVnRVFDQUVFSkVGSWdKRkJFQWdBQkNWQlF3RUN5QURRZi8vLy84SGNTRURJQUpCQVVaQkVIUWhCUXNnQTBILy8vOERTdzBBSUFCREFBQUFTNVM4UWYvLy8vOEhjVUdBZ0lEY0FHc2hBd3NDUUVIbzhBSXJBd0FnQXlBRFFZQ0F6UGtEYXlJRVFZQ0FnSHh4YTc2N0lBUkJEM1pCOEFGeElnSkI2TzRDYWlzREFLSkVBQUFBQUFBQThMK2dJZ2FpUWZEd0Fpc0RBS0FnQmlBR29pSUhJQWVpb2tINDhBSXJBd0FnQnFKQmdQRUNLd01Bb0NBSG9rR0k4UUlyQXdBZ0JxSWdBa0h3N2dKcUt3TUFJQVJCRjNXM29LQ2dvQ0FCdTZJaUI3MUNnSUNBZ0lDQTRQLy9BSU5DZ1lDQWdJQ0F3Sy9BQUZRTkFDQUhSSEhWMGYvLy8xOUFaQVJBSUFWREFBQUFjQkNVQlF3REN5QUhSQUFBQUFBQXdHTEFaVVVOQUNBRlF3QUFBQkFRbEFVTUFndEJxTzRDS3dNQUlBZEJvTzRDS3dNQUlnWWdCNkFpQnlBR29hRWlCcUpCc080Q0t3TUFvQ0FHSUFhaW9rRzQ3Z0lyQXdBZ0JxSkVBQUFBQUFBQThEK2dvQ0FIdlNJSklBV3RmRUl2aGlBSnAwRWZjVUVEZEVHZzdBSnFLUU1BZkwraXRpRUlDeUFJQ3dzTEFDQUFRd0FBQUQrU2pnc1FBQ0FBRUtjQ1F3QUFBRUFRcHdLVkN5d0FJQUFvQWdBYUlBQW9BZ0FnQUJEM0FVRWtiR29hSUFBb0FnQWFJQUFvQWdBZ0FCQ0RBVUVrYkdvYUN3d0FJQUFnQUNnQ0FCRFJCZ3NjQVFGL0lBQkJEazBFZnlBQVFRSjBRZWlvQVdvb0FnQUZRUUFMQ3pVQUlBQW9BZ0FhSUFBb0FnQWdBQkQzQVVFa2JHb2FJQUFvQWdBZ0FCQ0RBVUVrYkdvYUlBQW9BZ0FnQUJEM0FVRWtiR29hQzJvQkJYd2dBQ3NER0NJQklBR2lJQUFyQXhBaUFpQUNvaUFBS3dNQUlnTWdBNklnQUNzRENDSUVJQVNpb0tDZ0lnVkVBQUFBQUFBQUFBQmhCRUFQQ3lBQUlBRWdCWjhpQWFNNUF4Z2dBQ0FDSUFHak9RTVFJQUFnQkNBQm96a0RDQ0FBSUFNZ0FhTTVBd0FMRXdBZ0FDQUJOZ0pVSUFCQlBHb2dBUkNnQkFzbUFDQUFLQUlBR2lBQUtBSUFJQUFRMndGcUdpQUFLQUlBSUFBUTJ3RnFHaUFBS0FJQUdnc0pBQ0FBUVg4UTZ3SUxIUUFnQVVIVnF0V3FBVXNFUUVHODhnQVFyUUVBQ3lBQlFReHNFRTRMRFFBZ0FFSFZxdFdxQVJEckFnc1dBQ0FCSUFJcEFnQTNBZ0FnQVNBQ0tBSUlOZ0lJQ3o0QkFuOUJEQkE1SWdNRWZ5QURJQUFnQVd3Z0FuUVFPU0lFTmdJQUlBUkZCRUFnQXhBelFRQVBDeUFESUFFMkFnZ2dBeUFBTmdJRUlBTUZRUUFMQ3o0QUEwQWdBU0FDUndSQUlBRWdBU3dBQUNJQVFRQk9CSDhnQXlnQ0FDQUJMQUFBUVFKMGFpZ0NBQVVnQUFzNkFBQWdBVUVCYWlFQkRBRUxDeUFDQ3o4QUEwQWdBU0FDUndSQUlBRWdBU2dDQUNJQVFmOEFUUVIvSUFNb0FnQWdBU2dDQUVFQ2RHb29BZ0FGSUFBTE5nSUFJQUZCQkdvaEFRd0JDd3NnQWd1bkFRRUVmeU1BUVlBQ2F5SUFKQUFnQUVJbE53UDRBU0FBUWZnQmFpSUhRUUZ5UWMvMkFTQUZJQUlvQWdRUXV3TVFYQ0VJSUFBZ0JEY0RBQ0FBUWVBQmFpSUdJQVpCR0NBSUlBY2dBQkN1QVNBR2FpSUlJQUlRMlFFaENTQUFRUkJxSWdjZ0FoQlBJQVlnQ1NBSUlBQkJJR29pQmlBQVFSeHFJQUJCR0dvZ0J4QzJCeUFIRUVjZ0FTQUdJQUFvQWh3Z0FDZ0NHQ0FDSUFNUW1nSWhBU0FBUVlBQ2FpUUFJQUVMdVFFQkEzOGpBRUdnQVdzaUFDUUFJQUJCNWJnREx3QUFPd0djQVNBQVFlRzRBeWdBQURZQ21BRWdBRUdZQVdvaUJrRUJja0grOWdFZ0JTQUNLQUlFRUxzREVGd2hCeUFBSUFRMkFnQWdBRUdMQVdvaUJDQUVRUTBnQnlBR0lBQVFyZ0VnQkdvaUJ5QUNFTmtCSVFnZ0FFRVFhaUlHSUFJUVR5QUVJQWdnQnlBQVFTQnFJZ1FnQUVFY2FpQUFRUmhxSUFZUXRnY2dCaEJISUFFZ0JDQUFLQUljSUFBb0FoZ2dBaUFERUpvQ0lRRWdBRUdnQVdva0FDQUJDNllCQVFSL0l3QkI4QUJySWdBa0FDQUFRaVUzQTJnZ0FFSG9BR29pQjBFQmNrSFA5Z0VnQlNBQ0tBSUVFTHNERUZ3aENDQUFJQVEzQXdBZ0FFSFFBR29pQmlBR1FSZ2dDQ0FISUFBUXJnRWdCbW9pQ0NBQ0VOa0JJUWtnQUVFUWFpSUhJQUlRVHlBR0lBa2dDQ0FBUVNCcUlnWWdBRUVjYWlBQVFSaHFJQWNRdUFjZ0J4QkhJQUVnQmlBQUtBSWNJQUFvQWhnZ0FpQURFT2tCSVFFZ0FFSHdBR29rQUNBQkM3WUJBUU4vSXdCQjBBQnJJZ0FrQUNBQVFlVzRBeThBQURzQlRDQUFRZUc0QXlnQUFEWUNTQ0FBUWNnQWFpSUdRUUZ5UWY3MkFTQUZJQUlvQWdRUXV3TVFYQ0VISUFBZ0JEWUNBQ0FBUVR0cUlnUWdCRUVOSUFjZ0JpQUFFSzRCSUFScUlnY2dBaERaQVNFSUlBQkJFR29pQmlBQ0VFOGdCQ0FJSUFjZ0FFRWdhaUlFSUFCQkhHb2dBRUVZYWlBR0VMZ0hJQVlRUnlBQklBUWdBQ2dDSENBQUtBSVlJQUlnQXhEcEFTRUJJQUJCMEFCcUpBQWdBUXNvQUNBQUlBRTJBZ0FnQUVFRWFoQ1JCeUFBUWdBM0FoZ2dBRUlBTndJUUlBQkNBRGNDQ0NBQUN6d0JBWDhqQUVFUWF5SUVKQUFnQkNBQUVENDJBZ0FnQkNBREtBSUFOZ0lFSUFRZ0FpZ0NBRFlDQ0NBQlFibmZBU0FFRUFnYUlBUkJFR29rQUFzY0FDQUFJQUZCQ0NBQ3B5QUNRaUNJcHlBRHB5QURRaUNJcHhBZUN3d0FJQUFROWdZYUlBQVFNd3NyQVFGL0lBQkJyT3dETmdJQUFrQWdBQ2dDQkVFTWF5SUJRUWhxRVBnRFFRQk9EUUFnQVJBekN5QUFDNHdCQVFWL0EwQWdCa0VEUndSQUlBQWdCa0VGZENJSGFpRUVRUUFoQXdOQUlBTkJCRWNFUUNBRFFRTjBJZ1VnQWlBSGFtb2dCQ3NERUNBQklBVnFJZ1ZCUUdzckF3Q2lJQVFyQXdBZ0JTc0RBS0lnQkNzRENDQUZLd01nb3FDZ09RTUFJQU5CQVdvaEF3d0JDd3NnQWlBSGFpSURJQVFyQXhnZ0F5c0RHS0E1QXhnZ0JrRUJhaUVHREFFTEN3dFJBUUYvQWtBZ0FVVU5BQ0FCUWVEbEEwSGc1d01RcXdFaUFVVU5BQ0FCS0FJSUlBQW9BZ2hCZjNOeERRQWdBQ2dDRENBQktBSU1RUUFRZmtVTkFDQUFLQUlRSUFFb0FoQkJBQkIrSVFJTElBSUxMQUFnQUNnQ0FCb2dBQ2dDQUNBQUVOd0JRUlJzYWhvZ0FDZ0NBQ0FBRU53QlFSUnNhaG9nQUNnQ0FCb0xWUUVDZnlBQUtBSUVJUVFDZjBFQUlBSkZEUUFhSUFSQkNIVWlCU0FFUVFGeFJRMEFHaUFDS0FJQUlBVVFyUVFMSVFVZ0FDZ0NBQ0lBSUFFZ0FpQUZhaUFEUVFJZ0JFRUNjUnNnQUNnQ0FDZ0NIQkVIQUF1OUFRRUVmeU1BUVJCcklnVWtBQ0FDUWUvLy8vOERJQUZyVFFSQUlBQVFQaUVHSUFBQ2Z5QUJRZWYvLy84QlNRUkFJQVVnQVVFQmREWUNDQ0FGSUFFZ0FtbzJBZ3dnQlVFTWFpQUZRUWhxRUhrb0FnQVF1UUlNQVF0Qjd2Ly8vd01MUVFGcUlnY1FpZ0loQWlBRUJFQWdBaUFHSUFRUXpBRUxJQU1nQkVjRVFDQUVRUUowSWdnZ0Ftb2dCaUFJYWlBRElBUnJFTXdCQ3lBQlFRRkhCRUFnQmhBekN5QUFJQUlRbVFFZ0FDQUhFTFFCSUFWQkVHb2tBQThMRUZVQUM0OENBUVIvSXdCQkVHc2lDQ1FBSUFJZ0FVRi9jMEh2Ly8vL0EycE5CRUFnQUJBK0lRa2dBQUovSUFGQjUvLy8vd0ZKQkVBZ0NDQUJRUUYwTmdJSUlBZ2dBU0FDYWpZQ0RDQUlRUXhxSUFoQkNHb1FlU2dDQUJDNUFnd0JDMEh1Ly8vL0F3dEJBV29pQ2hDS0FpRUNJQVFFUUNBQ0lBa2dCQkRNQVFzZ0JnUkFJQVJCQW5RZ0Ftb2dCeUFHRU13QkN5QURJQVFnQldvaUMyc2hCeUFESUF0SEJFQWdCRUVDZENJRElBSnFJQVpCQW5ScUlBTWdDV29nQlVFQ2RHb2dCeERNQVFzZ0FVRUJSd1JBSUFrUU13c2dBQ0FDRUprQklBQWdDaEMwQVNBQUlBUWdCbW9nQjJvaUFCQ0pBU0FJUVFBMkFnUWdBaUFBUVFKMGFpQUlRUVJxRUt3QklBaEJFR29rQUE4TEVGVUFDM1lCQTM4akFFRVFheUlESkFBZ0FrRnZUUVJBQWtBZ0FrRUtUUVJBSUFBZ0FoQ1BBU0FBSVFRTUFRc2dBQ0FDRUowQ1FRRnFJZ1VRVGlJRUVKa0JJQUFnQlJDMEFTQUFJQUlRaVFFTElBUWdBU0FDRUxjQklBTkJBRG9BRHlBQ0lBUnFJQU5CRDJvUWhRRWdBMEVRYWlRQUR3c1FWUUFMRXdBZ0FRUkFJQUFnQWhEQ0FTQUJFRG9hQ3dzREFBQUxDUUFnQUJCY05nSUFDeXNCQVg4Z0FDZ0NCQ0VDQTBBZ0FTQUNSd1JBSUFBUVdSb2dBa0VFYXlFQ0RBRUxDeUFBSUFFMkFnUUxLZ0FqQUVFUWF5SUNKQUFDUUNBQUlBRkdCRUFnQVVFQU9nQjREQUVMSUFFUU13c2dBa0VRYWlRQUN6OEJBWDhqQUVFUWF5SUNKQUFDUUFKQUlBRkJIa3NOQUNBQUxRQjREUUFnQUVFQk9nQjREQUVMSUFKQkNHb2dBUkRGQlNFQUN5QUNRUkJxSkFBZ0FBdERBUUYvSXdCQkVHc2lBU1FBSUFBUVdSb2dBVUgvLy8vL0F6WUNEQ0FCUWYvLy8vOEhOZ0lJSUFGQkRHb2dBVUVJYWhEOEFTZ0NBQ0VBSUFGQkVHb2tBQ0FBQ3drQUlBQVFzZ1FRTXdzZEFDQUJRY3lacytZQVN3UkFRYnp5QUJDdEFRQUxJQUZCRkd3UVRnc05BQ0FBUWN5WnMrWUFFT3NDQ3hVQUlBQkIyTHNETmdJQUlBQkJFR29RT0JvZ0FBc1ZBQ0FBUWJDN0F6WUNBQ0FBUVF4cUVEZ2FJQUFMQ1FBZ0FFRVVFTEVEQzBJQkFuOGpBRUVRYXlJQkpBQWdBU0FBTmdJTUlBRkJDR29nQVVFTWFoREtBU0VBUVFSQkFVSE1tQVFvQWdBb0FnQWJJUUlnQUJESkFTQUJRUkJxSkFBZ0FncytBUUYvSXdCQkVHc2lCU1FBSUFVZ0JEWUNEQ0FGUVFocUlBVkJER29ReWdFaEJDQUFJQUVnQWlBREVQNENJUUFnQkJESkFTQUZRUkJxSkFBZ0FBdUNBUUVFZnlBQUVLc0ZJQUFRTkNFRUlBQW9BZ0FoQlNBQUtBSUVJUU1nQVVFRWFpRUNBMEFnQXlBRlJ3UkFJQVFnQWlnQ0FFRVVheUFEUVJScklnTVF0UU1nQWlBQ0tBSUFRUlJyTmdJQURBRUxDeUFBSUFJUVJpQUFRUVJxSUFGQkNHb1FSaUFBRURRZ0FSQTlFRVlnQVNBQktBSUVOZ0lBSUFBZ0FCQ0FBUkQ1QmdzU0FDQUVJQUkyQWdBZ0J5QUZOZ0lBUVFNTFpBRUNmeU1BUVJCcklnVWtBQ0FGUVFBMkFnd2dBRUVNYWlBREVMc0JJQUVFUUNBQUtBSVFJQUVRaGdjaEJBc2dBQ0FFTmdJQUlBQWdCQ0FDUVJSc2FpSUNOZ0lJSUFBZ0FqWUNCQ0FBRUQwZ0JDQUJRUlJzYWpZQ0FDQUZRUkJxSkFBZ0FBc29BUUYvSUFCQnpMb0ROZ0lBQWtBZ0FDZ0NDQ0lCUlEwQUlBQXRBQXhGRFFBZ0FSQXpDeUFBQzU0SkFRSi9JQUFDZjBHa3R3UXRBQUFFUUVHZ3R3UW9BZ0FNQVF0Qm5MY0VBbjlCbUxjRUxRQUFCRUJCbExjRUtBSUFEQUVMUWRqREJCQmpJZ0JCdUxvRE5nSUFJd0JCRUdzaUFpUUFJQUJCQ0dvaUFVSUFOd01BSUFKQkFEWUNEQ0FCUVFocUVJc0RRUUE2QUlBQklBSkJFR29rQUNBQkVJUUhRUjVKQkVBUVZRQUxJQUVnQVJCWlFSNFFnd2NpQWpZQ0FDQUJJQUkyQWdRZ0FSQTBJQUpCK0FCcU5nSUFJQUZCQUJDMEFpQUJRUjRRbEFjZ0FFR1lBV3BCcnBZQ0VFc2FJQUVRUXlFQ0lBRVFrd2NnQVNBQ0VLVURRYURCQkJCalFlVEVBellDQUNBQVFhREJCRUhvdFFRUVloQmxRYWpCQkJCalFZVEZBellDQUNBQVFhakJCRUh3dFFRUVloQmxRYkRCQkJCaklnRkJBRG9BRENBQlFRQTJBZ2dnQVVITXVnTTJBZ0FnQVVHWW1nTW9BZ0EyQWdnZ0FFR3d3UVJCdExjRUVHSVFaVUhBd1FRUVkwR3d2Z00yQWdBZ0FFSEF3UVJCckxjRUVHSVFaVUhJd1FRUVkwSEV2d00yQWdBZ0FFSEl3UVJCdkxjRUVHSVFaVUhRd1FRUVl5SUJRWUM3QXpZQ0FDQUJFRncyQWdnZ0FFSFF3UVJCeExjRUVHSVFaVUhnd1FRUVkwSFl3QU0yQWdBZ0FFSGd3UVJCekxjRUVHSVFaVUhvd1FRUVkwSE13UU0yQWdBZ0FFSG93UVJCMUxjRUVHSVFaVUh3d1FRUVl5SUJRYTdZQURzQkNDQUJRYkM3QXpZQ0FDQUJRUXhxRUVRYUlBQkI4TUVFUWR5M0JCQmlFR1ZCaU1JRUVHTWlBVUt1Z0lDQXdBVTNBZ2dnQVVIWXV3TTJBZ0FnQVVFUWFoQkVHaUFBUVlqQ0JFSGt0d1FRWWhCbFFhakNCQkJqUWFURkF6WUNBQ0FBUWFqQ0JFSDR0UVFRWWhCbFFiRENCQkJqUVpqSEF6WUNBQ0FBUWJEQ0JFR0F0Z1FRWWhCbFFiakNCQkJqUWV6SUF6WUNBQ0FBUWJqQ0JFR0l0Z1FRWWhCbFFjRENCQkJqUWRUS0F6WUNBQ0FBUWNEQ0JFR1F0Z1FRWWhCbFFjakNCQkJqUWF6U0F6WUNBQ0FBUWNqQ0JFRzR0Z1FRWWhCbFFkRENCQkJqUWNEVEF6WUNBQ0FBUWREQ0JFSEF0Z1FRWWhCbFFkakNCQkJqUWJUVUF6WUNBQ0FBUWRqQ0JFSEl0Z1FRWWhCbFFlRENCQkJqUWFqVkF6WUNBQ0FBUWVEQ0JFSFF0Z1FRWWhCbFFlakNCQkJqUVp6V0F6WUNBQ0FBUWVqQ0JFSFl0Z1FRWWhCbFFmRENCQkJqUWNEWEF6WUNBQ0FBUWZEQ0JFSGd0Z1FRWWhCbFFmakNCQkJqUWVUWUF6WUNBQ0FBUWZqQ0JFSG90Z1FRWWhCbFFZRERCQkJqUVlqYUF6WUNBQ0FBUVlEREJFSHd0Z1FRWWhCbFFZakRCQkJqSWdGQjhPTUROZ0lJSUFGQm5Nd0ROZ0lBSUFGQnpNd0ROZ0lJSUFCQmlNTUVRWmkyQkJCaUVHVkJtTU1FRUdNaUFVR1U1QU0yQWdnZ0FVR2t6Z00yQWdBZ0FVSFV6Z00yQWdnZ0FFR1l3d1JCb0xZRUVHSVFaVUdvd3dRUVl5SUJRUWhxRUlBSElBRkJrTkFETmdJQUlBQkJxTU1FUWFpMkJCQmlFR1ZCdU1NRUVHTWlBVUVJYWhDQUJ5QUJRYXpSQXpZQ0FDQUFRYmpEQkVHd3RnUVFZaEJsUWNqREJCQmpRYXpiQXpZQ0FDQUFRY2pEQkVINHRnUVFZaEJsUWREREJCQmpRYVRjQXpZQ0FDQUFRZEREQkVHQXR3UVFZaEJsUVpDM0JFSFl3d1EyQWdCQm1MY0VRUUU2QUFCQmxMY0VRWkMzQkRZQ0FFR1F0d1FMRUxZRVFhUzNCRUVCT2dBQVFhQzNCRUdjdHdRMkFnQkJuTGNFQ3lnQ0FDSUFOZ0lBSUFBUW1BTUxjUUVDZnlBQVFiaTZBellDQUNBQVFRaHFJUUVEUUNBQkVFTWdBa3NFUUNBQklBSVFPeWdDQUFSQUlBRWdBaEE3S0FJQUVOZ0NHZ3NnQWtFQmFpRUNEQUVMQ3lBQVFaZ0JhaEE0R2lBQkVPa0NJQUVvQWdBRVFDQUJFSk1ISUFFUVdTQUJLQUlBSUFFUTB3RVFnZ2NMSUFBTERBQWdBQ0FBS0FJQUVJRUhDMUlCQTM4akFFRVFheUlESkFBZ0F5QUFJQUVRdFFJaUFpZ0NCQ0VCSUFJb0FnZ2hCQU5BSUFFZ0JFWUVRQ0FDRUc0Z0EwRVFhaVFBQlNBQUVGa2dBUkNRQkNBQ0lBRkJCR29pQVRZQ0JBd0JDd3NMSUFBZ0FFR0F1d00yQWdBZ0FDZ0NDQkJjUndSQUlBQW9BZ2dReGdRTElBQUxCQUJCZnd1REJnRUtmeU1BUVJCckloTWtBQ0FDSUFBMkFnQWdBMEdBQkhFaEZTQUhRUUowSVJZRFFDQVVRUVJHQkVBZ0RSQTNRUUZMQkVBZ0V5QU5FSzhCTmdJSUlBSWdFMEVJYWtFQkVKc0hJQTBRZ1FJZ0FpZ0NBQkRYQWpZQ0FBc2dBMEd3QVhFaUEwRVFSd1JBSUFFZ0EwRWdSZ1IvSUFJb0FnQUZJQUFMTmdJQUN5QVRRUkJxSkFBRkFrQUNRQUpBQWtBQ1FBSkFJQWdnRkdvc0FBQU9CUUFCQXdJRUJRc2dBU0FDS0FJQU5nSUFEQVFMSUFFZ0FpZ0NBRFlDQUNBR1FTQVFuZ0VoQnlBQ0lBSW9BZ0FpRDBFRWFqWUNBQ0FQSUFjMkFnQU1Bd3NnRFJEQUFRMENJQTFCQUJDOEF5Z0NBQ0VISUFJZ0FpZ0NBQ0lQUVFScU5nSUFJQThnQnpZQ0FBd0NDeUFNRU1BQklCVkZjZzBCSUFJZ0RCQ3ZBU0FNRUlFQ0lBSW9BZ0FRMXdJMkFnQU1BUXNnQWlnQ0FDRVhJQVFnRm1vaUJDRUhBMEFDUUNBRklBZE5EUUFnQmtHQUVDQUhLQUlBRUxVQlJRMEFJQWRCQkdvaEJ3d0JDd3NnRGtFQVNnUkFJQUlvQWdBaER5QU9JUkFEUUNBUVJTQUVJQWRQY2tVRVFDQUhRUVJySWdjb0FnQWhFaUFDSUE5QkJHb2lFVFlDQUNBUElCSTJBZ0FnRUVFQmF5RVFJQkVoRHd3QkN3c0NRQ0FRUlFSQVFRQWhFZ3dCQ3lBR1FUQVFuZ0VoRWlBQ0tBSUFJUThMQTBBZ0QwRUVhaUVSSUJCQkFFb0VRQ0FQSUJJMkFnQWdFRUVCYXlFUUlCRWhEd3dCQ3dzZ0FpQVJOZ0lBSUE4Z0NUWUNBQXNDUUNBRUlBZEdCRUFnQmtFd0VKNEJJUThnQWlBQ0tBSUFJaEZCQkdvaUJ6WUNBQ0FSSUE4MkFnQU1BUXNnQ3hEQUFRUi9RWDhGSUF0QkFCQkFMQUFBQ3lFU1FRQWhEMEVBSVJBRFFDQUVJQWRIQkVBQ1FDQVBJQkpIQkVBZ0R5RVJEQUVMSUFJZ0FpZ0NBQ0lSUVFScU5nSUFJQkVnQ2pZQ0FFRUFJUkVnQ3hBM0lCQkJBV29pRUUwRVFDQVBJUklNQVFzZ0N5QVFFRUF0QUFCQi93QkdCRUJCZnlFU0RBRUxJQXNnRUJCQUxBQUFJUklMSUFkQkJHc2lCeWdDQUNFUElBSWdBaWdDQUNJWVFRUnFOZ0lBSUJnZ0R6WUNBQ0FSUVFGcUlROE1BUXNMSUFJb0FnQWhCd3NnRnlBSEVMa0RDeUFVUVFGcUlSUU1BUXNMQzdzQ0FRRi9Jd0JCRUdzaUNpUUFJQWtDZnlBQUJFQWdBaENkQnlFQUFrQWdBUVJBSUFvZ0FCRC9BU0FESUFvb0FnQTJBQUFnQ2lBQUVQNEJEQUVMSUFvZ0FCQzJBeUFESUFvb0FnQTJBQUFnQ2lBQUVNRUJDeUFJSUFvUTFRRWdDaEE0R2lBRUlBQVF2Z0UyQWdBZ0JTQUFFSjBCTmdJQUlBb2dBQkNjQVNBR0lBb1FpZ0VnQ2hBNEdpQUtJQUFRc3dFZ0J5QUtFTlVCSUFvUU9Cb2dBQkQ5QVF3QkN5QUNFSndISVFBQ1FDQUJCRUFnQ2lBQUVQOEJJQU1nQ2lnQ0FEWUFBQ0FLSUFBUS9nRU1BUXNnQ2lBQUVMWURJQU1nQ2lnQ0FEWUFBQ0FLSUFBUXdRRUxJQWdnQ2hEVkFTQUtFRGdhSUFRZ0FCQytBVFlDQUNBRklBQVFuUUUyQWdBZ0NpQUFFSndCSUFZZ0NoQ0tBU0FLRURnYUlBb2dBQkN6QVNBSElBb1ExUUVnQ2hBNEdpQUFFUDBCQ3pZQ0FDQUtRUkJxSkFBTDJ3VUJDbjhqQUVFUWF5SVVKQUFnQWlBQU5nSUFJQU5CZ0FSeElSWURRQ0FWUVFSR0JFQWdEUkEzUVFGTEJFQWdGQ0FORUs4Qk5nSUlJQUlnRkVFSWFrRUJFS0VISUEwUWdnSWdBaWdDQUJEWEFqWUNBQXNnQTBHd0FYRWlBMEVRUndSQUlBRWdBMEVnUmdSL0lBSW9BZ0FGSUFBTE5nSUFDeUFVUVJCcUpBQVBDd0pBQWtBQ1FBSkFBa0FDUUNBSUlCVnFMQUFBRGdVQUFRTUNCQVVMSUFFZ0FpZ0NBRFlDQUF3RUN5QUJJQUlvQWdBMkFnQWdCa0VnRUlRQklROGdBaUFDS0FJQUloQkJBV28yQWdBZ0VDQVBPZ0FBREFNTElBMFF3QUVOQWlBTlFRQVFRQzBBQUNFUElBSWdBaWdDQUNJUVFRRnFOZ0lBSUJBZ0R6b0FBQXdDQ3lBTUVNQUJJQlpGY2cwQklBSWdEQkN2QVNBTUVJSUNJQUlvQWdBUTF3STJBZ0FNQVFzZ0FpZ0NBQ0VYSUFRZ0Iyb2lCQ0VSQTBBQ1FDQUZJQkZORFFBZ0JrR0FFQ0FSTEFBQUVMWUJSUTBBSUJGQkFXb2hFUXdCQ3dzZ0RpSVBRUUJLQkVBRFFDQVBSU0FFSUJGUGNrVUVRQ0FSUVFGckloRXRBQUFoRUNBQ0lBSW9BZ0FpRWtFQmFqWUNBQ0FTSUJBNkFBQWdEMEVCYXlFUERBRUxDeUFQQkg4Z0JrRXdFSVFCQlVFQUN5RVNBMEFnQWlBQ0tBSUFJaEJCQVdvMkFnQWdEMEVBU2dSQUlCQWdFam9BQUNBUFFRRnJJUThNQVFzTElCQWdDVG9BQUFzQ1FDQUVJQkZHQkVBZ0JrRXdFSVFCSVE4Z0FpQUNLQUlBSWhCQkFXbzJBZ0FnRUNBUE9nQUFEQUVMSUFzUXdBRUVmMEYvQlNBTFFRQVFRQ3dBQUFzaEVFRUFJUTlCQUNFVEEwQWdCQ0FSUmcwQkFrQWdEeUFRUndSQUlBOGhFZ3dCQ3lBQ0lBSW9BZ0FpRUVFQmFqWUNBQ0FRSUFvNkFBQkJBQ0VTSUFzUU55QVRRUUZxSWhOTkJFQWdEeUVRREFFTElBc2dFeEJBTFFBQVFmOEFSZ1JBUVg4aEVBd0JDeUFMSUJNUVFDd0FBQ0VRQ3lBUlFRRnJJaEV0QUFBaER5QUNJQUlvQWdBaUdFRUJhallDQUNBWUlBODZBQUFnRWtFQmFpRVBEQUFMQUFzZ0Z5QUNLQUlBRUpzQ0N5QVZRUUZxSVJVTUFBc0FDN3NDQVFGL0l3QkJFR3NpQ2lRQUlBa0NmeUFBQkVBZ0FoQ2tCeUVBQWtBZ0FRUkFJQW9nQUJEL0FTQURJQW9vQWdBMkFBQWdDaUFBRVA0QkRBRUxJQW9nQUJDMkF5QURJQW9vQWdBMkFBQWdDaUFBRU1FQkN5QUlJQW9RaWdFZ0NoQTRHaUFFSUFBUXZnRTZBQUFnQlNBQUVKMEJPZ0FBSUFvZ0FCQ2NBU0FHSUFvUWlnRWdDaEE0R2lBS0lBQVFzd0VnQnlBS0VJb0JJQW9RT0JvZ0FCRDlBUXdCQ3lBQ0VLTUhJUUFDUUNBQkJFQWdDaUFBRVA4QklBTWdDaWdDQURZQUFDQUtJQUFRL2dFTUFRc2dDaUFBRUxZRElBTWdDaWdDQURZQUFDQUtJQUFRd1FFTElBZ2dDaENLQVNBS0VEZ2FJQVFnQUJDK0FUb0FBQ0FGSUFBUW5RRTZBQUFnQ2lBQUVKd0JJQVlnQ2hDS0FTQUtFRGdhSUFvZ0FCQ3pBU0FISUFvUWlnRWdDaEE0R2lBQUVQMEJDellDQUNBS1FSQnFKQUFMTVFFQmZ5TUFRUkJySWdJa0FDQUNJQUFvQWdBMkFnZ2dBa0VJYWlBQkVPOEZJQUlvQWdnaEFDQUNRUkJxSkFBZ0FBc0xBQ0FBUWNpMkJCRExBUXNMQUNBQVFkQzJCQkRMQVFzVkFDQUFJQUVvQWdBUTN3UWdBU2dDQUJEeUFSb0xseEFCQzM4akFFR3dCR3NpQ3lRQUlBc2dDallDcEFRZ0N5QUJOZ0tvQkNBTFFkQUNOZ0pnSUFzZ0MwR0lBV29nQzBHUUFXb2dDMEhnQUdvaUFSQm5JZzhvQWdBaUNqWUNoQUVnQ3lBS1FaQURhallDZ0FFZ0FSQkVJUkVnQzBIUUFHb1FSQ0VPSUF0QlFHc1FSQ0VNSUF0Qk1Hb1FSQ0VOSUF0QklHb1FSQ0VRSXdCQkVHc2lBU1FBSUFzQ2Z5QUNCRUFnQVNBREVKMEhJZ0lRL3dFZ0N5QUJLQUlBTmdCNElBRWdBaEQrQVNBTklBRVExUUVnQVJBNEdpQUJJQUlRd1FFZ0RDQUJFTlVCSUFFUU9Cb2dDeUFDRUw0Qk5nSjBJQXNnQWhDZEFUWUNjQ0FCSUFJUW5BRWdFU0FCRUlvQklBRVFPQm9nQVNBQ0VMTUJJQTRnQVJEVkFTQUJFRGdhSUFJUS9RRU1BUXNnQVNBREVKd0hJZ0lRL3dFZ0N5QUJLQUlBTmdCNElBRWdBaEQrQVNBTklBRVExUUVnQVJBNEdpQUJJQUlRd1FFZ0RDQUJFTlVCSUFFUU9Cb2dDeUFDRUw0Qk5nSjBJQXNnQWhDZEFUWUNjQ0FCSUFJUW5BRWdFU0FCRUlvQklBRVFPQm9nQVNBQ0VMTUJJQTRnQVJEVkFTQUJFRGdhSUFJUS9RRUxOZ0ljSUFGQkVHb2tBQ0FKSUFnb0FnQTJBZ0FnQkVHQUJIRWlFa0VKZGlFVFFRQWhBVUVBSVFJRFFDQUNJUW9DUUFKQUFrQUNRQ0FCUVFSR0RRQWdBQ0FMUWFnRWFoQ1FBVVVOQUVFQUlRUUNRQUpBQWtBQ1FBSkFBa0FnQzBINEFHb2dBV29zQUFBT0JRRUFCQU1GQ1FzZ0FVRURSZzBISUFkQmdNQUFJQUFRYUJDMUFRUkFJQXRCRUdvZ0FCQ2VCeUFRSUFzb0FoQVFyd1FNQWdzZ0JTQUZLQUlBUVFSeU5nSUFRUUFoQUF3R0N5QUJRUU5HRFFZTEEwQWdBQ0FMUWFnRWFoQ1FBVVVOQmlBSFFZREFBQ0FBRUdnUXRRRkZEUVlnQzBFUWFpQUFFSjRISUJBZ0N5Z0NFQkN2QkF3QUN3QUxJQXdRTjBFQUlBMFFOMnRHRFFRQ1FDQU1FRGNFUUNBTkVEY05BUXNnREJBM0lRTWdBQkJvSVFJZ0F3UkFJQXdRUGlnQ0FDQUNSZ1JBSUFBUWRSb2dEQ0FLSUF3UU4wRUJTeHNoQWd3SUN5QUdRUUU2QUFBTUJnc2dBaUFORUQ0b0FnQkhEUVVnQUJCMUdpQUdRUUU2QUFBZ0RTQUtJQTBRTjBFQlN4c2hBZ3dHQ3lBQUVHZ2dEQkErS0FJQVJnUkFJQUFRZFJvZ0RDQUtJQXdRTjBFQlN4c2hBZ3dHQ3lBQUVHZ2dEUkErS0FJQVJnUkFJQUFRZFJvZ0JrRUJPZ0FBSUEwZ0NpQU5FRGRCQVVzYklRSU1CZ3NnQlNBRktBSUFRUVJ5TmdJQVFRQWhBQXdEQ3lBS0lBRkJBa2x5UlFSQVFRQWhBaUFUSUFGQkFrWWdDeTBBZTBFQVIzRnlSUTBGQ3lBTElBNFFyd0UyQWdnZ0MwRVFhaUFMUVFocUVLSUJJUU1DUUNBQlJRMEFJQUVnQzJvdEFIZEJBVXNOQUFOQUFrQWdDeUFPRUlFQ05nSUlJQU1nQzBFSWFoQ0NBVVVOQUNBSFFZREFBQ0FES0FJQUtBSUFFTFVCUlEwQUlBTVFqZ0lNQVFzTElBc2dEaEN2QVRZQ0NDQURJQXRCQ0dvUTdRTWlBaUFRRURkTkJFQWdDeUFRRUlFQ05nSUlJQXRCQ0dwQkFDQUNheENiQnlFRUlCQVFnUUloRkNBT0VLOEJJUlVqQUVFZ2F5SUNKQUFnQWlBVU5nSVFJQUlnQkRZQ0dDQUNJQlUyQWdnRFFBSkFJQUpCR0dvZ0FrRVFhaENDQVNJRVJRMEFJQUlvQWhnZ0FpZ0NDQkN5QVVVTkFDQUNRUmhxRUk0Q0lBSkJDR29RamdJTUFRc0xJQUpCSUdva0FDQUVRUUZ6RFFFTElBc2dEaEN2QVRZQ0FDQURJQXRCQ0dvZ0N4Q2lBU2dDQURZQ0FBc2dDeUFES0FJQU5nSUlBMEFDUUNBTElBNFFnUUkyQWdBZ0MwRUlhaUFMRUlJQlJRMEFJQUFnQzBHb0JHb1FrQUZGRFFBZ0FCQm9JQXNvQWdnb0FnQkhEUUFnQUJCMUdpQUxRUWhxRUk0Q0RBRUxDeUFTUlEwRElBc2dEaENCQWpZQ0FDQUxRUWhxSUFzUWdnRkZEUU1nQlNBRktBSUFRUVJ5TmdJQVFRQWhBQXdDQ3dOQUFrQWdBQ0FMUWFnRWFoQ1FBVVVOQUFKL0lBZEJnQkFnQUJCb0lnSVF0UUVFUUNBSktBSUFJZ01nQ3lnQ3BBUkdCRUFnQ0NBSklBdEJwQVJxRUxzQ0lBa29BZ0FoQXdzZ0NTQURRUVJxTmdJQUlBTWdBallDQUNBRVFRRnFEQUVMSUJFUU4wVWdCRVZ5RFFFZ0FpQUxLQUp3UncwQklBc29Bb1FCSWdJZ0N5Z0NnQUZHQkVBZ0R5QUxRWVFCYWlBTFFZQUJhaEM3QWlBTEtBS0VBU0VDQ3lBTElBSkJCR28yQW9RQklBSWdCRFlDQUVFQUN5RUVJQUFRZFJvTUFRc0xJQVJGSUFzb0FvUUJJZ0lnRHlnQ0FFWnlSUVJBSUFzb0FvQUJJQUpHQkVBZ0R5QUxRWVFCYWlBTFFZQUJhaEM3QWlBTEtBS0VBU0VDQ3lBTElBSkJCR28yQW9RQklBSWdCRFlDQUFzQ1FDQUxLQUljUVFCTURRQUNRQ0FBSUF0QnFBUnFFSHBGQkVBZ0FCQm9JQXNvQW5SR0RRRUxJQVVnQlNnQ0FFRUVjallDQUVFQUlRQU1Bd3NEUUNBQUVIVWFJQXNvQWh4QkFFd05BUUpBSUFBZ0MwR29CR29RZWtVRVFDQUhRWUFRSUFBUWFCQzFBUTBCQ3lBRklBVW9BZ0JCQkhJMkFnQkJBQ0VBREFRTElBa29BZ0FnQ3lnQ3BBUkdCRUFnQ0NBSklBdEJwQVJxRUxzQ0N5QUFFR2doQWlBSklBa29BZ0FpQTBFRWFqWUNBQ0FESUFJMkFnQWdDeUFMS0FJY1FRRnJOZ0ljREFBTEFBc2dDaUVDSUFnb0FnQWdDU2dDQUVjTkF5QUZJQVVvQWdCQkJISTJBZ0JCQUNFQURBRUxBa0FnQ2tVTkFFRUJJUVFEUUNBS0VEY2dCRTBOQVFKQUlBQWdDMEdvQkdvUWVrVUVRQ0FBRUdnZ0NpQUVFTHdES0FJQVJnMEJDeUFGSUFVb0FnQkJCSEkyQWdCQkFDRUFEQU1MSUFBUWRSb2dCRUVCYWlFRURBQUxBQXRCQVNFQUlBOG9BZ0FnQ3lnQ2hBRkdEUUJCQUNFQUlBdEJBRFlDRUNBUklBOG9BZ0FnQ3lnQ2hBRWdDMEVRYWhDT0FTQUxLQUlRQkVBZ0JTQUZLQUlBUVFSeU5nSUFEQUVMUVFFaEFBc2dFQkE0R2lBTkVEZ2FJQXdRT0JvZ0RoQTRHaUFSRURnYUlBOFFaaUFMUWJBRWFpUUFJQUFQQ3lBS0lRSUxJQUZCQVdvaEFRd0FDd0FMSFFBZ0FDQUJFTGtCRUg4Z0FSQktLQUlBSVFFZ0FCQktJQUUyQWdBTE5BRUJmeU1BUVJCcklnSWtBQ0FDSUFBb0FnQTJBZ2dnQWlBQ0tBSUlJQUZxTmdJSUlBSW9BZ2doQUNBQ1FSQnFKQUFnQUFzTEFDQUFJQUZCREJEN0FRc0xBQ0FBUWJpMkJCRExBUXNMQUNBQVFjQzJCQkRMQVF2REFRRUdmeU1BUVJCcklnUWtBQ0FBRUVvb0FnQWhCUUovSUFJb0FnQWdBQ2dDQUdzaUEwSC8vLy8vQjBrRVFDQURRUUYwREFFTFFYOExJZ05CQVNBREd5RURJQUVvQWdBaEJpQUFLQUlBSVFjZ0JVSFFBa1lFZjBFQUJTQUFLQUlBQ3lBREVNY0NJZ2dFUUNBRlFkQUNSd1JBSUFBUXVRRWFDeUFFUWM4Q05nSUVJQUFnQkVFSWFpQUlJQVJCQkdvUVp5SUZFS0FISUFVUVppQUJJQUFvQWdBZ0JpQUhhMm8yQWdBZ0FpQURJQUFvQWdCcU5nSUFJQVJCRUdva0FBOExFRlVBQ3lVQkFYOGdBU2dDQUJEaUJFRVlkRUVZZFNFQ0lBQWdBU2dDQURZQ0JDQUFJQUk2QUFBTHpCQUJDMzhqQUVHd0JHc2lDeVFBSUFzZ0NqWUNwQVFnQ3lBQk5nS29CQ0FMUWRBQ05nSm9JQXNnQzBHSUFXb2dDMEdRQVdvZ0MwSG9BR29pQVJCbklnOG9BZ0FpQ2pZQ2hBRWdDeUFLUVpBRGFqWUNnQUVnQVJCRUlSRWdDMEhZQUdvUVJDRU9JQXRCeUFCcUVFUWhEQ0FMUVRocUVFUWhEU0FMUVNocUVFUWhFQ01BUVJCcklnRWtBQ0FMQW44Z0FnUkFJQUVnQXhDa0J5SUNFUDhCSUFzZ0FTZ0NBRFlBZUNBQklBSVEvZ0VnRFNBQkVJb0JJQUVRT0JvZ0FTQUNFTUVCSUF3Z0FSQ0tBU0FCRURnYUlBc2dBaEMrQVRvQWR5QUxJQUlRblFFNkFIWWdBU0FDRUp3QklCRWdBUkNLQVNBQkVEZ2FJQUVnQWhDekFTQU9JQUVRaWdFZ0FSQTRHaUFDRVAwQkRBRUxJQUVnQXhDakJ5SUNFUDhCSUFzZ0FTZ0NBRFlBZUNBQklBSVEvZ0VnRFNBQkVJb0JJQUVRT0JvZ0FTQUNFTUVCSUF3Z0FSQ0tBU0FCRURnYUlBc2dBaEMrQVRvQWR5QUxJQUlRblFFNkFIWWdBU0FDRUp3QklCRWdBUkNLQVNBQkVEZ2FJQUVnQWhDekFTQU9JQUVRaWdFZ0FSQTRHaUFDRVAwQkN6WUNKQ0FCUVJCcUpBQWdDU0FJS0FJQU5nSUFJQVJCZ0FSeEloSkJDWFloRTBFQUlRRkJBQ0VDQTBBZ0FpRUtBa0FDUUFKQUFrQWdBVUVFUmcwQUlBQWdDMEdvQkdvUWtRRkZEUUJCQUNFRUFrQUNRQUpBQWtBQ1FBSkFJQXRCK0FCcUlBRnFMQUFBRGdVQkFBUURCUWtMSUFGQkEwWU5CeUFIUVlEQUFDQUFFR2tRdGdFRVFDQUxRUmhxSUFBUXBnY2dFQ0FMTEFBWUVMQUVEQUlMSUFVZ0JTZ0NBRUVFY2pZQ0FFRUFJUUFNQmdzZ0FVRURSZzBHQ3dOQUlBQWdDMEdvQkdvUWtRRkZEUVlnQjBHQXdBQWdBQkJwRUxZQlJRMEdJQXRCR0dvZ0FCQ21CeUFRSUFzc0FCZ1FzQVFNQUFzQUN5QU1FRGRCQUNBTkVEZHJSZzBFQWtBZ0RCQTNCRUFnRFJBM0RRRUxJQXdRTnlFRElBQVFhU0VDSUFNRVFDQU1RUUFRUUMwQUFDQUNRZjhCY1VZRVFDQUFFSFlhSUF3Z0NpQU1FRGRCQVVzYklRSU1DQXNnQmtFQk9nQUFEQVlMSUExQkFCQkFMUUFBSUFKQi93RnhSdzBGSUFBUWRob2dCa0VCT2dBQUlBMGdDaUFORURkQkFVc2JJUUlNQmdzZ0FCQnBRZjhCY1NBTVFRQVFRQzBBQUVZRVFDQUFFSFlhSUF3Z0NpQU1FRGRCQVVzYklRSU1CZ3NnQUJCcFFmOEJjU0FOUVFBUVFDMEFBRVlFUUNBQUVIWWFJQVpCQVRvQUFDQU5JQW9nRFJBM1FRRkxHeUVDREFZTElBVWdCU2dDQUVFRWNqWUNBRUVBSVFBTUF3c2dDaUFCUVFKSmNrVUVRRUVBSVFJZ0V5QUJRUUpHSUFzdEFIdEJBRWR4Y2tVTkJRc2dDeUFPRUs4Qk5nSVFJQXRCR0dvZ0MwRVFhaENpQVNFREFrQWdBVVVOQUNBQklBdHFMUUIzUVFGTERRQURRQUpBSUFzZ0RoQ0NBallDRUNBRElBdEJFR29RZ2dGRkRRQWdCMEdBd0FBZ0F5Z0NBQ3dBQUJDMkFVVU5BQ0FERU93Q0RBRUxDeUFMSUE0UXJ3RTJBaEFnQXlnQ0FDQUxLQUlRYXlJQ0lCQVFOMDBFUUNBTElCQVFnZ0kyQWhBZ0MwRVFha0VBSUFKckVLRUhJUVFnRUJDQ0FpRVVJQTRRcndFaEZTTUFRU0JySWdJa0FDQUNJQlEyQWhBZ0FpQUVOZ0lZSUFJZ0ZUWUNDQU5BQWtBZ0FrRVlhaUFDUVJCcUVJSUJJZ1JGRFFBZ0FpZ0NHQzBBQUNBQ0tBSUlMUUFBUncwQUlBSkJHR29RN0FJZ0FrRUlhaERzQWd3QkN3c2dBa0VnYWlRQUlBUkJBWE1OQVFzZ0N5QU9FSzhCTmdJSUlBTWdDMEVRYWlBTFFRaHFFS0lCS0FJQU5nSUFDeUFMSUFNb0FnQTJBaEFEUUFKQUlBc2dEaENDQWpZQ0NDQUxRUkJxSUF0QkNHb1FnZ0ZGRFFBZ0FDQUxRYWdFYWhDUkFVVU5BQ0FBRUdsQi93RnhJQXNvQWhBdEFBQkhEUUFnQUJCMkdpQUxRUkJxRU93Q0RBRUxDeUFTUlEwRElBc2dEaENDQWpZQ0NDQUxRUkJxSUF0QkNHb1FnZ0ZGRFFNZ0JTQUZLQUlBUVFSeU5nSUFRUUFoQUF3Q0N3TkFBa0FnQUNBTFFhZ0VhaENSQVVVTkFBSi9JQWRCZ0JBZ0FCQnBJZ0lRdGdFRVFDQUpLQUlBSWdNZ0N5Z0NwQVJHQkVBZ0NDQUpJQXRCcEFScUVLVUhJQWtvQWdBaEF3c2dDU0FEUVFGcU5nSUFJQU1nQWpvQUFDQUVRUUZxREFFTElCRVFOMFVnQkVWeURRRWdDeTBBZGlBQ1FmOEJjVWNOQVNBTEtBS0VBU0lDSUFzb0FvQUJSZ1JBSUE4Z0MwR0VBV29nQzBHQUFXb1F1d0lnQ3lnQ2hBRWhBZ3NnQ3lBQ1FRUnFOZ0tFQVNBQ0lBUTJBZ0JCQUFzaEJDQUFFSFlhREFFTEN5QUVSU0FMS0FLRUFTSUNJQThvQWdCR2NrVUVRQ0FMS0FLQUFTQUNSZ1JBSUE4Z0MwR0VBV29nQzBHQUFXb1F1d0lnQ3lnQ2hBRWhBZ3NnQ3lBQ1FRUnFOZ0tFQVNBQ0lBUTJBZ0FMQWtBZ0N5Z0NKRUVBVEEwQUFrQWdBQ0FMUWFnRWFoQjdSUVJBSUFBUWFVSC9BWEVnQ3kwQWQwWU5BUXNnQlNBRktBSUFRUVJ5TmdJQVFRQWhBQXdEQ3dOQUlBQVFkaG9nQ3lnQ0pFRUFUQTBCQWtBZ0FDQUxRYWdFYWhCN1JRUkFJQWRCZ0JBZ0FCQnBFTFlCRFFFTElBVWdCU2dDQUVFRWNqWUNBRUVBSVFBTUJBc2dDU2dDQUNBTEtBS2tCRVlFUUNBSUlBa2dDMEdrQkdvUXBRY0xJQUFRYVNFQ0lBa2dDU2dDQUNJRFFRRnFOZ0lBSUFNZ0Fqb0FBQ0FMSUFzb0FpUkJBV3MyQWlRTUFBc0FDeUFLSVFJZ0NDZ0NBQ0FKS0FJQVJ3MERJQVVnQlNnQ0FFRUVjallDQUVFQUlRQU1BUXNDUUNBS1JRMEFRUUVoQkFOQUlBb1FOeUFFVFEwQkFrQWdBQ0FMUWFnRWFoQjdSUVJBSUFBUWFVSC9BWEVnQ2lBRUVFQXRBQUJHRFFFTElBVWdCU2dDQUVFRWNqWUNBRUVBSVFBTUF3c2dBQkIyR2lBRVFRRnFJUVFNQUFzQUMwRUJJUUFnRHlnQ0FDQUxLQUtFQVVZTkFFRUFJUUFnQzBFQU5nSVlJQkVnRHlnQ0FDQUxLQUtFQVNBTFFSaHFFSTRCSUFzb0FoZ0VRQ0FGSUFVb0FnQkJCSEkyQWdBTUFRdEJBU0VBQ3lBUUVEZ2FJQTBRT0JvZ0RCQTRHaUFPRURnYUlCRVFPQm9nRHhCbUlBdEJzQVJxSkFBZ0FBOExJQW9oQWdzZ0FVRUJhaUVCREFBTEFBc01BQ0FBUVFGQkxSQzFCeG9MREFBZ0FFRUJRUzBRdmdjYUN4d0JBWDhnQUMwQUFDRUNJQUFnQVMwQUFEb0FBQ0FCSUFJNkFBQUxEQUFnQUNBQUtBSUFFS0lIQzJRQkFYOGpBRUVRYXlJR0pBQWdCa0VBT2dBUElBWWdCVG9BRGlBR0lBUTZBQTBnQmtFbE9nQU1JQVVFUUNBR1FRMXFJQVpCRG1vUXFnY0xJQUlnQVNBQklBSW9BZ0FRb0FZZ0JrRU1haUFESUFBb0FnQVFIeUFCYWpZQ0FDQUdRUkJxSkFBTFFnQWdBU0FDSUFNZ0JFRUVFTllCSVFFZ0F5MEFBRUVFY1VVRVFDQUFJQUZCMEE5cUlBRkI3QTVxSUFFZ0FVSGtBRWdiSUFGQnhRQklHMEhzRG1zMkFnQUxDMEFBSUFJZ0F5QUFRUWhxSUFBb0FnZ29BZ1FSQUFBaUFDQUFRYUFDYWlBRklBUkJBQkM5QXlBQWF5SUFRWjhDVEFSQUlBRWdBRUVNYlVFTWJ6WUNBQXNMUUFBZ0FpQURJQUJCQ0dvZ0FDZ0NDQ2dDQUJFQUFDSUFJQUJCcUFGcUlBVWdCRUVBRUwwRElBQnJJZ0JCcHdGTUJFQWdBU0FBUVF4dFFRZHZOZ0lBQ3d0Q0FDQUJJQUlnQXlBRVFRUVExd0VoQVNBRExRQUFRUVJ4UlFSQUlBQWdBVUhRRDJvZ0FVSHNEbW9nQVNBQlFlUUFTQnNnQVVIRkFFZ2JRZXdPYXpZQ0FBc0xRQUFnQWlBRElBQkJDR29nQUNnQ0NDZ0NCQkVBQUNJQUlBQkJvQUpxSUFVZ0JFRUFFTDhESUFCcklnQkJud0pNQkVBZ0FTQUFRUXh0UVF4dk5nSUFDd3ZLRHdJVmZ3RitJd0JCMEIxcklnUWtBQ0FFUWRBY2FpSVFRZkRmQUVFOEVEOGFJQVJCa0J4cUlndEJzT0FBUWNBQUVEOGFJQVJCa0J0cVFmRGdBRUg4QUJBL0dpQUVRWkFhYWtIdzRRQkJnQUVRUHhvZ0JFR1FGbXBCOE9JQVFmd0RFRDhhSUFSQmtCSnFRZkRtQUVHQUJCQS9Ha0YwSVJKQkFpRU5RUTBoRVVFUElRNENmd0pBQWtBQ1FBSkFBa0FDUUNBQVFZUUlhdzRDQVFNQUN5QUFRWVFHUmdSQVFRRWhEVUYzSVJJTUJBc2dBRUdGQ2tZTkFVRi9JQUJCamhaSERRVWFJQVJCa0JKcUlRc2dCRUdRRm1vaEVFRkFJUkpCK0FBaEVVSC9BQ0VPUVFraERRd0VDMEY3SVJJTUFndEJlU0VTUVFNaERRc2dCRUdRR21vaEN5QUVRWkFiYWlFUVFSWWhFVUVmSVE0TFFRQWhBQU4vSUFBZ0VVWUVmeUFFUVpBZGFnVWdCRUdRSFdvZ0FHb2dBYWRCQVhFNkFBQWdBRUVCYWlFQUlBRkNBWWdoQVF3QkN3c2hBZ3NnRFVFQmRDSVVRUUZ5SVFoQkFTRUZBMEFnQlNBSVJrVUVRRUVBSVFjZ0JFR3dCR29nQlVFQ2RHb2lCa0VBTmdJQVFRQWhBQU5BSUFBZ0VVY0VRQ0FBSUFKcUxRQUFCRUFnQmlBSElCQWdBQ0FGYkNBT2NFRUNkR29vQWdCeklnYzJBZ0FMSUFCQkFXb2hBQXdCQ3dzZ0JpQUxJQWRCQW5ScUtBSUFOZ0lBUVFFZ0V5QUhHeUVUSUFWQkFXb2hCUXdCQ3dzQ1FDQVRSUTBBSUFSQkFEWUNvQVlnQkNBRUtBSzBCQ0lKTmdLa0JpQUVRUUUyQXJnSElBUkJBRFlDOEFaQkFTRUFBMEFnQUNBVVJrVUVRQ0FFUWZBR2FpQUFRUUowYWlJSFFYODJBZ0FnQjBFQU5nSklJQUJCQVdvaEFBd0JDd3NnQkVJQU53UFFCU0FFUXYvLy8vOFBOd09BQlNBVVFRRnJJUmRCQUNFSVFRQWhCZ05BSUFaQkFXb2hEQ0FHSVFjQ1FDQUpRWDlHQkVBZ0JFSFFCV29nQmtFQ2FpSUhRUUowYWlBSU5nSUFJQWhCZnlBSVFRQk9HMEVCYWlFRlFRQWhBQU5BSUFBZ0JVWU5BaUFBUVFKMElnb2dCRUh3Qm1vaUNTQUhRY2dBYkdwcUlBeEJ5QUJzSUFscUlBcHFJZ29vQWdBaUNUWUNBQ0FLSUFzZ0NVRUNkR29vQWdBMkFnQWdBRUVCYWlFQURBQUxBQXNEUUNBRVFhQUdhaUFISWdCQkFuUnFLQUlBUVg5R0JFQWdBRUVCYXlFSElBQkJBRW9OQVFzTElBQWhCU0FBUVFCS0JFQURRQ0FBUVFGcklnZEJBblFpQ2lBRVFhQUdhbW9vQWdCQmYwY0VRQ0FISUFVZ0JFR0FCV29pRHlBRlFRSjBhaWdDQUNBS0lBOXFLQUlBU0JzaEJRc2dBRUVCU3lFS0lBY2hBQ0FLRFFBTEN5QUVRZEFGYWlJQUlBWkJBbW9pQjBFQ2RHb2dDQ0FNSUFWcklnOGdBQ0FGUVFKMEloVnFJaFlvQWdCcUlnQWdBQ0FJU0JzaUNqWUNBRUVBSVFBRFFDQUFJQlJHQkVBZ0NTQU9haUVKSUJZb0FnQWlBRUYvSUFCQkFFNGJRUUZxSVJZZ0JFR2dCbW9nRldvaEZVRUFJUUFEUUNBQUlCWkdCRUFnQ0VGL0lBaEJBRTRiUVFGcUlRVkJBQ0VBQTBBZ0FDQUZSZ1JBSUFvaENBd0dCU0FBUVFKMElnZ2dCRUh3Qm1vaUR5QUhRY2dBYkdwcUlna2dERUhJQUd3Z0Qyb2dDR29pQ0NnQ0FDSVBJQWtvQWdCek5nSUFJQWdnQ3lBUFFRSjBhaWdDQURZQ0FDQUFRUUZxSVFBTUFRc0FDd0FMSUFSQjhBWnFJQVZCeUFCc2FpQUFRUUowYWlnQ0FDSVlRWDlIQkVBZ0JFSHdCbW9nQjBISUFHeHFJQUFnRDJwQkFuUnFJQkFnQ1NBWWFpQVZLQUlBYXlBT2IwRUNkR29vQWdBMkFnQUxJQUJCQVdvaEFBd0FDd0FGSUFSQjhBWnFJQWRCeUFCc2FpQUFRUUowYWtFQU5nSUFJQUJCQVdvaEFBd0JDd0FMQUFzZ0IwRUNkQ0lBSUFSQmdBVnFhaUFNSUFock5nSUFJQVlnRjBjRVFDQUVRYUFHYWlBQWFpSUZJQVJCc0FScUlBQnFLQUlBSWdaQmYwWUVmMEVBQlNBUUlBWkJBblJxS0FJQUN5SUdOZ0lBUVFFaEFDQUlRUUFnQ0VFQVNodEJBV29oQ2dOQUlBQWdDa1pGQkVBQ1FDQUVRYkFFYWlBSElBQnJRUUowYWlnQ0FDSUpRWDlHRFFBZ0JFSHdCbW9nQjBISUFHeHFJQUJCQW5ScUtBSUFJZzlGRFFBZ0JTQUdJQkFnQ3lBUFFRSjBhaWdDQUNBSmFpQU9iMEVDZEdvb0FnQnpJZ1kyQWdBTElBQkJBV29oQUF3QkN3c2dCU0FMSUFaQkFuUnFLQUlBSWdrMkFnQWdEQ0VHSUFnZ0RVd05BUXNMUVg4Z0NDQU5TZzBCR2tFQUlRQWdDRUVCYWlJR1FRQWdCa0VBU2hzaEJTQUVRZkFHYWlBSFFjZ0FiR29oREFOQUlBQWdCVVlFUUNBR1FRRWdCa0VCU2hzaEJTQUVRZkFHYWlBSFFjZ0FiR29oQmtFQklRQURRQ0FBSUFWR0JFQWdEa0VCYWlFTVFRQWhCa0VCSVFrRFFFRUJJUUJCQVNFTElBa2dERVpGQkVBRFFDQUFJQVZHUlFSQUlBUWdBRUVDZEdvaUNpZ0NBQ0lOUVg5SEJFQWdDaUFBSUExcUlBNXZJZ28yQWdBZ0VDQUtRUUowYWlnQ0FDQUxjeUVMQ3lBQVFRRnFJUUFNQVFzTElBdEZCRUFnQkVFd2FpQUdRUUowYWlBT0lBbHJOZ0lBSUFaQkFXb2hCZ3NnQ1VFQmFpRUpEQUVMQzBGL0lBWWdDRWNOQlJwQkFDRUFJQWhCQUNBSVFRQktHeUVHQTBBZ0FDQUdSZzBGSUFJZ0JFRXdhaUFBUVFKMGFpZ0NBR29pQlNBRkxRQUFRUUZ6T2dBQUlBQkJBV29oQUF3QUN3QUZJQVFnQUVFQ2RDSU1haUFHSUF4cUtBSUFOZ0lBSUFCQkFXb2hBQXdCQ3dBTEFBVWdEQ0FBUVFKMGFpSUtJQXNnQ2lnQ0FFRUNkR29vQWdBMkFnQWdBRUVCYWlFQURBRUxBQXNBQ3lBRFFnQTNBd0FnRVNBU2FpRUFRZ0VoQVFOQUlBQWdFVVpGQkVBZ0F5QUJJQUFnQW1veEFBQitJQmw4SWhrM0F3QWdBRUVCYWlFQUlBRkNBWVloQVF3QkN3dEJBQ0FUUlEwQUdpQUVRZEFGYWlBSFFRSjBhaWdDQUFzaEJTQUVRZEFkYWlRQUlBVUxRQUFnQWlBRElBQkJDR29nQUNnQ0NDZ0NBQkVBQUNJQUlBQkJxQUZxSUFVZ0JFRUFFTDhESUFCcklnQkJwd0ZNQkVBZ0FTQUFRUXh0UVFkdk5nSUFDd3U5QlFFS2Z5TUFRUkJySWdra0FDQUdFSlVCSVFvZ0NTQUdFTDhDSWcwUW5BRWdCU0FETmdJQUFrQUNRQ0FBSWdjdEFBQWlCa0VyYXc0REFBRUFBUXNnQ2lBR1FSaDBRUmgxRUo0QklRWWdCU0FGS0FJQUlnZEJCR28yQWdBZ0J5QUdOZ0lBSUFCQkFXb2hCd3NDUUFKQUlBSWdCeUlHYTBFQlRBMEFJQWN0QUFCQk1FY05BQ0FITFFBQlFTQnlRZmdBUncwQUlBcEJNQkNlQVNFR0lBVWdCU2dDQUNJSVFRUnFOZ0lBSUFnZ0JqWUNBQ0FLSUFjc0FBRVFuZ0VoQmlBRklBVW9BZ0FpQ0VFRWFqWUNBQ0FJSUFZMkFnQWdCMEVDYWlJSElRWURRQ0FDSUFaTkRRSWdCaXdBQUJCY0VNY0VSUTBDSUFaQkFXb2hCZ3dBQ3dBTEEwQWdBaUFHVFEwQklBWXNBQUFoQ0JCY0dpQUlFTVFCUlEwQklBWkJBV29oQmd3QUN3QUxBa0FnQ1JEQUFRUkFJQW9nQnlBR0lBVW9BZ0FRNkFFZ0JTQUZLQUlBSUFZZ0IydEJBblJxTmdJQURBRUxJQWNnQmhDYkFpQU5FSjBCSVE0Z0J5RUlBMEFnQmlBSVRRUkFJQU1nQnlBQWEwRUNkR29nQlNnQ0FCQzVBd1VDUUNBSklBc1FRQ3dBQUVFQVRBMEFJQXdnQ1NBTEVFQXNBQUJIRFFBZ0JTQUZLQUlBSWd4QkJHbzJBZ0FnRENBT05nSUFJQXNnQ3lBSkVEZEJBV3RKYWlFTFFRQWhEQXNnQ2lBSUxBQUFFSjRCSVE4Z0JTQUZLQUlBSWhCQkJHbzJBZ0FnRUNBUE5nSUFJQWhCQVdvaENDQU1RUUZxSVF3TUFRc0xDd0pBQWtBRFFDQUNJQVpORFFFZ0JpMEFBQ0lIUVM1SEJFQWdDaUFIUVJoMFFSaDFFSjRCSVFjZ0JTQUZLQUlBSWdoQkJHbzJBZ0FnQ0NBSE5nSUFJQVpCQVdvaEJnd0JDd3NnRFJDK0FTRUhJQVVnQlNnQ0FDSUxRUVJxSWdnMkFnQWdDeUFITmdJQUlBWkJBV29oQmd3QkN5QUZLQUlBSVFnTElBb2dCaUFDSUFnUTZBRWdCU0FGS0FJQUlBSWdCbXRCQW5ScUlnVTJBZ0FnQkNBRklBTWdBU0FBYTBFQ2RHb2dBU0FDUmhzMkFnQWdDUkE0R2lBSlFSQnFKQUFMd1FFQkJYOGpBRUVRYXlJSEpBQWpBRUVRYXlJRkpBQWdBQ0VEQWtBZ0FVSHYvLy8vQTAwRVFBSkFJQUZCQVUwRVFDQURJQUVRandFZ0F5RUdEQUVMSUFNZ0F5QUJFTGtDUVFGcUlnQVFpZ0lpQmhDWkFTQURJQUFRdEFFZ0F5QUJFSWtCQ3lBR0lRUWdBU0lBQkg4Z0FBUkFBMEFnQkNBQ05nSUFJQVJCQkdvaEJDQUFRUUZySWdBTkFBc0xRUUFGSUFRTEdpQUZRUUEyQWd3Z0JpQUJRUUowYWlBRlFReHFFS3dCSUFWQkVHb2tBQXdCQ3hCVkFBc2dCMEVRYWlRQUlBTUwzZ01CQ0g4akFFRVFheUlLSkFBZ0JoQ1ZBU0VMSUFvZ0JoQy9BaUlHRUp3QkFrQWdDaERBQVFSQUlBc2dBQ0FDSUFNUTZBRWdCU0FESUFJZ0FHdEJBblJxSWdZMkFnQU1BUXNnQlNBRE5nSUFBa0FDUUNBQUlnZ3RBQUFpQjBFcmF3NERBQUVBQVFzZ0N5QUhRUmgwUVJoMUVKNEJJUWdnQlNBRktBSUFJZ2RCQkdvMkFnQWdCeUFJTmdJQUlBQkJBV29oQ0FzQ1FDQUNJQWhyUVFKSURRQWdDQzBBQUVFd1J3MEFJQWd0QUFGQklISkIrQUJIRFFBZ0MwRXdFSjRCSVFjZ0JTQUZLQUlBSWdsQkJHbzJBZ0FnQ1NBSE5nSUFJQXNnQ0N3QUFSQ2VBU0VISUFVZ0JTZ0NBQ0lKUVFScU5nSUFJQWtnQnpZQ0FDQUlRUUpxSVFnTElBZ2dBaENiQWtFQUlRa2dCaENkQVNFTVFRQWhCeUFJSVFZRGZ5QUNJQVpOQkg4Z0F5QUlJQUJyUVFKMGFpQUZLQUlBRUxrRElBVW9BZ0FGQWtBZ0NpQUhFRUF0QUFCRkRRQWdDU0FLSUFjUVFDd0FBRWNOQUNBRklBVW9BZ0FpQ1VFRWFqWUNBQ0FKSUF3MkFnQWdCeUFISUFvUU4wRUJhMGxxSVFkQkFDRUpDeUFMSUFZc0FBQVFuZ0VoRFNBRklBVW9BZ0FpRGtFRWFqWUNBQ0FPSUEwMkFnQWdCa0VCYWlFR0lBbEJBV29oQ1F3QkN3c2hCZ3NnQkNBR0lBTWdBU0FBYTBFQ2RHb2dBU0FDUmhzMkFnQWdDaEE0R2lBS1FSQnFKQUFMcUFVQkNuOGpBRUVRYXlJSkpBQWdCaENiQVNFS0lBa2dCaENjQWlJTkVKd0JJQVVnQXpZQ0FBSkFBa0FnQUNJSExRQUFJZ1pCSzJzT0F3QUJBQUVMSUFvZ0JrRVlkRUVZZFJDRUFTRUdJQVVnQlNnQ0FDSUhRUUZxTmdJQUlBY2dCam9BQUNBQVFRRnFJUWNMQWtBQ1FDQUNJQWNpQm10QkFVd05BQ0FITFFBQVFUQkhEUUFnQnkwQUFVRWdja0g0QUVjTkFDQUtRVEFRaEFFaEJpQUZJQVVvQWdBaUNFRUJhallDQUNBSUlBWTZBQUFnQ2lBSExBQUJFSVFCSVFZZ0JTQUZLQUlBSWdoQkFXbzJBZ0FnQ0NBR09nQUFJQWRCQW1vaUJ5RUdBMEFnQWlBR1RRMENJQVlzQUFBUVhCREhCRVVOQWlBR1FRRnFJUVlNQUFzQUN3TkFJQUlnQmswTkFTQUdMQUFBSVFnUVhCb2dDQkRFQVVVTkFTQUdRUUZxSVFZTUFBc0FDd0pBSUFrUXdBRUVRQ0FLSUFjZ0JpQUZLQUlBRUlNQ0lBVWdCU2dDQUNBR0lBZHJhallDQUF3QkN5QUhJQVlRbXdJZ0RSQ2RBU0VPSUFjaENBTkFJQVlnQ0UwRVFDQURJQWNnQUd0cUlBVW9BZ0FRbXdJRkFrQWdDU0FNRUVBc0FBQkJBRXdOQUNBTElBa2dEQkJBTEFBQVJ3MEFJQVVnQlNnQ0FDSUxRUUZxTmdJQUlBc2dEam9BQUNBTUlBd2dDUkEzUVFGclNXb2hERUVBSVFzTElBb2dDQ3dBQUJDRUFTRVBJQVVnQlNnQ0FDSVFRUUZxTmdJQUlCQWdEem9BQUNBSVFRRnFJUWdnQzBFQmFpRUxEQUVMQ3dzRFFBSkFJQUlnQmtzRVFDQUdMUUFBSWdkQkxrY05BU0FORUw0QklRY2dCU0FGS0FJQUlnaEJBV28yQWdBZ0NDQUhPZ0FBSUFaQkFXb2hCZ3NnQ2lBR0lBSWdCU2dDQUJDREFpQUZJQVVvQWdBZ0FpQUdhMm9pQlRZQ0FDQUVJQVVnQXlBQklBQnJhaUFCSUFKR0d6WUNBQ0FKRURnYUlBbEJFR29rQUE4TElBb2dCMEVZZEVFWWRSQ0VBU0VISUFVZ0JTZ0NBQ0lJUVFGcU5nSUFJQWdnQnpvQUFDQUdRUUZxSVFZTUFBc0FDOVVEQVFoL0l3QkJFR3NpQ2lRQUlBWVFtd0VoQ3lBS0lBWVFuQUlpQmhDY0FRSkFJQW9Rd0FFRVFDQUxJQUFnQWlBREVJTUNJQVVnQXlBQ0lBQnJhaUlHTmdJQURBRUxJQVVnQXpZQ0FBSkFBa0FnQUNJSUxRQUFJZ2RCSzJzT0F3QUJBQUVMSUFzZ0IwRVlkRUVZZFJDRUFTRUlJQVVnQlNnQ0FDSUhRUUZxTmdJQUlBY2dDRG9BQUNBQVFRRnFJUWdMQWtBZ0FpQUlhMEVDU0EwQUlBZ3RBQUJCTUVjTkFDQUlMUUFCUVNCeVFmZ0FSdzBBSUF0Qk1CQ0VBU0VISUFVZ0JTZ0NBQ0lKUVFGcU5nSUFJQWtnQnpvQUFDQUxJQWdzQUFFUWhBRWhCeUFGSUFVb0FnQWlDVUVCYWpZQ0FDQUpJQWM2QUFBZ0NFRUNhaUVJQ3lBSUlBSVFtd0pCQUNFSklBWVFuUUVoREVFQUlRY2dDQ0VHQTM4Z0FpQUdUUVIvSUFNZ0NDQUFhMm9nQlNnQ0FCQ2JBaUFGS0FJQUJRSkFJQW9nQnhCQUxRQUFSUTBBSUFrZ0NpQUhFRUFzQUFCSERRQWdCU0FGS0FJQUlnbEJBV28yQWdBZ0NTQU1PZ0FBSUFjZ0J5QUtFRGRCQVd0SmFpRUhRUUFoQ1FzZ0N5QUdMQUFBRUlRQklRMGdCU0FGS0FJQUlnNUJBV28yQWdBZ0RpQU5PZ0FBSUFaQkFXb2hCaUFKUVFGcUlRa01BUXNMSVFZTElBUWdCaUFESUFFZ0FHdHFJQUVnQWtZYk5nSUFJQW9RT0JvZ0NrRVFhaVFBQ3pFQkFuOGpBRUVRYXlJQ0pBQWdBa0VJYWlJRElBQVFUeUFERUpzQklBRVFoQUVoQUNBREVFY2dBa0VRYWlRQUlBQUxvQU1CQW44akFFSGdBbXNpQUNRQUlBQWdBallDMEFJZ0FDQUJOZ0xZQWlBREVOb0JJUVlnQXlBQVFlQUJhaER1QWlFSElBQkIwQUZxSUFNZ0FFSE1BbW9RN1FJZ0FFSEFBV29RUkNJQklBRVFVUkJCSUFBZ0FVRUFFRUFpQWpZQ3ZBRWdBQ0FBUVJCcU5nSU1JQUJCQURZQ0NBTkFBa0FnQUVIWUFtb2dBRUhRQW1vUWtBRkZEUUFnQUNnQ3ZBRWdBUkEzSUFKcVJnUkFJQUVRTnlFRElBRWdBUkEzUVFGMEVFRWdBU0FCRUZFUVFTQUFJQU1nQVVFQUVFQWlBbW8yQXJ3QkN5QUFRZGdDYWhCb0lBWWdBaUFBUWJ3QmFpQUFRUWhxSUFBb0Fzd0NJQUJCMEFGcUlBQkJFR29nQUVFTWFpQUhFTDRDRFFBZ0FFSFlBbW9RZFJvTUFRc0xBa0FnQUVIUUFXb1FOMFVOQUNBQUtBSU1JZ01nQUVFUWFtdEJud0ZLRFFBZ0FDQURRUVJxTmdJTUlBTWdBQ2dDQ0RZQ0FBc2dCU0FDSUFBb0Fyd0JJQVFnQmhEQ0J6WUNBQ0FBUWRBQmFpQUFRUkJxSUFBb0Fnd2dCQkNPQVNBQVFkZ0NhaUFBUWRBQ2FoQjZCRUFnQkNBRUtBSUFRUUp5TmdJQUN5QUFLQUxZQWlFQ0lBRVFPQm9nQUVIUUFXb1FPQm9nQUVIZ0Ftb2tBQ0FDQ3c4QUlBQW9BZ3dhSUFCQkFEWUNEQXRGQVFGL0l3QkJFR3NpQXlRQUlBTWdBVFlDRENBRElBSTJBZ2dnQXlBRFFReHFFTW9CSVFFZ0FFRzA5QUVnQXlnQ0NCRDdCQ0VBSUFFUXlRRWdBMEVRYWlRQUlBQUxzUUlDQkg0RmZ5TUFRU0JySWdna0FBSkFBa0FDUUNBQklBSkhCRUJCOEpZRUtBSUFJUXhCOEpZRVFRQTJBZ0FqQUVFUWF5SUpKQUFRWEJvakFFRVFheUlLSkFBakFFRVFheUlMSkFBZ0N5QUJJQWhCSEdwQkFoREFBeUFMS1FNQUlRUWdDaUFMS1FNSU53TUlJQW9nQkRjREFDQUxRUkJxSkFBZ0Npa0RBQ0VFSUFrZ0Npa0RDRGNEQ0NBSklBUTNBd0FnQ2tFUWFpUUFJQWtwQXdBaEJDQUlJQWtwQXdnM0F4QWdDQ0FFTndNSUlBbEJFR29rQUNBSUtRTVFJUVFnQ0NrRENDRUZRZkNXQkNnQ0FDSUJSUTBCSUFnb0Fod2dBa2NOQWlBRklRWWdCQ0VISUFGQnhBQkhEUU1NQWdzZ0EwRUVOZ0lBREFJTFFmQ1dCQ0FNTmdJQUlBZ29BaHdnQWtZTkFRc2dBMEVFTmdJQUlBWWhCU0FISVFRTElBQWdCVGNEQUNBQUlBUTNBd2dnQ0VFZ2FpUUFDNHdCQVFSL0l3QkJFR3NpQlNRQUl3QkJFR3NpQXlRQUFrQWdBVUZ2VFFSQUFrQWdBVUVLVFFSQUlBQWdBUkNQQVNBQUlRUU1BUXNnQUNBQkVKMENRUUZxSWdZUVRpSUVFSmtCSUFBZ0JoQzBBU0FBSUFFUWlRRUxJQVFnQVNBQ0VQNEdJQU5CQURvQUR5QUJJQVJxSUFOQkQyb1FoUUVnQTBFUWFpUUFEQUVMRUZVQUN5QUZRUkJxSkFBZ0FBdTJBUUlDZkFOL0l3QkJFR3NpQlNRQUFrQUNRQUpBSUFBZ0FVY0VRRUh3bGdRb0FnQWhCMEh3bGdSQkFEWUNBQkJjR2lNQVFSQnJJZ1lrQUNBR0lBQWdCVUVNYWtFQkVNQURJQVlwQXdBZ0Jpa0RDQkRTQXlFRElBWkJFR29rQUVId2xnUW9BZ0FpQUVVTkFTQUZLQUlNSUFGSERRSWdBeUVFSUFCQnhBQkhEUU1NQWdzZ0FrRUVOZ0lBREFJTFFmQ1dCQ0FITmdJQUlBVW9BZ3dnQVVZTkFRc2dBa0VFTmdJQUlBUWhBd3NnQlVFUWFpUUFJQU1MdGdFQ0FuMERmeU1BUVJCcklnVWtBQUpBQWtBQ1FDQUFJQUZIQkVCQjhKWUVLQUlBSVFkQjhKWUVRUUEyQWdBUVhCb2pBRUVRYXlJR0pBQWdCaUFBSUFWQkRHcEJBQkRBQXlBR0tRTUFJQVlwQXdnUThnUWhBeUFHUVJCcUpBQkI4SllFS0FJQUlnQkZEUUVnQlNnQ0RDQUJSdzBDSUFNaEJDQUFRY1FBUncwRERBSUxJQUpCQkRZQ0FBd0NDMEh3bGdRZ0J6WUNBQ0FGS0FJTUlBRkdEUUVMSUFKQkJEWUNBQ0FFSVFNTElBVkJFR29rQUNBREM4WUJBZ04vQVg0akFFRVFheUlFSkFBQ2ZnSkFBa0FnQUNBQlJ3UkFBa0FDUUNBQUxRQUFJZ1ZCTFVjTkFDQUFRUUZxSWdBZ0FVY05BQXdCQzBId2xnUW9BZ0FoQmtId2xnUkJBRFlDQUNBQUlBUkJER29nQXhCY0VNRURJUWNDUUVId2xnUW9BZ0FpQUFSQUlBUW9BZ3dnQVVjTkFTQUFRY1FBUmcwRURBVUxRZkNXQkNBR05nSUFJQVFvQWd3Z0FVWU5CQXNMQ3lBQ1FRUTJBZ0JDQUF3Q0N5QUNRUVEyQWdCQ2Z3d0JDMElBSUFkOUlBY2dCVUV0UmhzTElRY2dCRUVRYWlRQUlBY0wxd0VDQTM4QmZpTUFRUkJySWdRa0FBSi9Ba0FDUUFKQUlBQWdBVWNFUUFKQUFrQWdBQzBBQUNJRlFTMUhEUUFnQUVFQmFpSUFJQUZIRFFBTUFRdEI4SllFS0FJQUlRWkI4SllFUVFBMkFnQWdBQ0FFUVF4cUlBTVFYQkRCQXlFSEFrQkI4SllFS0FJQUlnQUVRQ0FFS0FJTUlBRkhEUUVnQUVIRUFFWU5CUXdFQzBId2xnUWdCallDQUNBRUtBSU1JQUZHRFFNTEN3c2dBa0VFTmdJQVFRQU1Bd3NnQjBMLy8vLy9EMWdOQVFzZ0FrRUVOZ0lBUVg4TUFRdEJBQ0FIcHlJQWF5QUFJQVZCTFVZYkN5RUFJQVJCRUdva0FDQUFDNVVEQVFGL0l3QkJrQUpySWdBa0FDQUFJQUkyQW9BQ0lBQWdBVFlDaUFJZ0F4RGFBU0VHSUFCQjBBRnFJQU1nQUVIL0FXb1E3d0lnQUVIQUFXb1FSQ0lCSUFFUVVSQkJJQUFnQVVFQUVFQWlBallDdkFFZ0FDQUFRUkJxTmdJTUlBQkJBRFlDQ0FOQUFrQWdBRUdJQW1vZ0FFR0FBbW9Ra1FGRkRRQWdBQ2dDdkFFZ0FSQTNJQUpxUmdSQUlBRVFOeUVESUFFZ0FSQTNRUUYwRUVFZ0FTQUJFRkVRUVNBQUlBTWdBVUVBRUVBaUFtbzJBcndCQ3lBQVFZZ0NhaEJwSUFZZ0FpQUFRYndCYWlBQVFRaHFJQUFzQVA4QklBQkIwQUZxSUFCQkVHb2dBRUVNYWtIQXVBTVF3UUlOQUNBQVFZZ0NhaEIyR2d3QkN3c0NRQ0FBUWRBQmFoQTNSUTBBSUFBb0Fnd2lBeUFBUVJCcWEwR2ZBVW9OQUNBQUlBTkJCR28yQWd3Z0F5QUFLQUlJTmdJQUN5QUZJQUlnQUNnQ3ZBRWdCQ0FHRU1JSE5nSUFJQUJCMEFGcUlBQkJFR29nQUNnQ0RDQUVFSTRCSUFCQmlBSnFJQUJCZ0FKcUVIc0VRQ0FFSUFRb0FnQkJBbkkyQWdBTElBQW9Bb2dDSVFJZ0FSQTRHaUFBUWRBQmFoQTRHaUFBUVpBQ2FpUUFJQUlMM0FFQ0EzOEJmaU1BUVJCcklnUWtBQUovQWtBQ1FBSkFJQUFnQVVjRVFBSkFBa0FnQUMwQUFDSUZRUzFIRFFBZ0FFRUJhaUlBSUFGSERRQU1BUXRCOEpZRUtBSUFJUVpCOEpZRVFRQTJBZ0FnQUNBRVFReHFJQU1RWEJEQkF5RUhBa0JCOEpZRUtBSUFJZ0FFUUNBRUtBSU1JQUZIRFFFZ0FFSEVBRVlOQlF3RUMwSHdsZ1FnQmpZQ0FDQUVLQUlNSUFGR0RRTUxDd3NnQWtFRU5nSUFRUUFNQXdzZ0IwTC8vd05ZRFFFTElBSkJCRFlDQUVILy93TU1BUXRCQUNBSHB5SUFheUFBSUFWQkxVWWJDeUVBSUFSQkVHb2tBQ0FBUWYvL0EzRUx0Z0VDQVg0Q2Z5TUFRUkJySWdVa0FBSkFBa0FnQUNBQlJ3UkFRZkNXQkNnQ0FDRUdRZkNXQkVFQU5nSUFJQUFnQlVFTWFpQURFRndRd1FRaEJBSkFRZkNXQkNnQ0FDSUFCRUFnQlNnQ0RDQUJSdzBCSUFCQnhBQkdEUU1NQkF0QjhKWUVJQVkyQWdBZ0JTZ0NEQ0FCUmcwREN3c2dBa0VFTmdJQVFnQWhCQXdCQ3lBQ1FRUTJBZ0FnQkVJQVZRUkFRdi8vLy8vLy8vLy8vd0FoQkF3QkMwS0FnSUNBZ0lDQWdJQi9JUVFMSUFWQkVHb2tBQ0FFQzhNQkFnSi9BWDRqQUVFUWF5SUVKQUFDZndKQUFrQWdBQ0FCUndSQVFmQ1dCQ2dDQUNFRlFmQ1dCRUVBTmdJQUlBQWdCRUVNYWlBREVGd1F3UVFoQmdKQVFmQ1dCQ2dDQUNJQUJFQWdCQ2dDRENBQlJ3MEJJQUJCeEFCR0RRUU1Bd3RCOEpZRUlBVTJBZ0FnQkNnQ0RDQUJSZzBDQ3dzZ0FrRUVOZ0lBUVFBTUFnc2dCa0tBZ0lDQWVGTWdCa0wvLy8vL0IxVnlEUUFnQnFjTUFRc2dBa0VFTmdJQVFmLy8vLzhISUFaQ0FGVU5BQnBCZ0lDQWdIZ0xJUUFnQkVFUWFpUUFJQUFMOVFjQ0NuOERmQ0FBUVFBZ0EwRUFTaHRGQkVBZ0JFRUFOZ0lBSUFWQkFEWUNBQ0FHUW9DQWdJQ0FnSUQ0djM4M0F3QkJmdzhMSUFNZ0Eyd2hDUUpBQWtBQ1FBSkFJQUZGQkVBZ0NVRU1iQkE1SWd0RkRRUWdDVUVEYkNFSlFRQWhBUU5BSUFFZ0NVWkZCRUFnQnlBQklBSnFMUUFBUWY4QmMyb2hCeUFCUVFGcUlRRU1BUXNMSUFjZ0NXNGhDa0VBSVFkQkFDRUJBMEFnQVNBSlJrVUVRQ0FMSUFGQkFuUnFJQUVnQW1vdEFBQkIvd0Z6SUFwcklnZzJBZ0FnQVVFQmFpRUJJQWdnQ0d3Z0Iyb2hCd3dCQ3dzZ0I3ZWZJaElnQTdkRWtTdFE1bnEyK3oraW8wUUFBQUFBQUFBdVFHTU5Ba0VBSVFjZ0FDZ0NBQ0lCUVFBZ0FVRUFTaHNoRGtGL0lRaEJmeUVLUVg4aERBTkFJQWNnRGtjRVFDQUFLQUlJSVFFQ1FBTkFBa0FnQVNBTVFRRnFJZ3hCQW5RaUQyb29BZ0FPQXdFQUFnQUxDeUFBS0FJUUlSQkJBQ0VEQTBBZ0EwRUVSZzBCSUFNZ0Qyb2hEVUVBSVFKQkFDRUJBMEFnQVNBSlJrVUVRQ0FDSUFGQkFuUWlBaUFBS0FJTUlBMUJBblJxS0FJQWFpZ0NBQ0FDSUF0cUtBSUFiR29oQWlBQlFRRnFJUUVNQVFzTElBSzNJQkFnRFVFRGRHb3JBd0NqSUJLakloTWdFU0FSSUJOaklnRWJJUkVnRENBS0lBRWJJUW9nQXlBSUlBRWJJUWdnQTBFQmFpRUREQUFMQUFzZ0IwRUJhaUVIREFFTEN3d0JDeUFKUVFKMEVEa2lDMFVOQTBFQUlRRURRQ0FCSUFsR1JRUkFJQWNnQVNBQ2FpMEFBRUgvQVhOcUlRY2dBVUVCYWlFQkRBRUxDeUFISUFsdUlRcEJBQ0VIUVFBaEFRTkFJQUVnQ1VaRkJFQWdDeUFCUVFKMGFpQUJJQUpxTFFBQVFmOEJjeUFLYXlJSU5nSUFJQUZCQVdvaEFTQUlJQWhzSUFkcUlRY01BUXNMSUFlM255SVNJQU8zbzBRQUFBQUFBQUF1UUdNTkFrRUFJUWNnQUNnQ0FDSUJRUUFnQVVFQVNoc2hEa0YvSVFoQmZ5RUtRWDhoREFOQUlBY2dEa2NFUUNBQUtBSUlJUUVDUUFOQUFrQWdBU0FNUVFGcUlneEJBblFpRDJvb0FnQU9Bd0VBQWdBTEN5QUFLQUlZSVJCQkFDRURBMEFnQTBFRVJnMEJJQU1nRDJvaERVRUFJUUpCQUNFQkEwQWdBU0FKUmtVRVFDQUNJQUZCQW5RaUFpQUFLQUlVSUExQkFuUnFLQUlBYWlnQ0FDQUNJQXRxS0FJQWJHb2hBaUFCUVFGcUlRRU1BUXNMSUFLM0lCQWdEVUVEZEdvckF3Q2pJQktqSWhNZ0VTQVJJQk5qSWdFYklSRWdEQ0FLSUFFYklRb2dBeUFJSUFFYklRZ2dBMEVCYWlFRERBQUxBQXNnQjBFQmFpRUhEQUVMQ3dzZ0JTQUlOZ0lBSUFRZ0NqWUNBQ0FHSUJFNUF3QWdDeEF6UVFBUEN5QUVRUUEyQWdBZ0JVRUFOZ0lBSUFaQ2dJQ0FnSUNBZ1BpL2Z6Y0RBQ0FMRUROQmZnOExJQVJCQURZQ0FDQUZRUUEyQWdBZ0JrS0FnSUNBZ0lDQStMOS9Od01BSUFzUU0wRitEd3RCQUVFRFFhUU9RUUFRUEVFQkVBTUFDMmtBSUFCRkJFQVBDd0pBSUFBb0FnQWdBVVlOQUNBQUlBRTJBZ0FnQVVVRVFDQUFRZVNHcHdKcUlnQW9BZ0FRTXlBQVFRQTJBZ0FNQVFzZ0FFSGtocWNDYWlBQUtBSW9JQUFvQWlSc0VEa2lBRFlDQUNBQURRQkJBRUVEUWFRT1FRQVFQRUVCRUFNQUN3dnZBUUVCZnlNQVFTQnJJZ1lrQUNBR0lBRTJBaGdDUUNBREtBSUVRUUZ4UlFSQUlBWkJmellDQUNBR0lBQWdBU0FDSUFNZ0JDQUdJQUFvQWdBb0FoQVJDUUFpQVRZQ0dBSkFBa0FDUUNBR0tBSUFEZ0lBQVFJTElBVkJBRG9BQUF3REN5QUZRUUU2QUFBTUFnc2dCVUVCT2dBQUlBUkJCRFlDQUF3QkN5QUdJQU1RVHlBR0VKc0JJUUVnQmhCSElBWWdBeEJQSUFZUW5BSWhBQ0FHRUVjZ0JpQUFFTE1CSUFaQkRISWdBQkRCQVNBRklBWkJHR29pQXlBQ0lBWWdBeUFCSUFSQkFSQy9BeUFHUmpvQUFDQUdLQUlZSVFFRFFDQURRUXhyRURnaUF5QUdSdzBBQ3dzZ0JrRWdhaVFBSUFFTFFBRUJmMEVBSVFBRGZ5QUJJQUpHQkg4Z0FBVWdBU2dDQUNBQVFRUjBhaUlBUVlDQWdJQi9jU0lEUVJoMklBTnlJQUJ6SVFBZ0FVRUVhaUVCREFFTEN3c2JBQ01BUVJCcklnRWtBQ0FBSUFJZ0F4REFCQ0FCUVJCcUpBQUxWQUVDZndKQUEwQWdBeUFFUndSQVFYOGhBQ0FCSUFKR0RRSWdBU2dDQUNJRklBTW9BZ0FpQmtnTkFpQUZJQVpLQkVCQkFROEZJQU5CQkdvaEF5QUJRUVJxSVFFTUFnc0FDd3NnQVNBQ1J5RUFDeUFBQzBBQkFYOUJBQ0VBQTM4Z0FTQUNSZ1IvSUFBRklBRXNBQUFnQUVFRWRHb2lBRUdBZ0lDQWYzRWlBMEVZZGlBRGNpQUFjeUVBSUFGQkFXb2hBUXdCQ3dzTEd3QWpBRUVRYXlJQkpBQWdBQ0FDSUFNUTJnUWdBVUVRYWlRQUMxNEJBMzhnQVNBRUlBTnJhaUVGQWtBRFFDQURJQVJIQkVCQmZ5RUFJQUVnQWtZTkFpQUJMQUFBSWdZZ0F5d0FBQ0lIU0EwQ0lBWWdCMG9FUUVFQkR3VWdBMEVCYWlFRElBRkJBV29oQVF3Q0N3QUxDeUFDSUFWSElRQUxJQUFMOXdFQkJYOGpBRUVnYXlJQ0pBQUNmd0pBQWtBZ0FVRi9FTDhCRFFBZ0FpQUJOZ0lVSUFBdEFDd0VRQ0FDUVJScVFRUkJBU0FBS0FJZ0VNNEJRUUZIRFFJTUFRc2dBaUFDUVJocUlnVTJBaEFnQWtFZ2FpRUdJQUpCRkdvaEF3TkFJQUFvQWlRZ0FDZ0NLQ0FESUFVZ0FrRU1haUFDUVJocUlBWWdBa0VRYWhEMUFpRUVJQUlvQWd3Z0EwWU5BaUFFUVFOR0JFQWdBMEVCUVFFZ0FDZ0NJQkRPQVVFQlJnMENEQU1MSUFSQkFVc05BaUFDUVJocUlnTkJBU0FDS0FJUUlBTnJJZ01nQUNnQ0lCRE9BU0FEUncwQ0lBSW9BZ3doQXlBRVFRRkdEUUFMQ3lBQkVOa0VEQUVMUVg4TElRQWdBa0VnYWlRQUlBQUxaZ0VCZndKQUlBQXRBQ3hGQkVBZ0FrRUFJQUpCQUVvYklRSURRQ0FDSUFOR0RRSWdBQ0FCS0FJQUlBQW9BZ0FvQWpRUkF3QkJmMFlFUUNBRER3VWdBVUVFYWlFQklBTkJBV29oQXd3QkN3QUxBQXNnQVVFRUlBSWdBQ2dDSUJET0FTRUNDeUFDQ3lZQUlBQWdBQ2dDQUNnQ0dCRUFBQm9nQUNBQkVNTURJZ0UyQWlRZ0FDQUJFSjRDT2dBc0Mvb0JBUVYvSXdCQklHc2lBaVFBQW44Q1FBSkFJQUZCZnhDL0FRMEFJQUlnQVJET0F6b0FGeUFBTFFBc0JFQWdBa0VYYWtFQlFRRWdBQ2dDSUJET0FVRUJSdzBDREFFTElBSWdBa0VZYWlJRk5nSVFJQUpCSUdvaEJpQUNRUmRxSVFNRFFDQUFLQUlrSUFBb0FpZ2dBeUFGSUFKQkRHb2dBa0VZYWlBR0lBSkJFR29ROVFJaEJDQUNLQUlNSUFOR0RRSWdCRUVEUmdSQUlBTkJBVUVCSUFBb0FpQVF6Z0ZCQVVZTkFnd0RDeUFFUVFGTERRSWdBa0VZYWlJRFFRRWdBaWdDRUNBRGF5SURJQUFvQWlBUXpnRWdBMGNOQWlBQ0tBSU1JUU1nQkVFQlJnMEFDd3NnQVJEWkJBd0JDMEYvQ3lFQUlBSkJJR29rQUNBQUMya0JBWDhDUUNBQUxRQXNSUVJBSUFKQkFDQUNRUUJLR3lFQ0EwQWdBaUFEUmcwQ0lBQWdBU3dBQUJEQ0FTQUFLQUlBS0FJMEVRTUFRWDlHQkVBZ0F3OEZJQUZCQVdvaEFTQURRUUZxSVFNTUFRc0FDd0FMSUFGQkFTQUNJQUFvQWlBUXpnRWhBZ3NnQWdzbUFDQUFJQUFvQWdBb0FoZ1JBQUFhSUFBZ0FSREdBeUlCTmdJa0lBQWdBUkNlQWpvQUxBdnlBUUVEZnlNQVFTQnJJZ0lrQUNBQlFYOFF2d0VoQkNBQUxRQTBJUU1DUUNBRUJFQWdBdzBCSUFBZ0FDZ0NNQ0lCUVg4UXZ3RkJBWE02QURRTUFRc0NRQ0FEUlEwQUlBSWdBQ2dDTURZQ0VBSkFBa0FDUUNBQUtBSWtJQUFvQWlnZ0FrRVFhaUFDUVJScUlnTWdBa0VNYWlBQ1FSaHFJQUpCSUdvZ0F4RDFBa0VCYXc0REFnSUFBUXNnQUNnQ01DRURJQUlnQWtFWmFqWUNGQ0FDSUFNNkFCZ0xBMEFnQWlnQ0ZDSURJQUpCR0dwTkRRSWdBaUFEUVFGcklnTTJBaFFnQXl3QUFDQUFLQUlnRVBNQ1FYOUhEUUFMQzBGL0lRRU1BUXNnQUVFQk9nQTBJQUFnQVRZQ01Bc2dBa0VnYWlRQUlBRUxDUUFnQUVFQkVNd0VDd2tBSUFCQkFCRE1CQXN6QUNBQUlBRVF3d01pQVRZQ0pDQUFJQUVReGdJMkFpd2dBQ0FBS0FJa0VKNENPZ0ExSUFBb0FpeEJDVTRFUUJCVkFBc0w5UUVCQTM4akFFRWdheUlDSkFBZ0FVRi9FTDhCSVFRZ0FDMEFOQ0VEQWtBZ0JBUkFJQU1OQVNBQUlBQW9BakFpQVVGL0VMOEJRUUZ6T2dBMERBRUxBa0FnQTBVTkFDQUNJQUFvQWpBUXpnTTZBQk1DUUFKQUFrQWdBQ2dDSkNBQUtBSW9JQUpCRTJvZ0FrRVVhaUlESUFKQkRHb2dBa0VZYWlBQ1FTQnFJQU1ROVFKQkFXc09Bd0lDQUFFTElBQW9BakFoQXlBQ0lBSkJHV28yQWhRZ0FpQURPZ0FZQ3dOQUlBSW9BaFFpQXlBQ1FSaHFUUTBDSUFJZ0EwRUJheUlETmdJVUlBTXNBQUFnQUNnQ0lCRHpBa0YvUncwQUN3dEJmeUVCREFFTElBQkJBVG9BTkNBQUlBRTJBakFMSUFKQklHb2tBQ0FCQ3drQUlBQkJBUkRQQkFzSkFDQUFRUUFRendRTE13QWdBQ0FCRU1ZRElnRTJBaVFnQUNBQkVNWUNOZ0lzSUFBZ0FDZ0NKQkNlQWpvQU5TQUFLQUlzUVFsT0JFQVFWUUFMQ3g0QVFjaXVCQkQ1QWtHY3J3UVF5UU5CbUxFRUVQa0NRZXl4QkJESkF3dTBBUUVFZnlNQVFSQnJJZ1VrQUFOQUFrQWdBaUFEVEEwQUlBQW9BaGdpQkNBQUtBSWNJZ1pQQkVBZ0FDQUJLQUlBSUFBb0FnQW9BalFSQXdCQmYwWU5BU0FEUVFGcUlRTWdBVUVFYWlFQkJTQUZJQVlnQkd0QkFuVTJBZ3dnQlNBQ0lBTnJOZ0lJSUFWQkRHb2dCVUVJYWhDZkFpRUVJQUFvQWhnZ0FTQUVLQUlBSWdRUXpBRWdBQ0FFUVFKMElnWWdBQ2dDR0dvMkFoZ2dBeUFFYWlFRElBRWdCbW9oQVFzTUFRc0xJQVZCRUdva0FDQURDeXdBSUFBZ0FDZ0NBQ2dDSkJFQUFFRi9SZ1JBUVg4UEN5QUFJQUFvQWd3aUFFRUVhallDRENBQUtBSUFDOG9CQVFSL0l3QkJFR3NpQkNRQUEwQUNRQ0FDSUFWTURRQUNmeUFBS0FJTUlnTWdBQ2dDRUNJR1NRUkFJQVJCLy8vLy93YzJBZ3dnQkNBR0lBTnJRUUoxTmdJSUlBUWdBaUFGYXpZQ0JDQUVRUXhxSUFSQkNHb2dCRUVFYWhDZkFoQ2ZBaUVESUFFZ0FDZ0NEQ0FES0FJQUlnTVF6QUVnQUNBRFFRSjBJZ1lnQUNnQ0RHbzJBZ3dnQVNBR2Fnd0JDeUFBSUFBb0FnQW9BaWdSQUFBaUEwRi9SZzBCSUFFZ0F6WUNBRUVCSVFNZ0FVRUVhZ3NoQVNBRElBVnFJUVVNQVFzTElBUkJFR29rQUNBRkN3d0FJQUFRelFNYUlBQVFNd3V2QVFFRWZ5TUFRUkJySWdVa0FBTkFBa0FnQWlBRVRBMEFJQUFvQWhnaUF5QUFLQUljSWdaUEJFQWdBQ0FCTEFBQUVNSUJJQUFvQWdBb0FqUVJBd0JCZjBZTkFTQUVRUUZxSVFRZ0FVRUJhaUVCQlNBRklBWWdBMnMyQWd3Z0JTQUNJQVJyTmdJSUlBVkJER29nQlVFSWFoQ2ZBaUVESUFBb0FoZ2dBU0FES0FJQUlnTVF0d0VnQUNBRElBQW9BaGhxTmdJWUlBTWdCR29oQkNBQklBTnFJUUVMREFFTEN5QUZRUkJxSkFBZ0JBc3ZBQ0FBSUFBb0FnQW9BaVFSQUFCQmYwWUVRRUYvRHdzZ0FDQUFLQUlNSWdCQkFXbzJBZ3dnQUN3QUFCRENBUXZBQVFFRWZ5TUFRUkJySWdRa0FBTkFBa0FnQWlBRlRBMEFBa0FnQUNnQ0RDSURJQUFvQWhBaUJra0VRQ0FFUWYvLy8vOEhOZ0lNSUFRZ0JpQURhellDQ0NBRUlBSWdCV3MyQWdRZ0JFRU1haUFFUVFocUlBUkJCR29RbndJUW53SWhBeUFCSUFBb0Fnd2dBeWdDQUNJREVMY0JJQUFnQUNnQ0RDQURhallDREF3QkN5QUFJQUFvQWdBb0FpZ1JBQUFpQTBGL1JnMEJJQUVnQXhET0F6b0FBRUVCSVFNTElBRWdBMm9oQVNBRElBVnFJUVVNQVFzTElBUkJFR29rQUNBRkN3d0FJQUFRendNYUlBQVFNd3V5N3dFRUxIOE9mUng4QTM0akFFRWdheUljSkFBQ1FBSkFBa0FDUUNBQVFRQWdBUnRGQkVCQkFFRURRWURlQUVFQUVEd01BUXNnQUNnQ0VDRUpJQUFvQWd3aERRSkFJQUFvQWhRaUpFRUJSZzBBQW44Q1FBSkFBa0FDUUFKQUlDUkJBV3NPQlFBQ0JBTUJCQXNnSENBTk5nSWNJQndnQ1RZQ0dDQUpJQTFzSWdJUU9TSUVSUTBJSUFRZ0FTQUNFRDhNQkFzQ2Z5QUJJUVFnSENBTlFRTnRJZ0ZCQVhRaUR6WUNIQ0FjSUFsQkEyMGlBa0VCZENJRE5nSVlJQU1nRDJ3UU9TSUZCRUFnQWtFQUlBSkJBRW9iSVJjZ0FVRUFJQUZCQUVvYklRc2dCU0lCSVFNRFFDQUhJQmRIQkVBZ0FTQVBhaUVCSUFRZ0IwRURiQ0lDSUExc2FpRUtJQVFnQWtFQ2FpQU5iR29oQmlBRUlBSkJBV29nRFd4cUlRaEJBQ0VDQTBBZ0FpQUxSd1JBSUFNZ0NpMEFBQ0FLTFFBQlFRRjJhaUFJTFFBQVFRRjJhaUFJTFFBQlFRSjJha0VDZEVFSmJqb0FBQ0FCSUFZdEFBQWdDQzBBQVVFQ2RpQUlMUUFBUVFGMmFtb2dCaTBBQVVFQmRtcEJBblJCQ1c0NkFBQWdBeUFLTFFBQ0lBb3RBQUZCQVhacUlBZ3RBQUZCQW5acUlBZ3RBQUpCQVhacVFRSjBRUWx1T2dBQklBRWdCaTBBQWlBSUxRQUNRUUYySUFndEFBRkJBblpxSUFZdEFBRkJBWFpxYWtFQ2RFRUpiam9BQVNBQ1FRRnFJUUlnQmtFRGFpRUdJQWhCQTJvaENDQUtRUU5xSVFvZ0FVRUNhaUVCSUFOQkFtb2hBd3dCQ3dzZ0IwRUJhaUVISUFNZ0Qyb2hBd3dCQ3dzZ0JRd0JDd3dJQ3d3REN3Si9JQUVoQWlBY0lBMUJBbTBpQVRZQ0hDQWNJQWxCQW0waUJUWUNHQ0FCSUFWc0VEa2lCQVJBSUFWQkFDQUZRUUJLR3lFRklBRkJBQ0FCUVFCS0d5RUhJQVFoQVFOQUlBTWdCVWNFUUNBQ0lBTkJBWFFpQ2lBTmJHb2hDQ0FDSUFwQkFYSWdEV3hxSVFwQkFDRUdBMEFnQmlBSFJ3UkFJQUVnQ2kwQUFTQUtMUUFBSUFndEFBRWdDQzBBQUdwcWFrRUNkam9BQUNBR1FRRnFJUVlnQ2tFQ2FpRUtJQWhCQW1vaENDQUJRUUZxSVFFTUFRc0xJQU5CQVdvaEF3d0JDd3NnQkF3QkN3d0hDd3dDQ3dKL0lCd2dEVUVEYlNJQ05nSWNJQndnQ1VFRGJTSUROZ0lZSUFJZ0Eyd1FPU0lFQkVBZ0EwRUFJQU5CQUVvYklROGdBa0VBSUFKQkFFb2JJUmNnQkNFQ0EwQWdCaUFQUndSQUlBRWdCa0VEYkNJRklBMXNhaUVJSUFFZ0JVRUNhaUFOYkdvaEF5QUJJQVZCQVdvZ0RXeHFJUXBCQUNFSEEwQWdCeUFYUndSQUlBSWdBeTBBQWlBRExRQUJJQU10QUFBZ0NpMEFBaUFLTFFBQklBb3RBQUFnQ0MwQUFpQUlMUUFCSUFndEFBQnFhbXBxYW1wcWFrRUpiam9BQUNBSFFRRnFJUWNnQTBFRGFpRURJQXBCQTJvaENpQUlRUU5xSVFnZ0FrRUJhaUVDREFFTEN5QUdRUUZxSVFZTUFRc0xJQVFNQVFzTUJnc01BUXNDZnlBY0lBMUJCRzBpQWpZQ0hDQWNJQWxCQkcwaUF6WUNHQ0FDSUFOc0VEa2lCQVJBSUFOQkFDQURRUUJLR3lFWElBSkJBQ0FDUVFCS0d5RUxJQVFoQWdOQUlBY2dGMGNFUUNBQklBZEJBblFpQlNBTmJHb2hDQ0FCSUFWQkEzSWdEV3hxSVFNZ0FTQUZRUUp5SUExc2FpRUtJQUVnQlVFQmNpQU5iR29oQmtFQUlROERRQ0FMSUE5SEJFQWdBaUFETFFBRElBTXRBQUlnQXkwQUFTQURMUUFBSUFvdEFBTWdDaTBBQWlBS0xRQUJJQW90QUFBZ0JpMEFBeUFHTFFBQ0lBWXRBQUVnQmkwQUFDQUlMUUFESUFndEFBSWdDQzBBQVNBSUxRQUFhbXBxYW1wcWFtcHFhbXBxYW1wcVFRUjJPZ0FBSUE5QkFXb2hEeUFEUVFScUlRTWdDa0VFYWlFS0lBWkJCR29oQmlBSVFRUnFJUWdnQWtFQmFpRUNEQUVMQ3lBSFFRRnFJUWNNQVFzTElBUU1BUXNNQlFzTElnRU5BQXdCQ3lBQUtBSUFJUUlqQUVFZ2F5SW9KQUFnS0NBQlFRRWdEU0FKSUEwUTNRVWhIU0FDS0FJQUtBSUFJUmRCQUNFS0l3QkJJR3NpS1NRQUFrQUNRQ0FYUWR3QWFpSUpFRW9RcGdGRkRRQWdDUkJLUVFBUVRDZ0NCQ0FkS0FJRVJ3MEFJQWtRU2tFQUVFd29BZ2dnSFNnQ0NFWU5BUXNnSFNnQ0JDRUdJQjBvQWdnaEF3TkFJQVpCQ0VnZ0EwRUlTSEpGQkVBZ0NrRUJhaUVLSUFOQkFYVWhBeUFHUVFGMUlRWU1BUXNMSUIwb0FnUWhBaUFkS0FJSUlRUkJBQ0VESUFsQkF6WUNGQ0FKSUFvMkFoQWdDVU1BQUFCQVF3QUFBRDhRM1FZaUxqZ0NHQ0FKUXdBQWdEOGdMaENuQXBVNEFod2dDVUVFYWlJRklBa29BaFFnQ213UW9RUWdDa0VBSUFwQkFFb2JJUTBEUUNBRElBMUhCRUFnQkNBRGRpRUdJQUlnQTNZaEIwRUFJUW9EUUNBSktBSVVJZzhnQ2swRVFDQURRUUZxSVFNTUF3VWdCU0FESUE5c0lBcHFFRXhCQWlBSElBWkJBUkRyQXlBS1FRRnFJUW9NQVFzQUN3QUxDd0pBSUFsQklHb2lBeENVQWlJS0lBSWdCR3dpQlVrRVFDTUFRU0JySWdja0FBSkFJQVVnQ21zaURTQURFRFFvQWdBZ0F5Z0NCR3RCQVhWTkJFQWpBRUVRYXlJQ0pBQWdBaUFETmdJQUlBSWdBeWdDQkNJRU5nSUVJQUlnQkNBTlFRRjBhallDQ0NBQ0tBSUVJUW9nQWlnQ0NDRUVBMEFnQkNBS1JnUkFJQUlRYmlBQ1FSQnFKQUFGSUFNUU5DQUtFTFFHSUFJZ0NrRUNhaUlLTmdJRURBRUxDd3dCQ3lBREVEUWhDQ0FIUVFocUlRSUNmeUFERUpRQ0lBMXFJUThqQUVFUWF5SUVKQUFnQkNBUE5nSU1Jd0JCRUdzaUNpUUFJQU1RTkJvZ0NrSC8vLy8vQnpZQ0RDQUtRZi8vLy84SE5nSUlJQXBCREdvZ0NrRUlhaEQ4QVNnQ0FDRUdJQXBCRUdva0FDQUdJQTlQQkVBZ0F4Q1RBaUlLSUFaQkFYWkpCRUFnQkNBS1FRRjBOZ0lJSUFSQkNHb2dCRUVNYWhCNUtBSUFJUVlMSUFSQkVHb2tBQ0FHREFFTEVKb0JBQXNoQkNBREVKUUNJUTlCQUNFR0l3QkJFR3NpQ2lRQUlBcEJBRFlDRENBQ1FReHFJQWdRdXdFZ0JBUkFJQUlvQWhBYUlBUkIvLy8vL3dkTEJFQkJsUGtBRUswQkFBc2dCRUVCZEJCT0lRWUxJQUlnQmpZQ0FDQUNJQVlnRDBFQmRHb2lEellDQ0NBQ0lBODJBZ1FnQWhBOUlBWWdCRUVCZEdvMkFnQWdDa0VRYWlRQUl3QkJFR3NpQkNRQUlBUWdBaWdDQ0RZQ0FDQUNLQUlJSVFvZ0JDQUNRUWhxTmdJSUlBUWdDaUFOUVFGMGFqWUNCQ0FFS0FJQUlRWURRQ0FFS0FJRUlBWkhCRUFnQWlnQ0VDQUVLQUlBRUxRR0lBUWdCQ2dDQUVFQ2FpSUdOZ0lBREFFTEN5QUVFS29CSUFSQkVHb2tBQ0FERUxvR0lBTVFOQ0FES0FJQUlBTW9BZ1FnQWtFRWFpSUVFSmdDSUFNZ0JCQkdJQU5CQkdvZ0FrRUlhaEJHSUFNUU5DQUNFRDBRUmlBQ0lBSW9BZ1EyQWdBZ0F4Q1VBaG9nQXlnQ0FCb2dBeWdDQUNBREVKTUNRUUYwYWhvZ0F5Z0NBQ0FERUpNQ1FRRjBhaG9nQXlnQ0FCb2dBaWdDQkNFRUEwQWdCQ0FDS0FJSVJ3UkFJQUlvQWhBYUlBSWdBaWdDQ0VFQ2F6WUNDQXdCQ3dzZ0FpZ0NBQVJBSUFJb0FoQWFJQUlvQWdBaEJDQUNFRDBvQWdBZ0FpZ0NBR3NhSUFRUU13c0xJQWRCSUdva0FBd0JDeUFGSUFwSkJFQWdBeWdDQUNBRlFRRjBhaUVDSUFNUWxBSWFJQU1nQWhDMUJpQURLQUlBR2lBREtBSUFJQU1Ra3dKQkFYUnFHaUFES0FJQUdpQURLQUlBSUFNUWxBSkJBWFJxR2dzTElBbEJMR29nQlJDWEFpQUpRVGhxSUFVUWx3SUxJQ2xCenhzUWt3RWhCUUpBQWtBQ1FBSkFBa0FnSFNnQ0FFRUJSZ1JBSUIwb0FoQkJBVWNOQVNBSlFRUnFJZ0lRcGdFZ0NTZ0NGQ0FKS0FJUWJFY05BaUFkS0FJRUlBSkJBQkJNS0FJRVJ3MERJQjBvQWdnZ0FrRUFFRXdvQWdoSERRUWdDU0FDUVFBUVRDQWRFTjRDSUFrZ0FrRUJFRXdnQWtFQUVFd1EzZ0lnQ1NBQ1FRSVFUQ0FDUVFFUVRCQzVCa0VCSVFNRFFDQURJQWtvQWhCUERRWWdBaUFKS0FJVUlBTnNFRXdvQWhnaENDQUNJQWtvQWhRZ0EyeEJBV3NRVENnQ0dDRU5RUUFoQ2lBQ0lBa29BaFFnQTJ4QkFXc1FUQ2dDQkNJRVFRRjBJUXNnQWlBSktBSVVJQU5zUVFGckVFd29BZ2hCQVhZaEdDQUVRUUYySVE0RFFDQUtJQmhIQkVBZ0RTQUtJQXRzUVFKMGFpSUdJQVJCQW5ScUlRZEJBQ0VQQTBBZ0RpQVBSZ1JBSUFwQkFXb2hDZ3dEQlNBSUlBWXFBZ0FnQmlvQ0JKSWdCeW9DQUpJZ0J5b0NCSkpEQUFDQVBwUTRBZ0FnQjBFSWFpRUhJQVpCQ0dvaEJpQVBRUUZxSVE4Z0NFRUVhaUVJREFFTEFBc0FDd3NnQ1NBQ0lBa29BaFFnQTJ4QkFXb1FUQ0FDSUFrb0FoUWdBMndRVEJEZUFpQUpJQUlnQ1NnQ0ZDQURiRUVDYWhCTUlBSWdDU2dDRkNBRGJFRUJhaEJNRUxrR0lBTkJBV29oQXd3QUN3QUxRZkN2QkVIVk1SQXlRWWtWRURKQnZ4d1FNa0hLQWhBMVFma2dFREpCM3pVUU1oQTJEQWdMUWZDdkJFSGdQaEF5UVlrVkVESkJ2eHdRTWtITEFoQTFRZmtnRURKQm1NSUFFRElRTmd3SEMwSHdyd1JCcDhnQUVESkJpUlVRTWtHL0hCQXlRYzBDRURWQitTQVFNa0dWekFBUU1oQTJEQVlMUWZDdkJFSHgwd0FRTWtHSkZSQXlRYjhjRURKQnpnSVFOVUg1SUJBeVFleldBQkF5RURZTUJRdEI4SzhFUVlqZEFCQXlRWWtWRURKQnZ4d1FNa0hQQWhBMVFma2dFREpCN05ZQUVESVFOZ3dFQ3lBRkVIY2pBRUV3YXlJaEpBQUNRQ0FYUWFBQmFpSU5LQUlBSUFrUVNrRUFFRXdvQWdSR0JFQWdEU2dDQkNBSkVFcEJBQkJNS0FJSVJnMEJDMEVBSVFwQkFDRUdRUUFoQnlBTlFTQnFJUUlDUUNBSlFRUnFFS1lCQkVBZ0NVRUFRUUFRK1FFb0FnQWhCQ0FKUVFCQkFCRDVBU2dDQkNFRElBbEJBRUVBRVBrQktBSUlJUVVnQWlBSktBSVFOZ0lNSUFJZ0NTZ0NGRUVCYXlJUE5nSVFJQUlnQWlnQ0RDQVBiQkNoQkFOQUlBb2dBaWdDREU4TkFpQUZJQXAySVE4Z0F5QUtkaUVMUVFBaENBTkFJQUlvQWhBaUdDQUlUUVJBSUFwQkFXb2hDZ3dDQlNBQ0lBb2dHR3dnQ0dvUVRDQUVJQXNnRDBFQkVPc0RJQWhCQVdvaENBd0JDd0FMQUFzQUMwSHdyd1JCblFvUU1rR1VFaEF5UWI4Y0VESkJOUkExUWZrZ0VESkJ4U1FRTWhBMkRBVUxJQWtRU2tFQUVFd29BZ1FoQ2lBSkVFcEJBQkJNS0FJSUlROGdDU2dDRUNFRklBa29BaFFoQkNBTlFkd0FhaUlDUTgzTVREODRBaGdnQWtFRk5nSVVJQUpEQUFEQVB6Z0NFQ0FDUXdBQVFFQTRBZ3dnQWtFa05nSUlJQUlnQkRZQ0JDQUNJQVUyQWdBZ0FrRWNha0VrRUpjQ0lBSkJLR29pQ0NBQ0tBSUVJQUlvQWdCc0VLRUVBMEFnQlNBR1J3UkFJQThnQm5ZaEFpQUtJQVoySVFzZ0JDQUdiQ0VZUVFBaEF3TkFJQU1nQkVZRVFDQUdRUUZxSVFZTUF3VWdDQ0FESUJocUVFeEJBaUFMSUFKQkFoRHJBeUFEUVFGcUlRTU1BUXNBQ3dBTEN5QU5JQWtRU2tFQUVFd29BZ1EyQWdBZ0RTQUpFRXBCQUJCTUtBSUlOZ0lFSUEwb0FnZ2hCQUpBSUFRZ0RVRVFhaUlGSWdJUVZpSURTd1JBSXdCQklHc2lDaVFBQWtBZ0JDQURheUlESUFJUU5DZ0NBQ0FDS0FJRWEwRU1iVTBFUUNBQ0lBTVF5UVlNQVFzZ0FoQTBJUVFnQ2tFSWFpQUNJQUlRVmlBRGFoQzRBaUFDRUZZZ0JCRElCaUlFSUFNUXh3WWdBaUFFRU1ZR0lBUW9BZ1FoQWdOQUlBSWdCQ2dDQ0VjRVFDQUVLQUlRR2lBRUlBUW9BZ2hCREdzaUF6WUNDQ0FERU5RR0RBRUxDeUFFS0FJQUJFQWdCQ2dDRUJvZ0JDZ0NBQ0VDSUFRUXJnTWFJQUlRTXdzTElBcEJJR29rQUF3QkN5QURJQVJMQkVBZ0FpZ0NBQ0FFUVF4c2FpRUVJQUlRVmlFRElBSWdCQkRWQmlBQ0lBTVE0QUlMQ3dOQUlBVVFWaUFIU3dSQUlBVWdCeENXQVNFQ0lBMG9BZ3doQkFKQUlBUWdBaEJXSWdOTEJFQWpBRUVnYXlJS0pBQUNRQ0FFSUFOcklnTWdBaEEwS0FJQUlBSW9BZ1JyUVF4dFRRUkFJQUlnQXhESkJnd0JDeUFDRURRaEJDQUtRUWhxSUFJZ0FoQldJQU5xRUxnQ0lBSVFWaUFFRU1nR0lnUWdBeERIQmlBQ0lBUVF4Z1lnQkNnQ0JDRUNBMEFnQWlBRUtBSUlSd1JBSUFRb0FoQWFJQVFnQkNnQ0NFRU1heUlETmdJSUlBTVE1QUVNQVFzTElBUW9BZ0FFUUNBRUtBSVFHaUFFS0FJQUlRSWdCQkN1QXhvZ0FoQXpDd3NnQ2tFZ2FpUUFEQUVMSUFNZ0JFc0VRQ0FDS0FJQUlBUkJER3hxSVFRZ0FoQldJUU1nQWlBRUVOSUdJQUlnQXhEZ0Fnc0xJQWRCQVdvaEJ3d0JDd3NMUVpRQkVFNFFzQVloQkNNQVFSQnJJZ0lrQUNBQ1FRaHFJQVFRcndZaUJDQVhRVUJySWlJUS93TWdCQkRSQVNBQ1FSQnFKQUFnSWlnQ0FDQUpFRXBCQUJCTUtBSUVFSmtCSUNJb0FnQWdDUkJLUVFBUVRDZ0NDQkNKQVNBaFFSQnFRZDRmRUpNQklTb2dJaWdDQUNFcklCZEJ2QUpxSVJoQkFDRUtJd0JCTUdzaUpTUUFBa0FDUUFKQUFrQUNRQ0FKQkVBZ0RVVU5BU0FKRUVvUXBnRkZEUUlnQ1JCS1FRQVFUQ2dDQkNBTktBSUFSdzBESUFrUVNrRUFFRXdvQWdnZ0RTZ0NCRWNOQkNNQVFTQnJJaDRrQUFKQUFrQWdDU0lDS0FJUVFRQktCRUFnSGtIRWlRRVFrd0VoRGlBQ0lROENRQUpBQWtBZ0RVRWdhaUlTSWdjUXBnRUVRQ0FQS0FJUVFRQk1EUUVnRDBHUXFnRkJ3TlVCRUtzQlJRMENBMEJCQUNFRklBd2dCeWdDREU4TkJBTkFJQWNvQWhBZ0JVMEVRQ0FNUVFGcUlRd01BZ1VnQnlBSEtBSVFJQXhzSUFWcUVFd2hBaUFQSUF3Z0JSRDVBU0VFSUE4Z0RDQUZRUUZxSWdVUStRRWhBMEVBSVFnQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FDQUNLQUlBUVFKR0JFQWdCQ2dDQUVFQ1J3MEJJQU1vQWdCQkFrY05BaUFDS0FJUVFRRkhEUU1nQkNnQ0VFRUJSdzBFSUFNb0FoQkJBVWNOQlNBQ0tBSUVJQU1vQWdSSERRWWdBaWdDQ0NBREtBSUlSdzBISUFRb0FnUWdBeWdDQkVjTkNDQUVLQUlJSUFNb0FnaEhEUWtEUUNBSUlBUW9BZ2hQRFExQkFDRUdJQWdnQWlnQ0NFOEVRRUh3cndSQnFNd0JFREpCemN3QkVESkJ2eHdRTWtIM0FCQTFRZmtnRURKQnpjMEJFRElRTmd3VkN5QUNLQUlZSUFJb0Fnd2dDR3hxSVJBZ0JDQUlFRTBoRVNBRElBZ1FUU0VWQTBBZ0JpQUVLQUlFVHdSQUlBaEJBV29oQ0F3Q0JTQVFJQVpCQW5RaUMyb2dDeUFSYWlvQ0FDQUxJQlZxS2dJQWt6Z0NBQ0FHUVFGcUlRWU1BUXNBQ3dBTEFBdEI4SzhFUWJIT0FCQXlRWlFTRURKQnZ4d1FNa0hXQUJBMVFma2dFREpCemRJQUVESVFOZ3dKQzBId3J3UkJqTmdBRURKQmxCSVFNa0cvSEJBeVFkY0FFRFZCK1NBUU1rSE4wZ0FRTWhBMkRBZ0xRZkN2QkVHbDNBQVFNa0dVRWhBeVFiOGNFREpCMkFBUU5VSDVJQkF5UWMzU0FCQXlFRFlNQnd0QjhLOEVRZW5yQUJBeVFaUVNFREpCdnh3UU1rSFpBQkExUWZrZ0VESkJ4dThBRURJUU5nd0dDMEh3cndSQnV2UUFFREpCbEJJUU1rRy9IQkF5UWRvQUVEVkIrU0FRTWtIRzd3QVFNaEEyREFVTFFmQ3ZCRUdlK0FBUU1rR1VFaEF5UWI4Y0VESkIyd0FRTlVINUlCQXlRY2J2QUJBeUVEWU1CQXRCOEs4RVFjYjdBQkF5UVpRU0VESkJ2eHdRTWtIY0FCQTFRZmtnRURKQm12d0FFRElRTmd3REMwSHdyd1JCZ0lFQkVESkJsQklRTWtHL0hCQXlRZDBBRURWQitTQVFNa0d5Z1FFUU1oQTJEQUlMUWZDdkJFSHZoQUVRTWtHVUVoQXlRYjhjRURKQjNnQVFOVUg1SUJBeVFacjhBQkF5RURZTUFRdEI4SzhFUWJlSUFSQXlRWlFTRURKQnZ4d1FNa0hmQUJBMVFma2dFREpCc29FQkVESVFOZ3NNQ0FzQUN3QUxBQXRCOEs4RVFiQXJFREpCbEJJUU1rRy9IQkF5UWNnQUVEVkIrU0FRTWtIRkx4QXlFRFlNQkF0QjhLOEVRZDgzRURKQmxCSVFNa0cvSEJBeVFja0FFRFZCK1NBUU1rSEZPeEF5RURZTUF3dEI4SzhFUWJ2RUFCQXlRWlFTRURKQnZ4d1FNa0hLQUJBMVFma2dFREpCMmNjQUVESVFOZ3dDQ3lBT0VIY2dIa0d6aWdFUWt3RWhMQ01BUVRCcklnd2tBQ0FOUVR4cUlpWVFtd1FnREVFSWFrRUVjaUVuSUEwcUFqUVFjQ0UwUVFFaEJBSkFBMEFDUUFKQUFrQUNRQUpBQWtBQ1FBSkFJQklRcGdGQkFXc2dCRXNFUUNBU0lBUkJBV3NRbWdRaEJpQVNJQVFRbWdRaENDQVNJQVJCQVdvaUF4Q2FCQ0VIQW44Z0VoQ21BU0FFU3dSQUlCSkJBQkJNS0FJRUlCSWdCQkJNS0FJRWJyTVEzd1lRM2dZaUxvdERBQUFBVDEwRVFDQXVxQXdDQzBHQWdJQ0FlQXdCQzBId3J3UkJrTElCRURKQnZySUJFREpCdnh3UU1rSGVBQkExUWZrZ0VESkIwYlFCRURJUU5nd05DeUVRSUFRZ0VpZ0NFRzhoRVFKQUlBWW9BZ1FnQ0NnQ0JFY05BQ0FHS0FJRUlBY29BZ1JIRFFBZ0JpZ0NDQ0FJS0FJSVJ3MENJQVlvQWdnZ0J5Z0NDRWNOQTBFQklRSWdDQ2dDQkVFQmF5SUVRUUVnQkVFQlN4c2hJeUFJS0FJSVFRRnJJZ1JCQVNBRVFRRkxHeUV0SUJHeUlTOERRQ0FDSUMxR0RRbEJBU0VFSUFLeklUQWdCaUFDUVFGcklnc1FUU0VmSUFZZ0FoQk5JUlVnQmlBQ1FRRnFJZ1VRVFNFV0lBZ2dDeEJOSVJNZ0NDQUNFRTBoSUNBSUlBVVFUU0VVSUFjZ0N4Qk5JUm9nQnlBQ0VFMGhHeUFISUFVUVRTRVpBMEFnQkNBalJnUkFJQVVoQWd3Q0JRSkFJQ0FnQkVFQ2RDSUNhaUlMS2dJQUVIQWdORjBOQUFKQUFrQWdDeW9DQUNJdUlCOGdCRUVCYTBFQ2RDSUxhaW9DQUNJeFhrVU5BQ0F1SUFJZ0gyb3FBZ0JlUlEwQUlDNGdIeUFFUVFGcVFRSjBJZzVxS2dJQVhrVU5BQ0F1SUFzZ0ZXb3FBZ0JlUlEwQUlDNGdBaUFWYWlvQ0FGNUZEUUFnTGlBT0lCVnFLZ0lBWGtVTkFDQXVJQXNnRm1vcUFnQmVSUTBBSUM0Z0FpQVdhaW9DQUY1RkRRQWdMaUFPSUJacUtnSUFYa1VOQUNBdUlBc2dFMm9xQWdCZVJRMEFJQzRnQWlBVGFpb0NBRjVGRFFBZ0xpQU9JQk5xS2dJQVhrVU5BQ0F1SUFzZ0lHb3FBZ0JlUlEwQUlDNGdEaUFnYWlvQ0FGNUZEUUFnTGlBTElCUnFLZ0lBWGtVTkFDQXVJQUlnRkdvcUFnQmVSUTBBSUM0Z0RpQVVhaW9DQUY1RkRRQWdMaUFMSUJwcUtnSUFYa1VOQUNBdUlBSWdHbW9xQWdCZVJRMEFJQzRnRGlBYWFpb0NBRjVGRFFBZ0xpQUxJQnRxS2dJQVhrVU5BQ0F1SUFJZ0cyb3FBZ0JlUlEwQUlDNGdEaUFiYWlvQ0FGNUZEUUFnTGlBTElCbHFLZ0lBWGtVTkFDQXVJQUlnR1dvcUFnQmVSUTBBSUM0Z0RpQVphaW9DQUY0TkFRc2dMaUF4WFVVTkFTQXVJQUlnSDJvcUFnQmRSUTBCSUM0Z0h5QUVRUUZxUVFKMElnNXFLZ0lBWFVVTkFTQXVJQXNnRldvcUFnQmRSUTBCSUM0Z0FpQVZhaW9DQUYxRkRRRWdMaUFPSUJWcUtnSUFYVVVOQVNBdUlBc2dGbW9xQWdCZFJRMEJJQzRnQWlBV2Fpb0NBRjFGRFFFZ0xpQU9JQlpxS2dJQVhVVU5BU0F1SUFzZ0Uyb3FBZ0JkUlEwQklDNGdBaUFUYWlvQ0FGMUZEUUVnTGlBT0lCTnFLZ0lBWFVVTkFTQXVJQXNnSUdvcUFnQmRSUTBCSUM0Z0RpQWdhaW9DQUYxRkRRRWdMaUFMSUJScUtnSUFYVVVOQVNBdUlBSWdGR29xQWdCZFJRMEJJQzRnRGlBVWFpb0NBRjFGRFFFZ0xpQUxJQnBxS2dJQVhVVU5BU0F1SUFJZ0dtb3FBZ0JkUlEwQklDNGdEaUFhYWlvQ0FGMUZEUUVnTGlBTElCdHFLZ0lBWFVVTkFTQXVJQUlnRzJvcUFnQmRSUTBCSUM0Z0RpQWJhaW9DQUYxRkRRRWdMaUFMSUJscUtnSUFYVVVOQVNBdUlBSWdHV29xQWdCZFJRMEJJQzRnRGlBWmFpb0NBRjFGRFFFTElBd2dMamdDSUNBTUlCRTJBaGdnRENBUU5nSVVJQXdnRHlBUUlDOFFxZ000QWlRZ0RFRUlhaUlDSUNjZ0JMTWdNQ0FRRU9nQ0lDWWdBaERuQWdzZ0JFRUJhaUVFREFFTEFBc0FDd0FMQWtBZ0JpZ0NCQ0FJS0FJRVJ3MEFJQWNvQWdRZ0NDZ0NCRUVCZGtjTkFDQUdLQUlJSUFnb0FnaEhEUVFnQnlnQ0NDQUlLQUlJUVFGMlJ3MEZRUUloQWdKL0lBY29BZ1JCQVd1elF3QUFBTCtTSWk0Z0xwSkRBQUFBUDVLT0lpNURBQUNBVDEwZ0xrTUFBQUFBWUhFRVFDQXVxUXdCQzBFQUN5SUVRUUpMSVFVZ0JFRUNJQVViSVI4Q2Z5QUhLQUlJUVFGcnMwTUFBQUMva2lJdUlDNlNRd0FBQUQrU2ppSXVRd0FBZ0U5ZElDNURBQUFBQUdCeEJFQWdMcWtNQVF0QkFBc2lCRUVDSUFSQkFrc2JJU0FnRWJJaE5RTkFJQUlnSUVZTkNTQUNzeUk0UXdBQUFEK1VRd0FBZ0w2U0lqQkRBQUFBUDVJaE1TQXdRd0FBQUwrU0lUTkJBaUVFSUFZZ0FrRUJheUlMRUUwaEdpQUdJQUlRVFNFVklBWWdBa0VCYWlJRkVFMGhGaUFJSUFzUVRTRVRJQWdnQWhCTklSc2dDQ0FGRUUwaEZBTkFJQVFnSDBZRVFDQUZJUUlNQWdVQ1FDQWJJQVJCQW5RaUMyb2lBaW9DQUJCd0lEUmREUUFnQkxNaU5rTUFBQUEvbEVNQUFJQytraUV2QWtBQ1FDQUNLZ0lBSWk0Z0dpQUVRUUZyUVFKMElnNXFJaU1xQWdCZVJRMEFJQzRnQ3lBYWFpb0NBRjVGRFFBZ0xpQWFJQVJCQVdwQkFuUWlHV29xQWdCZVJRMEFJQzRnRGlBVmFpb0NBRjVGRFFBZ0xpQUxJQlZxS2dJQVhrVU5BQ0F1SUJVZ0dXb3FBZ0JlUlEwQUlDNGdEaUFXYWlvQ0FGNUZEUUFnTGlBTElCWnFLZ0lBWGtVTkFDQXVJQllnR1dvcUFnQmVSUTBBSUM0Z0RpQVRhaW9DQUY1RkRRQWdMaUFMSUJOcUtnSUFYa1VOQUNBdUlCTWdHV29xQWdCZVJRMEFJQzRnRGlBYmFpb0NBRjVGRFFBZ0xpQVpJQnRxS2dJQVhrVU5BQ0F1SUE0Z0ZHb3FBZ0JlUlEwQUlDNGdDeUFVYWlvQ0FGNUZEUUFnTGlBVUlCbHFLZ0lBWGtVTkFDQUhJQzlEQUFBQXY1SWlNaUF6RUVrZ0xsMUZEUUFnQWlvQ0FDQUhJQzhnTXhCSlhrVU5BQ0FDS2dJQUlBY2dMME1BQUFBL2tpSXVJRE1RU1Y1RkRRQWdBaW9DQUNBSElESWdNQkJKWGtVTkFDQUNLZ0lBSUFjZ0x5QXdFRWxlUlEwQUlBSXFBZ0FnQnlBdUlEQVFTVjVGRFFBZ0Fpb0NBQ0FISURJZ01SQkpYa1VOQUNBQ0tnSUFJQWNnTHlBeEVFbGVSUTBBSUFJcUFnQWdCeUF1SURFUVNWNE5BUXNnQWlvQ0FDSXVJQ01xQWdCZFJRMEJJQzRnQ3lBYWFpb0NBRjFGRFFFZ0xpQWFJQVJCQVdwQkFuUWlHV29xQWdCZFJRMEJJQzRnRGlBVmFpb0NBRjFGRFFFZ0xpQUxJQlZxS2dJQVhVVU5BU0F1SUJVZ0dXb3FBZ0JkUlEwQklDNGdEaUFXYWlvQ0FGMUZEUUVnTGlBTElCWnFLZ0lBWFVVTkFTQXVJQllnR1dvcUFnQmRSUTBCSUM0Z0RpQVRhaW9DQUYxRkRRRWdMaUFMSUJOcUtnSUFYVVVOQVNBdUlCTWdHV29xQWdCZFJRMEJJQzRnRGlBYmFpb0NBRjFGRFFFZ0xpQVpJQnRxS2dJQVhVVU5BU0F1SUE0Z0ZHb3FBZ0JkUlEwQklDNGdDeUFVYWlvQ0FGMUZEUUVnTGlBVUlCbHFLZ0lBWFVVTkFTQUhJQzlEQUFBQXY1SWlNaUF6RUVrZ0xsNUZEUUVnQWlvQ0FDQUhJQzhnTXhCSlhVVU5BU0FDS2dJQUlBY2dMME1BQUFBL2tpSXVJRE1RU1YxRkRRRWdBaW9DQUNBSElESWdNQkJKWFVVTkFTQUNLZ0lBSUFjZ0x5QXdFRWxkUlEwQklBSXFBZ0FnQnlBdUlEQVFTVjFGRFFFZ0Fpb0NBQ0FISURJZ01SQkpYVVVOQVNBQ0tnSUFJQWNnTHlBeEVFbGRSUTBCSUFJcUFnQWdCeUF1SURFUVNWMUZEUUVMSUF3Z0VUWUNHQ0FNSUJBMkFoUWdEQ0FDS2dJQU9BSWdJQXdnRHlBUUlEVVFxZ000QWlRZ0RFRUlhaUlDSUNjZ05pQTRJQkFRNkFJZ0ppQUNFT2NDQ3lBRVFRRnFJUVFNQVFzQUN3QUxBQXNnQXlFRUlBZ29BZ1FnQmlnQ0JFRUJka2NOQ1NBSEtBSUVJQVlvQWdSQkFYWkhEUWtnQ0NnQ0NDQUdLQUlJUVFGMlJ3MEZJQWNvQWdnZ0JpZ0NDRUVCZGtjTkJrRUJJUUlnQ0NnQ0JFRUJheUlFUVFFZ0JFRUJTeHNoSHlBSUtBSUlRUUZySWdSQkFTQUVRUUZMR3lFZ0lCR3lJVFVEUUNBQ0lDQkdEUWhCQVNFRUlBSkJBWFN6UXdBQUFEK1NJakJEQUFBQVFKSWhNU0F3UXdBQUFNQ1NJVE1nQXJNaE9DQUlJQUpCQVdzaUN4Qk5JUm9nQ0NBQ0VFMGhHeUFJSUFKQkFXb2lCUkJOSVJVZ0J5QUxFRTBoRmlBSElBSVFUU0VUSUFjZ0JSQk5JUlFEUUNBRUlCOUdCRUFnQlNFQ0RBSUZBa0FnR3lBRVFRSjBJZ3RxSWdJcUFnQVFjQ0EwWFEwQUlBUkJBWFN6UXdBQUFEK1NJUzhDUUFKQUlBSXFBZ0FpTGlBYUlBUkJBV3RCQW5RaURtb2lJeW9DQUY1RkRRQWdMaUFMSUJwcUtnSUFYa1VOQUNBdUlCb2dCRUVCYWtFQ2RDSVphaW9DQUY1RkRRQWdMaUFPSUJ0cUtnSUFYa1VOQUNBdUlCa2dHMm9xQWdCZVJRMEFJQzRnRGlBVmFpb0NBRjVGRFFBZ0xpQUxJQlZxS2dJQVhrVU5BQ0F1SUJVZ0dXb3FBZ0JlUlEwQUlDNGdEaUFXYWlvQ0FGNUZEUUFnTGlBTElCWnFLZ0lBWGtVTkFDQXVJQllnR1dvcUFnQmVSUTBBSUM0Z0RpQVRhaW9DQUY1RkRRQWdMaUFMSUJOcUtnSUFYa1VOQUNBdUlCTWdHV29xQWdCZVJRMEFJQzRnRGlBVWFpb0NBRjVGRFFBZ0xpQUxJQlJxS2dJQVhrVU5BQ0F1SUJRZ0dXb3FBZ0JlUlEwQUlBWWdMME1BQUFEQWtpSXlJRE1RU1NBdVhVVU5BQ0FDS2dJQUlBWWdMeUF6RUVsZVJRMEFJQUlxQWdBZ0JpQXZRd0FBQUVDU0lpNGdNeEJKWGtVTkFDQUNLZ0lBSUFZZ01pQXdFRWxlUlEwQUlBSXFBZ0FnQmlBdklEQVFTVjVGRFFBZ0Fpb0NBQ0FHSUM0Z01CQkpYa1VOQUNBQ0tnSUFJQVlnTWlBeEVFbGVSUTBBSUFJcUFnQWdCaUF2SURFUVNWNUZEUUFnQWlvQ0FDQUdJQzRnTVJCSlhnMEJDeUFDS2dJQUlpNGdJeW9DQUYxRkRRRWdMaUFMSUJwcUtnSUFYVVVOQVNBdUlCb2dCRUVCYWtFQ2RDSVphaW9DQUYxRkRRRWdMaUFPSUJ0cUtnSUFYVVVOQVNBdUlCa2dHMm9xQWdCZFJRMEJJQzRnRGlBVmFpb0NBRjFGRFFFZ0xpQUxJQlZxS2dJQVhVVU5BU0F1SUJVZ0dXb3FBZ0JkUlEwQklDNGdEaUFXYWlvQ0FGMUZEUUVnTGlBTElCWnFLZ0lBWFVVTkFTQXVJQllnR1dvcUFnQmRSUTBCSUM0Z0RpQVRhaW9DQUYxRkRRRWdMaUFMSUJOcUtnSUFYVVVOQVNBdUlCTWdHV29xQWdCZFJRMEJJQzRnRGlBVWFpb0NBRjFGRFFFZ0xpQUxJQlJxS2dJQVhVVU5BU0F1SUJRZ0dXb3FBZ0JkUlEwQklBWWdMME1BQUFEQWtpSXlJRE1RU1NBdVhrVU5BU0FDS2dJQUlBWWdMeUF6RUVsZFJRMEJJQUlxQWdBZ0JpQXZRd0FBQUVDU0lpNGdNeEJKWFVVTkFTQUNLZ0lBSUFZZ01pQXdFRWxkUlEwQklBSXFBZ0FnQmlBdklEQVFTVjFGRFFFZ0Fpb0NBQ0FHSUM0Z01CQkpYVVVOQVNBQ0tnSUFJQVlnTWlBeEVFbGRSUTBCSUFJcUFnQWdCaUF2SURFUVNWMUZEUUVnQWlvQ0FDQUdJQzRnTVJCSlhVVU5BUXNnRENBUk5nSVlJQXdnRURZQ0ZDQU1JQUlxQWdBNEFpQWdEQ0FQSUJBZ05SQ3FBemdDSkNBTVFRaHFJZ0lnSnlBRXN5QTRJQkFRNkFJZ0ppQUNFT2NDQ3lBRVFRRnFJUVFNQVFzQUN3QUxBQXNnREVFd2FpUUFEQWtMUWZDdkJFR0hsQUVRTWtHVUVoQXlRYjhjRURKQndBRVFOVUg1SUJBeVFidVVBUkF5RURZTUJndEI4SzhFUWFlWUFSQXlRWlFTRURKQnZ4d1FNa0hCQVJBMVFma2dFREpCdTVRQkVESVFOZ3dGQzBId3J3UkJoNVFCRURKQmxCSVFNa0cvSEJBeVFaVUNFRFZCK1NBUU1rRzdsQUVRTWhBMkRBUUxRZkN2QkVIRm1nRVFNa0dVRWhBeVFiOGNFREpCbGdJUU5VSDVJQkF5UWJ1VUFSQXlFRFlNQXd0QjhLOEVRZFNjQVJBeVFaUVNFREpCdnh3UU1rSHFBaEExUWZrZ0VESkJ1NVFCRURJUU5nd0NDMEh3cndSQnQ1NEJFREpCbEJJUU1rRy9IQkF5UWVzQ0VEVkIrU0FRTWtHN2xBRVFNaEEyREFFTElBTWhCQXdCQ3dzTUFnc2dMQkIzSUI1QjhJc0JFSk1CSVJWQkFDRUxRUUFoRUNNQVFkQUFheUlDSkFBZ0RVRWdhaUVTSUExQlBHb2hEQ0FOS2dJMEVIQWhNU0FOS2dJNFF3QUFnRCtTRUhBZ0RTb0NPSlVoTXdKQUFrQUNRQU5BSUF3UWd3RWdDMHNFUUNBTUlBc1FwUUVpQ0NnQ0VDQVNLQUlRVGcwQ0lBZ29BZ3doQkNBU0tBSVFJUU1nQ0NnQ0VDRUZJQUpCQkdvZ0FpQUlLZ0lBSUFncUFnUWdDQ2dDREJDWkJBSi9JQUlxQWdCREFBQUFQNUlpTG90REFBQUFUMTBFUUNBdXFBd0JDMEdBZ0lDQWVBc2hCd0ovSUFJcUFnUkRBQUFBUDVJaUxvdERBQUFBVDEwRVFDQXVxQXdCQzBHQWdJQ0FlQXNoRGdKQUFuOGdFaUFESUFSc0lBVnFJZ1ZCQVdzUVRDRURJQklnQlJCTUlRUUNRQUpBQWtBQ1FBSkFBa0FnRWlBRlFRRnFFRXdpQmlnQ0JDQURLQUlFSUFRb0FnUkdSZ1JBSUFZb0FnZ2dBeWdDQ0NBRUtBSUlSa2NOQWlNQVFTQnJJZ1VrQUFKQUFrQUNRQUpBQWtBQ1FBSkFJQTVCQUV3TkFDQUVLQUlFSUE1QkFXcE5EUUFnQjBFQVRBMEJJQWRCQVdvaUVTQUVLQUlJVHcwQklBTW9BZ1FnQkNnQ0JFY05BaUFES0FJRUlBWW9BZ1JIRFFNZ0F5Z0NDQ0FFS0FJSVJ3MEVJQU1vQWdnZ0JpZ0NDRWNOQlNBRElBZEJBV3NpRmhCTklSTWdBeUFIRUUwaEZDQURJQkVRVFNFYUlBUWdCeEJOSVJzZ0JpQVdFRTBoRmlBR0lBY1FUU0VaSUFZZ0VSQk5JUVlnQlVFY2FpQUZRUmhxSUFWQkZHb2dCVUVRYWlBRlFReHFJQVFnRGlBSEVKTUVJQm9nRGtFQ2RDSURhaW9DQUNFMElBTWdFMm9xQWdBaE1pQURJQVpxS2dJQUlUVWdBeUFXYWlvQ0FDRTRJQU1nR1dvaUJpb0NBQ0V1SUFNZ0ZHb2lFU29DQUNFdklBTWdHMm9xQWdBaE1DQVJLZ0lFSVRZZ0VVRUVheW9DQUNFM0lBWXFBZ1FoT1NBR1FRUnJLZ0lBSVRvZ0FpQUZLZ0lVT0FJZ0lBSWdCU29DRENJN09BSXNJQUlnT3pnQ0pDQUNJRGNnTnBNZ09TQTZrNUpEQUFDQVBwUWlOamdDS0NBRktnSVFJVGNnQWlBdUlDOGdNQ0F3a3BPU09BSkFJQUlnTWlBMGt5QTFJRGlUa2tNQUFJQStsQ0l3T0FJOElBSWdOamdDT0NBQ0lEQTRBalFnQWlBM09BSXdJQUlnQlNvQ0hJdzRBaFFnQlNvQ0dDRXdJQUlnTGlBdmswTUFBQUMvbERnQ0hDQUNJRENNT0FJWUlBVkJJR29rQUF3R0MwSHdyd1JCMjdzQkVESkJ2cklCRURKQnZ4d1FNa0cxQWhBMVFma2dFREpCbGJ3QkVESVFOZ3dNQzBId3J3UkIzN3dCRURKQnZySUJFREpCdnh3UU1rRzJBaEExUWZrZ0VESkJtcjBCRURJUU5nd0xDMEh3cndSQjNiMEJFREpCdnJJQkVESkJ2eHdRTWtHM0FoQTFRZmtnRURKQmtiNEJFRElRTmd3S0MwSHdyd1JCL0w0QkVESkJ2cklCRURKQnZ4d1FNa0c0QWhBMVFma2dFREpCa2I0QkVESVFOZ3dKQzBId3J3UkJ4cjhCRURKQnZySUJFREpCdnh3UU1rRzVBaEExUWZrZ0VESkJrYjRCRURJUU5nd0lDMEh3cndSQnJNQUJFREpCdnJJQkVESkJ2eHdRTWtHNkFoQTFRZmtnRURKQmtiNEJFRElRTmd3SEN3d0JDd0pBSUFNb0FnUWdCQ2dDQkVjTkFDQUdLQUlFSUFRb0FnUkJBWFpIRFFBZ0F5Z0NDQ0FFS0FJSVJ3MERJQVlvQWdnZ0JDZ0NDRUVCZGtjTkF5TUFRU0JySWdVa0FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FnRGtFQVRBMEFJQVFvQWdRZ0RrRUJhazBOQUNBSFFRQk1EUUVnQjBFQmFpSVJJQVFvQWdoUERRRWdBeWdDQkNBRUtBSUVSdzBDSUFZb0FnUWdBeWdDQkVFQmRrY05BeUFES0FJSUlBUW9BZ2hIRFFRZ0JpZ0NDQ0FES0FJSVFRRjJSdzBGSUFNZ0IwRUJheEJOSVJZZ0F5QUhFRTBoRXlBRElCRVFUU0VVSUFRZ0J4Qk5JUm9nQlVFY2FpQUZRUmhxSUE2eUlBZXlRUUVRbVFRZ0JTb0NIQ0l1UXdBQUFMK1NRd0FBQUFCZ1JRMEdJQVVxQWhoREFBQUF2NUpEQUFBQUFHQkZEUWNnQmlnQ0JMTWdMa01BQUFBL2tsNUZEUWdnQmlnQ0NMTWdCU29DR0VNQUFBQS9rbDVGRFFrZ0JVRVVhaUFGUVJCcUlBVkJER29nQlVFSWFpQUZRUVJxSUFRZ0RpQUhFSk1FSUFZZ0JTb0NIQ0FGS2dJWUVFa2hMaUFUSUE1QkFuUWlBMm9pRVNvQ0FDRXZJQU1nR21vcUFnQWhNQ0FSUVFScktnSUFJVFFnQmlBRktnSWNRd0FBQUQrU0lBVXFBaGdRU1NFeUlCRXFBZ1FoTlNBR0lBVXFBaHhEQUFBQXY1SWdCU29DR0JCSklUZ2dBeUFXYWlvQ0FDRTJJQVlnQlNvQ0hDQUZLZ0lZUXdBQUFEK1NFRWtoTnlBRElCUnFLZ0lBSVRrZ0JpQUZLZ0ljSUFVcUFoaERBQUFBdjVJUVNTRTZJQUlnQlNvQ0REZ0NJQ0FDSUFVcUFnUWlPemdDTENBQ0lEUWdNcElnTlNBNGtwTkRBQUNBUHBRaU5EZ0NLQ0FDSURzNEFpUWdCU29DQ0NFeUlBSWdMaUF2SURBZ01KS1RramdDUUNBQ0lEWWdONUlnT1NBNmtwTkRBQUNBUHBRaU1EZ0NQQ0FDSURRNEFqZ2dBaUF3T0FJMElBSWdNamdDTUNBQ0lBVXFBaFNNT0FJVUlBVXFBaEFoTUNBQ0lDNGdMNU5EQUFBQXY1UTRBaHdnQWlBd2pEZ0NHQ0FGUVNCcUpBQU1DZ3RCOEs4RVFkdTdBUkF5UWI2eUFSQXlRYjhjRURKQm5RTVFOVUg1SUJBeVFaVzhBUkF5RURZTUVBdEI4SzhFUWQrOEFSQXlRYjZ5QVJBeVFiOGNFREpCbmdNUU5VSDVJQkF5UVpxOUFSQXlFRFlNRHd0QjhLOEVRZDI5QVJBeVFiNnlBUkF5UWI4Y0VESkJud01RTlVINUlCQXlRWkcrQVJBeUVEWU1EZ3RCOEs4RVFiN0NBUkF5UWI2eUFSQXlRYjhjRURKQm9BTVFOVUg1SUJBeVFaRytBUkF5RURZTURRdEI4SzhFUWNhL0FSQXlRYjZ5QVJBeVFiOGNFREpCb1FNUU5VSDVJQkF5UVpHK0FSQXlFRFlNREF0QjhLOEVRYUREQVJBeVFiNnlBUkF5UWI4Y0VESkJvZ01RTlVINUlCQXlRWkcrQVJBeUVEWU1Dd3RCOEs4RVFmM0RBUkF5UWI2eUFSQXlRYjhjRURKQnJBTVFOVUg1SUJBeVFhYkVBUkF5RURZTUNndEI4SzhFUVp2R0FSQXlRYjZ5QVJBeVFiOGNFREpCclFNUU5VSDVJQkF5UWZiR0FSQXlFRFlNQ1F0QjhLOEVRZDdIQVJBeVFiNnlBUkF5UWI4Y0VESkJyZ01RTlVINUlCQXlRYWJFQVJBeUVEWU1DQXRCOEs4RVFidklBUkF5UWI2eUFSQXlRYjhjRURKQnJ3TVFOVUg1SUJBeVFmYkdBUkF5RURZTUJ3c01BUXNnQkNnQ0JDQURLQUlFUVFGMlJ3MEVJQVFvQWdRZ0JpZ0NCRWNOQkNBRUtBSUVJQU1vQWdSQkFYWkhEUU1nQkNnQ0JDQUdLQUlFUncwREl3QkJJR3NpQlNRQUFrQUNRQUpBQWtBQ1FBSkFBa0FnRGtFQVRBMEFJQVFvQWdRZ0RrRUJhazBOQUNBSFFRQk1EUUVnQjBFQmFpSVJJQVFvQWdoUERRRWdCQ2dDQkNBREtBSUVRUUYyUncwQ0lBWW9BZ1FnQXlnQ0JFRUJka2NOQXlBRUtBSUlJQU1vQWdoQkFYWkhEUVFnQmlnQ0NDQURLQUlJUVFGMlJ3MEZJQVFnQnhCTklSWWdCaUFIUVFGckVFMGhFeUFHSUFjUVRTRVVJQVlnRVJCTklSb2dCVUVjYWlBRlFSaHFJQTZ5SUFleVFRRVE2QUlnQlVFVWFpQUZRUkJxSUFWQkRHb2dCVUVJYWlBRlFRUnFJQVFnRGlBSEVKTUVJQU1nQlNvQ0hDQUZLZ0lZRUVraExpQVVJQTVCQW5RaUJtb2lFU29DQUNFdklBWWdGbW9xQWdBaE1DQURJQVVxQWh4REFBQUF3SklnQlNvQ0dCQkpJVFFnRVNvQ0JDRXlJQU1nQlNvQ0hFTUFBQUJBa2lBRktnSVlFRWtoTlNBUlFRUnJLZ0lBSVRnZ0F5QUZLZ0ljSUFVcUFoaERBQUFBd0pJUVNTRTJJQVlnR21vcUFnQWhOeUFESUFVcUFod2dCU29DR0VNQUFBQkFraEJKSVRrZ0JpQVRhaW9DQUNFNklBSWdCU29DRERnQ0lDQUNJQVVxQWdRaU96Z0NMQ0FDSURRZ01wSWdOU0E0a3BOREFBQ0FQcFFpTkRnQ0tDQUNJRHM0QWlRZ0JTb0NDQ0V5SUFJZ0x5QXVJREFnTUpLVGtqZ0NRQ0FDSURZZ041SWdPU0E2a3BOREFBQ0FQcFFpTURnQ1BDQUNJRFE0QWpnZ0FpQXdPQUkwSUFJZ01qZ0NNQ0FDSUFVcUFoU01PQUlVSUFVcUFoQWhNQ0FDSUM4Z0xwTkRBQUFBdjVRNEFod2dBaUF3akRnQ0dDQUZRU0JxSkFBTUJndEI4SzhFUWR1N0FSQXlRYjZ5QVJBeVFiOGNFREpCNXdJUU5VSDVJQkF5UVpXOEFSQXlFRFlNQ3d0QjhLOEVRZCs4QVJBeVFiNnlBUkF5UWI4Y0VESkI2QUlRTlVINUlCQXlRWnE5QVJBeUVEWU1DZ3RCOEs4RVFhM0pBUkF5UWI2eUFSQXlRYjhjRURKQjZRSVFOVUg1SUJBeVFaRytBUkF5RURZTUNRdEI4SzhFUWI3Q0FSQXlRYjZ5QVJBeVFiOGNFREpCNmdJUU5VSDVJQkF5UVpHK0FSQXlFRFlNQ0F0QjhLOEVRWnpLQVJBeVFiNnlBUkF5UWI4Y0VESkI2d0lRTlVINUlCQXlRWkcrQVJBeUVEWU1Cd3RCOEs4RVFhRERBUkF5UWI2eUFSQXlRYjhjRURKQjdBSVFOVUg1SUJBeVFaRytBUkF5RURZTUJnc0xRUUVNQlF0QjhLOEVRZWkyQVJBeVFiNnlBUkF5UWI4Y0VESkIwZ01RTlVINUlCQXlRYSszQVJBeUVEWU1Bd3RCOEs4RVFZZTRBUkF5UWI2eUFSQXlRYjhjRURKQjFRTVFOVUg1SUJBeVFhKzNBUkF5RURZTUFndEI4SzhFUWVpNEFSQXlRYjZ5QVJBeVFiOGNFREpCMkFNUU5VSDVJQkF5UWErM0FSQXlFRFlNQVF0QjhLOEVRWWE2QVJBeVFiNnlBUkF5UWI4Y0VESkIyd01RTlVINUlCQXlRWis2QVJBeUVEWUxEQWdMUlEwQUl3QkJNR3NpQXlRQUlBSXFBa0FoTGlBQ0tnSWtFSEFoTHlBQ0tnSWtJakFnTUpJZ0Fpb0NLQ0l3bENBQ0tnSTBsQ0F1SUMrVWt5QUNLZ0l3SURBUWNKU1RJQUlxQWlBZ0Fpb0NOQkJ3bEpNZ0Fpb0NJQ0FDS2dJd2xDQUNLZ0pBbEpJaUxvdERBQUFBTkY4aUJVVUVRQ0FEUXdBQWdEOGdMcFVpTGlBQ0tnSXdJQUlxQWpRZ0Fpb0NRQkNPQkpRNEFnQWdBeUF1SUFJcUFpZ2dBaW9DSkNBQ0tnSkFJQUlxQWp3UXBBR1VPQUlFSUFNZ0xpQUNLZ0lrSUFJcUFpZ2dBaW9DTUNBQ0tnSTBFS1FCbERnQ0NDQURJQzRnQWlvQ0lDQUNLZ0lvSUFJcUFrQVFqZ1NVT0FJUUlBTWdMaUFDS2dJb0lBSXFBaUFnQWlvQ05DQUNLZ0lzRUtRQmxEZ0NGQ0FESUM0Z0Fpb0NJQ0FDS2dJa0lBSXFBakFRamdTVU9BSWdJQU1nQXlvQ0JEZ0NEQ0FESUFNcUFnZzRBaGdnQXlBREtnSVVPQUljQ3lBRlJTSUZCRUFnQWlBREtnSUlJQUlxQWh5VUlBTXFBZ0FnQWlvQ0ZKUWdBeW9DQkNBQ0tnSVlsSktTT0FJSUlBSWdBeW9DRkNBQ0tnSWNsQ0FES2dJTUlBSXFBaFNVSUFNcUFoQWdBaW9DR0pTU2tqZ0NEQ0FDSUFNcUFpQWdBaW9DSEpRZ0F5b0NHQ0FDS2dJVWxDQURLZ0ljSUFJcUFoaVVrcEk0QWhBTElBTkJNR29rQUNBRlJRMEFJQUlxQWdnUWNDQUNLZ0lNRUhDU0lBMHFBbGhlRFFBZ0Fpb0NJQ0FDS2dJd2xDQUNLZ0lrRUhDVElpNURBQUFBQUZ3RVFDQUlJQUlxQWlBZ0Fpb0NNSklRY0NBdWxUZ0NJQXNnTGtNQUFBQUFXdzBBSUFncUFoZ2dCQ0FIRUUwZ0RrRUNkQ0lEYWlvQ0FGd05CQ0FJSUFRZ0J4Qk5JQU5xS2dJQUlBSXFBaHdnQWlvQ0VKUWdBaW9DRkNBQ0tnSUlJaTZVSUFJcUFoZ2dBaW9DRENJdmxKS1NremdDR0NBSUlBaEJCR29nTGlBQ0tnSUVraUF2SUFJcUFnQ1NJQWdvQWd3UTZBSWdDQ0FDS2dJUUlBZ29BaEN5a2lJdU9BSVVJQWdnTGlBU0tBSVFzaERtQWpnQ0ZDQXpJQWdxQWlDTFhrVU5BQ0FJS2dJWUVIQWdNV0JGRFFBZ0NDb0NBQ0l1UXdBQUFBQmdSUTBBSUM0Z0VrRUFFRXdvQWdTelhVVU5BQ0FJS2dJRUlpNURBQUFBQUdCRkRRQWdMaUFTUVFBUVRDZ0NDTE5kUlEwQUlBZ2dEeUFJS0FJTUlBZ3FBaFFRcWdNNEFod2dEQ0FRRUtVQklBaEJKQkEvR2lBUVFRRnFJUkFMSUF0QkFXb2hDd3dCQ3dzQ1FDQVFJQXdRZ3dFaUJFc0VRQ01BUVNCcklnY2tBQUpBSUJBZ0JHc2lCQ0FNRURRb0FnQWdEQ2dDQkd0QkpHMU5CRUFqQUVFUWF5SURKQUFnQXlBTUlBUVF3d1lpQkNnQ0JDRUdJQVFvQWdnaEJRTkFJQVVnQmtZRVFDQUVFRzRnQTBFUWFpUUFCU0FNRURRYUlBWVF3QVlnQkNBR1FTUnFJZ1kyQWdRTUFRc0xEQUVMSUF3UU5DRURJQWRCQ0dvZ0RDQU1FSU1CSUFScUVNRUdJQXdRZ3dFZ0F4Q1lCQ0VGSXdCQkVHc2lBeVFBSUFNZ0JTZ0NDRFlDQUNBRktBSUlJUVlnQXlBRlFRaHFOZ0lJSUFNZ0JpQUVRU1JzYWpZQ0JDQURLQUlBSVFRRFFDQURLQUlFSUFSSEJFQWdCU2dDRUJvZ0F5Z0NBQkRBQmlBRElBTW9BZ0JCSkdvaUJEWUNBQXdCQ3dzZ0F4Q3FBU0FEUVJCcUpBQWdEQ0FGRUpjRUlBVVFsZ1FMSUFkQklHb2tBQXdCQ3lBRUlCQkxCRUFnRENnQ0FDQVFRU1JzYWlFRUlBd1Fnd0VoQXlBTUlBUVEwUVlnRENBREVPQUdDd3NnQWtIUUFHb2tBQXdDQzBId3J3UkJ5YXNCRURKQmxCSVFNa0cvSEJBeVFla0RFRFZCK1NBUU1rR1JyQUVRTWhBMkRBTUxRZkN2QkVIcnJBRVFNa0dVRWhBeVFiOGNFREpCamdRUU5VSDVJQkF5UWFTdEFSQXlFRFlNQWdzZ0ZSQjNJQjVCNVkwQkVKTUJJUlVqQUVFUWF5SVJKQUFDUUFKQUFrQUNRQ0FOUVR4cUlnZ1Fnd0VnRFNnQ1ZFc0VRQ0FOUVJCcUlnWVFWaUFOS0FJSVJ3MEJJQVpCQUJDV0FSQldJQTBvQWd4SERRSWdFUkJJSVJBZ0RTZ0NDQ0VDSUEwb0Fnd2hBeUFOS0FJQUlRVWdEU2dDQkNFSElBMG9BbFFoRENNQVFTQnJJZ1FrQUNBRnNpQUNzcFdOSVM0Z0I3SWdBN0tWalNFdklCQVFtd1FnRUNBTUVLQUVJQUlnQTJ3aEZrRUFJUTREUUFKQVFRQWhBaUFHRUZZZ0RrMEVRQUovSUMrTFF3QUFBRTlkQkVBZ0w2Z01BUXRCZ0lDQWdIZ0xzaUV2QW44Z0xvdERBQUFBVDEwRVFDQXVxQXdCQzBHQWdJQ0FlQXV5SVM0RFFDQUVJQUkyQWh3Z0NCQ0RBU0FDVFFSQUlBd2dGbTBoRmtFQUlRNERRRUVBSVF3Z0JoQldJQTVOQkVBZ0JFRWdhaVFBREFVTEEwQWdCaUFPRUpZQkVGWWdERTBFUUNBT1FRRnFJUTRNQWdzZ0JDQUdJQTRRbGdFZ0RCQ1dBU0lIRUVJMkFoQWdCQ0FXTmdJY0FrQWdCRUVRYWlBRVFSeHFFUHdCS0FJQUloSkZEUUFnQnhDM0FpRURJQVFnQnhDM0FqWUNFQ0FFUVJCcUlCSVErQUVoQlNBSEVPVUNJUXNqQUVFUWF5SVRKQUFqQUVGQWFpSUNKQUFnQWlBRk5nSXdJQUlnQXpZQ09DQUNJQXMyQWlnRFFBSkFJQUpCTUdvZ0FrRW9haEN5QVEwQUFrQUNRQUpBSUFKQktHb2dBa0U0YWhDZEF5SUREZ1FEQXdBQkFnc2dBa0VvYWhEU0FTZ0NBQ0FDS0FJNEVKUUJSUTBDSUFJb0FqZ2dBaWdDS0JESUFRd0NDeUFDSUFJb0FqZ2lBellDSUNBRElBSkJJR29Rb3dFb0FnQWdBa0VvYWhEU0FTZ0NBQkM5QmhvTUFRc2dBMEVIVEFSQUlBSW9BamdoQXlBQ0tBSW9JUXNqQUVFZ2F5SUZKQUFnQlNBRE5nSVlJQVVnQ3pZQ0VDQUZRUkJxRU5JQkdnTkFJQVZCR0dvZ0JVRVFhaENDQVFSQUlBVW9BaGdoRkNNQVFTQnJJZ01rQUNBRElBczJBaEFnQXlBVU5nSVlBa0FnQTBFWWFpQURRUkJxRUlJQlJRMEFJQU1nQXlnQ0dEWUNDQU5BSUFOQkNHb1Fvd0VnQTBFUWFoQ0NBVVVOQVNBREtBSUlJQU1vQWhnUWxBRkZEUUFnQXlBREtBSUlOZ0lZREFBTEFBc2dBeWdDR0NFVUlBTkJJR29rQUNBRklCUTJBZ2dnQlVFSWFpQUZRUmhxRUlJQkJFQWdCU2dDR0NBRktBSUlFTWdCQ3lBRlFSaHFFS01CR2d3QkN3c2dCVUVnYWlRQURBRUxJQUlnQWtFNGFpQURRUUYyRVBnQklnTTJBaUFnQWlBQ0tBSW9OZ0lZSUFJb0FqZ2dBeUFDUVJocUVOSUJLQUlBRUwwR0lRc2dBaUFDS0FJNE5nSVFJQUlnQWlnQ0dEWUNDQUpBSUFJb0FoQWdBaWdDSUJDVUFVVUVRQ0FDUVJCcUlSUWdBa0VJYWlFRklBSW9BaUFoR2lNQVFSQnJJZ01rQUNBRElCbzJBZ2dEUUNBVUlBVVEwZ0VRc2dFaUdrVUVRQ0FGS0FJQUlBTW9BZ2dRbEFGRkRRRUxDeUFEUVJCcUpBQWdHa0VCYzBVTkFTQUNLQUlRSUFJb0FnZ1F5QUVnQzBFQmFpRUxDeUFDUVJCcUlnTVFvd0VhQWtBZ0F5QUNRUWhxRVBvQlJRMEFBMEFnQWlnQ0VDQUNLQUlnRUpRQkJFQWdBa0VRYWhDakFSb01BUXNEUUNBQ1FRaHFFTklCS0FJQUlBSW9BaUFRbEFGRkRRQUxJQUpCRUdvZ0FrRUlhaEM4QmcwQklBSkJFR29pQXlnQ0FDQUNLQUlJRU1nQklBSkJJR29nQXhDeUFRUkFJQUlnQWlnQ0NEWUNJQXNnQzBFQmFpRUxJQUpCRUdvUW93RWFEQUFMQUFzQ1FDQUNRUkJxSUFKQklHb1FnZ0ZGRFFBZ0FpZ0NJQ0FDS0FJUUVKUUJSUTBBSUFJb0FoQWdBaWdDSUJESUFTQUxRUUZxSVFzTElBSkJNR29nQWtFUWFoQ3lBUTBCQWtBZ0N3MEFJQUpCTUdvZ0FrRVFhaEQ2QVFSQUlBSWdBaWdDT0NJRE5nSWdJQUlnQXpZQ0NBTkFJQUpCQ0dvUW93RWdBa0VRYWhDeUFRMEVJQUlvQWdnZ0FpZ0NJQkNVQVEwQ0lBSWdBaWdDQ0RZQ0lBd0FDd0FMSUFJZ0FpZ0NFQ0lETmdJZ0lBSWdBellDQ0FOQUlBSkJDR29Rb3dFZ0FrRW9haEN5QVEwRElBSW9BZ2dnQWlnQ0lCQ1VBUTBCSUFJZ0FpZ0NDRFlDSUF3QUN3QUxJQUpCTUdvZ0FrRVFhaEQ2QVFSQUlBSWdBaWdDRURZQ0tBd0RDeUFDSUFKQkVHb1Fvd0VvQWdBMkFqZ01BZ3NnQWtFUWFoQ2pBUm9nQWlBQ0tBSW9OZ0lJSUFJb0FqZ2dBa0VJYWhEU0FTZ0NBQkNVQVVVRVFBTkFJQUpCRUdvZ0FrRUlhaEN5QVEwQ0lBSW9BamdnQWlnQ0VCQ1VBUVJBSUFKQkVHb2lBeWdDQUNBQ0tBSUlFTWdCSUFNUW93RWFCU0FDUVJCcUVLTUJHZ3dCQ3dzTElBSkJFR29nQWtFSWFoQ3lBUTBBQTBBQ1FDQUNLQUk0SUFJb0FoQVFsQUVFUUFOQUlBSW9BamdnQWtFSWFoRFNBU2dDQUJDVUFRMEFDeUFDUVJCcUlBSkJDR29RdkFZTkFTQUNLQUlRSUFJb0FnZ1F5QUVMSUFKQkVHb1Fvd0VhREFFTEN5QUNRVEJxSUFKQkVHb1ErZ0VOQUNBQ0lBSW9BaEEyQWpnTUFRc0xJQUpCUUdza0FDQVRRUkJxSkFBQ1FDQUhFRUlnRWs4TkFDQUhRUUFRVWlvQ0FDQUhJQklRVWlvQ0FHQU5BRUh3cndSQi9xMEJFREpCbEJJUU1rRy9IQkF5UVpVRkVEVkIrU0FRTWtHNHJnRVFNaEEyREE4TFFRQWhBZ05BSUFJZ0VrWU5BU0FRSUFnZ0J5QUNFRklvQWdRUXBRRVE1d0lnQWtFQmFpRUNEQUFMQUFzZ0RFRUJhaUVNREFBTEFBc0FCUUovSUFnZ0JDZ0NIQkNsQVNJQ0tnSUVJQytWSWpDTFF3QUFBRTlkQkVBZ01LZ01BUXRCZ0lDQWdIZ0xJUU1nQmdKL0lBSXFBZ0FnTHBVaU1JdERBQUFBVDEwRVFDQXdxQXdCQzBHQWdJQ0FlQXNRbGdFZ0F4Q1dBU0VESUFRZ0Fpb0NHSXM0QWd3Z0JFRVFhaUlISUFRcUFndzRBZ0FnQnlBRUtBSWNOZ0lFQWtBZ0F5Z0NCQ0FERURRb0FnQkpCRUFnQXlBSEVLZ0REQUVMUVFBaEN5TUFRU0JySWc0a0FDQURFRFFpRXdKL0lBTWdBeEJDUVFGcUVLSURJUVVnQXhCQ0lSUWpBRUVRYXlJU0pBQWdFa0VBTmdJTUlBNUJDR29pQWtFTWFpQVRFTHNCSUFVRVFDQUNLQUlRR2lBRlFmLy8vLzhCU3dSQVFkZktBUkN0QVFBTElBVkJBM1FRVGlFTEN5QUNJQXMyQWdBZ0FpQUxJQlJCQTNScUloTTJBZ2dnQWlBVE5nSUVJQUlRUFNBTElBVkJBM1JxTmdJQUlCSkJFR29rQUNBQ0tBSUlDeUFIRU44Q0lBSWdBaWdDQ0VFSWFqWUNDQ0FESUFJUW9BTWdBaENmQXlBT1FTQnFKQUFMSUFRb0FoeEJBV29oQWd3QkN3QUxBQVVEUUNBR0lBNFFsZ0VRVmlBQ1N3UkFJQVlnRGhDV0FTQUNFSllCRUpZQ0lBSkJBV29oQWd3QkN3c2dEa0VCYWlFT0RBSUxBQXNMSUFnZ0VCQ3BBeUFJRUlNQklBMG9BbFJMRFFNZ0VCQ2VCQXNnRVVFUWFpUUFEQU1MUWZDdkJFRzRvQUVRTWtHVUVoQXlRYjhjRURKQnhnTVFOVUg1SUJBeVFidWlBUkF5RURZTUJBdEI4SzhFUWNXa0FSQXlRWlFTRURKQnZ4d1FNa0hIQXhBMVFma2dFREpCdTZJQkVESVFOZ3dEQzBId3J3UkJsYWNCRURKQmxCSVFNa0cvSEJBeVFkVURFRFZCK1NBUU1rR1lxZ0VRTWhBMkRBSUxJQlVRZHlBZVFhR1BBUkNUQVNFYVFRQWhEaU1BUVVCcUloSWtBQUpBSUEwdEFCeEZCRUFnRFVFOGFpRUNRUUFoRUFOQUlBSVFnd0VnRUUwTkFpQUNJQkFRcFFGQkFEWUNDQ0FRUVFGcUlSQU1BQXNBQ3lBTlFjZ0FhaUlXRUpzRUlCWWdEVUU4YWlJVkVJTUJRU1JzRUtBRUlBMUIzQUJxSWhGQktHb2hHMEVBSVFJQ1FBSkFBMEFnRHhCS0VLWUJJQUpMQkVBZ0R4QktJQUlRVENJRUtBSUVJQVFvQWd4QkFuWkhEUUlnR3lBQ0VFd29BaGdoQXlBRUtBSUlJUXNnQXlBRUtBSVlJZ2dnQkNnQ0JDSVFRUUowYWlJRktnSUFJQWdxQWdBaUw1TWlMaUFJS2dJRUlDK1RJaThRNHdHN1JCZ3RSRlQ3SVFsQW9MWTRBZ0FnQXlBdklDK1VJQzRnTHBTU2tUZ0NCQ0FRUVFGcklnUkJBU0FFUVFGTEd5RVRJQWhCQkdvaERDQUZJUWRCQVNFR0EwQUNRQ0FIUVFScUlRY2dBMEVJYWlFRUlBWWdFMFlFUUNBRElBY3FBZ0FnRENvQ0FDSXZreUl1SUM4Z0RFRUVheW9DQUpNaUx4RGpBYnRFR0MxRVZQc2hDVUNndGpnQ0NDQURJQzhnTDVRZ0xpQXVsSktST0FJTUlBdEJBV3NpRkVFQklCUkJBVXNiSVJrZ0JTQVFRUUowYWlFSElBZ2hCa0VCSVFzRFFDQUxJQmxHQkVBZ0JFRUlhaUVNSUFRZ0NDQVFJQlJzUVFKMGFpSUZLZ0lBSWk4Z0JTQVFRUUowYXlJREtnSUFreUl1SUFVcUFnUWdMNU1pTHhEakFidEVHQzFFVlBzaENVQ2d0amdDQ0NBRUlDOGdMNVFnTGlBdWxKS1JPQUlNSUFWQkJHb2hCRUVCSVFjRFFDQURRUVJxSVFNZ0J5QVRSZzBFSUF3Z0JDb0NBQ0FES2dJQWt5SXVJQVFxQWdRZ0JFRUVheW9DQUpNaUx4RGpBYnRFR0MxRVZQc2hDVUNndGpnQ0NDQU1JQzhnTDVRZ0xpQXVsSktST0FJTUlBZEJBV29oQnlBRVFRUnFJUVFnREVFSWFpRU1EQUFMQUFzZ0JDQUhLZ0lBSUFZcUFnQ1RJaTRnQlNvQ0JDQUZLZ0lBa3lJdkVPTUJ1MFFZTFVSVSt5RUpRS0MyT0FJSUlBUWdMeUF2bENBdUlDNlVrcEU0QWd3Z0JFRVFhaUVFSUFWQkJHb2hERUVCSVFNRFFDQURJQk5HQkVBZ0JDQUhLZ0lFSUFZcUFnU1RJaTRnRENvQ0FDQU1RUVJyS2dJQWt5SXZFT01CdTBRWUxVUlUreUVKUUtDMk9BSUFJQVFnTHlBdmxDQXVJQzZVa3BFNEFnUWdDMEVCYWlFTElBZEJDR29oQnlBR1FRaHFJUVlnREVFRWFpRUZEQUlGSUFRZ0IwRUVhaUlIS2dJQUlBWkJCR29pQmlvQ0FKTWlMaUFNS2dJRUlBeEJCR3NxQWdDVElpOFE0d0c3UkJndFJGVDdJUWxBb0xZNEFnQWdCQ0F2SUMrVUlDNGdMcFNTa1RnQ0JDQURRUUZxSVFNZ0JFRUlhaUVFSUF4QkJHb2hEQXdCQ3dBTEFBc0FCU0FESUFjcUFnQWdEQ29DQUpNaUxpQU1LZ0lFSUF4QkJHc3FBZ0NUSWk4UTR3RzdSQmd0UkZUN0lRbEFvTFk0QWdnZ0F5QXZJQytVSUM0Z0xwU1NrVGdDRENBR1FRRnFJUVlnREVFRWFpRU1JQVFoQXd3Q0N3QUxDeUFNSUFRcUFnQWlMeUFES2dJQWt5SXVJQzhnQkVFRWF5b0NBSk1pTHhEakFidEVHQzFFVlBzaENVQ2d0amdDQ0NBTUlDOGdMNVFnTGlBdWxKS1JPQUlNSUFKQkFXb2hBZ3dCQ3dzTUFRdEI4SzhFUVprTEVESkJ0QThRTWtHL0hCQXlRZUFBRURWQitTQVFNa0dLSXhBeUVEWU1Bd3NnRFVHUUFXb2hDd05BSUJVUWd3RWdEazBFUUNBVklCWVFxUU1NQWdzZ0ZTQU9FS1VCS2dJQUlTNGdGU0FPRUtVQktnSUVJUzhnRlNBT0VLVUJLZ0ljSVRBZ0VpQXVRd0FBZ0Q5QkFTQVZJQTRRcFFFb0FneDBzcFVpTHBRZ0xrTUFBQUEvbEVNQUFBQy9raUl4a2pnQ09DQVNJQzhnTHBRZ01aSTRBalFnRWlBdUlEQ1VPQUl3UVFBaEVDQVNJQklxQWpnZ0R5QVZJQTRRcFFFb0FneEJBQkQ1QVNnQ0JFRUJhN01RNWdJNEFqZ2dFaUFTS2dJMElBOGdGU0FPRUtVQktBSU1RUUFRK1FFb0FnaEJBV3V6RU9ZQ09BSTBJQXRCQUJBN0lSc2dGU0FPRUtVQktBSU1JUUlnRlNBT0VLVUJLQUlRSVFRZ0Vpb0NPQ0V2SUJJcUFqUWhNQ0FTS2dJd0lTNGpBRUV3YXlJREpBQUNRQ0F2UXdBQUFBQmdCRUFnTHlBUlFTaHFJZ1VnRVNnQ0JDQUNiQ0FFYWhCTUtBSUVzMTBFUUNBd1F3QUFBQUJnQkVBZ01DQUZJQkVvQWdRZ0Ftd2dCR29RVENnQ0NMTmRCRUFnQlNBUktBSUVJQUpzSUFScUVFd2lCaWdDRUVFQ1JnUkFJQkpCQURZQ1BBSi9JQzlEQUFBQVA1SWlNWXREQUFBQVQxMEVRQ0F4cUF3QkMwR0FnSUNBZUFzaUNFRUFTQ0VDQW44Z01FTUFBQUEva2lJeGkwTUFBQUJQWFFSQUlER29EQUVMUVlDQWdJQjRDeUVFSUFJTkJTQUVRUUJJSUFnZ0JpZ0NCRTl5RFFVZ0JDQUdLQUlJVHcwRklCRkJIR29oQlVNQUFJQS9JQkVxQWd3Z0xwUWlMaUF1UXdBQWdEOWRHeUl4RUhBaExnSi9JREVnRVNvQ0VKUWlNVU1BQUFBL2tpSXppME1BQUFCUFhRUkFJRE9vREFFTFFZQ0FnSUI0Q3lFSElERVFjSTBoTTBFQUlBZ2dCMnNRc3dJaEFpQUhJQWhxSUFZb0FnUkJBV3NRbkFNaEdVRUFJQVFnQjJzUXN3SWhEQ0FFSUFkcUlBWW9BZ2hCQVdzUW5BTWhIeUFGUVFBUU8wRUFJQVVRUTBFQ2RCQTZHa01BQUlDL0lDNGdMcEtWSVRRRFFDQU1JQjlLQkVCQkFDRUVRUUFoQmdOQUlCRW9BaFFnQmt3RVFFTUFBQUFBSVM0RFFDQVJLQUlJSWdZZ0JFd0VRQ0F1UXdBQUFBQmJEUXNGSUM0Z0JTQUVFRHNxQWdCZEJFQWdCU0FFRURzcUFnQWhMZ3NnQkVFQmFpRUVEQUVMQ3lBdVF3QUFBQUJlQkVCQkFDRUNBMEFnQWlJRUlBWk9EUXNnQXlBRXNpSXZPQUlnSUFNZ0JTQUVFRHNxQWdBNEFpUWdBeUFFUVFGcklnS3lPQUlZSUFNZ0JTQUNJQkVvQWdnaUJtb2dCbThRT3lvQ0FEZ0NIQ0FESUFSQkFXb2lBckk0QWhBZ0F5QUZJQkVvQWdnaUJpQUNhaUFHYnhBN0tnSUFPQUlVQWtBZ0JTQUVFRHNxQWdBZ0xpQVJLZ0lZbEY1RkRRQWdBeW9DSkNJd0lBTXFBaHhlUlEwQUlEQWdBeW9DRkY1RkRRQWdBeUF2T0FJQVF3QUFBQUFoTVFKQUlBTXFBaEFpTUNBREtnSWdJaStUSURBZ0F5b0NHQ0l3a3lJMGxDSXlRd0FBQUFCYklEQWdMNU1pTXlBMGxDSTBRd0FBQUFCYmNpQXpRd0FBQUFCYmNpSUVCRUFnQTBFQU5nSU1JQU5CQURZQ0NBd0JDeUFESUFNcUFoUWdBeW9DSkNJeGt5QXlsU0FES2dJY0lER1RJRFNWa3lJeE9BSU1JQU1nTVNBdklDK1VJREFnTUpRaUw1T1VJQU1xQWh3Z0F5b0NKSk9TSURPVklqQTRBZ2dnQXlvQ0hDQURLZ0lNSUMrVWt5QXdJQU1xQWhpVWt5RXhDeUFESURFNEFnUWdCRVVFUUNBREtnSUlJVEFnQXlvQ0JCb2dBeW9DRENJdlF3QUFBQUJjQkVBZ0F5QXdqQ0F2SUMrU2xUZ0NBQXNMSUJzZ0VpZ0NQQ0lHUVFKMGFnSjhJQU1xQWdCREFBQUFQNUlnRVNnQ0NMSWlMNUlnTDVXN1JCZ3RSRlQ3SVJsQW9pSTh2U0paUWpTSXAwSC9EM0VpQkVIL0QwWUVRQ0E4UkJndFJGVDdJUmxBb2lJOElEeWpEQUVMSUZsQ0FZWWlXRUt3dEtIRTZ2NlFtWUIvV0FSQUlEeEVBQUFBQUFBQUFBQ2lJRHdnV0VLd3RLSEU2djZRbVlCL1VSc01BUXNDZmlBRVJRUkFRUUFoQkNCWlFneUdJbGhDQUZrRVFBTkFJQVJCQVdzaEJDQllRZ0dHSWxoQ0FGa05BQXNMSUZsQkFTQUVhNjJHREFFTElGbEMvLy8vLy8vLy93ZURRb0NBZ0lDQWdJQUloQXNoV0NBRVFZRUlTZ1JBQTBBQ1FDQllRcGpha0tLMXY4Z01mU0phUWdCVERRQWdXaUpZUWdCU0RRQWdQRVFBQUFBQUFBQUFBS0lNQXdzZ1dFSUJoaUZZSUFSQkFXc2lCRUdCQ0VvTkFBdEJnUWdoQkFzQ1FDQllRcGpha0tLMXY4Z01mU0phUWdCVERRQWdXaUpZUWdCU0RRQWdQRVFBQUFBQUFBQUFBS0lNQVFzZ1dFTC8vLy8vLy8vL0IxZ0VRQU5BSUFSQkFXc2hCQ0JZUW9DQWdJQ0FnSUFFVkNFSElGaENBWVloV0NBSERRQUxDeUJaUW9DQWdJQ0FnSUNBZ0grRElGaENnSUNBZ0lDQWdBaDlJQVN0UWpTR2hDQllRUUVnQkd1dGlDQUVRUUJLRzRTL0M3WTRBZ0FnRWlBR1FRRnFOZ0k4Q3lBUktBSUlJUVlNQUFzQUMwSHdyd1JCa3V3QUVESkJ0QThRTWtHL0hCQXlRZG9CRURWQitTQVFNa0duN3dBUU1oQTJEQTBGSUFOQjZOVUJLQUlBTmdJb0lBTkI0TlVCS1FJQU53TWdJQVZCQUJBN0lRY2dCVUVBRURzaEFpQUNJQkVvQWdoQkFXc2lDRUVDZEdvaUV5b0NBQ0V1SUFJcUFnQWhMMEVBSVF3RFFDQUlJQXhHQkVBZ0J5QUlRUUowYWlBREtnSW9JQytVSUFNcUFpQWdMcFFnQXlvQ0pDQVRLZ0lBbEpLU09BSUFCU0FISUF4QkFuUWlGR29nQXlvQ0tDQUNJQXhCQVdvaURFRUNkR29xQWdDVUlBTXFBaUFnTHBRZ0FpQVVhaW9DQUNJdUlBTXFBaVNVa3BJNEFnQU1BUXNMSUFaQkFXb2hCZ3dCQ3dBTEFBc2dETElnTUpNUWNDRXlJQVlnREJCTklTQWdBaUVFQTBBZ0JDQVpTZ1JBSUF4QkFXb2hEQXdDQ3lBeUlBU3lJQytURUhDU0lpNGdNMTVGQkVBZ0lDQUVRUU4wYWlJSEtnSUFJVEVnRVNnQ0NDRVRJQVZCQUJBN0lRZ2dNU0FUc3BTN1JIZkl5VzB3WDhRL29yWWhNU0EwSUM2VUlpNGdMaUF1SUM0Z0xpQXVRd0FBd0VDU2xFTUFBUEJCa3BSREFBRHdRcEtVUXdBQXRFT1NsRU1BQURSRWtwUkRBQUEwUkpLN1JEbHNVdjVyd1ZZL29yWWdCeW9DQkpRaExpQVJLQUlJSVFjQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFnRVFDQXhRd0FBQUQrU1F3QUFBQUJlUlEwQklERkRBQUFBdjVJaU5TQUhzbDFGRFFFZ0xrTUFBQUFBWUVVTkFpQUhRUUJJRFFNQ2Z5QTFqaUkxaTBNQUFBQlBYUVJBSURXb0RBRUxRWUNBZ0lCNEN5SVRRUUZxSUFkdklSUWdCeUFUYWlBSGJ5RUhRd0FBZ0Q4Z01TQVRzcE5EQUFBQXY1SWlNWk1pTlVNQUFBQUFZRVVOQkNBeFF3QUFBQUJnUlEwRklBZEJBRWdOQmlBVVFRQklEUWNnQ0NBSFFRSjBhaUlISURVZ0xwUWdCeW9DQUpJNEFnQWdDQ0FVUVFKMGFpSUhJREVnTHBRZ0J5b0NBSkk0QWdBTUNBdEI4SzhFUWV6ekFCQXlRZlgxQUJBeVFiOGNFREpCaXdFUU5VSDVJQkF5UWZ2NUFCQXlFRFlNRkF0QjhLOEVRWlArQUJBeVFmWDFBQkF5UWI4Y0VESkJqQUVRTlVINUlCQXlRYUNBQVJBeUVEWU1Fd3RCOEs4RVFhK0RBUkF5UWZYMUFCQXlRYjhjRURKQmpRRVFOVUg1SUJBeVFZYUVBUkF5RURZTUVndEI4SzhFUWRTSEFSQXlRZlgxQUJBeVFiOGNFREpCamdFUU5VSDVJQkF5UVlLSkFSQXlFRFlNRVF0QjhLOEVRY21MQVJBeVFmWDFBQkF5UWI4Y0VESkJsZ0VRTlVINUlCQXlRZm1MQVJBeUVEWU1FQXRCOEs4RVFZS1BBUkF5UWZYMUFCQXlRYjhjRURKQmx3RVFOVUg1SUJBeVFiZVFBUkF5RURZTUR3dEI4SzhFUVllVEFSQXlRZlgxQUJBeVFiOGNFREpCbUFFUU5VSDVJQkF5UVlXVkFSQXlFRFlNRGd0QjhLOEVRYVdYQVJBeVFmWDFBQkF5UWI4Y0VESkJtUUVRTlVINUlCQXlRY3laQVJBeUVEWU1EUXNMSUFSQkFXb2hCQXdBQ3dBTEFBdEI4SzhFUWJ2WUFCQXlRYlFQRURKQnZ4d1FNa0grQUJBMVFma2dFREpCdU5zQUVESVFOZ3dJQzBId3J3UkJoTThBRURKQnRBOFFNa0cvSEJBeVFmb0FFRFZCK1NBUU1rSDQwUUFRTWhBMkRBY0xRZkN2QkVHZHhBQVFNa0cwRHhBeVFiOGNFREpCK1FBUU5VSDVJQkF5UVp6SEFCQXlFRFlNQmd0QjhLOEVRYkE0RURKQnRBOFFNa0cvSEJBeVFmZ0FFRFZCK1NBUU1rR1dQQkF5RURZTUJRdEI4SzhFUWRvckVESkJ0QThRTWtHL0hCQXlRZmNBRURWQitTQVFNa0d5THhBeUVEWU1CQXNnQTBFd2FpUUFBMEFnRWlnQ1BDQVFUQVJBSUE1QkFXb2hEZ3dDQlNBU1FRaHFJZ0lnRlNBT0VLVUJRU1FRUHhvZ0VpQUxJQkFRT3lvQ0FEZ0NFQ0FXSUFJUTV3SWdFRUVCYWlFUURBRUxBQXNBQ3dBTElCSkJRR3NrQUNBYUVIY2dIa0VnYWlRQURBSUxRZkN2QkVIZk54QXlRWlFTRURKQnZ4d1FNa0dUQVJBMVFma2dFREpCeFRzUU1oQTJDeEFBQUFzZ0RSQ0JCQkNEQVNFQ0lDVkJJR29RU0NFUElBSUVRQ0FQSUFJUW13WWdEeUFDRUtRR0N3TkFJQTBRZ1FRUWd3RWdDazBOQmlBbFFRaHFJQTBRZ1FRZ0NoQ2xBU0lDS2dJQUlBSXFBZ1FnQWlvQ0NDQUNLZ0ljSUFJcUFoaERBQUFBQUY0UStRUWhBaUFQSUFvUWJTSUVJQUl0QUJBNkFCQWdCQ0FDS1FJSU53SUlJQVFnQWlrQ0FEY0NBQ0FLUVFGcUlRb01BQXNBQzBId3J3UkJ3RGNRTWtHNlBCQXlRWVBGQUJBeVFkUUJFRFZCbE1rQUVESkJ2TTBBRURJUU5nd0lDMEh3cndSQnA5TUFFREpCdWp3UU1rR0R4UUFRTWtIVkFSQTFRWlRKQUJBeVFhclhBQkF5RURZTUJ3dEI4SzhFUWRUY0FCQXlRYm84RURKQmc4VUFFREpCMWdFUU5VR1V5UUFRTWtIdzZnQVFNaEEyREFZTFFmQ3ZCRUd5OEFBUU1rRzZQQkF5UVlQRkFCQXlRZGNCRURWQmxNa0FFREpCbWZJQUVESVFOZ3dGQzBId3J3UkJ5ZmdBRURKQnVqd1FNa0dEeFFBUU1rSFlBUkExUVpUSkFCQXlRWm55QUJBeUVEWU1CQXNnS3hBMEloSkI0QUFRbVFFZ0VpQVBFSUFCRU9BRklCaEJNR29oQ0NBWVFlQUFhaUVNSUJoQmtBRnFJUXNnR0VIQUFXb2hEaUFZUWZBQmFpRVFJQmdxQXFBQ0lTOGdHQ29DcEFJaE1DQVlLZ0tvQWlFeElCZ3FBcXdDSVRNZ0dDb0NzQUloTkNBWUtnSzBBaUV5SUJncUFyZ0NJVFVnR0NvQ3ZBSWhPRUVBSVFSQkFDRUtBa0FDUUNBSkJFQWdFaENCQVNBUEVJQUJSdzBCQTBBZ0R4Q0FBU0FLVFFSQUlBOFFnQUVnQkVjRVFFSHdyd1JCalQ4UU1rSFZHaEF5UWRzZ0VESkI2UVFRTlVIMkpSQXlRYkxDQUJBeUVEWU1DUXNGSUJJZ0JCQ1FBaUVSSUE4Z0NoQnRJUU1qQUVHZ0FXc2lCeVFBSXdCQjRBSnJJZ0lrQUNBREtnSUFJVFlnQXlvQ0JDRTNJQU1xQWd3Z09KUkRBQUNBUDVjaExpQURLZ0lJSWprUTVBVWhPaUE1RU9NRklUa2dBa0d3QW1vaUEwR0FnSUQ4QXpZQ0lDQURRZ0EzQWhnZ0F5QTNPQUlVSUFNZ09pQXVsQ0kzT0FJUUlBTWdOamdDQ0NBRElEYzRBZ0FnQXlBNUlDNlVJalk0QWd3Z0F5QTJqRGdDQkNBQ0tnTEVBaUUySUFJcUFyZ0NJVGNnQWtHQUFtb2lCU0FESUJnUVdpQUZRUWh5SUFNZ0dFRUlhaEJhSUFKQmtBSnFJQU1nR0VFUWFoQmFJQUpCbUFKcUlBTWdHRUVZYWhCYUlBSkJvQUpxSUFNZ0dFRWdhaEJhSUFKQnFBSnFJQU1nR0VFb2FoQmFJQUpCMEFGcUlnVWdBeUFJRUZvZ0JVRUljaUFESUFoQkNHb1FXaUFDUWVBQmFpQURJQWhCRUdvUVdpQUNRZWdCYWlBRElBaEJHR29RV2lBQ1FmQUJhaUFESUFoQklHb1FXaUFDUWZnQmFpQURJQWhCS0dvUVdpQUNRYUFCYWlJRklBTWdEQkJhSUFWQkNISWdBeUFNUVFocUVGb2dBa0d3QVdvZ0F5QU1RUkJxRUZvZ0FrRzRBV29nQXlBTVFSaHFFRm9nQWtIQUFXb2dBeUFNUVNCcUVGb2dBa0hJQVdvZ0F5QU1RU2hxRUZvZ0FrSHdBR29pQlNBRElBc1FXaUFGUVFoeUlBTWdDMEVJYWhCYUlBSkJnQUZxSUFNZ0MwRVFhaEJhSUFKQmlBRnFJQU1nQzBFWWFoQmFJQUpCa0FGcUlBTWdDMEVnYWhCYUlBSkJtQUZxSUFNZ0MwRW9haEJhSUFKQlFHc2lCU0FESUE0UVdpQUZRUWh5SUFNZ0RrRUlhaEJhSUFKQjBBQnFJQU1nRGtFUWFoQmFJQUpCMkFCcUlBTWdEa0VZYWhCYUlBSkI0QUJxSUFNZ0RrRWdhaEJhSUFKQjZBQnFJQU1nRGtFb2FoQmFJQUpCRUdvaUJTQURJQkFRV2lBRlFRaHlJQU1nRUVFSWFoQmFJQUpCSUdvZ0F5QVFRUkJxRUZvZ0FrRW9haUFESUJCQkdHb1FXaUFDUVRCcUlBTWdFRUVnYWhCYUlBSkJPR29nQXlBUVFTaHFFRm9nQ1NBQ1FReHFJZ01nQWtFSWFpSUZJQzRnTlpRUWpBSWdCeUFKSUFJcUFoQWdBaW9DRkNBQ0tBSU1JQUlvQWdnUVZ6Z0NBQ0FISUFrZ0Fpb0NHQ0FDS2dJY0lBSW9BZ3dnQWlnQ0NCQlhPQUlFSUFjZ0NTQUNLZ0lnSUFJcUFpUWdBaWdDRENBQ0tBSUlFRmM0QWdnZ0J5QUpJQUlxQWlnZ0Fpb0NMQ0FDS0FJTUlBSW9BZ2dRVnpnQ0RDQUhJQWtnQWlvQ01DQUNLZ0kwSUFJb0Fnd2dBaWdDQ0JCWE9BSVFJQWNnQ1NBQ0tnSTRJQUlxQWp3Z0FpZ0NEQ0FDS0FJSUVGYzRBaFFnQ1NBRElBVWdMaUF5bEJDTUFpQUhJQWtnQWlvQ1FDQUNLZ0pFSUFJb0Fnd2dBaWdDQ0JCWE9BSVlJQWNnQ1NBQ0tnSklJQUlxQWt3Z0FpZ0NEQ0FDS0FJSUVGYzRBaHdnQnlBSklBSXFBbEFnQWlvQ1ZDQUNLQUlNSUFJb0FnZ1FWemdDSUNBSElBa2dBaW9DV0NBQ0tnSmNJQUlvQWd3Z0FpZ0NDQkJYT0FJa0lBY2dDU0FDS2dKZ0lBSXFBbVFnQWlnQ0RDQUNLQUlJRUZjNEFpZ2dCeUFKSUFJcUFtZ2dBaW9DYkNBQ0tBSU1JQUlvQWdnUVZ6Z0NMQ0FKSUFNZ0JTQXVJRFNVRUl3Q0lBY2dDU0FDS2dKd0lBSXFBblFnQWlnQ0RDQUNLQUlJRUZjNEFqQWdCeUFKSUFJcUFuZ2dBaW9DZkNBQ0tBSU1JQUlvQWdnUVZ6Z0NOQ0FISUFrZ0Fpb0NnQUVnQWlvQ2hBRWdBaWdDRENBQ0tBSUlFRmM0QWpnZ0J5QUpJQUlxQW9nQklBSXFBb3dCSUFJb0Fnd2dBaWdDQ0JCWE9BSThJQWNnQ1NBQ0tnS1FBU0FDS2dLVUFTQUNLQUlNSUFJb0FnZ1FWemdDUUNBSElBa2dBaW9DbUFFZ0Fpb0NuQUVnQWlnQ0RDQUNLQUlJRUZjNEFrUWdDU0FESUFVZ0xpQXpsQkNNQWlBSElBa2dBaW9Db0FFZ0Fpb0NwQUVnQWlnQ0RDQUNLQUlJRUZjNEFrZ2dCeUFKSUFJcUFxZ0JJQUlxQXF3QklBSW9BZ3dnQWlnQ0NCQlhPQUpNSUFjZ0NTQUNLZ0t3QVNBQ0tnSzBBU0FDS0FJTUlBSW9BZ2dRVnpnQ1VDQUhJQWtnQWlvQ3VBRWdBaW9DdkFFZ0FpZ0NEQ0FDS0FJSUVGYzRBbFFnQnlBSklBSXFBc0FCSUFJcUFzUUJJQUlvQWd3Z0FpZ0NDQkJYT0FKWUlBY2dDU0FDS2dMSUFTQUNLZ0xNQVNBQ0tBSU1JQUlvQWdnUVZ6Z0NYQ0FKSUFNZ0JTQXVJREdVRUl3Q0lBY2dDU0FDS2dMUUFTQUNLZ0xVQVNBQ0tBSU1JQUlvQWdnUVZ6Z0NZQ0FISUFrZ0Fpb0MyQUVnQWlvQzNBRWdBaWdDRENBQ0tBSUlFRmM0QW1RZ0J5QUpJQUlxQXVBQklBSXFBdVFCSUFJb0Fnd2dBaWdDQ0JCWE9BSm9JQWNnQ1NBQ0tnTG9BU0FDS2dMc0FTQUNLQUlNSUFJb0FnZ1FWemdDYkNBSElBa2dBaW9DOEFFZ0Fpb0M5QUVnQWlnQ0RDQUNLQUlJRUZjNEFuQWdCeUFKSUFJcUF2Z0JJQUlxQXZ3QklBSW9BZ3dnQWlnQ0NCQlhPQUowSUFrZ0F5QUZJQzRnTUpRUWpBSWdCeUFKSUFJcUFvQUNJQUlxQW9RQ0lBSW9BZ3dnQWlnQ0NCQlhPQUo0SUFjZ0NTQUNLZ0tJQWlBQ0tnS01BaUFDS0FJTUlBSW9BZ2dRVnpnQ2ZDQUhJQWtnQWlvQ2tBSWdBaW9DbEFJZ0FpZ0NEQ0FDS0FJSUVGYzRBb0FCSUFjZ0NTQUNLZ0tZQWlBQ0tnS2NBaUFDS0FJTUlBSW9BZ2dRVnpnQ2hBRWdCeUFKSUFJcUFxQUNJQUlxQXFRQ0lBSW9BZ3dnQWlnQ0NCQlhPQUtJQVNBSElBa2dBaW9DcUFJZ0Fpb0NyQUlnQWlnQ0RDQUNLQUlJRUZjNEFvd0JJQWtnQXlBRklDNGdMNVFRakFJZ0J5QUpJRGNnTmlBQ0tBSU1JQUlvQWdnUVZ6Z0NrQUVnQWtIZ0Ftb2tBRUVBSVFKQkFDRUZJQkZCMUFBUWh3WkJKQ0VHQTBBZ0FrRWxSZ1JBQWtBZ0JVR2FCVVlOQUVId3J3UkIycWNCRURKQjFSb1FNa0hiSUJBeVFab0RFRFZCOWlVUU1rSGpxZ0VRTWhBMkVBQUFDd1VnQlNBR2FpRURJQWNnQWtFQ2RHb2hGU0FDUVFGcUlnMGhBZ05BSUFNZ0JVY0VRQ0FSSUFWQkNHMXFJaDRnSGkwQUFDQVZLZ0lBSUFjZ0FrRUNkR29xQWdCZElBVkJCM0YwY2pvQUFDQUNRUUZxSVFJZ0JVRUJhaUVGREFFTEN5QUdRUUZySVFZZ0F5RUZJQTBoQWd3QkN3c2dCMEdnQVdva0FDQVBJQW9RYlNFQ0lCSWdCQkNQQWlJRElBSXRBQkE2QUJBZ0F5QUNLUUlJTndJSUlBTWdBaWtDQURjQ0FDQUVRUUZxSVFRZ0NrRUJhaUVLREFFTEN5QVNJQVFRNEFVTUFndEI4SzhFUWM0WEVESkIxUm9RTWtIYklCQXlRWmtFRURWQjlpVVFNa0dSS1JBeUVEWU1CUXRCOEs4RVFZZ3lFREpCMVJvUU1rSGJJQkF5UVpvRUVEVkI5aVVRTWtHR05oQXlFRFlNQkFzZ0R4RGVBeUFsUVRCcUpBQWdLaEIzRUpZR0lRUWdJVUVRYWlJQ0VOOEZJQUlRUGlFRElDRWdJaWdDQUJBMEVJRUJOZ0lNSUNGQjlkY0JOZ0lJSUNFZ0F6WUNCQ0FoUWI0c05nSUFJQVJCZ0tzQklDRVEzQVVnQWhBNEdpQWlLQUlBSVJnakFFSHdBR3NpRHlRQUlCZEJER29pRlJDV0FpQVhRWDgyQWhnZ0YwRWNhaUVVSUJkQmxBWnFJUjRnRjBHTUJXb2hFaUFYUWZ3RWFpRUdJQmdRTkJCWklRNGdEMEhvQUdvZ0YwSElBR29ROXdNUXNRSWhEQU5BSUF3Z0QwRXdhaEJyRUxFQ0VJSUJCRUFnRDBFd2FrSEpyQUVRa3dFaEVDQVhMUUFJSVFNZ0dCQTBJUUlnREJCdktBSUVFRFFoQkFKQUFrQUNRQ0FEQkVBQ2Z5QUVJUVVnREJCdktBSUVRU1JxSVExQkFDRUlRUUFoQnlNQVFSQnJJaEVrQUNBR0VKWUNBa0FDUUNBQ0lnTVFnUUZGRFFBZ0JSQ0JBVVVOQUNBR0lBTVFnUUVRbHdNRFFBSkFJQU1RZ1FFZ0IwMEVRQ0FHRUVJZ0F4Q0JBVTBOQVVId3J3UkJpYlVCRURKQndyTUJFREpCZzhVQUVESkJyd0VRTlVHVXlRQVFNa0hGdFFFUU1oQTJEQThMUVg4aEFrRi9JUVJCLy8vLy93Y2hDeUFESUFjUWtBSWhGZ0pBSUEwb0FnZ0VRQ0FOUVFBMkFtUWdEVUhJQUdvaUNoQkRJUWtnQ2hEUUJpQUtJQWtRcFFNZ0RVSFVBR29oQ1FOQUlBa1E4UVZGQkVBZ0NSRHpCUXdCQ3dzZ0RTQUpJQTBvQWdnZ0ZoRHVBeUFLRUVNYURBRUxRZkN2QkVHeHRnRVFNa0c2L0FBUU1rR0R4UUFRTWtHVkF4QTFRWlRKQUJBeVFkUzJBUkF5RURZTUR3dEJBQ0VJSUFNZ0J4Q1BBaUVUSUExQnlBQnFJUWtDUUFOQUlBa1FReUFJVFFSQUFrQWdBa0YvUmcwRElBdEJmMFlOQnlBRVFYOUhEUUFnQmlBUlFRaHFJQWNnQ3hEeUFSQ3BBZ3dEQ3dVQ1FDQVRMUUFRSUFVZ0NTQUlFRHNvQWdBUWp3SXRBQkJIRFFBZ0FpQVdJQVVnQ1NBSUVEc29BZ0FRa0FJUW1RTWlDa3NFUUNBSklBZ1FPeWdDQUNFTElBSWhCQ0FLSVFJTUFRc2dDaUFFSUFRZ0Nrc2JJUVFMSUFoQkFXb2hDQXdCQ3dzZ0Jpb0NEQ0FDc3lBRXM1VmVSUTBBSUFZZ0VVRUlhaUFISUFzUThnRVFxUUlMSUFkQkFXb2hCd3dCQ3dzZ0JoQkNJUWdMSUJGQkVHb2tBQ0FJREFFTFFmQ3ZCRUhJc1FFUU1rSENzd0VRTWtHRHhRQVFNa0dnQVJBMVFaVEpBQkF5UWIrMEFSQXlFRFlNQ2dzZ0Z5Z0NBRThOQVNBUUVIY01Bd3NnQkNFTlFRQWhCRUVBSVFzakFFRVFheUlISkFBZ0JoQ1dBZ0pBSUFJaUJSQ0JBVVVOQUNBTkVJRUJSUTBBSUFZZ0JSQ0JBUkNYQXdOQUlBVVFnUUVnQzAwRVFDQUdFRUlnQlJDQkFVc0VRRUh3cndSQmliVUJFREpCd3JNQkVESkJnOFVBRURKQjhBQVFOVUdVeVFBUU1rSEZ0UUVRTWhBMkRBd0xCVUVBSVFSQmZ5RUNRWDhoQ2tILy8vLy9CeUVESUFVZ0N4Q1FBaUVJSUFVZ0N4Q1BBaUVSQWtBRFFDQU5FSUVCSUFSTkJFQUNRQ0FDUVg5R0RRTWdDa0YvUncwQUlBWWdCMEVJYWlBTElBTVE4Z0VRcVFJTUF3c0ZBa0FnRVMwQUVDQU5JQVFRandJdEFCQkhEUUFnQWlBSUlBMGdCQkNRQWhDWkF5SUpTd1JBSUFJaENpQUVJUU1nQ1NFQ0RBRUxJQWtnQ2lBSklBcEpHeUVLQ3lBRVFRRnFJUVFNQVFzTElBWXFBZ3dnQXJNZ0NyT1ZYa1VOQUNBR0lBZEJDR29nQ3lBREVQSUJFS2tDQ3lBTFFRRnFJUXNNQVFzTElBWVFRaUVFQ3lBSFFSQnFKQUFnRnlnQ0FDQUVTdzBCQ3lBUUVIY2dEQkJ2S0FJRUVEUVFXU0VMQW44Z0QwRXdha0hhckFFUWt3RWhBa0VBSUJJZ0RpQUxJQVlnR0NnQ0FDQVlLQUlFSUF3UWJ5Z0NCQ2dDQUNBTUVHOG9BZ1FvQWdRUS9BVWlCRUVBU0EwQUdrRUJDeUVESUFJUWR5QURSUTBCSUE5QjJBQnFFRWdoQ0NBUFFUQnFJZ05CejYwQkVKTUJJUUlnQ0NBU0lBWWdCQkQ3QlNBQ0VIY2dEMEVRYWtIbXJRRVFrd0VoQWdKQUlBTWdEaUFMSUFnZ0hpQU1FRzhvQWdRb0FnQWdEQkJ2S0FJRUtBSUVFUG9GUlFSQUlBSVFkd3dCQ3lBQ0VIY2dEeEJJSVFrZ0QwRVFha0hMcmdFUWt3RWhBaUFKSUE5Qk1Hb2dEaUFMSUFnZ0Z5b0NCQkQ1QlFKQUlBa1FRaUFYS0FJQVNRUkFJQUlRZHd3QkN5QUNFSGNnRDBFUWFrSGNyZ0VRa3dFaEZnSi9JQmdRTkNFUUlBd1FieWdDQkJBMElSRWdEMEV3YWlFQ1FRQWhCRUVBSVFjakFFRkFhaUlOSkFBZ0JoQ1dBZ0pBQWtBQ1FDQVFFSUVCUlEwQUlCRVFnUUZGRFFCREFBQWdRUkJ3SVM0Z0RVRVFhaUFDUXdBQUFBQVE5QVZGRFFFZ0JpQVFFSUVCRUpjREEwQUNRQ0FRRUlFQklBZE5CRUFnQmhCQ0lCQVFnUUZORFFGQjhLOEVRWW0xQVJBeVFjS3pBUkF5UVlQRkFCQXlRWUFDRURWQmxNa0FFREpCeGJVQkVESVFOZ3dRQzBGL0lRSkJmeUVLUWYvLy8vOEhJUU1nRUNBSEVKQUNJUm9nRFVFTWFpQU5RUWhxSUExQkVHb2dFQ0FIRUk4Q0loTXFBZ0FnRXlvQ0JCRHdBMEVBSVFRQ1FBTkFJQkVRZ1FFZ0JFMEVRQUpBSUFKQmYwWU5BeUFEUVg5R0RRZ2dDa0YvUncwQUlBWWdEU0FISUFNUThnRVFxUUlNQXdzRklCRWdCQkNQQWlFRkFrQWdFeTBBRUNBRkxRQVFSdzBBSUEwcUFnd2dCU29DQUpNUWNDQU5LZ0lJSUFVcUFnU1RFSENTSUM1ZURRQWdBaUFhSUJFZ0JCQ1FBaENDQmlJRlN3UkFJQVFoQXlBQ0lRb2dCU0VDREFFTElBVWdDaUFGSUFwSkd5RUtDeUFFUVFGcUlRUU1BUXNMSUFZcUFnd2dBck1nQ3JPVlhrVU5BQ0FHSUEwZ0J5QURFUElCRUtrQ0N5QUhRUUZxSVFjTUFRc0xJQVlRUWlFRUN5QU5RVUJySkFBZ0JBd0NDMEh3cndSQnRzOEJFREpCd3JNQkVESkJnOFVBRURKQnhBRVFOVUdVeVFBUU1rSFB6d0VRTWhBMkRBc0xRZkN2QkVISXNRRVFNa0hDc3dFUU1rR0R4UUFRTWtIeEFSQTFRWlRKQUJBeVFiKzBBUkF5RURZTUNnc2dGeWdDQUVrRVFDQVdFSGNNQVFzZ0ZoQjNBbjhnRDBFUWFrR2RzQUVRa3dFaEFrRUFJQklnRGlBTElBWWdHQ2dDQUNBWUtBSUVJQXdRYnlnQ0JDZ0NBQ0FNRUc4b0FnUW9BZ1FRL0FVaUJFRUFTQTBBR2tFQkN5RURJQUlRZHlBRFJRMEFJQTlCRUdvaUFrSENzQUVRa3dFaEF5QUlJQklnQmlBRUVQc0ZJQU1RZHlBQ1FkbXdBUkNUQVNFQ0lBOUJNR29nRGlBTElBZ2dIaUFNRUc4b0FnUW9BZ0FnREJCdktBSUVLQUlFRVBvRlJRUkFJQUlRZHd3QkN5QUNFSGNnQ1JDV0FpQVBRUkJxUWJleEFSQ1RBU0VDSUFrZ0QwRXdhaUFPSUFzZ0NDQVhLZ0lFRVBrRklBSVFkeUFKRUVJZ0Z5Z0NBRWtOQUNBSkVFSWdGUkJDVFEwQUlCUWdEMEV3YWhEeUF5QVZJQWtRcVFNZ0Z5QU1FRzhvQWdBMkFoZ0xJQWtRNUFFTElBZ1E1QUVNQVFzZ0VCQjNDeUFNRVBZRERBRUxDeUFYS0FJWUdpQVBRZkFBYWlRQUlDRkJNR29rQUNBcFFTQnFKQUFnSFJDU0F5QW9RU0JxSkFBZ0FDQUFLQUlBRUlVRUVJQUJJZ0kyQWpBQ1FDQUNSUVJBUVFBaEFpQUFLQUk0SWdSQkFDQUVRUUJLR3lFRUEwQWdBaUFFUmcwQ0lBQW9BalFnQWtIRUFHeHFRWDgyQWp3Z0FrRUJhaUVDREFBTEFBc2dBQ2dDTEJBeklBQWdBQ2dDTUVFRGRCQTVJZ0kyQWl3Z0FnUkFJQUFvQWdBUWhRUWhCQUpBSUNSQkFVWUVRRUVBSVFJRFFDQUNJQUFvQWpCT0RRSWdCQ0FDRUcwcUFnQWhMaUFFSUFJUWJTb0NCQ0V2QWtBZ0FDZ0NCQ0lEQkVBZ0EwRzRBV29nTGlBdklBQW9BaXdnQWtFRGRHb2lBeUFEUVFScUVPSUJHZ3dCQ3lBQUtBSXNJQUpCQTNScUlnTWdMemdDQkNBRElDNDRBZ0FMSUFKQkFXb2hBZ3dBQ3dBTEFrQUNRQUpBQWtBZ0pFRUNhdzRFQVFNQ0FBTUxRUUFoQWdOQUlBSWdBQ2dDTUU0TkJDQUVJQUlRYlNvQ0FDRXVJQVFnQWhCdEtnSUVJUzhDUUNBQUtBSUVJZ01FUUNBRFFiZ0JhaUF1UXdBQXdEK1VJQzlEQUFEQVA1UWdBQ2dDTENBQ1FRTjBhaUlESUFOQkJHb1E0Z0VhREFFTElBQW9BaXdnQWtFRGRHb2lBeUF2UXdBQXdEK1VPQUlFSUFNZ0xrTUFBTUEvbERnQ0FBc2dBa0VCYWlFQ0RBQUxBQXRCQUNFQ0EwQWdBaUFBS0FJd1RnMERJQVFnQWhCdEtnSUFJUzRnQkNBQ0VHMHFBZ1FoTHdKQUlBQW9BZ1FpQXdSQUlBTkJ1QUZxSUM0Z0xwSWdMeUF2a2lBQUtBSXNJQUpCQTNScUlnTWdBMEVFYWhEaUFSb01BUXNnQUNnQ0xDQUNRUU4wYWlJRElDOGdMNUk0QWdRZ0F5QXVJQzZTT0FJQUN5QUNRUUZxSVFJTUFBc0FDMEVBSVFJRFFDQUNJQUFvQWpCT0RRSWdCQ0FDRUcwcUFnQWhMaUFFSUFJUWJTb0NCQ0V2QWtBZ0FDZ0NCQ0lEQkVBZ0EwRzRBV29nTGtNQUFFQkFsQ0F2UXdBQVFFQ1VJQUFvQWl3Z0FrRURkR29pQXlBRFFRUnFFT0lCR2d3QkN5QUFLQUlzSUFKQkEzUnFJZ01nTDBNQUFFQkFsRGdDQkNBRElDNURBQUJBUUpRNEFnQUxJQUpCQVdvaEFnd0FDd0FMUVFBaEFnTkFJQUlnQUNnQ01FNE5BU0FFSUFJUWJTb0NBQ0V1SUFRZ0FoQnRLZ0lFSVM4Q1FDQUFLQUlFSWdNRVFDQURRYmdCYWlBdVF3QUFnRUNVSUM5REFBQ0FRSlFnQUNnQ0xDQUNRUU4wYWlJRElBTkJCR29RNGdFYURBRUxJQUFvQWl3Z0FrRURkR29pQXlBdlF3QUFnRUNVT0FJRUlBTWdMa01BQUlCQWxEZ0NBQXNnQWtFQmFpRUNEQUFMQUF0QkFDRUNJQUFvQWpnaUJFRUFJQVJCQUVvYklRUURRQ0FDSUFSR0JFQWdBQ2dDQUNnQ0FDZ0NBQkE5SVEwZ0FDZ0NBQ2dDQUNnQ0FDZ0NHQ0lFUlEwRElBQWdCRUVDZEdvb0Fqd2lEa0hFQUd3aUJTQUFLQUkwYWlnQ1FBMERBbjhnQUNnQ0JDRUtJQUFvQWdBaEF5TUFRUkJySWdJa0FDQUNJQVEyQWd3Z0F5Z0NBRUVFYWlBQ1FReHFFS3NHSVFNZ0FrRVFhaVFBSUFBb0FnQVFoUVFoQWlBQUtBSTBJQVZxSVJBakFFSGdBV3NpQkNRQVFYOGhCZ0pBQWtBZ0RSQkNRUVJKRFFBZ0RSQkNRUVIwRURraURFVU5BU0FORUVKQkdHd1FPU0lIUlEwQlFRQWhCZ05BSUEwUVFpQUdTd1JBSUF3Z0JrRUVkR29pQlNBQ0lBMGdCaEJTS0FJQUVHMHFBZ0M3T1FNQUlBVWdBaUFOSUFZUVVpZ0NBQkJ0S2dJRXV6a0RDQ0FISUFaQkdHeHFJZ1VnQXlBTklBWVFVaWdDQkJDV0FTb0NBTHM1QXdBZ0F5QU5JQVlRVWlnQ0JCQ1dBU29DQkNFdUlBVkNBRGNERUNBRklDNjdPUU1JSUFaQkFXb2hCZ3dCQ3dzZ0JDQUhOZ0xVQVNBRUlBdzJBdEFCSUFRZ0JqWUMyQUZCZnlFR0lBcEJDR29oQlNBTkVFSWhHRUVBSVFOQkFDRVBJd0JCMEFCcklnSWtBRUYvSVFvQ1FDQVlRUVJJRFFBRFFDQURJQmhIQkVBZ0EwRVliQ0VKSUFOQkFXb2hBeUFISUFscUt3TVFSQUFBQUFBQUFBQUFZUTBCREFJTEN5QUZLd01BUkFBQUFBQUFBQUFBWVEwQUlBVXJBeUJFQUFBQUFBQUFBQUJpRFFBZ0JTc0RLRVFBQUFBQUFBQUFBR0VOQUNBRkt3TkFSQUFBQUFBQUFBQUFZZzBBSUFVckEwaEVBQUFBQUFBQUFBQmlEUUFnQlNzRFVFUUFBQUFBQUFEd1AySU5BQ0FGS3dNWVJBQUFBQUFBQUFBQVlnMEFJQVVyQXpoRUFBQUFBQUFBQUFCaURRQWdCU3NEV0VRQUFBQUFBQUFBQUdJTkFDQVlRUUYwSWdOQkNCQzZBU0lKUlFSQVFRQkJBMEhxQzBFQUVEd01BUXNnQTBFQkVMb0JJZ2dFUUNBSUtBSUFJUklnQ1NnQ0FDRVJBMEFnRHlBWVJ3UkFJQkVnRDBFSGRHb2lBeUFISUE5QkdHeHFJaGNyQXdBNUF3QWdGeXNEQ0NFOElBTkNBRGNES0NBRFFnQTNBeUFnQTBJQU53TVlJQU5DZ0lDQWdJQ0FnUGcvTndNUUlBTWdQRGtEQ0NBRElBd2dEMEVFZENJZGFpSUxLd01BSUJjckF3Q2FvamtETUNBTEt3TUFJVHdnRnlzRENDRTlJQU5DQURjRFVDQURRZ0EzQTBnZ0EwRkFhMElBTndNQUlBTWdQQ0E5bXFJNUF6Z2dBeUFYS3dNQU9RTllJQmNyQXdnaFBDQURRb0NBZ0lDQWdJRDRQemNEYUNBRElEdzVBMkFnQXlBTEt3TUlJQmNyQXdDYW9qa0RjQ0FESUFzckF3Z2dGeXNEQ0pxaU9RTjRJQklnSFdvaUF5QUxLd01BT1FNQUlBTWdDeXNEQ0RrRENDQVBRUUZxSVE4TUFRc0xJQWtRemdZaUEwVUVRQ0FKRUVVZ0NCQkZRUUJCQTBHdkhVRUFFRHdNQWdzZ0F5QUpFT1FDSWc5RkJFQWdDUkJGSUFnUVJTQURFRVZCQUVFRFFiQWhRUUFRUEF3Q0N5QURJQWdRNUFJaUYwVUVRQ0FKRUVVZ0NCQkZJQU1RUlNBUEVFVkJBRUVEUWFZbVFRQVFQQXdDQ3lBUEVLRURRUUJJQkVBZ0NSQkZJQWdRUlNBREVFVWdEeEJGSUJjUVJVRUFRUU5CL0N4QkFCQThEQUlMSUE4Z0Z4RGtBaUlMUlFSQUlBa1FSU0FJRUVVZ0F4QkZJQThRUlNBWEVFVkJBRUVEUWVReVFRQVFQQXdDQ3lBRkt3TXdJVTBnQ3lnQ0FDSUtLd01vSVZVZ0Npc0RFQ0ZXSUFvckF4Z2hQeUFLS3dNQUlVVWdDaXNETUNFOElBVXJBd0FoVGlBRkt3TUlJVThnQlNzREtDRlFJQW9yQXlBaFBpQUtLd01JSVVBZ0JTc0RFQ0ZSSUFvckF6Z2hQU0FKRUVVZ0NCQkZJQU1RUlNBUEVFVWdGeEJGSUFzUVJTQUNJRDBnUFNBOW9pQkFJRkVnUGFLaElFOGdQaUJOSUQyaW9TQlFveUk5b3FFZ1RxTWlQaUErb2lBOUlEMmlvS0NmSWxLak9RTW9JQUlnUFNCU296a0RJQ0FDSUQ0Z1VxTTVBeGdnQWlBOElEd2dQS0lnUlNCUklEeWlvU0JQSUQ4Z1RTQThvcUVnVUtNaVBLS2hJRTZqSWowZ1BhSWdQQ0E4b3FDZ255SlRvemtERUNBQ0lEd2dVNk01QXdnZ0FpQTlJRk9qT1FNQVFRQWhBMEVBSVFvQ1FDQUNLd01BSWtBZ0Fpc0RJQ0pLb2lBQ0t3TVlJa2NnQWlzRENDSkRvcUVpUFNBOW9pQkRJQUlyQXlnaVM2SWdTaUFDS3dNUUlraWlvU0krSUQ2aUlFZ2dSNklnU3lCQW9xRWlQeUEvb3FDZ255SThSQUFBQUFBQUFBQUFZUTBBSUQwZ1BLTWhQUUo4SUQ4Z1BLTWlSaUJBb2lBK0lEeWpJa1FnUTVxaW9DSS9SQUFBQUFBQUFBQUFZZ1JBSUVNaFBpQkFJVVVnUmlGQklFUWhQQ0JJREFFTElEMGdSaUE5SUVDaUlFUWdTSnFpb0NKQ1JBQUFBQUFBQUFBQVlpSURHeUpCSUVBZ1NDQURHeUpGb2lCRUlEMGdBeHNpUENCSUlFTWdBeHNpUHFLaElUOGdSaUJFSUFNYklUMGdRa1FBQUFBQUFBQUFBR0VoQ2lCRElFQWdBeHNMSVVZZ1AwUUFBQUFBQUFBQUFHRU5BQ0ErSUQyaUlFWWdRYUtoSUQraklrUWdTQ0JMb2lCQUlFZWlJRU1nU3FLZ29DSkFtaUJBSUVCRUFBQUFBQUFBQUFCakd5SkFSQUFBQUFBQUFQQS9vSjlFQUFBQUFBQUE4RDhnUUtHZm9FUUFBQUFBQUFEZ1A2SWlWQ0JCb2lBL295SkRvaUJVSUR5aUlEd2dQcUlnUVNCRm9xRWlQNk1pUGlCRklEMmlJRVlnUEtLaElEK2pJa2Fpb0NKSUlFaWlJRU1nUTZJZ1BpQStvcUJFQUFBQUFBQUE4TCtnSUVRZ1JLSWdSaUJHb3FCRUFBQUFBQUFBOEQrZ0lrS2lvU0kvUkFBQUFBQUFBQUFBWXcwQUlFWWdTSm9nUDU4aVNhRWdRcU1pUDZJZ1BxQWhRQ0JFSUQraUlFT2dJVVVnUmlCSklFaWhJRUtqSWtLaUlENmdJVWtnUkNCQ29pQkRvQ0ZEQW53Z0F3UkFJRUVoUGlBOUlVRWdQQ0U5SUVNaFNDQkpJVU1nUlNGRUlEOGhSaUJBSVVVZ1Fnd0JDeUFLUlFSQUlEMGhQaUE4SVQwZ1F5RklJRUloUXlCRklVUWdRQ0ZHSUQ4aFJTQkpEQUVMSUR3aFBpQkNJVWdnUHlGRUlFQWhSaUJKQ3lGTVFRQWhBd0ovSUVFZ1I2SWdQU0JLb3FFaVFFUUFBQUFBQUFBQUFHSUVRQ0JLSVR3Z1J5RkpJRUVoUHlBOUlVSkJBQXdCQ3lBK0lFRWdQaUJIb2lBOUlFdWlvU0pYUkFBQUFBQUFBQUFBWWlJREd5SS9JRWNnU3lBREd5SkpvaUE5SUQ0Z0F4c2lRaUJMSUVvZ0F4c2lQS0toSVVBZ1FTQTlJQU1iSVQ0Z1NpQkhJQU1iSVVzZ1YwUUFBQUFBQUFBQUFHRUxJUW9nUUVRQUFBQUFBQUFBQUdFTkFDQThJRDZpSUVzZ1A2S2hJRUNqSWowZ1ZDQS9vaUJBb3lKQW9pQlVJRUtpSUVJZ1BLSWdQeUJKb3FFaVBLTWlRU0JKSUQ2aUlFc2dRcUtoSUR5aklqNmlvQ0kvSUQraUlFQWdRS0lnUVNCQm9xQkVBQUFBQUFBQThMK2dJRDBnUGFJZ1BpQStvcUJFQUFBQUFBQUE4RCtnSWtxaW9TSThSQUFBQUFBQUFBQUFZdzBBSUQ0Z1A1b2dQSjhpU2FFZ1NxTWlRcUlnUWFBaFJ5QTlJRUtpSUVDZ0lUd2dQaUJKSUQraElFcWpJaitpSUVHZ0lVRWdQU0Evb2lCQW9DRStBbndnQXdSQUlENGhRQ0EvSVQwZ1FTRStJRHdoUHlCSElUd2dRZ3dCQ3lBS1JRUkFJRDRoUUNCQklUMGdQeUUrSUR3aFB5QkNJVHdnUnd3QkN5QS9JVUFnUVNFOUlFSWhQeUJIQ3lGQklFVWdQS0lnUkNBL29pQkdJRUdpb0tBaVFwb2dRaUJDUkFBQUFBQUFBQUFBWXhzaFFpQkZJRDZpSUVRZ1FLSWdSaUE5b3FDZ0lrZWFJRWNnUjBRQUFBQUFBQUFBQUdNYklVY0NRQUpBQWtBZ1F5QStvaUJJSUVDaUlFd2dQYUtnb0NKS21pQktJRXBFQUFBQUFBQUFBQUJqR3lKS0lFTWdQS0lnU0NBL29pQk1JRUdpb0tBaVNab2dTU0JKUkFBQUFBQUFBQUFBWXhzaVNXTUVRQ0JISUVwa0JFQWdRaUJLWkVVTkFpQUNJRU01QXhBZ0FpQk1PUU1JSUFJZ1NEa0RBQXdFQ3lBQ0lFVTVBeEFnQWlCR09RTUlJQUlnUkRrREFDQStJRHdnUWlCSFpDSURHeUUrSUQwZ1FTQURHeUU5SUVBZ1B5QURHeUZBREFNTElFY2dTV1FFUUNCQ0lFbGtSUTBCSUFJZ1F6a0RFQ0FDSUV3NUF3Z2dBaUJJT1FNQURBSUxJQUlnUlRrREVDQUNJRVk1QXdnZ0FpQkVPUU1BSUQ0Z1BDQkNJRWRrSWdNYklUNGdQU0JCSUFNYklUMGdRQ0EvSUFNYklVQU1BZ3NnQWlCRk9RTVFJQUlnUmprRENDQUNJRVE1QXdBTElEOGhRQ0JCSVQwZ1BDRStDeUFDSUQ0NUF5Z2dBaUE5T1FNZ0lBSWdRRGtER0FzZ0FrRkFheUFDS3dNQUlqd2dBaXNESUNJOW9pQUNLd01ZSWo0Z0Fpc0RDQ0kvb3FFaVJTQkZJRVdpSUQ4Z0Fpc0RLQ0pGb2lBOUlBSXJBeEFpUUtLaElrRWdRYUlnUUNBK29pQkZJRHlpb1NKRElFT2lvS0NmSWtTaklrWTVBd0FnQWlCRElFU2pJa001QXpnZ0FpQkJJRVNqSWtRNUF6QWdCQ0JXSUZHaElFOGdWU0JOb1NCUW95SklvcUVnVHFNZ1V5QlNvRVFBQUFBQUFBRGdQNklpUWFNNUE0Z0JJQVFnU0NCQm96a0RxQUVnQkVRQUFBQUFBQUR3UHlCQm96a0R5QUVnQkNCRU9RT0FBU0FFSUVNNUE2QUJJQVFnUmprRHdBRWdCQ0ErT1FONElBUWdQVGtEbUFFZ0JDQkZPUU80QVNBRUlEODVBNUFCSUFRZ1FEa0RzQUVnQkNBOE9RTndRUUFoQ2d3QkN5QUpFRVZCQUVFRFFaSVlRUUFRUEFzZ0FrSFFBR29rQUNBS1FRQklCRUFnREJBeklBY1FNd3dCQ3lBRUlBVVE3d01pQWpZQzNBRWdBa1VFUUNBTUVETWdCeEF6REFFTElBSWdCRUhRQVdvZ0JFSHdBR29nQkNBRVFlZ0FhaERtQlVFQVRnUkFRUUFoQ2dOQVFRQWhCaUFLUVFOR0JFQWdCRUhjQVdvUTdBTWdEQkF6SUFjUU15QVFJQVFyQTJpMklpNDRBalJCZjBFQUlDNURBQUFnUVY0YklRWU1Bd1VEUUNBR1FRUkhCRUFnRUNBS1FRUjBhaUFHUVFKMGFpQUVJQXBCQlhScUlBWkJBM1JxS3dNQXRqZ0NBQ0FHUVFGcUlRWU1BUXNMSUFwQkFXb2hDZ3dCQ3dBTEFBc2dEQkF6SUFjUU15QUVRZHdCYWhEc0F3c2dCRUhnQVdva0FDQUdEQUVMREFZTERRTWdEa0hFQUd3aUFpQUFLQUkwYWtFQU5nSThJQTBRUWlFRUlBQW9BalFnQW1vaUF5QU9OZ0l3SUFNZ0JEWUNPQ0FORUVJaEJDQU5FRUloQXlBY0lBQW9BalFnQW1vcUFqUzdPUU1RSUJ3Z0F6WUNDQ0FjSUFRMkFnUWdIQ0FPTmdJQVFRQkJBVUdmN1FBZ0hCQThEQU1GSUFBb0FqUWdBa0hFQUd4cVFYODJBandnQWtFQmFpRUNEQUVMQUFzQUN3d0NDeUFBS0FJNElnSkJBQ0FDUVFCS0d5RUVRUUFoQWdOQUlBSWdCRWNFUUNBQUtBSTBJQUpCeEFCc2FrRUFOZ0pBSUFKQkFXb2hBZ3dCQ3dzZ0pFRUJSZzBBSUFFUU13c2dIRUVnYWlRQUR3dEJBRUVEUVlUTUFFRUFFRHhCQVJBREFBdEJBRUVEUWFRT1FRQVFQRUVCRUFNQUN4QUFBQXRVQVFKL0lBRWdBQ2dDVkNJQklBRkJBQ0FDUVlBQ2FpSURFTmtESWdRZ0FXc2dBeUFFR3lJRElBSWdBaUFEU3hzaUFoQS9HaUFBSUFFZ0Eyb2lBellDVkNBQUlBTTJBZ2dnQUNBQklBSnFOZ0lFSUFJTHFRRUJCSDhnQUNnQ1ZDSURLQUlFSWdVZ0FDZ0NGQ0FBS0FJY0lnWnJJZ1FnQkNBRlN4c2lCQVJBSUFNb0FnQWdCaUFFRUQ4YUlBTWdBeWdDQUNBRWFqWUNBQ0FESUFNb0FnUWdCR3NpQlRZQ0JBc2dBeWdDQUNFRUlBVWdBaUFDSUFWTEd5SUZCRUFnQkNBQklBVVFQeG9nQXlBREtBSUFJQVZxSWdRMkFnQWdBeUFES0FJRUlBVnJOZ0lFQ3lBRVFRQTZBQUFnQUNBQUtBSXNJZ0UyQWh3Z0FDQUJOZ0lVSUFJTEtRQWdBU0FCS0FJQVFRZHFRWGh4SWdGQkVHbzJBZ0FnQUNBQktRTUFJQUVwQXdnUTBnTTVBd0FMeHhnREVuOEJmQUorSXdCQnNBUnJJZ3NrQUNBTFFRQTJBaXdDUUNBQnZTSVpRZ0JUQkVCQkFTRVFRYWpqQVNFVElBR2FJZ0c5SVJrTUFRc2dCRUdBRUhFRVFFRUJJUkJCcStNQklSTU1BUXRCcnVNQlFhbmpBU0FFUVFGeEloQWJJUk1nRUVVaEZRc0NRQ0FaUW9DQWdJQ0FnSUQ0L3dDRFFvQ0FnSUNBZ0lENC93QlJCRUFnQUVFZ0lBSWdFRUVEYWlJRElBUkIvLzk3Y1JDTUFTQUFJQk1nRUJDSUFTQUFRY1gxQVVHRGtBSWdCVUVnY1NJRkcwR2grUUZCbTVNQ0lBVWJJQUVnQVdJYlFRTVFpQUVnQUVFZ0lBSWdBeUFFUVlEQUFITVFqQUVnQXlBQ0lBSWdBMGdiSVFrTUFRc2dDMEVRYWlFUkFrQUNmd0pBSUFFZ0MwRXNhaENKQlNJQklBR2dJZ0ZFQUFBQUFBQUFBQUJpQkVBZ0N5QUxLQUlzSWdaQkFXczJBaXdnQlVFZ2NpSU9RZUVBUncwQkRBTUxJQVZCSUhJaURrSGhBRVlOQWlBTEtBSXNJUXBCQmlBRElBTkJBRWdiREFFTElBc2dCa0VkYXlJS05nSXNJQUZFQUFBQUFBQUFzRUdpSVFGQkJpQURJQU5CQUVnYkN5RU1JQXRCTUdwQkFFR2dBaUFLUVFCSUcyb2lEU0VIQTBBZ0J3Si9JQUZFQUFBQUFBQUE4RUZqSUFGRUFBQUFBQUFBQUFCbWNRUkFJQUdyREFFTFFRQUxJZ00yQWdBZ0IwRUVhaUVISUFFZ0E3aWhSQUFBQUFCbHpjMUJvaUlCUkFBQUFBQUFBQUFBWWcwQUN3SkFJQXBCQUV3RVFDQUtJUU1nQnlFR0lBMGhDQXdCQ3lBTklRZ2dDaUVEQTBBZ0EwRWRJQU5CSFVnYklRTUNRQ0FIUVFScklnWWdDRWtOQUNBRHJTRWFRZ0FoR1FOQUlBWWdHVUwvLy8vL0Q0TWdCalVDQUNBYWhud2lHU0FaUW9DVTY5d0RnQ0laUW9DVTY5d0RmbjArQWdBZ0JrRUVheUlHSUFoUERRQUxJQm1uSWdaRkRRQWdDRUVFYXlJSUlBWTJBZ0FMQTBBZ0NDQUhJZ1pKQkVBZ0JrRUVheUlIS0FJQVJRMEJDd3NnQ3lBTEtBSXNJQU5ySWdNMkFpd2dCaUVISUFOQkFFb05BQXNMSUFOQkFFZ0VRQ0FNUVJscVFRbHVRUUZxSVE4Z0RrSG1BRVloRWdOQVFRQWdBMnNpQTBFSklBTkJDVWdiSVFrQ1FDQUdJQWhOQkVBZ0NDZ0NBQ0VIREFFTFFZQ1U2OXdESUFsMklSUkJmeUFKZEVGL2N5RVdRUUFoQXlBSUlRY0RRQ0FISUFNZ0J5Z0NBQ0lYSUFsMmFqWUNBQ0FXSUJkeElCUnNJUU1nQjBFRWFpSUhJQVpKRFFBTElBZ29BZ0FoQnlBRFJRMEFJQVlnQXpZQ0FDQUdRUVJxSVFZTElBc2dDeWdDTENBSmFpSUROZ0lzSUEwZ0NDQUhSVUVDZEdvaUNDQVNHeUlISUE5QkFuUnFJQVlnQmlBSGEwRUNkU0FQU2hzaEJpQURRUUJJRFFBTEMwRUFJUU1DUUNBR0lBaE5EUUFnRFNBSWEwRUNkVUVKYkNFRFFRb2hCeUFJS0FJQUlnbEJDa2tOQUFOQUlBTkJBV29oQXlBSklBZEJDbXdpQjA4TkFBc0xJQXhCQUNBRElBNUI1Z0JHRzJzZ0RrSG5BRVlnREVFQVIzRnJJZ2NnQmlBTmEwRUNkVUVKYkVFSmEwZ0VRRUVFUWFRQ0lBcEJBRWdiSUF0cUlBZEJnTWdBYWlJSlFRbHRJZzlCQW5ScVFkQWZheUVLUVFvaEJ5QUpJQTlCQ1d4cklnbEJCMHdFUUFOQUlBZEJDbXdoQnlBSlFRRnFJZ2xCQ0VjTkFBc0xBa0FnQ2lnQ0FDSVNJQklnQjI0aUR5QUhiR3NpQ1VVZ0NrRUVhaUlVSUFaR2NRMEFBa0FnRDBFQmNVVUVRRVFBQUFBQUFBQkFReUVCSUFkQmdKVHIzQU5ISUFnZ0NrOXlEUUVnQ2tFRWF5MEFBRUVCY1VVTkFRdEVBUUFBQUFBQVFFTWhBUXRFQUFBQUFBQUE0RDlFQUFBQUFBQUE4RDlFQUFBQUFBQUErRDhnQmlBVVJodEVBQUFBQUFBQStEOGdDU0FIUVFGMkloUkdHeUFKSUJSSkd5RVlBa0FnRlEwQUlCTXRBQUJCTFVjTkFDQVltaUVZSUFHYUlRRUxJQW9nRWlBSmF5SUpOZ0lBSUFFZ0dLQWdBV0VOQUNBS0lBY2dDV29pQXpZQ0FDQURRWUNVNjl3RFR3UkFBMEFnQ2tFQU5nSUFJQWdnQ2tFRWF5SUtTd1JBSUFoQkJHc2lDRUVBTmdJQUN5QUtJQW9vQWdCQkFXb2lBellDQUNBRFFmK1Q2OXdEU3cwQUN3c2dEU0FJYTBFQ2RVRUpiQ0VEUVFvaEJ5QUlLQUlBSWdsQkNra05BQU5BSUFOQkFXb2hBeUFKSUFkQkNtd2lCMDhOQUFzTElBcEJCR29pQnlBR0lBWWdCMHNiSVFZTEEwQWdCaUlISUFoTklnbEZCRUFnQjBFRWF5SUdLQUlBUlEwQkN3c0NRQ0FPUWVjQVJ3UkFJQVJCQ0hFaENnd0JDeUFEUVg5elFYOGdERUVCSUF3YklnWWdBMG9nQTBGN1NuRWlDaHNnQm1vaERFRi9RWDRnQ2hzZ0JXb2hCU0FFUVFoeElnb05BRUYzSVFZQ1FDQUpEUUFnQjBFRWF5Z0NBQ0lPUlEwQVFRb2hDVUVBSVFZZ0RrRUtjQTBBQTBBZ0JpSUtRUUZxSVFZZ0RpQUpRUXBzSWdsd1JRMEFDeUFLUVg5eklRWUxJQWNnRFd0QkFuVkJDV3doQ1NBRlFWOXhRY1lBUmdSQVFRQWhDaUFNSUFZZ0NXcEJDV3NpQmtFQUlBWkJBRW9iSWdZZ0JpQU1TaHNoREF3QkMwRUFJUW9nRENBRElBbHFJQVpxUVFscklnWkJBQ0FHUVFCS0d5SUdJQVlnREVvYklRd0xRWDhoQ1NBTVFmMy8vLzhIUWY3Ly8vOEhJQW9nREhJaUVodEtEUUVnRENBU1FRQkhha0VCYWlFT0FrQWdCVUZmY1NJVlFjWUFSZ1JBSUFOQi8vLy8vd2NnRG10S0RRTWdBMEVBSUFOQkFFb2JJUVlNQVFzZ0VTQURJQU5CSDNVaUJuTWdCbXV0SUJFUW9nSWlCbXRCQVV3RVFBTkFJQVpCQVdzaUJrRXdPZ0FBSUJFZ0JtdEJBa2dOQUFzTElBWkJBbXNpRHlBRk9nQUFJQVpCQVd0QkxVRXJJQU5CQUVnYk9nQUFJQkVnRDJzaUJrSC8vLy8vQnlBT2Ewb05BZ3NnQmlBT2FpSURJQkJCLy8vLy93ZHpTZzBCSUFCQklDQUNJQU1nRUdvaUJTQUVFSXdCSUFBZ0V5QVFFSWdCSUFCQk1DQUNJQVVnQkVHQWdBUnpFSXdCQWtBQ1FBSkFJQlZCeGdCR0JFQWdDMEVRYWlJR1FRaHlJUU1nQmtFSmNpRUtJQTBnQ0NBSUlBMUxHeUlKSVFnRFFDQUlOUUlBSUFvUW9nSWhCZ0pBSUFnZ0NVY0VRQ0FHSUF0QkVHcE5EUUVEUUNBR1FRRnJJZ1pCTURvQUFDQUdJQXRCRUdwTERRQUxEQUVMSUFZZ0NrY05BQ0FMUVRBNkFCZ2dBeUVHQ3lBQUlBWWdDaUFHYXhDSUFTQUlRUVJxSWdnZ0RVME5BQXNnRWdSQUlBQkJrcDhDUVFFUWlBRUxJQXhCQUV3Z0J5QUlUWElOQVFOQUlBZzFBZ0FnQ2hDaUFpSUdJQXRCRUdwTEJFQURRQ0FHUVFGcklnWkJNRG9BQUNBR0lBdEJFR3BMRFFBTEN5QUFJQVlnREVFSklBeEJDVWdiRUlnQklBeEJDV3NoQmlBSVFRUnFJZ2dnQjA4TkF5QU1RUWxLSVFNZ0JpRU1JQU1OQUFzTUFnc0NRQ0FNUVFCSURRQWdCeUFJUVFScUlBY2dDRXNiSVFrZ0MwRVFhaUlHUVFoeUlRTWdCa0VKY2lFTklBZ2hCd05BSUEwZ0J6VUNBQ0FORUtJQ0lnWkdCRUFnQzBFd09nQVlJQU1oQmdzQ1FDQUhJQWhIQkVBZ0JpQUxRUkJxVFEwQkEwQWdCa0VCYXlJR1FUQTZBQUFnQmlBTFFSQnFTdzBBQ3d3QkN5QUFJQVpCQVJDSUFTQUdRUUZxSVFZZ0NpQU1ja1VOQUNBQVFaS2ZBa0VCRUlnQkN5QUFJQVlnRENBTklBWnJJZ1lnQmlBTVNoc1FpQUVnRENBR2F5RU1JQWRCQkdvaUJ5QUpUdzBCSUF4QkFFNE5BQXNMSUFCQk1DQU1RUkpxUVJKQkFCQ01BU0FBSUE4Z0VTQVBheENJQVF3Q0N5QU1JUVlMSUFCQk1DQUdRUWxxUVFsQkFCQ01BUXNnQUVFZ0lBSWdCU0FFUVlEQUFITVFqQUVnQlNBQ0lBSWdCVWdiSVFrTUFRc2dFeUFGUVJwMFFSOTFRUWx4YWlFTUFrQWdBMEVMU3cwQVFRd2dBMnNoQmtRQUFBQUFBQUF3UUNFWUEwQWdHRVFBQUFBQUFBQXdRS0loR0NBR1FRRnJJZ1lOQUFzZ0RDMEFBRUV0UmdSQUlCZ2dBWm9nR0tHZ21pRUJEQUVMSUFFZ0dLQWdHS0VoQVFzZ0VTQUxLQUlzSWdZZ0JrRWZkU0lHY3lBR2E2MGdFUkNpQWlJR1JnUkFJQXRCTURvQUR5QUxRUTlxSVFZTElCQkJBbkloQ2lBRlFTQnhJUWdnQ3lnQ0xDRUhJQVpCQW1zaURTQUZRUTlxT2dBQUlBWkJBV3RCTFVFcklBZEJBRWdiT2dBQUlBUkJDSEVoQmlBTFFSQnFJUWNEUUNBSElnVUNmeUFCbVVRQUFBQUFBQURnUVdNRVFDQUJxZ3dCQzBHQWdJQ0FlQXNpQjBIZ2hRTnFMUUFBSUFoeU9nQUFJQVlnQTBFQVNuSkZJQUVnQjdlaFJBQUFBQUFBQURCQW9pSUJSQUFBQUFBQUFBQUFZWEVnQlVFQmFpSUhJQXRCRUdwclFRRkhja1VFUUNBRlFTNDZBQUVnQlVFQ2FpRUhDeUFCUkFBQUFBQUFBQUFBWWcwQUMwRi9JUWxCL2YvLy93Y2dDaUFSSUExcklnVnFJZ1pySUFOSURRQWdBRUVnSUFJZ0JnSi9Ba0FnQTBVTkFDQUhJQXRCRUdwcklnaEJBbXNnQTA0TkFDQURRUUpxREFFTElBY2dDMEVRYW1zaUNBc2lCMm9pQXlBRUVJd0JJQUFnRENBS0VJZ0JJQUJCTUNBQ0lBTWdCRUdBZ0FSekVJd0JJQUFnQzBFUWFpQUlFSWdCSUFCQk1DQUhJQWhyUVFCQkFCQ01BU0FBSUEwZ0JSQ0lBU0FBUVNBZ0FpQURJQVJCZ01BQWN4Q01BU0FESUFJZ0FpQURTQnNoQ1FzZ0MwR3dCR29rQUNBSkN5RUJBbjhnQUJDZ0FVRUJhaUlCRURraUFrVUVRRUVBRHdzZ0FpQUFJQUVRUHdzRUFFSUFDd1FBUVFBTE9RRUJmZ0orSUFBb0FreEJBRWdFUUNBQUVKWUZEQUVMSUFBUWxnVUxJZ0ZDZ0lDQWdBaFpCRUJCOEpZRVFUMDJBZ0JCZnc4TElBR25Dd2tBSUFBb0Fqd1FFUXZjQVFFRWZ5TUFRU0JySWdNa0FDQURJQUUyQWhBZ0F5QUNJQUFvQWpBaUJFRUFSMnMyQWhRZ0FDZ0NMQ0VHSUFNZ0JEWUNIQ0FESUFZMkFoaEJJQ0VFQWtBQ1FDQUFJQUFvQWp3Z0EwRVFha0VDSUFOQkRHb1FKQkQ5QWdSL1FTQUZJQU1vQWd3aUJFRUFTZzBCUVNCQkVDQUVHd3NnQUNnQ0FISTJBZ0FNQVFzZ0F5Z0NGQ0lHSUFSUEJFQWdCQ0VGREFFTElBQWdBQ2dDTENJRk5nSUVJQUFnQlNBRUlBWnJhallDQ0NBQUtBSXdCRUFnQUNBRlFRRnFOZ0lFSUFFZ0FtcEJBV3NnQlMwQUFEb0FBQXNnQWlFRkN5QURRU0JxSkFBZ0JRdllBZ0VIZnlNQVFTQnJJZ01rQUNBRElBQW9BaHdpQkRZQ0VDQUFLQUlVSVFVZ0F5QUNOZ0ljSUFNZ0FUWUNHQ0FESUFVZ0JHc2lBVFlDRkNBQklBSnFJUVVnQTBFUWFpRUJRUUloQndKL0FrQUNRQUpBSUFBb0Fqd2dBVUVDSUFOQkRHb1FFaEQ5QWdSQUlBRWhCQXdCQ3dOQUlBVWdBeWdDRENJR1JnMENJQVpCQUVnRVFDQUJJUVFNQkFzZ0FTQUdJQUVvQWdRaUNFc2lDVUVEZEdvaUJDQUdJQWhCQUNBSkcyc2lDQ0FFS0FJQWFqWUNBQ0FCUVF4QkJDQUpHMm9pQVNBQktBSUFJQWhyTmdJQUlBVWdCbXNoQlNBQUtBSThJQVFpQVNBSElBbHJJZ2NnQTBFTWFoQVNFUDBDUlEwQUN3c2dCVUYvUncwQkN5QUFJQUFvQWl3aUFUWUNIQ0FBSUFFMkFoUWdBQ0FCSUFBb0FqQnFOZ0lRSUFJTUFRc2dBRUVBTmdJY0lBQkNBRGNERUNBQUlBQW9BZ0JCSUhJMkFnQkJBQ0FIUVFKR0RRQWFJQUlnQkNnQ0JHc0xJUUVnQTBFZ2FpUUFJQUVMUmdFQmZ5QUFLQUk4SVFNakFFRVFheUlBSkFBZ0F5QUJweUFCUWlDSXB5QUNRZjhCY1NBQVFRaHFFQjBRL1FJaEFpQUFLUU1JSVFFZ0FFRVFhaVFBUW44Z0FTQUNHd3NHQUVId2xnUUxDZ0FnQUNnQ0JCRHNCd3VmQVFFRWZ5QURRUUJLQkVBZ0FDZ0NjQ0VDSUFBb0F1UURLQUlZSVFjRFFDQUNCRUFnQVNBRlFRSjBhaWdDQUNFQUlBSWhCZ05BSUFjZ0FDMEFBRUVCZGtIOEFIRnFLQUlBSUFBdEFBRkJCSFJCd0I5eGFpQUFMUUFDUVFKMlFUNXhhaUlFSUFRdkFRQWlCQ0FFUVFGcUlnUWdCQ0FFUWYvL0EzRkhHenNCQUNBQVFRTnFJUUFnQmtFQmF5SUdEUUFMQ3lBRlFRRnFJZ1VnQTBjTkFBc0xDLzRLQVJwL0lBQWdBQ2dDNUFNaUV5Z0NFRFlDaUFFZ0FFRUJJQk1vQWhRaUNFRUZkQ0FBS0FJRUtBSUFFUVFBSWd0Q2dJQ0FnUEFETndJUUlBdENnSUNBZ1BBSE53SUlJQXRDZ0lDQWdQQUROd0lBSUFBZ0N4RGNBMEVCSVFvQ1FBSkFJQWhCQWtnTkFBTkFBa0FDUUFKQUlBZ2dDa0VCZEU0RVFDQUtRUUZ4SVFRZ0R3MEJRUUFoQWtFQUlRTWdDeUVCREFJTFFRQWhDVUVBSVFKQkFDRURJQXNoQVNBUFFRTlBCRUFnQ2tIOC8vLy9CM0VoQjBFQUlRUURRQ0FCUWVBQWFpQUJRVUJySUFGQklHb2dBU0FDSUFFb0FoZ2lBaUFEU2lJRkd5QUJLQUk0SWdZZ0FpQURJQVViSWdKS0lnTWJJQUVvQWxnaUJTQUdJQUlnQXhzaUFrb2lBeHNnQVNnQ2VDSUdJQVVnQWlBREd5SURTaUlGR3lFQ0lBWWdBeUFGR3lFRElBRkJnQUZxSVFFZ0JFRUVhaUlFSUFkSERRQUxDeUFLUVFOeElnUkZEUUlEUUNBQklBSWdBU2dDR0NJSElBTktJZ1ViSVFJZ0J5QURJQVViSVFNZ0FVRWdhaUVCSUFsQkFXb2lDU0FFUncwQUN3d0NDeUFLUWY3Ly8vOEhjU0VIUVFBaEFrRUFJUU1nQ3lFQlFRQWhDUU5BSUFNZ0FTZ0NIQ0lGU0FSQUlBRWdBaUFCS0FJWVFRQktJZ1liSVFJZ0JTQURJQVliSVFNTElBTWdBU2dDUENJRlNBUkFJQUZCSUdvZ0FpQUJLQUk0UVFCS0lnWWJJUUlnQlNBRElBWWJJUU1MSUFGQlFHc2hBU0FKUVFKcUlna2dCMGNOQUFzTElBUkZEUUFnQVNnQ0hDQURUQTBBSUFFZ0FpQUJLQUlZUVFCS0d5RUNDeUFDUlEwQklBc2dDa0VGZEdvaUFTQUNLQUlFTmdJRUlBRWdBaWdDRERZQ0RDQUJJQUlvQWhRMkFoUWdBU0FDS0FJQU5nSUFJQUVnQWlnQ0NEWUNDQ0FCSUFJb0FoQTJBaEFDUUFKL0FrQUNRQUpBUVFJZ0FpZ0NCQ0lFSUFJb0FnQWlCMnRCQkhRaUNTQUNLQUlNSWdVZ0FpZ0NDQ0lHYTBFTWJDSURUQ0FDS0FJVUlnMGdBaWdDRUNJT2EwRURkQ0FKSUFNZ0F5QUpTQnRLR3c0REFBRUNCQXNnQWlBRUlBZHFRUUp0SWdNMkFnUWdBUXdDQ3lBQ0lBVWdCbXBCQW0waUF6WUNEQ0FCUVFocURBRUxJQUlnRFNBT2FrRUNiU0lETmdJVUlBRkJFR29MSUFOQkFXbzJBZ0FMSUFBZ0FoRGNBeUFBSUFFUTNBTWdEMEVCYWlFUElBcEJBV29pQ2lBSVJ3MEFDeUFJSWdwQkFFd05BUXRCQUNFTkEwQkJBQ0VFUVFBaEIwRUFJUVZCQUNFR0lBc2dEVUVGZEdvaUFTZ0NBQ0lPSUFFb0FnUWlGa3dFUUNBQktBSUlJUU1nQUNnQzVBTW9BaGdoRnlBQktBSVFJZ2hCQVdvaER5QUlRUU4wUVFSeUlSZ2dBU2dDRkNJUUlBaHJRUUZxUVFGeElSa2dBU2dDRENFVUEwQWdBeUFVVEFSQUlBNUJBM1JCQkhJaEVTQVhJQTVCQW5ScUtBSUFJUm9nQXlFQkEwQWdBU0VKQWtBZ0NDQVFTZzBBSUJvZ0NVRUdkR29nQ0VFQmRHb2hBaUFKUVFKMFFRSnlJUklDZnlBWlJRUkFJQUloQVNBSURBRUxJQUpCQW1vaEFTQUNMd0VBSWdJRVFDQUNJQmhzSUFacUlRWWdBaUFTYkNBRmFpRUZJQUlnRVd3Z0Iyb2hCeUFDSUFScUlRUUxJQThMSVFJZ0NDQVFSZzBBQTBBZ0FTOEJBQ0lNQkVBZ0RDQVNiQ0FGYWlFRklBd2dFV3dnQjJvaEJ5QUNRUU4wUVFSeUlBeHNJQVpxSVFZZ0JDQU1haUVFQ3lBQ1FRRnFJUlVnQVM4QkFpSU1CRUFnRENBU2JDQUZhaUVGSUF3Z0VXd2dCMm9oQnlBVlFRTjBRUVJ5SUF4c0lBWnFJUVlnQkNBTWFpRUVDeUFCUVFScUlRRWdBa0VDYWlFQ0lCQWdGVWNOQUFzTElBbEJBV29oQVNBSklCUkhEUUFMQ3lBT0lCWkhJUUVnRGtFQmFpRU9JQUVOQUFzTElBQW9Bb2dCS0FJQUlBMXFJQWNnQkVFQmRTSUJhaUFFYlRvQUFDQUFLQUtJQVNnQ0JDQU5haUFCSUFWcUlBUnRPZ0FBSUFBb0FvZ0JLQUlJSUExcUlBRWdCbW9nQkcwNkFBQWdEVUVCYWlJTklBcEhEUUFMSUFvaENBc2dBQ0FJTmdLRUFTQUFLQUlBSWdFZ0NEWUNHQ0FCUWVJQU5nSVVJQUJCQVNBQUtBSUFLQUlFRVFJQUlCTkJBVFlDSEF1ekJRRWpmeUFEUVFCS0JFQWdBQ2dDMEFJaEVpQUFLQUtJQVNJRktBSUlJUnNnQlNnQ0JDRWNJQVVvQWdBaEhTQUFLQUxrQXlJS0tBSW9JUk1nQ2lnQ0dDRWVJQUFvQW5BaUZFRUJheUVmSUJSQkEyd2lCVUVEYXlFZ0lBVkJBMnBCQVhRaElRTkFJQUlnRlVFQ2RDSUZhaWdDQUNFTElBRWdCV29vQWdBaEJ3Si9JQW9vQWlRRVFDQUxJQjlxSVFzZ0J5QWdhaUVIUVgwaERFRi9JUlpCQUNFRUlBb29BaUFnSVdvTUFRdEJBeUVNUVFFaEJFRUJJUllnQ2lnQ0lBc2hCU0FLSUFRMkFpUUNRQ0FVUlFSQVFRQWhEVUVBSVE1QkFDRVBEQUVMSUF4QkFtb2hJaUFNUVFGcUlTTkJBQ0VRUVFBaENVRUFJUkZCQUNFWFFRQWhHRUVBSVJsQkFDRVBRUUFoRGtFQUlRMGdGQ0VhSUFVaEJBTkFJQXNnSGlBU0lCTWdFQ0FFSUF4QkFYUnFJZ1V1QVFCcVFRaHFRUVIxUVFKMGFpZ0NBQ0FITFFBQWFtb3RBQUFpSkVFRGRpSWxRUUowYWlnQ0FDQVNJQk1nQ1NBRUlDTkJBWFJxTGdFQWFrRUlha0VFZFVFQ2RHb29BZ0FnQnkwQUFXcHFMUUFBSWhCQkFuWWlDVUVHZEdvZ0VpQVRJQkVnQkNBaVFRRjBhaTRCQUdwQkNHcEJCSFZCQW5ScUtBSUFJQWN0QUFKcWFpMEFBQ0lSUVFOMklnWkJBWFJxSWdndkFRQWlKZ1IvSUNZRklBQWdKU0FKSUFZUW9nVWdDQzhCQUF0QkFXc2lCam9BQUNBR0lCMXFMUUFBSVFrZ0JpQWNhaTBBQUNFSUlBUWdFU0FHSUJ0cUxRQUFheUlHUVFOc0lBMXFPd0VFSUFRZ0VDQUlheUlJUVFOc0lBNXFPd0VDSUFRZ0pDQUpheUlFUVFOc0lBOXFPd0VBSUFzZ0Ztb2hDeUFISUF4cUlRY2dCa0VIYkNFUklBaEJCMndoQ1NBRVFRZHNJUkFnQmtFRmJDQVphaUVOSUFoQkJXd2dHR29oRGlBRVFRVnNJQmRxSVE4Z0JDRVhJQWdoR0NBR0lSa2dCU0VFSUJwQkFXc2lHZzBBQ3dzZ0JTQU5Pd0VFSUFVZ0Rqc0JBaUFGSUE4N0FRQWdGVUVCYWlJVklBTkhEUUFMQ3d1L0FRRUxmeUFEUVFCS0JFQWdBQ2dDY0NFSklBQW9BdVFES0FJWUlRb0RRQ0FKQkVBZ0FTQUdRUUowSWdWcUtBSUFJUVFnQWlBRmFpZ0NBQ0VISUFraEJRTkFJQW9nQkMwQUFFRURkaUlMUVFKMGFpZ0NBQ0FFTFFBQlFRSjJJZ3hCQm5ScUlBUXRBQUpCQTNZaURVRUJkR29pRGk4QkFDSUlSUVJBSUFBZ0N5QU1JQTBRb2dVZ0RpMEFBQ0VJQ3lBRVFRTnFJUVFnQnlBSVFRRnJPZ0FBSUFkQkFXb2hCeUFGUVFGcklnVU5BQXNMSUFaQkFXb2lCaUFEUncwQUN3c0x0QVVCQkg4Z0FDZ0M1QU1pQXlnQ0dDRUNBa0FDUUFKL0lBQW9BbGhGQkVBZ0FRMENRZmdCREFFTElBQkJBallDV0NBQkRRRkIrUUVMSVFFZ0EwSDZBVFlDQ0NBRElBRTJBZ1JCQVNFQkFrQWdBQ2dDaEFFaUJFRUFUQVIvUVRvRklBUkJnUUpKRFFGQmdBSWhBVUU3Q3lFRUlBQW9BZ0FpQlNBQk5nSVlJQVVnQkRZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMSUFBb0FsaEJBa2NOQVNBQUtBSndRUVpzUVF4cUlRRWdBeWdDSUNJRVJRUkFJQU1nQUVFQklBRWdBQ2dDQkNnQ0JCRUVBQ0lFTmdJZ0N5QUVRUUFnQVJBNkdpQURLQUlvUlFSQUlBQVFvd1VMSUFOQkFEWUNKQXdCQ3lBRFFRRTJBaHdnQTBIN0FUWUNDQ0FEUWZ3Qk5nSUVDeUFES0FJY0JFQWdBaWdDQUVFQVFZQWdFRG9hSUFJb0FnUkJBRUdBSUJBNkdpQUNLQUlJUVFCQmdDQVFPaG9nQWlnQ0RFRUFRWUFnRURvYUlBSW9BaEJCQUVHQUlCQTZHaUFDS0FJVVFRQkJnQ0FRT2hvZ0FpZ0NHRUVBUVlBZ0VEb2FJQUlvQWh4QkFFR0FJQkE2R2lBQ0tBSWdRUUJCZ0NBUU9ob2dBaWdDSkVFQVFZQWdFRG9hSUFJb0FpaEJBRUdBSUJBNkdpQUNLQUlzUVFCQmdDQVFPaG9nQWlnQ01FRUFRWUFnRURvYUlBSW9BalJCQUVHQUlCQTZHaUFDS0FJNFFRQkJnQ0FRT2hvZ0FpZ0NQRUVBUVlBZ0VEb2FJQUlvQWtCQkFFR0FJQkE2R2lBQ0tBSkVRUUJCZ0NBUU9ob2dBaWdDU0VFQVFZQWdFRG9hSUFJb0FreEJBRUdBSUJBNkdpQUNLQUpRUVFCQmdDQVFPaG9nQWlnQ1ZFRUFRWUFnRURvYUlBSW9BbGhCQUVHQUlCQTZHaUFDS0FKY1FRQkJnQ0FRT2hvZ0FpZ0NZRUVBUVlBZ0VEb2FJQUlvQW1SQkFFR0FJQkE2R2lBQ0tBSm9RUUJCZ0NBUU9ob2dBaWdDYkVFQVFZQWdFRG9hSUFJb0FuQkJBRUdBSUJBNkdpQUNLQUowUVFCQmdDQVFPaG9nQWlnQ2VFRUFRWUFnRURvYUlBSW9BbnhCQUVHQUlCQTZHaUFEUVFBMkFod0xDdzBBSUFBb0F1UURRUUUyQWh3THR3TUJHSDhnQTBFQVNnUkFJQUFvQXRBQ0lSSWdBQ2dDNUFNaEJVRUFJQUFvQW5naUNXc2hFeUFBS0FKd0lncEJBV3NpRkNBSmJDRVZJQXBCQVdwQkFYUWhGZ05BSUFJZ0RVRUNkQ0lBYWlJWEtBSUFRUUFnQ2hBNkdpQUpRUUJLQkVBZ0FDQUJhaUVZUVFBaEJnTkFJQmdvQWdBZ0Jtb2hCeUFYS0FJQUlRQUNmeUFGS0FKVUJFQWdBQ0FVYWlFQUlBY2dGV29oQjBGL0lRNGdFeUVQSUFVZ0JrRUNkR29vQWtRZ0Ztb01BUXRCQVNFT0lBa2hEeUFGSUFaQkFuUnFLQUpFQ3lFRVFRQWhDd0pBSUFwRkJFQWdCQ0VJUVFBaERBd0JDeUFHUVFKMElnZ2dCU2dDRUdvb0FnQWhHU0FGS0FJWUlBaHFLQUlBSVJwQkFDRVFJQW9oRVVFQUlRd0RRQ0FBSUJvZ0VpQUhMUUFBSUFzZ0JDQU9RUUYwYWlJSUxnRUFha0VJYWtFRWRXcHFMUUFBSWd0cUxRQUFJaHNnQUMwQUFHbzZBQUFnQkNBTElCa2dHMm90QUFCcklnUkJBMndnREdvN0FRQWdCRUVIYkNFTElBUkJCV3dnRUdvaERDQUFJQTVxSVFBZ0J5QVBhaUVISUFRaEVDQUlJUVFnRVVFQmF5SVJEUUFMQ3lBSUlBdzdBUUFnQmtFQmFpSUdJQWxIRFFBTEN5QUZJQVVvQWxSRk5nSlVJQTFCQVdvaURTQURSdzBBQ3dzTDhRSUJEMzhnQTBFQVNnUkFJQUFvQW5naEJpQUFLQUxrQXlFSElBQW9BbkFpQ0VGK2NTRVBJQWhCQVhFaEVBTkFJQUlnQ2tFQ2RDSUFhaUlSS0FJQVFRQWdDQkE2R2lBSEtBSXdJUTBnQmtFQVNnUkFJQUFnQVdvaEVrRUFJUWtEUUFKQUlBaEZEUUFnQnlBSlFRSjBJZ0JxS0FJMElBMUJCblJxSVFzZ0J5Z0NHQ0FBYWlnQ0FDRU1JQklvQWdBZ0NXb2hCQ0FSS0FJQUlRQkJBQ0VGUVFBaERpQUlRUUZIQkVBRFFDQUFJQUF0QUFBZ0RDQUxJQVZCQW5ScUtBSUFJQVF0QUFCcWFpMEFBR282QUFBZ0FDQUFMUUFCSUF3Z0N5QUZRUUZxUVE5eFFRSjBhaWdDQUNBRUlBWnFJZ1F0QUFCcWFpMEFBR282QUFFZ0FFRUNhaUVBSUFWQkFtcEJEM0VoQlNBRUlBWnFJUVFnRGtFQ2FpSU9JQTlIRFFBTEN5QVFSUTBBSUFBZ0FDMEFBQ0FNSUFzZ0JVRUNkR29vQWdBZ0JDMEFBR3BxTFFBQWFqb0FBQXNnQ1VFQmFpSUpJQVpIRFFBTEN5QUhJQTFCQVdwQkQzRTJBakFnQ2tFQmFpSUtJQU5IRFFBTEN3dU5BZ0VPZnlBRFFRQktCRUFnQUNnQ2NDRUtJQUFvQXVRRElnUW9BaGdpQUNnQ0NDRU1JQUFvQWdRaERTQUFLQUlBSVE0Z0JDZ0NNQ0VHQTBBZ0NnUkFJQVpCQm5RaUFDQUVLQUk4YWlFUElBUW9BamdnQUdvaEVDQUVLQUkwSUFCcUlSRWdBU0FIUVFKMElnVnFLQUlBSVFBZ0FpQUZhaWdDQUNFSVFRQWhDU0FLSVFVRFFDQUlJQTBnRUNBSlFRSjBJZ3RxS0FJQUlBQXRBQUZxYWkwQUFDQU9JQXNnRVdvb0FnQWdBQzBBQUdwcUxRQUFhaUFNSUFzZ0Qyb29BZ0FnQUMwQUFtcHFMUUFBYWpvQUFDQUlRUUZxSVFnZ0FFRURhaUVBSUFsQkFXcEJEM0VoQ1NBRlFRRnJJZ1VOQUFzTElBUWdCa0VCYWtFUGNTSUdOZ0l3SUFkQkFXb2lCeUFEUncwQUN3c0w2Z0lCRDM4Z0EwRUFTZ1JBSUFBb0FuQWhEQ0FBS0FMa0F5Z0NHQ0VHSUFBb0FuZ2lCMEY4Y1NFUklBZEJBM0VoRFNBSFFRRnJRUU5KSVJJRFFDQU1CRUFnQVNBSVFRSjBJZ0JxS0FJQUlRa2dBQ0FDYWlnQ0FDRUtJQXdoRGdOQUFrQWdCMEVBVEFSQVFRQWhCQXdCQzBFQUlROUJBQ0VFUVFBaEJTQUpJUUJCQUNFUUlCSkZCRUFEUUNBRUlBWWdCVUVDZENJTGFpZ0NBQ0FBTFFBQWFpMEFBR29nQmlBTFFRUnlhaWdDQUNBQUxRQUJhaTBBQUdvZ0JpQUxRUWh5YWlnQ0FDQUFMUUFDYWkwQUFHb2dCaUFMUVF4eWFpZ0NBQ0FBTFFBRGFpMEFBR29oQkNBRlFRUnFJUVVnQUVFRWFpRUFJQkJCQkdvaUVDQVJSdzBBQ3dzZ0RRUkFBMEFnQkNBR0lBVkJBblJxS0FJQUlBQXRBQUJxTFFBQWFpRUVJQVZCQVdvaEJTQUFRUUZxSVFBZ0QwRUJhaUlQSUExSERRQUxDeUFISUFscUlRa0xJQW9nQkRvQUFDQUtRUUZxSVFvZ0RrRUJheUlPRFFBTEN5QUlRUUZxSWdnZ0EwY05BQXNMQzZBQ0FRbC9JQU5CQUVvRVFDQUFLQUxrQXlnQ0dDSUVLQUlJSVFjZ0JDZ0NCQ0VJSUFRb0FnQWhDU0FBS0FKd0lnWkJBV3NoQ3lBR1FRRnhJUXdEUUFKQUlBWkZEUUFnQVNBS1FRSjBJZ1JxS0FJQUlRQWdBaUFFYWlnQ0FDRUZJQXdFZnlBRklBY2dBQzBBQW1vdEFBQWdDQ0FBTFFBQmFpMEFBQ0FKSUFBdEFBQnFMUUFBYW1vNkFBQWdCVUVCYWlFRklBQkJBMm9oQUNBTEJTQUdDeUVFSUFaQkFVWU5BQU5BSUFVZ0J5QUFMUUFDYWkwQUFDQUlJQUF0QUFGcUxRQUFJQWtnQUMwQUFHb3RBQUJxYWpvQUFDQUZJQWNnQUMwQUJXb3RBQUFnQ0NBQUxRQUVhaTBBQUNBSklBQXRBQU5xTFFBQWFtbzZBQUVnQlVFQ2FpRUZJQUJCQm1vaEFDQUVRUUpySWdRTkFBc0xJQXBCQVdvaUNpQURSdzBBQ3dzTDN3UUJCMzhnQUNBQUtBTGtBeUlDS0FJUU5nS0lBU0FBSUFJb0FoUTJBb1FCQWtBQ1FBSkFBa0FDUUNBQUtBSllEZ01BQVFJREN5QUFLQUo0UVFOR0JFQWdBa0h4QVRZQ0JBOExJQUpCOGdFMkFnUVBDeUFBS0FKNElRRWdBa0VBTmdJd0lBSkI4d0ZCOUFFZ0FVRURSaHMyQWdRZ0FpZ0NIRVVFUUNBQUVLUUZDeUFDS0FJMERRSWdBQ2dDZUNJRFFRQk1EUUlnQUNnQzVBTWhCa0VBSVFJRFFDQUdJQUpCQW5ScUlnZ29BaUFoQkVFQUlRRUNRQUpBSUFKRkRRQURRQ0FHSUFGQkFuUnFJZ1VvQWlBZ0JFY0VRQ0FCUVFGcUlnRWdBa2NOQVF3Q0N3c2dCU2dDTkNJRkRRRUxJQVJCQ1hSQmdBUnJJUWRCQUNFRUlBQkJBVUdBQ0NBQUtBSUVLQUlBRVFRQUlRVURRRUVBSVFFRFFDQUZJQVJCQm5ScUlBRkJBblJxQW44Z0JFRUVkQ0FCYWtHd3dBSnFMUUFBUVlKOGJDSURRZjZEZkV3RVFFRUFRZitEZkNBRGF5QUhiV3NNQVFzZ0EwR0IvQU5xSUFkdEN6WUNBQ0FCUVFGcUlnRkJFRWNOQUFzZ0JFRUJhaUlFUVJCSERRQUxJQUFvQW5naEF3c2dDQ0FGTmdJMElBSkJBV29pQWlBRFNBMEFDd3dDQ3lBQ1FRQTJBbFFnQWtIMUFUWUNCQUpBSUFJb0FrUUVRQ0FBS0FKNElRTU1BUXNnQUNnQ2VFRUFUQTBDSUFBb0FuQkJBWFJCQkdvaEJFRUFJUUVEUUNBQ0lBRkJBblJxSUFCQkFTQUVJQUFvQWdRb0FnUVJCQUEyQWtRZ0FVRUJhaUlCSUFBb0FuZ2lBMGdOQUFzTElBTkJBRXdOQVNBQUtBSndRUUYwUVFScUlRTkJBQ0VCQTBBZ0FpQUJRUUowYWlnQ1JFRUFJQU1RT2hvZ0FVRUJhaUlCSUFBb0FuaElEUUFMREFFTElBQW9BZ0FpQVVFeE5nSVVJQUFnQVNnQ0FCRUJBQXNMR2dFQmZ5QUFLQUlBSWdGQkx6WUNGQ0FBSUFFb0FnQVJBUUFMMWdFQkEzOGdBQ2dDQkNFRUlBSkI4WlByM0FOUEJFQWdBQ2dDQUVLNGdJQ0FNRGNDRkNBQUlBQW9BZ0FvQWdBUkFRQUxJQUpCQ0NBQ1FRZHhJZ05yUVFBZ0F4dHFJUU1nQVVFQ1R3UkFJQUFvQWdBaUFpQUJOZ0lZSUFKQkR6WUNGQ0FBSUFBb0FnQW9BZ0FSQVFBTElBTkJFR29pQlJBNUlnSkZCRUFnQUNnQ0FFSzRnSUNBd0FBM0FoUWdBQ0FBS0FJQUtBSUFFUUVBQ3lBRUlBUW9Ba3dnQldvMkFrd2dCQ0FCUVFKMGFpSUFLQUk4SVFFZ0FrRUFOZ0lJSUFJZ0F6WUNCQ0FDSUFFMkFnQWdBQ0FDTmdJOElBSkJFR29MZWdFQ2Z5QUFLQUlFSVFZZ0FVRUJSd1JBSUFBb0FnQWlCeUFCTmdJWUlBZEJEellDRkNBQUlBQW9BZ0FvQWdBUkFRQUxJQUFnQVVHQUFSRE5BaUlBUVFBMkFpZ2dBQ0FDTmdJZ0lBQWdCVFlDRENBQUlBTTJBZ2dnQUNBRU5nSUVJQUJCQURZQ0FDQUFJQVlvQWtRMkFpd2dCaUFBTmdKRUlBQUxlZ0VDZnlBQUtBSUVJUVlnQVVFQlJ3UkFJQUFvQWdBaUJ5QUJOZ0lZSUFkQkR6WUNGQ0FBSUFBb0FnQW9BZ0FSQVFBTElBQWdBVUdBQVJETkFpSUFRUUEyQWlnZ0FDQUNOZ0lnSUFBZ0JUWUNEQ0FBSUFNMkFnZ2dBQ0FFTmdJRUlBQkJBRFlDQUNBQUlBWW9Ba2cyQWl3Z0JpQUFOZ0pJSUFBTDlRTUJCWDhnQUNnQ0JDSUZLQUpFSWdFRVFBTkFJQUVvQWdCRkJFQWdBU2dDQ0NJRElBRW9BZ1JzSUFScUlRUWdBeUFCS0FJTWJDQUNhaUVDQ3lBQktBSXNJZ0VOQUFzTElBVW9Ba2dpQVFSQUEwQWdBU2dDQUVVRVFDQUJLQUlJSWdNZ0FTZ0NCR3hCQjNRZ0JHb2hCQ0FCS0FJTUlBTnNRUWQwSUFKcUlRSUxJQUVvQWl3aUFRMEFDd3NDUUNBQ1FRQk1EUUJCZ0pUcjNBTWhBeUFGS0FKTUdpQUVJQVFpQVVvRVFDQUJJQUp0SWdGQkFTQUJRUUZLR3lFREN5QUZLQUpFSWdFRVFBTkFJQUVvQWdCRkJFQUNRQ0FESUFFb0FnUWlBa0VCYXlBQktBSU1JZ1J1UVFGcVRnUkFJQUVnQWpZQ0VBd0JDeUFCSUFNZ0JHdzJBaEFnQUNBQktBSUlJQUpzRUtVRklBRkJBVFlDS0NBQktBSVFJUUlMSUFFZ0FFRUJJQUVvQWdnZ0FoQ21CVFlDQUNBRktBSlFJUUlnQVVFQU5nSWtJQUZDQURjQ0dDQUJJQUkyQWhRTElBRW9BaXdpQVEwQUN3c2dCU2dDU0NJQlJRMEFBMEFnQVNnQ0FFVUVRQUpBSUFNZ0FTZ0NCQ0lDUVFGcklBRW9BZ3dpQkc1QkFXcE9CRUFnQVNBQ05nSVFEQUVMSUFFZ0F5QUViRFlDRUNBQUlBSWdBU2dDQ0d4QkIzUVFwUVVnQVVFQk5nSW9JQUVvQWhBaEFnc2dBU0FBUVFFZ0FTZ0NDQ0FDRUtjRk5nSUFJQVVvQWxBaEFpQUJRUUEyQWlRZ0FVSUFOd0lZSUFFZ0FqWUNGQXNnQVNnQ0xDSUJEUUFMQ3d2VkJ3RUhmd0pBQWtBZ0FpQURhaUlJSUFFb0FnUkxEUUFnQVNnQ0RDQURTUTBBSUFFb0FnQU5BUXNnQUNnQ0FDSURRUmMyQWhRZ0FDQURLQUlBRVFFQUN3SkFJQUlnQVNnQ0dDSURUd1JBSUFnZ0FTZ0NFQ0FEYWswTkFRc2dBU2dDS0VVRVFDQUFLQUlBSWdOQnh3QTJBaFFnQUNBREtBSUFFUUVBQ3lBQktBSWtCRUFDUUNBQktBSVFJZ05CQUV3TkFDQUJLQUlVSWdVZ0F5QURJQVZLR3lJRklBRW9BaHdnQVNnQ0dDSURheUlHSUFVZ0JrZ2JJZ1VnQVNnQ0JDQURheUlHSUFVZ0JrZ2JJZ1ZCQUV3TkFDQUJRVEJxSVFvZ0F5QUJLQUlJSWd0c0lRWkJBQ0VEQTBBZ0FDQUtJQUVvQWdBZ0EwRUNkR29vQWdBZ0JpQUZJQXRzSWdjZ0FTZ0NOQkVHQUNBQktBSVFJZ2tnQVNnQ0ZDSUZJQU5xSWdOTURRRWdCaUFIYWlFR0lBVWdDU0FEYXlJSElBVWdCMGdiSWdVZ0FTZ0NIQ0FCS0FJWUlBTnFJZ2RySWdrZ0JTQUpTQnNpQlNBQktBSUVJQWRySWdjZ0JTQUhTQnNpQlVFQVNnMEFDd3NnQVVFQU5nSWtDeUFCSUFJZ0NDQUJLQUlRSWdOcklnVkJBQ0FGUVFCS0d5QUJLQUlZSUFKSkd5SUdOZ0lZSUFOQkFFd05BQ0FCS0FJVUlnVWdBeUFESUFWS0d5SURJQUVvQWh3Z0Jtc2lCU0FESUFWSUd5SURJQUVvQWdRZ0Jtc2lCU0FESUFWSUd5SUZRUUJNRFFBZ0FVRXdhaUVLSUFFb0FnZ2lDeUFHYkNFR1FRQWhBd05BSUFBZ0NpQUJLQUlBSUFOQkFuUnFLQUlBSUFZZ0JTQUxiQ0lISUFFb0FqQVJCZ0FnQVNnQ0VDSUpJQUVvQWhRaUJTQURhaUlEVEEwQklBWWdCMm9oQmlBRklBa2dBMnNpQnlBRklBZElHeUlGSUFFb0Fod2dBU2dDR0NBRGFpSUhheUlKSUFVZ0NVZ2JJZ1VnQVNnQ0JDQUhheUlISUFVZ0IwZ2JJZ1ZCQUVvTkFBc0xBa0FDUUFKQUlBRW9BaHdpQlNBSVR3MEFBa0FDUUFKQUlBSWdCVXNFUUNBQ0lRVWdCRVVOQVNBQUtBSUFJZ05CRnpZQ0ZDQUFJQU1vQWdBUkFRQU1BZ3NnQkEwQkN5QUJLQUlnRFFFZ0FDZ0NBQ0lEUVJjMkFoUWdBQ0FES0FJQUVRRUFEQVFMSUFFZ0NEWUNIQ0FCS0FJZ1JRMENDeUFGSUFFb0FoZ2lBR3NpQXlBSUlBQnJJZ1pQRFFBZ0FTZ0NDQ0VBSUFnZ0JVRi9jMm9oQ2lBSUlBVnJRUU54SWdnRVFFRUFJUVVEUUNBQktBSUFJQU5CQW5ScUtBSUFRUUFnQUJBNkdpQURRUUZxSVFNZ0JVRUJhaUlGSUFoSERRQUxDeUFLUVFOSkRRQURRQ0FEUVFKMElnVWdBU2dDQUdvb0FnQkJBQ0FBRURvYUlBVWdBU2dDQUdvb0FnUkJBQ0FBRURvYUlBVWdBU2dDQUdvb0FnaEJBQ0FBRURvYUlBVWdBU2dDQUdvb0FneEJBQ0FBRURvYUlBTkJCR29pQXlBR1J3MEFDd3NnQkVVTkFRc2dBVUVCTmdJa0N5QUJLQUlBSUFJZ0FTZ0NHR3RCQW5ScUM5NEhBUWQvQWtBQ1FDQUNJQU5xSWdnZ0FTZ0NCRXNOQUNBQktBSU1JQU5KRFFBZ0FTZ0NBQTBCQ3lBQUtBSUFJZ05CRnpZQ0ZDQUFJQU1vQWdBUkFRQUxBa0FnQWlBQktBSVlJZ05QQkVBZ0NDQUJLQUlRSUFOcVRRMEJDeUFCS0FJb1JRUkFJQUFvQWdBaUEwSEhBRFlDRkNBQUlBTW9BZ0FSQVFBTElBRW9BaVFFUUFKQUlBRW9BaEFpQTBFQVRBMEFJQUVvQWhRaUJTQURJQU1nQlVvYklnVWdBU2dDSENBQktBSVlJZ05ySWdZZ0JTQUdTQnNpQlNBQktBSUVJQU5ySWdZZ0JTQUdTQnNpQlVFQVRBMEFJQUZCTUdvaENpQURJQUVvQWdoQkIzUWlDMndoQmtFQUlRTURRQ0FBSUFvZ0FTZ0NBQ0FEUVFKMGFpZ0NBQ0FHSUFVZ0Myd2lCeUFCS0FJMEVRWUFJQUVvQWhBaUNTQUJLQUlVSWdVZ0Eyb2lBMHdOQVNBR0lBZHFJUVlnQlNBSklBTnJJZ2NnQlNBSFNCc2lCU0FCS0FJY0lBRW9BaGdnQTJvaUIyc2lDU0FGSUFsSUd5SUZJQUVvQWdRZ0Iyc2lCeUFGSUFkSUd5SUZRUUJLRFFBTEN5QUJRUUEyQWlRTElBRWdBaUFJSUFFb0FoQWlBMnNpQlVFQUlBVkJBRW9iSUFFb0FoZ2dBa2tiSWdZMkFoZ2dBMEVBVEEwQUlBRW9BaFFpQlNBRElBTWdCVW9iSWdNZ0FTZ0NIQ0FHYXlJRklBTWdCVWdiSWdNZ0FTZ0NCQ0FHYXlJRklBTWdCVWdiSWdWQkFFd05BQ0FCUVRCcUlRb2dBU2dDQ0VFSGRDSUxJQVpzSVFaQkFDRURBMEFnQUNBS0lBRW9BZ0FnQTBFQ2RHb29BZ0FnQmlBRklBdHNJZ2NnQVNnQ01CRUdBQ0FCS0FJUUlna2dBU2dDRkNJRklBTnFJZ05NRFFFZ0JpQUhhaUVHSUFVZ0NTQURheUlISUFVZ0IwZ2JJZ1VnQVNnQ0hDQUJLQUlZSUFOcUlnZHJJZ2tnQlNBSlNCc2lCU0FCS0FJRUlBZHJJZ2NnQlNBSFNCc2lCVUVBU2cwQUN3c0NRQUpBQWtBZ0FTZ0NIQ0lGSUFoUERRQUNRQUpBQWtBZ0FpQUZTd1JBSUFJaEJTQUVSUTBCSUFBb0FnQWlBMEVYTmdJVUlBQWdBeWdDQUJFQkFBd0NDeUFFRFFFTElBRW9BaUFOQVNBQUtBSUFJZ05CRnpZQ0ZDQUFJQU1vQWdBUkFRQU1CQXNnQVNBSU5nSWNJQUVvQWlCRkRRSUxJQVVnQVNnQ0dDSUFheUlESUFnZ0FHc2lCazhOQUNBQktBSUlRUWQwSVFBZ0NDQUZRWDl6YWlFS0lBZ2dCV3RCQTNFaUNBUkFRUUFoQlFOQUlBRW9BZ0FnQTBFQ2RHb29BZ0JCQUNBQUVEb2FJQU5CQVdvaEF5QUZRUUZxSWdVZ0NFY05BQXNMSUFwQkEwa05BQU5BSUFOQkFuUWlCU0FCS0FJQWFpZ0NBRUVBSUFBUU9ob2dCU0FCS0FJQWFpZ0NCRUVBSUFBUU9ob2dCU0FCS0FJQWFpZ0NDRUVBSUFBUU9ob2dCU0FCS0FJQWFpZ0NERUVBSUFBUU9ob2dBMEVFYWlJRElBWkhEUUFMQ3lBRVJRMEJDeUFCUVFFMkFpUUxJQUVvQWdBZ0FpQUJLQUlZYTBFQ2RHb0xIZ0FnQUVFQkVOMERJQUJCQUJEZEF5QUFLQUlFRURNZ0FFRUFOZ0lFQzJjQkFYOGdBeWdDQUNBRWFpQUFLQUxRQWtHQUEyc2lBQ0FCS0FKVUlnRW9BaUFnQWk4QkVHd2lCU0FCS0FJQUlBSXZBUUJzUVlRZ2FpSUJha0VEZGtIL0IzRnFMUUFBT2dBQUlBTW9BZ1FnQkdvZ0FDQUJJQVZyUVFOMlFmOEhjV290QUFBNkFBQUwyd01CRFg4Z0F5Z0NBQ0FFYWlJRklBQW9BdEFDUVlBRGF5SUFJQUVvQWxRaUFTZ0NZQ0FDTGdFd2JDSUdJQUVvQWlBZ0FpNEJFR3dpQjJwQjBTSnNJZ2dnQjBIK01HeHFJZ2NnQVNnQ1FDQUNMd0VnYkNJSklBRW9BZ0FnQWk4QkFHd2lDbXBCRFhRaURXcEJnSUNDRUdvaUN5QUJLQUprSUFJdUFUSnNJZzRnQVNnQ0pDQUNMZ0VTYkNJTWFrSFJJbXdpRHlBTVFmNHdiR29pRENBQktBSkVJQUl2QVNKc0loQWdBU2dDQkNBQ0x3RUNiQ0lCYWtFTmRDSUNhaUlSYWtFUWRrSC9CM0ZxTFFBQU9nQUFJQVVnQUNBTElCRnJRUkIyUWY4SGNXb3RBQUE2QUFFZ0F5Z0NCQ0FFYWlJRklBQWdDQ0FHUWQrSmYyeHFJZ1lnQ2lBSmEwRU5kQ0lJYWtHQWdJSVFhaUlKSUE4Z0RrSGZpWDlzYWlJS0lBRWdFR3RCRFhRaUFXb2lDMnBCRUhaQi93ZHhhaTBBQURvQUFDQUZJQUFnQ1NBTGEwRVFka0gvQjNGcUxRQUFPZ0FCSUFNb0FnZ2dCR29pQlNBQUlBZ2dCbXRCZ0lDQ0VHb2lCaUFCSUFwcklnRnFRUkIyUWY4SGNXb3RBQUE2QUFBZ0JTQUFJQVlnQVd0QkVIWkIvd2R4YWkwQUFEb0FBU0FES0FJTUlBUnFJZ0VnQUNBTklBZHJRWUNBZ2hCcUlnTWdBaUFNYXlJQ2FrRVFka0gvQjNGcUxRQUFPZ0FBSUFFZ0FDQURJQUpyUVJCMlFmOEhjV290QUFBNkFBRUwwZ01CREg4Z0FDZ0MwQUloRGlBQktBSlVJUUVqQUVIUUFHc2lCeUVBQTBBZ0FTZ0NRQ0VLSUFJdUFTQWhDeUFBSUFJdUFRQWdBU2dDQUd4QkRYUkJnQWh5SWd3Z0FTZ0NnQUVnQWk0QlFHd2lEVUcrcFg5c2FrRUxkU0lQSUFFb0FpQWdBaTRCRUd3aUJTQUJLQUpnSUFJdUFUQnNJZ1lnQVNnQ29BRWdBaTRCVUd3aUNXcHJRUUowSWhCck5nSXdJQUFnRHlBUWFqWUNEQ0FBSUFvZ0MyeEJzYzRBYkNJS0lBMUJvUzFzSUF4cUlndHFJZ3dnQlNBSmFrRzJGMndpRFNBRklBWnFRUTEwYWlJRmEwRUxkVFlDUENBQUlBVWdER3BCQzNVMkFnQWdBQ0FMSUFwcklnVWdEU0FKSUFaclFRMTBhaUlHYTBFTGRUWUNKQ0FBSUFVZ0JtcEJDM1UyQWhnZ0FFRUVhaUVBSUFGQkJHb2hBU0FDUVFKcUlRSWdDRUVCYWlJSVFRTkhEUUFMSUE1QmdBTnJJUUVnQnlFQ1FRQWhBQU5BSUFNZ0FFRUNkR29vQWdBZ0JHb2lCeUFCSUFJb0FnQkJEWFJCZ0lDSXdBQnFJZ2dnQWlnQ0NDSUZRYUV0YkdvaUJpQUNLQUlFUWJIT0FHd2lDV3BCRW5aQi93ZHhhaTBBQURvQUFDQUhJQUVnQmlBSmEwRVNka0gvQjNGcUxRQUFPZ0FDSUFjZ0FTQUZRYjZsLy84QWJDQUlha0VTZGtIL0IzRnFMUUFBT2dBQklBSkJER29oQWlBQVFRRnFJZ0JCQmtjTkFBc0xwUVlCRW44Z0FDZ0MwQUloQ3lBQktBSlVJUUFqQUVHQUFXc2lDU0VCUVFRaEJ3TkFJQUVDZndKQUlBSXVBUkFpQmlBQ0x3RWdJZ1Z5UWYvL0EzRU5BRUVBSVFVZ0FpOEJNQTBBSUFJdkFVQU5BQ0FDTHdGUURRQWdBaThCWUEwQUlBSXZBWEFOQUNBQklBSXVBUUFnQUNnQ0FHeEJBblFpQlRZQ1lDQUJJQVUyQWxBZ0FTQUZOZ0pBSUFFZ0JUWUNNQ0FCSUFVMkFpQWdBU0FGTmdJUUlBRWdCVFlDQUVFY0RBRUxJQUVnQUNnQ3dBRWdBaTRCWUd3aUNpQUFLQUpBSUFWQkVIUkJFSFZzSWdWcVFkRWliQ0lNSUFWQi9qQnNhaUlSSUFJdUFVQWdBQ2dDZ0FGc1FRMTBJZzBnQWk0QkFDQUFLQUlBYkVFTmRFR0FDSElpRG1vaUVtb2lEeUFBS0FJZ0lBWnNJZ1VnQUNnQzRBRWdBaTRCY0d3aUJtcEJzMFpzSWhNZ0JVR0w0QUJzYWlBRklBQW9BcUFCSUFJdUFWQnNJZ2hxSWhBZ0FDZ0NZQ0FDTGdFd2JDSUZJQVpxSWhScVFhSExBR3dpRlNBUVFZUm5iR29pRUdvaUZtdEJDM1UyQW5BZ0FTQVBJQlpxUVF0MU5nSUFJQUVnRENBS1FkK0pmMnhxSWdvZ0RpQU5heUlNYWlJTklCVWdGRUc3Z245c2FpSU9JQVVnQ0dwQi9kdCtiQ0lQSUFWQjFNUUJiR3BxSWdWclFRdDFOZ0pnSUFFZ0JTQU5ha0VMZFRZQ0VDQUJJQXdnQ21zaUJTQVBJQWhCczRNQmJHb2dFR29pQ0d0QkMzVTJBbEFnQVNBRklBaHFRUXQxTmdJZ0lBRWdFeUFHUVk0VGJHb2dEbW9pQlNBU0lCRnJJZ1pxUVF0MU5nSXdJQVlnQld0QkMzVWhCVUVRQzBFQ2RHb2dCVFlDQUNBQ1FRSnFJUUlnQUVFRWFpRUFJQUZCQkdvaEFTQUhRUUZMSVFVZ0IwRUJheUVISUFVTkFBc2dDMEdBQTJzaEFDQUpJUUpCQUNFSEEwQWdBeUFIUVFKMGFpZ0NBQ0FFYWlJQklBQWdBaWdDRENJSklBSW9BZ1FpQldwQjBTSnNJZ29nQlVIK01HeHFJZ1VnQWlnQ0FFR1FnQUZxSWdZZ0FpZ0NDQ0lJYWtFTmRDSUxha0VTZGtIL0IzRnFMUUFBT2dBQUlBRWdBQ0FMSUFWclFSSjJRZjhIY1dvdEFBQTZBQU1nQVNBQUlBb2dDVUhmaVg5c2FpSUpJQVlnQ0d0QkRYUWlCV3BCRW5aQi93ZHhhaTBBQURvQUFTQUJJQUFnQlNBSmEwRVNka0gvQjNGcUxRQUFPZ0FDSUFKQkVHb2hBaUFIUVFGcUlnZEJDRWNOQUFzTGl3WUJFbjhqQUVIUUFXc2lEeVFBSUFBb0F0QUNJUTBnQVNnQ1ZDRUFJQThoQVFOQUlBQW9Bc0FCSVFnZ0FpNEJZQ0VHSUFBb0FrQWhDU0FDTGdFZ0lRNGdBU0FDTGdFQUlBQW9BZ0JzUVExMFFZQUljaUlGSUFBb0FvQUJJQUl1QVVCc0lndEJ2cVYvYkdwQkMzVWlFQ0FBS0FJZ0lBSXVBUkJzSWdjZ0FDZ0NvQUVnQWk0QlVHd2lFU0FBS0FKZ0lBSXVBVEJzSWhJZ0FDZ0M0QUVnQWk0QmNHd2lFMnNpREdwclFRSjBJaFJyTmdLTUFTQUJJQkFnRkdvMkFpZ2dBU0FHSUFoc0lnZ2dDU0FPYkNJR2FrR2FOV3dpQ1NBR1FmRWdiR29pQmlBTFFaM0pBR3dnQldvaURtb2lFQ0FNUWVNVGJDSVVJQkZCRFhRaUVXb2lGU0FTSUJOcUloSkI3enhzSWhNZ0IwR3oyUUJzYW1vaUZtdEJDM1UyQXJRQklBRWdFQ0FXYWtFTGRUWUNBQ0FCSUE0Z0Jtc2lCaUFIUVpRT2JDQVRheUFWYWlJT2EwRUxkVFlDWkNBQklBWWdEbXBCQzNVMkFsQWdBU0FMUVlSa2JDQUZhaUlGSUFrZ0NFSGM5SDVzYWlJTGF5SUlJQkVnRkdzZ0RFRU1kR3NpRENBSFFZd3BiQ0FTUWM4bGJDSUdhMm9pQ1d0QkMzVTJBbmdnQVNBSUlBbHFRUXQxTmdJOElBRWdCU0FMYWlJRklBZEIwOUFBYkNBR0lBeHFheUlIYTBFTGRUWUNvQUVnQVNBRklBZHFRUXQxTmdJVUlBRkJCR29oQVNBQVFRUnFJUUFnQWtFQ2FpRUNJQXBCQVdvaUNrRUZSdzBBQ3lBTlFZQURheUVBSUE4aEFVRUFJUWNEUUNBRElBZEJBblJxS0FJQUlBUnFJZ0lnQUNBQktBSU1JZ29nQVNnQ0JDSUZha0dhTld3aUN5QUZRZkVnYkdvaUJTQUJLQUlBUVExMFFZQ0FpTUFBYWlJTUlBRW9BZ2dpRFNBQktBSVFJZ2hySWdaQjBCWnNhaUlKSUFnZ0RXcEJ6REpzSWcxcUlnaHFRUkoyUWY4SGNXb3RBQUE2QUFBZ0FpQUFJQWdnQld0QkVuWkIvd2R4YWkwQUFEb0FCQ0FDSUFBZ0N5QUtRZHowZm14cUlnb2dDU0FOYXlJRmFrRVNka0gvQjNGcUxRQUFPZ0FCSUFJZ0FDQUZJQXByUVJKMlFmOEhjV290QUFBNkFBTWdBaUFBSUFaQndLWC8vd0JzSUF4cVFSSjJRZjhIY1dvdEFBQTZBQUlnQVVFVWFpRUJJQWRCQVdvaUIwRUtSdzBBQ3lBUFFkQUJhaVFBQyswR0FSSi9Jd0JCb0FKckloSWtBQ0FBS0FMUUFpRVRJQUVvQWxRaEFDQVNJUUVEUUNBQUtBS0FBU0VOSUFJdUFVQWhDaUFCSUFBb0FrQWdBaTRCSUd3aUNDQUFLQUxBQVNBQ0xnRmdiQ0lQYTBFTmRDSUxJQUl1QVFBZ0FDZ0NBR3hCRFhSQmdBaHlJZ1pxSWd3Z0FDZ0NJQ0FDTGdFUWJDSUZJQUFvQXVBQklBSXVBWEJzSWdkckloQWdBQ2dDWUNBQ0xnRXdiQ0lPSUFBb0FxQUJJQUl1QVZCc0lnbHJJaFJxUWRFaWJDSVZJQkJCL2pCc2FpSVFhMEVMZFRZQzhBRWdBU0FNSUJCcVFRdDFOZ0lZSUFFZ0JpQUxheUlMSUJVZ0ZFSGZpWDlzYWlJTWEwRUxkVFlDcUFFZ0FTQUxJQXhxUVF0MU5nSmdJQUVnQ2lBTmJFR3h6Z0JzSWdvZ0Jtb2lDeUFQUVExMElnOGdDRUcyMXdCc2FpSU1heUlRSUFjZ0JTQUphaUlVYWtHTk4yd2lEU0FPUWE5ZGJDSVZJQVZCM0ZSc2FpQUhRWXlCZjJ4cWFpSVdhMEVMZFRZQ2tBRWdBU0FRSUJacVFRdDFOZ0o0SUFFZ0N5QU1haUlMSUEwZ0ZFSGJFR3hxSWd3Z0RrSFAwd0JzSWc0Z0JVSDNFV3hxYWlJRmEwRUxkVFlDaUFJZ0FTQUZJQXRxUVF0MU5nSUFJQUVnQ0VHMkYyd2dEMnNpQlNBR0lBcHJJZ1pxSWdnZ0J5QUpha0dMdlg5c0lnb2dDVUd3b1g5c0lCVnFhaUFNYWlJSmEwRUxkVFlDMkFFZ0FTQUlJQWxxUVF0MU5nSXdJQUVnQmlBRmF5SUdJQWRCeHVVQWJDQU9heUFOYWlBS2FpSUhhMEVMZFRZQ3dBRWdBU0FHSUFkcVFRdDFOZ0pJSUFGQkJHb2hBU0FBUVFScUlRQWdBa0VDYWlFQ0lCRkJBV29pRVVFR1J3MEFDeUFUUVlBRGF5RUFJQkloQVVFQUlRY0RRQ0FESUFkQkFuUnFLQUlBSUFScUlnSWdBQ0FCS0FJVUlnWWdBU2dDQkNJRmFrRzJGMndpRVNBQktBSU1JZ2tnQldwQkRYUnFJZ2dnQVNnQ0FFRU5kRUdBZ0lqQUFHb2lEaUFCS0FJUUlnMUJvUzFzYWlJVElBRW9BZ2hCc2M0QWJDSUthaUlQYWtFU2RrSC9CM0ZxTFFBQU9nQUFJQUlnQUNBUElBaHJRUkoyUWY4SGNXb3RBQUE2QUFVZ0FpQUFJQVVnQmlBSmFtdEJEWFFpQlNBTlFiNmxmMndnRG1vaUNHcEJFblpCL3dkeGFpMEFBRG9BQVNBQ0lBQWdDQ0FGYTBFU2RrSC9CM0ZxTFFBQU9nQUVJQUlnQUNBUklBWWdDV3RCRFhScUlnWWdFeUFLYXlJRmFrRVNka0gvQjNGcUxRQUFPZ0FDSUFJZ0FDQUZJQVpyUVJKMlFmOEhjV290QUFBNkFBTWdBVUVZYWlFQklBZEJBV29pQjBFTVJ3MEFDeUFTUWFBQ2FpUUFDNk1JQVJWL0l3QkJrQU5ySWhNa0FDQUFLQUxRQWlFVUlBRW9BbFFoQUNBVElRRURRQ0FBS0FMQUFTRU5JQUl1QVdBaENDQUFLQUpBSVFrZ0FpNEJJQ0VNSUFFZ0FpNEJBQ0FBS0FJQWJFRU5kRUdBQ0hJaUNpQUFLQUtBQVNBQ0xnRkFiQ0lMUWI2bGYyeHFRUXQxSWc0Z0FDZ0M0QUVnQWk0QmNHd2lEeUFBS0FJZ0lBSXVBUkJzSWdjZ0FDZ0NZQ0FDTGdFd2JDSUZheUlSSUFBb0FxQUJJQUl1QVZCc0lnWnJha0VDZENJU2F6WUNtQUlnQVNBT0lCSnFOZ0pVSUFFZ0NDQU5iQ0lJSUFrZ0RHd2lDV3BCNHNZQWJDSU1JQWhCL0pGL2JHb2lEaUFMUVpJVWJDQUthaUlTYWlJVklBVWdCbXBCNzNWc0lBOUJEWFFpRFdzaUR5QUZJQWRxUWJmVkFHd2lGeUFGUWU1a2JHcHFJaFpyUVF0MU5nTFFBaUFCSUJVZ0ZtcEJDM1UyQWh3Z0FTQUlRZUduZjJ3Z0NVR2pKMnhxSWdnZ0MwSEpSMndnQ21vaUZXb2lGaUFQSUFZZ0Iyb2lEMEhTekFCc0loZ2dCa0dKNkg1c2Ftb2lHV3RCQzNVMkFyUUNJQUVnRmlBWmFrRUxkVFlDT0NBQklCSWdEbXNpRGlBUlFmSWRiQ0FOYXlJUklBWWdCV3RCK05rQWJDSVNJQVZCbVN0c2Ftb2lCV3RCQzNVMkF1QUJJQUVnQlNBT2FrRUxkVFlDakFFZ0FTQUxRY2JSQUd3Z0Ntb2lCU0FNSUFsQnZSRnNhaUlLYXlJTElBOUJsREJzSWdrZ0IwR0x2SDlzYWlBUmFpSU1hMEVMZFRZQ3hBRWdBU0FMSUF4cVFRdDFOZ0tvQVNBQklBVWdDbW9pQlNBWElBZEI4TGQvYkdvZ0dHb2dEV29pQjJ0QkMzVTJBdXdDSUFFZ0JTQUhha0VMZFRZQ0FDQUJJQlVnQ0dzaUJTQVNJQVpCNXBOL2JHb2dDV29nRFdvaUJtdEJDM1UyQXZ3QklBRWdCU0FHYWtFTGRUWUNjQ0FCUVFScUlRRWdBRUVFYWlFQUlBSkJBbW9oQWlBUVFRRnFJaEJCQjBjTkFBc2dGRUdBQTJzaEFDQVRJUUZCQUNFRkEwQWdBeUFGUVFKMGFpZ0NBQ0FFYWlJQ0lBQWdBU2dDRENJSElBRW9BZ1FpQm1wQjd6dHNJZ2dnQmlBSGEwSHpDbXdpQ1dzZ0FTZ0NGQ0lLSUFacVFhTW5iQ0lVYWlJTUlBRW9BaEFpQmlBQktBSVlJZ3RyUWJjNGJDSU9JQXRCZzN0c2FpQUJLQUlBUVExMFFZQ0FpTUFBYWlJTklBc2dBU2dDQ0NJUWFpSUxRY2JSQUd4cUlnOXFJaEZxUVJKMlFmOEhjV290QUFBNkFBQWdBaUFBSUJFZ0RHdEJFblpCL3dkeGFpMEFBRG9BQmlBQ0lBQWdCeUFLYWtIaHAzOXNJZ2NnQ0NBSmFtb2lDQ0FRSUFaclFaSVViQ0lKSUFaQmxZcC9iQ0FOYW1vZ0Rtb2lER3BCRW5aQi93ZHhhaTBBQURvQUFTQUNJQUFnRENBSWEwRVNka0gvQjNGcUxRQUFPZ0FGSUFJZ0FDQVVJQXBCM3ZjQWJHb2dCMm9pQnlBSklCQkI4ZUYrYkdvZ0Qyb2lDbXBCRW5aQi93ZHhhaTBBQURvQUFpQUNJQUFnQ2lBSGEwRVNka0gvQjNGcUxRQUFPZ0FFSUFJZ0FDQUdJQXRyUWNIYUFHd2dEV3BCRW5aQi93ZHhhaTBBQURvQUF5QUJRUnhxSVFFZ0JVRUJhaUlGUVE1SERRQUxJQk5Ca0FOcUpBQUx3QWtCR244akFFR0FCR3NpRkNRQUlBQW9BdEFDSVJBZ0FTZ0NWQ0VBSUJRaEFRTkFJQUVnQUNnQ1FDQUNMZ0VnYkNJTUlBQW9Bc0FCSUFJdUFXQnNJZzFySWdsQjQ5Z0FiQ0lPSUExQmc2UUJiR29pRVNBQUtBS0FBU0FDTGdGQWJDSUtRYy9UQUd3aUZTQUNMZ0VBSUFBb0FnQnNRUTEwUVlBSWNpSUxhaUlXYWlJU0lBQW9BbUFnQWk0Qk1Hd2lDQ0FBS0FJZ0lBSXVBUkJzSWdWcVFjN1dBR3dpRXlBRlFkYnRmbXhxSUFBb0FxQUJJQUl1QVZCc0lnY2dCV29pR1VIcHp3QnNJaGRxSUFBb0F1QUJJQUl1QVhCc0lnWWdCV3BCL01VQWJDSWFhaUlZYTBFTGRUWUM0QU1nQVNBU0lCaHFRUXQxTmdJQUlBRWdDVUhVRVd3aUNTQU1RYzA1YkdvaUVpQUtRZEVpYkNJS0lBdHFJaGhxSWhzZ0JpQUlhaUljUWF0VmJDSWRJQWNnQ0dwQjhBaHNJaDRnRXlBSVFjMEViR3BxYWlJVGEwRUxkVFlDd0FNZ0FTQVRJQnRxUVF0MU5nSWdJQUVnRGlBTVFjSlpiR29pRENBTElBcHJJZzVxSWdvZ0JpQUhha0d5cVg5c0loTWdIaUFIUWZxM2YyeHFJQmRxYWlJWGEwRUxkVFlDb0FNZ0FTQUtJQmRxUVF0MU5nSkFJQUVnQ1NBTlFiQmZiR29pRFNBTElCVnJJZ3RxSWdrZ0hTQUdRWmpFQUd4cUlCcHFJQk5xSWdwclFRdDFOZ0tBQXlBQklBa2dDbXBCQzNVMkFtQWdBU0FMSUExcklnc2dCaUFIYTBHakdtd2lEU0FGSUFaclFiWTViQ0lKSUJ4Qmw3Qi9iQ0lLSUFaQmhja0JiR3BxYWlJR2EwRUxkVFlDNEFJZ0FTQUdJQXRxUVF0MU5nS0FBU0FCSUE0Z0RHc2lCaUFaUWRVcWJDSUxJQWNnQ0d0Qmlkb0FiQ0lNSUFkQitrNXNhbW9nRFdvaUIydEJDM1UyQXNBQ0lBRWdCaUFIYWtFTGRUWUNvQUVnQVNBWUlCSnJJZ2NnQlNBSWEwR2pHbXdpQmlBSVFacitBR3hxSUF4cUlBcHFJZ2hyUVF0MU5nS2dBaUFCSUFjZ0NHcEJDM1UyQXNBQklBRWdGaUFSYXlJSUlBWWdCVUhDaW45c2FpQUxhaUFKYWlJRmEwRUxkVFlDZ0FJZ0FTQUZJQWhxUVF0MU5nTGdBU0FCUVFScUlRRWdBRUVFYWlFQUlBSkJBbW9oQWlBUFFRRnFJZzlCQ0VjTkFBc2dFRUdBQTJzaEFDQVVJUUZCQUNFSUEwQWdBeUFJUVFKMGFpZ0NBQ0FFYWlJQ0lBQWdBU2dDQkNJRklBRW9BaHdpQjJwQnMwWnNJZ3NnQlVHTDRBQnNhaUFGSUFFb0FoUWlCbW9pRHlBQktBSU1JZ1VnQjJvaURHcEJvY3NBYkNJTklBOUJoR2RzYWlJUGFpSVFJQUVvQWhnaUNTQUJLQUlJSWc1cVFkRWliQ0lSSUE1Qi9qQnNhaUlPSUFFb0FnQkJrSUFCYWlJS0lBRW9BaEFpRldwQkRYUWlGbW9pRW1wQkVuWkIvd2R4YWkwQUFEb0FBQ0FDSUFBZ0VpQVFhMEVTZGtIL0IzRnFMUUFBT2dBSElBSWdBQ0FOSUF4QnU0Si9iR29pRENBRklBWnFRZjNiZm13aURTQUZRZFRFQVd4cWFpSUZJQkVnQ1VIZmlYOXNhaUlRSUFvZ0ZXdEJEWFFpQ1dvaUVXcEJFblpCL3dkeGFpMEFBRG9BQVNBQ0lBQWdFU0FGYTBFU2RrSC9CM0ZxTFFBQU9nQUdJQUlnQUNBTklBWkJzNE1CYkdvZ0Qyb2lCU0FKSUJCcklnWnFRUkoyUWY4SGNXb3RBQUE2QUFJZ0FpQUFJQVlnQld0QkVuWkIvd2R4YWkwQUFEb0FCU0FDSUFBZ0N5QUhRWTRUYkdvZ0RHb2lCU0FXSUE1cklnZHFRUkoyUWY4SGNXb3RBQUE2QUFNZ0FpQUFJQWNnQld0QkVuWkIvd2R4YWkwQUFEb0FCQ0FCUVNCcUlRRWdDRUVCYWlJSVFSQkhEUUFMSUJSQmdBUnFKQUFMWVFBZ0F5Z0NBQ0FFYWlJRElBQW9BdEFDUVlBRGF5SUFJQUVvQWxRaUFTZ0NCQ0FDTHdFQ2JDSUVJQUVvQWdBZ0FpOEJBR3hCaENCcUlnRnFRUU4yUWY4SGNXb3RBQUE2QUFBZ0F5QUFJQUVnQkd0QkEzWkIvd2R4YWkwQUFEb0FBUXU3QXdFTmZ5QURLQUlBSUFScUlnVWdBQ2dDMEFKQmdBTnJJZ0FnQVNnQ1ZDSUJLQUlzSUFJdUFSWnNJZ1lnQVNnQ0RDQUNMZ0VHYkNJSGFpSUlJQUVvQWlRZ0FpNEJFbXdpQ2lBQktBSUVJQUl1QVFKc0lndHFJZ2xxUWRFaWJDSU1JQWxCL2pCc2FpSUpJQUVvQWlBZ0FpOEJFR3dpRFNBQktBSUFJQUl2QVFCc0lnNXFRWVFnYWlJUElBRW9BaWdnQWk4QkZHd2lFQ0FCS0FJSUlBSXZBUVJzSWdKcUlnRnFRUTEwSWhGcVFSQjJRZjhIY1dvdEFBQTZBQUFnQlNBQUlCRWdDV3RCRUhaQi93ZHhhaTBBQURvQUF5QUZJQUFnRENBSVFkK0pmMnhxSWdnZ0R5QUJhMEVOZENJQmFrRVFka0gvQjNGcUxRQUFPZ0FCSUFVZ0FDQUJJQWhyUVJCMlFmOEhjV290QUFBNkFBSWdBeWdDQkNBRWFpSUJJQUFnQnlBR2F5SURJQXNnQ21zaUJHcEIwU0pzSWdVZ0JFSCtNR3hxSWdRZ0RpQU5hMEdFSUdvaUJpQUNJQkJySWdKcVFRMTBJZ2RxUVJCMlFmOEhjV290QUFBNkFBQWdBU0FBSUFjZ0JHdEJFSFpCL3dkeGFpMEFBRG9BQXlBQklBQWdCU0FEUWQrSmYyeHFJZ01nQmlBQ2EwRU5kQ0lDYWtFUWRrSC9CM0ZxTFFBQU9nQUJJQUVnQUNBQ0lBTnJRUkIyUWY4SGNXb3RBQUE2QUFJTHhRY0JDMzhnQUNnQzBBSWhDU0FDTGdFUUlRVWdBU2dDVkNJQktBSWdJUWNqQUVIUUFHc2lBQ0FDTGdFQUlBRW9BZ0JzUVExMFFZQUljaUlHSUFFb0FrQWdBaTRCSUd3aUNFRytwWDlzYWtFTGRUWUNHQ0FBSUFoQm9TMXNJQVpxSWdZZ0JTQUhiRUd4emdCc0lnVnJRUXQxTmdJd0lBQWdCU0FHYWtFTGRUWUNBQ0FCS0FJa0lRVWdBaTRCRWlFSElBQWdBaTRCQWlBQktBSUViRUVOZEVHQUNISWlCaUFCS0FKRUlBSXVBU0pzSWdoQnZxVi9iR3BCQzNVMkFod2dBQ0FJUWFFdGJDQUdhaUlHSUFVZ0IyeEJzYzRBYkNJRmEwRUxkVFlDTkNBQUlBVWdCbXBCQzNVMkFnUWdBU2dDS0NFRklBSXVBUlFoQnlBQUlBSXVBUVFnQVNnQ0NHeEJEWFJCZ0FoeUlnWWdBU2dDU0NBQ0xnRWtiQ0lJUWI2bGYyeHFRUXQxTmdJZ0lBQWdDRUdoTFd3Z0Jtb2lCaUFGSUFkc1FiSE9BR3dpQld0QkMzVTJBamdnQUNBRklBWnFRUXQxTmdJSUlBRW9BaXdoQlNBQ0xnRVdJUWNnQUNBQ0xnRUdJQUVvQWd4c1FRMTBRWUFJY2lJR0lBRW9Ba3dnQWk0Qkptd2lDRUcrcFg5c2FrRUxkVFlDSkNBQUlBaEJvUzFzSUFacUlnWWdCU0FIYkVHeHpnQnNJZ1ZyUVF0MU5nSThJQUFnQlNBR2FrRUxkVFlDRENBQktBSXdJUVVnQWk0QkdDRUhJQUFnQWk0QkNDQUJLQUlRYkVFTmRFR0FDSElpQmlBQktBSlFJQUl1QVNoc0lnaEJ2cVYvYkdwQkMzVTJBaWdnQUNBSVFhRXRiQ0FHYWlJR0lBVWdCMnhCc2M0QWJDSUZhMEVMZFRZQ1FDQUFJQVVnQm1wQkMzVTJBaEFnQVNnQ05DRUZJQUl1QVJvaEJ5QUFJQUl1QVFvZ0FTZ0NGR3hCRFhSQmdBaHlJZ1lnQVNnQ1ZDQUNMZ0VxYkNJQlFiNmxmMnhxUVF0MU5nSXNJQUFnQVVHaExXd2dCbW9pQVNBRklBZHNRYkhPQUd3aUFtdEJDM1UyQWtRZ0FDQUJJQUpxUVF0MU5nSVVJQWxCZ0FOcklRRWdBQ0VDUVFBaENRTkFJQU1nQ1VFQ2RHb29BZ0FnQkdvaUFDQUJJQUlvQWhRaUJTQUNLQUlFSWdkcVFiWVhiQ0lJSUFJb0Fnd2lCaUFIYWtFTmRHb2lDaUFDS0FJQVFRMTBRWUNBaU1BQWFpSUxJQUlvQWhBaURFR2hMV3hxSWcwZ0FpZ0NDRUd4emdCc0lnNXFJZzlxUVJKMlFmOEhjV290QUFBNkFBQWdBQ0FCSUE4Z0NtdEJFblpCL3dkeGFpMEFBRG9BQlNBQUlBRWdCeUFGSUFacWEwRU5kQ0lISUF4QnZxVi9iQ0FMYWlJS2FrRVNka0gvQjNGcUxRQUFPZ0FCSUFBZ0FTQUtJQWRyUVJKMlFmOEhjV290QUFBNkFBUWdBQ0FCSUFnZ0JTQUdhMEVOZEdvaUJTQU5JQTVySWdkcVFSSjJRZjhIY1dvdEFBQTZBQUlnQUNBQklBY2dCV3RCRW5aQi93ZHhhaTBBQURvQUF5QUNRUmhxSVFJZ0NVRUJhaUlKUVFOSERRQUxDNUVGQVJCL0lBQW9BdEFDSVFnZ0FTZ0NWQ0VCSXdCQmdBRnJJZ1VoQUFOQUlBQWdBU2dDUUNBQ0xnRWdiQ0lHSUFFb0FnQWdBaTRCQUd3aUNtcEJBblFpQ3lBQktBSmdJQUl1QVRCc0lnd2dBU2dDSUNBQ0xnRVFiQ0lIYWtIUklteEJnQWhxSWcwZ0IwSCtNR3hxUVF0MUlnZHJOZ0pnSUFBZ0J5QUxhallDQUNBQUlBb2dCbXRCQW5RaUJpQU5JQXhCMzRsL2JHcEJDM1VpQ21zMkFrQWdBQ0FHSUFwcU5nSWdJQUJCQkdvaEFDQUJRUVJxSVFFZ0FrRUNhaUVDSUFsQkFXb2lDVUVJUncwQUN5QUlRWUFEYXlFQUlBVWhBa0VBSVFrRFFDQURJQWxCQW5ScUtBSUFJQVJxSWdFZ0FDQUNLQUlFSWdVZ0FpZ0NIQ0lJYWtHelJtd2lDaUFGUVl2Z0FHeHFJQVVnQWlnQ0ZDSUdhaUlMSUFJb0Fnd2lCU0FJYWlJTWFrR2h5d0JzSWdjZ0MwR0VaMnhxSWd0cUlnMGdBaWdDR0NJT0lBSW9BZ2dpRDJwQjBTSnNJaEFnRDBIK01HeHFJZzhnQWlnQ0FFR1FnQUZxSWhFZ0FpZ0NFQ0lTYWtFTmRDSVRhaUlVYWtFU2RrSC9CM0ZxTFFBQU9nQUFJQUVnQUNBVUlBMXJRUkoyUWY4SGNXb3RBQUE2QUFjZ0FTQUFJQWNnREVHN2duOXNhaUlNSUFVZ0JtcEIvZHQrYkNJSElBVkIxTVFCYkdwcUlnVWdFQ0FPUWQrSmYyeHFJZzBnRVNBU2EwRU5kQ0lPYWlJUWFrRVNka0gvQjNGcUxRQUFPZ0FCSUFFZ0FDQVFJQVZyUVJKMlFmOEhjV290QUFBNkFBWWdBU0FBSUFjZ0JrR3pnd0ZzYWlBTGFpSUZJQTRnRFdzaUJtcEJFblpCL3dkeGFpMEFBRG9BQWlBQklBQWdCaUFGYTBFU2RrSC9CM0ZxTFFBQU9nQUZJQUVnQUNBS0lBaEJqaE5zYWlBTWFpSUZJQk1nRDJzaUNHcEJFblpCL3dkeGFpMEFBRG9BQXlBQklBQWdDQ0FGYTBFU2RrSC9CM0ZxTFFBQU9nQUVJQUpCSUdvaEFpQUpRUUZxSWdsQkJFY05BQXNMcHdZQkVuOGpBRUdnQVdzaUR5UUFJQUFvQXRBQ0lRb2dBU2dDVkNFQklBOGhBQU5BSUFFb0FtQWhCaUFDTGdFd0lRVWdBU2dDSUNFSklBSXVBUkFoQ3lBQUlBSXVBUUFnQVNnQ0FHeEJEWFJCZ0FoeUlnd2dBU2dDUUNBQ0xnRWdiQ0lJSUFFb0FvQUJJQUl1QVVCc0lnMXJJZzVCd0tWL2JHcEJDM1UyQWtBZ0FDQU9RZEFXYkNBTWFpSU1JQWdnRFdwQnpESnNJZ2hxSWcwZ0JTQUdiQ0lHSUFrZ0Myd2lCV3BCbWpWc0lna2dCVUh4SUd4cUlnVnJRUXQxTmdLQUFTQUFJQVVnRFdwQkMzVTJBZ0FnQUNBTUlBaHJJZ1VnQ1NBR1FkejBmbXhxSWdaclFRdDFOZ0pnSUFBZ0JTQUdha0VMZFRZQ0lDQUFRUVJxSVFBZ0FVRUVhaUVCSUFKQkFtb2hBaUFIUVFGcUlnZEJDRWNOQUFzZ0NrR0FBMnNoQUNBUElRRkJBQ0VLQTBBZ0F5QUtRUUowYWlnQ0FDQUVhaUlDSUFBZ0FTZ0NIQ0lHSUFFb0Fnd2lCV29pQzBIdlBHd2lEQ0FCS0FJRUlnZEJzOWtBYkdvZ0JTQUdheUlHUWVNVGJDSUlJQUVvQWhRaURVRU5kQ0lPYWlJVGFpSVFJQUVvQWhnaUVTQUJLQUlJSWdWcVFabzFiQ0lTSUFWQjhTQnNhaUlVSUFFb0FnQkJEWFJCZ0lDSXdBQnFJZ1VnQVNnQ0VDSUpRWjNKQUd4cUloVnFJaFpxUVJKMlFmOEhjV290QUFBNkFBQWdBaUFBSUJZZ0VHdEJFblpCL3dkeGFpMEFBRG9BQ1NBQ0lBQWdCMEhUMEFCc0lBdEJ6eVZzSWdzZ0RpQUlheUFHUVF4MGF5SUlhbXNpRGlBU0lCRkIzUFIrYkdvaUVDQUpRWVJrYkNBRmFpSVJhaUlTYWtFU2RrSC9CM0ZxTFFBQU9nQUJJQUlnQUNBU0lBNXJRUkoyUWY4SGNXb3RBQUE2QUFnZ0FpQUFJQWNnQmlBTmFtdEJEWFFpQmlBSlFiNmxmMndnQldvaUJXcEJFblpCL3dkeGFpMEFBRG9BQWlBQ0lBQWdCU0FHYTBFU2RrSC9CM0ZxTFFBQU9nQUhJQUlnQUNBSUlBZEJqQ2xzSUF0cmFpSUdJQkVnRUdzaUJXcEJFblpCL3dkeGFpMEFBRG9BQXlBQ0lBQWdCU0FHYTBFU2RrSC9CM0ZxTFFBQU9nQUdJQUlnQUNBSFFaUU9iQ0FNYXlBVGFpSUhJQlVnRkdzaUJtcEJFblpCL3dkeGFpMEFBRG9BQkNBQ0lBQWdCaUFIYTBFU2RrSC9CM0ZxTFFBQU9nQUZJQUZCSUdvaEFTQUtRUUZxSWdwQkJVY05BQXNnRDBHZ0FXb2tBQXVVQndFVWZ5TUFRY0FCYXlJUUpBQWdBQ2dDMEFJaENTQUJLQUpVSVFFZ0VDRUFBMEFnQVNnQ1FDRU1JQUl1QVNBaERTQUFJQUl1QVFBZ0FTZ0NBR3hCRFhSQmdBaHlJZ1lnQVNnQ2dBRWdBaTRCUUd3aURrRytwWDlzYWtFTGRTSVBJQUVvQWlBZ0FpNEJFR3dpQnlBQktBSmdJQUl1QVRCc0lnZ2dBU2dDb0FFZ0FpNEJVR3dpQldwclFRSjBJZ3RyTmdLQUFTQUFJQXNnRDJvMkFpQWdBQ0FNSUExc1FiSE9BR3dpRENBT1FhRXRiQ0FHYWlJTmFpSUdJQVVnQjJwQnRoZHNJZzRnQnlBSWFrRU5kR29pQjJ0QkMzVTJBcUFCSUFBZ0JpQUhha0VMZFRZQ0FDQUFJQTBnREdzaUJ5QU9JQVVnQ0d0QkRYUnFJZ2hyUVF0MU5nSmdJQUFnQnlBSWFrRUxkVFlDUUNBQVFRUnFJUUFnQVVFRWFpRUJJQUpCQW1vaEFpQUtRUUZxSWdwQkNFY05BQXNnQ1VHQUEyc2hBU0FRSVFCQkFDRUhBMEFnQXlBSFFRSjBhaWdDQUNBRWFpSUNJQUVnQUNnQ0RDSU1RYy9UQUd3aURpQUFLQUlFSWdoQjl4RnNhaUFBS0FJVUlnVWdDR29pQ1NBQUtBSWNJZ3BxUVkwM2JDSU5JQWxCMnhCc2FpSVBhaUlMSUFBb0FoZ2lFVUVOZENJU0lBQW9BZ2dpQmtHMjF3QnNhaUlVSUFBb0FnQkJEWFJCZ0lDSXdBQnFJZ2tnQUNnQ0VFR3h6Z0JzSWhWcUloWnFJaE5xUVJKMlFmOEhjV290QUFBNkFBQWdBaUFCSUJNZ0MydEJFblpCL3dkeGFpMEFBRG9BQ3lBQ0lBRWdDQ0FLYXlJTElBd2dCV3NpRTJwQjBTSnNJaGNnQzBIK01HeHFJZ3NnQmlBUmEwRU5kQ0lSSUFscUloaHFRUkoyUWY4SGNXb3RBQUE2QUFFZ0FpQUJJQmdnQzJ0QkVuWkIvd2R4YWkwQUFEb0FDaUFDSUFFZ0R5QUZJQXBxUVl1OWYyd2lEeUFNUWE5ZGJDSU1JQVZCc0tGL2JHcHFhaUlGSUFaQnRoZHNJQkpySWdZZ0NTQVZheUlMYWlJU2FrRVNka0gvQjNGcUxRQUFPZ0FDSUFJZ0FTQVNJQVZyUVJKMlFmOEhjV290QUFBNkFBa2dBaUFCSUFwQnh1VUFiQ0FPYXlBTmFpQVBhaUlGSUFzZ0Jtc2lCbXBCRW5aQi93ZHhhaTBBQURvQUF5QUNJQUVnQmlBRmEwRVNka0gvQjNGcUxRQUFPZ0FJSUFJZ0FTQVhJQk5CMzRsL2JHb2lCU0FKSUJGcklnbHFRUkoyUWY4SGNXb3RBQUE2QUFRZ0FpQUJJQWtnQld0QkVuWkIvd2R4YWkwQUFEb0FCeUFDSUFFZ0RDQUlRZHhVYkdvZ0NrR01nWDlzYWlBTmFpSUtJQllnRkdzaUNHcEJFblpCL3dkeGFpMEFBRG9BQlNBQ0lBRWdDQ0FLYTBFU2RrSC9CM0ZxTFFBQU9nQUdJQUJCSUdvaEFDQUhRUUZxSWdkQkJrY05BQXNnRUVIQUFXb2tBQXZuQ0FFVWZ5TUFRZUFCYXlJVEpBQWdBQ2dDMEFJaERDQUJLQUpVSVFFZ0V5RUFBMEFnQVNnQ29BRWhCeUFDTGdGUUlRa2dBU2dDSUNFTklBSXVBUkFoRGlBQktBSmdJUWdnQWk0Qk1DRVVJQUFnQWk0QkFDQUJLQUlBYkVFTmRFR0FDSElpQlNBQktBS0FBU0FDTGdGQWJDSUdJQUVvQXNBQklBSXVBV0JzSWdvZ0FTZ0NRQ0FDTGdFZ2JDSUxhaUlQYTBIQjJnQnNha0VMZFRZQ1lDQUFJQTlCeHRFQWJDQUZhaUlQSUFZZ0NtdEJ0emhzSWhFZ0NrR0RlMnhxYWlJU0lBY2dDV3dpQ2lBTklBNXNJZ2RxUWFNbmJDSU5JQWdnRkd3aUNTQUhha0h2TzJ3aURpQUhJQWxyUWZNS2JDSUhhMm9pQ0d0QkMzVTJBc0FCSUFBZ0NDQVNha0VMZFRZQ0FDQUFJQXNnQm10QmtoUnNJZ2dnQzBIeDRYNXNhaUFQYWlJTElBa2dDbXBCNGFkL2JDSUpJQTBnQ2tIZTl3QnNhbW9pQ210QkMzVTJBb0FCSUFBZ0NpQUxha0VMZFRZQ1FDQUFJQVpCbFlwL2JDQUZhaUFJYWlBUmFpSUdJQWNnRG1vZ0NXb2lCV3RCQzNVMkFxQUJJQUFnQlNBR2FrRUxkVFlDSUNBQVFRUnFJUUFnQVVFRWFpRUJJQUpCQW1vaEFpQVFRUUZxSWhCQkNFY05BQXNnREVHQUEyc2hBU0FUSVFCQkFDRVFBMEFnQXlBUVFRSjBhaWdDQUNBRWFpSUNJQUVnQUNnQ0hDSU9RUTEwSWdzZ0FDZ0NEQ0lHSUFBb0FnUWlDbXBCdDlVQWJDSUlJQXBCOExkL2JHb2dBQ2dDRkNJRklBcHFJaFJCMHN3QWJDSVBhbW9pRVNBQUtBSVlJZ3dnQUNnQ0NDSU5ha0hpeGdCc0loSWdEVUc5RVd4cUloWWdBQ2dDQUVFTmRFR0FnSWpBQUdvaUJ5QUFLQUlRSWdsQnh0RUFiR29pRjJvaUZXcEJFblpCL3dkeGFpMEFBRG9BQUNBQ0lBRWdGU0FSYTBFU2RrSC9CM0ZxTFFBQU9nQU5JQUlnQVNBRklBWnFRZTkxYkNBTGF5SVJJQWdnQmtIdVpHeHFhaUlJSUJJZ0RFSDhrWDlzYWlJU0lBY2dDVUdTRkd4cUloVnFJaGhxUVJKMlFmOEhjV290QUFBNkFBRWdBaUFCSUJnZ0NHdEJFblpCL3dkeGFpMEFBRG9BRENBQ0lBRWdEeUFGUVlub2ZteHFJQkZxSWdnZ0RFSGhwMzlzSUExQm95ZHNhaUlNSUFsQnlVZHNJQWRxSWcxcUlnOXFRUkoyUWY4SGNXb3RBQUE2QUFJZ0FpQUJJQThnQ0d0QkVuWkIvd2R4YWkwQUFEb0FDeUFDSUFFZ0RpQUtJQVpySWdnZ0JXdHFRUTEwSWc0Z0NVRytwWDlzSUFkcUlnZHFRUkoyUWY4SGNXb3RBQUE2QUFNZ0FpQUJJQWNnRG10QkVuWkIvd2R4YWkwQUFEb0FDaUFDSUFFZ0ZFR1VNR3dpQnlBRklBWnJRZmpaQUd3aUNTQUxJQVZCNXBOL2JHcHFhaUlGSUEwZ0RHc2lER3BCRW5aQi93ZHhhaTBBQURvQUJDQUNJQUVnRENBRmEwRVNka0gvQjNGcUxRQUFPZ0FKSUFJZ0FTQUlRZklkYkNBTGF5SUZJQWtnQmtHWksyeHFhaUlHSUJVZ0Vtc2lDMnBCRW5aQi93ZHhhaTBBQURvQUJTQUNJQUVnQ3lBR2EwRVNka0gvQjNGcUxRQUFPZ0FJSUFJZ0FTQUhJQXBCaTd4L2JHb2dCV29pQmlBWElCWnJJZ1ZxUVJKMlFmOEhjV290QUFBNkFBWWdBaUFCSUFVZ0JtdEJFblpCL3dkeGFpMEFBRG9BQnlBQVFTQnFJUUFnRUVFQmFpSVFRUWRIRFFBTElCTkI0QUZxSkFBTHBnc0JHWDhqQUVHQUFtc2lGU1FBSUFBb0F0QUNJUkVnQVNnQ1ZDRUFJQlVoQVVFSUlRb0RRQ0FCQW44Q1FDQUNMZ0VRSWdZZ0FpOEJJQ0lGY2tILy93TnhEUUJCQUNFRklBSXZBVEFOQUNBQ0x3RkFEUUFnQWk4QlVBMEFJQUl2QVdBTkFDQUNMd0Z3RFFBZ0FTQUNMZ0VBSUFBb0FnQnNRUUowSWdVMkFzQUJJQUVnQlRZQ29BRWdBU0FGTmdLQUFTQUJJQVUyQW1BZ0FTQUZOZ0pBSUFFZ0JUWUNJQ0FCSUFVMkFnQkJPQXdCQ3lBQklBQW9Bc0FCSUFJdUFXQnNJZ2NnQUNnQ1FDQUZRUkIwUVJCMWJDSUZha0hSSW13aUN5QUZRZjR3YkdvaUVDQUNMZ0ZBSUFBb0FvQUJiRUVOZENJSklBSXVBUUFnQUNnQ0FHeEJEWFJCZ0FoeUloSnFJZ3hxSWcwZ0FDZ0NJQ0FHYkNJRklBQW9BdUFCSUFJdUFYQnNJZ1pxUWJOR2JDSVRJQVZCaStBQWJHb2dCU0FBS0FLZ0FTQUNMZ0ZRYkNJSWFpSU9JQUFvQW1BZ0FpNEJNR3dpQlNBR2FpSVVha0doeXdCc0loWWdEa0dFWjJ4cUlnNXFJZzlyUVF0MU5nTGdBU0FCSUEwZ0QycEJDM1UyQWdBZ0FTQUxJQWRCMzRsL2JHb2lCeUFTSUFscklndHFJZ2tnRmlBVVFidUNmMnhxSWhJZ0JTQUlha0g5MjM1c0lnMGdCVUhVeEFGc2Ftb2lCV3RCQzNVMkFzQUJJQUVnQlNBSmFrRUxkVFlDSUNBQklBc2dCMnNpQlNBTklBaEJzNE1CYkdvZ0Rtb2lDR3RCQzNVMkFxQUJJQUVnQlNBSWFrRUxkVFlDUUNBQklCTWdCa0dPRTJ4cUlCSnFJZ1VnRENBUWF5SUdha0VMZFRZQ1lDQUdJQVZyUVF0MUlRVkJJQXRCQW5ScUlBVTJBZ0FnQWtFQ2FpRUNJQUJCQkdvaEFDQUJRUVJxSVFFZ0NrRUJTeUVGSUFwQkFXc2hDaUFGRFFBTElCRkJnQU5ySVFFZ0ZTRUFRUUFoRVFOQUlBTWdFVUVDZEdvb0FnQWdCR29pQWlBQklBQW9BZ3dpQlNBQUtBSUVJZ3BxUWM3V0FHd2lDU0FLUWRidGZteHFJQUFvQWhRaUJpQUthaUlTUWVuUEFHd2lER29nQUNnQ0hDSUlJQXBxUWZ6RkFHd2lEV29pRXlBQUtBSUlJZ3NnQUNnQ0dDSVFheUlPUWVQWUFHd2lGQ0FRUVlPa0FXeHFJaFlnQUNnQ0FFRU5kRUdBZ0lqQUFHb2lCeUFBS0FJUUlnOUJ6OU1BYkNJWWFpSVphaUlYYWtFU2RrSC9CM0ZxTFFBQU9nQUFJQUlnQVNBWElCTnJRUkoyUWY4SGNXb3RBQUE2QUE4Z0FpQUJJQVVnQ0dvaUUwR3JWV3dpRnlBRklBWnFRZkFJYkNJYUlBa2dCVUhOQkd4cWFtb2lDU0FPUWRRUmJDSU9JQXRCelRsc2FpSWJJQWNnRDBIUkltd2lEMm9pSEdvaUhXcEJFblpCL3dkeGFpMEFBRG9BQVNBQ0lBRWdIU0FKYTBFU2RrSC9CM0ZxTFFBQU9nQU9JQUlnQVNBR0lBaHFRYktwZjJ3aUNTQWFJQVpCK3JkL2JHb2dER3BxSWd3Z0ZDQUxRY0paYkdvaUN5QUhJQTlySWhScUlnOXFRUkoyUWY4SGNXb3RBQUE2QUFJZ0FpQUJJQThnREd0QkVuWkIvd2R4YWkwQUFEb0FEU0FDSUFFZ0Z5QUlRWmpFQUd4cUlBMXFJQWxxSWdrZ0RpQVFRYkJmYkdvaUVDQUhJQmhySWdkcUlneHFRUkoyUWY4SGNXb3RBQUE2QUFNZ0FpQUJJQXdnQ1d0QkVuWkIvd2R4YWkwQUFEb0FEQ0FDSUFFZ0NDQUdhMEdqR213aUNTQUtJQWhyUWJZNWJDSU1JQk5CbDdCL2JDSU5JQWhCaGNrQmJHcHFhaUlJSUFjZ0VHc2lCMnBCRW5aQi93ZHhhaTBBQURvQUJDQUNJQUVnQnlBSWEwRVNka0gvQjNGcUxRQUFPZ0FMSUFJZ0FTQVNRZFVxYkNJSUlBWWdCV3RCaWRvQWJDSUhJQVpCK2s1c2Ftb2dDV29pQmlBVUlBdHJJZ3RxUVJKMlFmOEhjV290QUFBNkFBVWdBaUFCSUFzZ0JtdEJFblpCL3dkeGFpMEFBRG9BQ2lBQ0lBRWdDaUFGYTBHakdtd2lCaUFGUVpyK0FHeHFJQWRxSUExcUlnVWdIQ0FiYXlJSGFrRVNka0gvQjNGcUxRQUFPZ0FHSUFJZ0FTQUhJQVZyUVJKMlFmOEhjV290QUFBNkFBa2dBaUFCSUFZZ0NrSENpbjlzYWlBSWFpQU1haUlGSUJrZ0Ztc2lDbXBCRW5aQi93ZHhhaTBBQURvQUJ5QUNJQUVnQ2lBRmEwRVNka0gvQjNGcUxRQUFPZ0FJSUFCQklHb2hBQ0FSUVFGcUloRkJDRWNOQUFzZ0ZVR0FBbW9rQUF1K0RBRWFmeU1BUVlBRWF5SVpKQUFnQUNnQzBBSWhEU0FCS0FKVUlRQWdHU0VCQTBBZ0FTQUFLQUpBSUFJdUFTQnNJZ29nQUNnQ3dBRWdBaTRCWUd3aURtc2lFVUhqMkFCc0lnOGdEa0dEcEFGc2FpSVNJQUFvQW9BQklBSXVBVUJzSWd0Qno5TUFiQ0lUSUFJdUFRQWdBQ2dDQUd4QkRYUkJnQWh5SWd4cUloUnFJaFVnQUNnQ1lDQUNMZ0V3YkNJR0lBQW9BaUFnQWk0QkVHd2lDR3BCenRZQWJDSVFJQWhCMXUxK2JHb2dBQ2dDb0FFZ0FpNEJVR3dpQnlBSWFpSWFRZW5QQUd3aUZtb2dBQ2dDNEFFZ0FpNEJjR3dpQlNBSWFrSDh4UUJzSWhkcUloaHJRUXQxTmdMZ0F5QUJJQlVnR0dwQkMzVTJBZ0FnQVNBUlFkUVJiQ0lSSUFwQnpUbHNhaUlWSUF0QjBTSnNJZ3NnREdvaUdHb2lHeUFGSUFacUloeEJxMVZzSWgwZ0JpQUhha0h3Q0d3aUhpQVFJQVpCelFSc2FtcHFJaEJyUVF0MU5nTEFBeUFCSUJBZ0cycEJDM1UyQWlBZ0FTQVBJQXBCd2xsc2FpSUtJQXdnQzJzaUQyb2lDeUFGSUFkcVFiS3BmMndpRUNBZUlBZEIrcmQvYkdvZ0ZtcHFJaFpyUVF0MU5nS2dBeUFCSUFzZ0ZtcEJDM1UyQWtBZ0FTQVJJQTVCc0Y5c2FpSU9JQXdnRTJzaURHb2lFU0FkSUFWQm1NUUFiR29nRjJvZ0VHb2lDMnRCQzNVMkFvQURJQUVnQ3lBUmFrRUxkVFlDWUNBQklBd2dEbXNpRENBRklBZHJRYU1hYkNJT0lBZ2dCV3RCdGpsc0loRWdIRUdYc0g5c0lnc2dCVUdGeVFGc2FtcHFJZ1ZyUVF0MU5nTGdBaUFCSUFVZ0RHcEJDM1UyQW9BQklBRWdEeUFLYXlJRklCcEIxU3BzSWd3Z0J5QUdhMEdKMmdCc0lnb2dCMEg2VG14cWFpQU9haUlIYTBFTGRUWUN3QUlnQVNBRklBZHFRUXQxTmdLZ0FTQUJJQmdnRldzaUJ5QUlJQVpyUWFNYWJDSUZJQVpCbXY0QWJHb2dDbW9nQzJvaUJtdEJDM1UyQXFBQ0lBRWdCaUFIYWtFTGRUWUN3QUVnQVNBVUlCSnJJZ1lnQlNBSVFjS0tmMnhxSUF4cUlCRnFJZ2hyUVF0MU5nS0FBaUFCSUFZZ0NHcEJDM1UyQXVBQklBRkJCR29oQVNBQVFRUnFJUUFnQWtFQ2FpRUNJQWxCQVdvaUNVRUlSdzBBQ3lBTlFZQURheUVCSUJraEFFRUFJUXdEUUNBRElBeEJBblJxS0FJQUlBUnFJZ0lnQVNBQUtBSU1JZ1lnQUNnQ0JDSUlha0hPMWdCc0lnMGdDRUhXN1g1c2FpQUFLQUlVSWdjZ0NHb2lFVUhwendCc0lnOXFJQUFvQWh3aUJTQUlha0g4eFFCc0loSnFJZ3NnQUNnQ0NDSUtJQUFvQWhnaURtc2lFMEhqMkFCc0loUWdEa0dEcEFGc2FpSVZJQUFvQWdCQkRYUkJnSUNJd0FCcUlna2dBQ2dDRUNJUVFjL1RBR3dpR21vaUZtb2lGMnBCRW5aQi93ZHhhaTBBQURvQUFDQUNJQUVnRnlBTGEwRVNka0gvQjNGcUxRQUFPZ0FQSUFJZ0FTQUZJQVpxSWd0QnExVnNJaGNnQmlBSGFrSHdDR3dpR0NBTklBWkJ6UVJzYW1wcUlnMGdFMEhVRVd3aUV5QUtRYzA1YkdvaUd5QUpJQkJCMFNKc0loQnFJaHhxSWgxcVFSSjJRZjhIY1dvdEFBQTZBQUVnQWlBQklCMGdEV3RCRW5aQi93ZHhhaTBBQURvQURpQUNJQUVnQlNBSGFrR3lxWDlzSWcwZ0dDQUhRZnEzZjJ4cUlBOXFhaUlQSUJRZ0NrSENXV3hxSWdvZ0NTQVFheUlVYWlJUWFrRVNka0gvQjNGcUxRQUFPZ0FDSUFJZ0FTQVFJQTlyUVJKMlFmOEhjV290QUFBNkFBMGdBaUFCSUJjZ0JVR1l4QUJzYWlBU2FpQU5haUlOSUJNZ0RrR3dYMnhxSWc0Z0NTQWFheUlKYWlJUGFrRVNka0gvQjNGcUxRQUFPZ0FESUFJZ0FTQVBJQTFyUVJKMlFmOEhjV290QUFBNkFBd2dBaUFCSUFVZ0IydEJveHBzSWcwZ0NDQUZhMEcyT1d3aUR5QUxRWmV3ZjJ3aUVpQUZRWVhKQVd4cWFtb2lCU0FKSUE1cklnbHFRUkoyUWY4SGNXb3RBQUE2QUFRZ0FpQUJJQWtnQld0QkVuWkIvd2R4YWkwQUFEb0FDeUFDSUFFZ0VVSFZLbXdpQlNBSElBWnJRWW5hQUd3aUNTQUhRZnBPYkdwcUlBMXFJZ2NnRkNBS2F5SUtha0VTZGtIL0IzRnFMUUFBT2dBRklBSWdBU0FLSUFkclFSSjJRZjhIY1dvdEFBQTZBQW9nQWlBQklBZ2dCbXRCb3hwc0lnY2dCa0dhL2dCc2FpQUphaUFTYWlJR0lCd2dHMnNpQ1dwQkVuWkIvd2R4YWkwQUFEb0FCaUFDSUFFZ0NTQUdhMEVTZGtIL0IzRnFMUUFBT2dBSklBSWdBU0FISUFoQndvcC9iR29nQldvZ0Qyb2lCaUFXSUJWcklnaHFRUkoyUWY4SGNXb3RBQUE2QUFjZ0FpQUJJQWdnQm10QkVuWkIvd2R4YWkwQUFEb0FDQ0FBUVNCcUlRQWdERUVCYWlJTVFSQkhEUUFMSUJsQmdBUnFKQUFMcHdzQkdIOGpBRUhnQTJzaUdDUUFJQUFvQXRBQ0lSUWdBU2dDVkNFQUlCZ2hBUU5BSUFBb0FxQUJJUVVnQWk0QlVDRUlJQUFvQWlBaEVDQUNMZ0VRSVFvZ0FDZ0M0QUVoQnlBQ0xnRndJUXNnQUNnQ1lDRVZJQUl1QVRBaERDQUJJQUl1QVFBZ0FDZ0NBR3hCRFhSQmdBaHlJZzhnQUNnQ3dBRWdBaTRCWUd3aURVRytwWDlzYWlJU0lBQW9Ba0FnQWk0QklHd2lDU0FBS0FLQUFTQUNMZ0ZBYkNJT2F5SUdRY0NsZjJ4cVFRdDFOZ0xnQVNBQklBMUJuY2tBYkNBUGFpSVRJQVpCOWdKc0loWWdDU0FPYWlJT1FjN1ZBR3dpR1dwcUloY2dCeUFMYkNJSFFhT2RBV3dnRENBVmJDSUxRZmFwZjJ3aUZXc2dCU0FJYkVHeHpnQnNJZ2dnQ2lBUWJDSUZJQWRySWhCQmd0b0FiR29pQ21vaURHdEJDM1UyQXNBRElBRWdEQ0FYYWtFTGRUWUNBQ0FCSUExQmhHUnNJQTlxSWc4Z0JrSFFGbXdpRFNBT1Fjd3liQ0lNYW1vaUZ5QUxJQWRySWhvZ0JXcEJtalZzSWhzZ0JVSHhJR3hxSWh4clFRdDFOZ0tnQXlBQklCY2dIR3BCQzNVMkFpQWdBU0FTSUFaQm9DMXNhaUlTSUJCQnNjNEFiQ0FJYXlJUWEwRUxkVFlDZ0FNZ0FTQVFJQkpxUVF0MU5nSkFJQUVnQmtHNVptd2lCaUFPUVlJamJDSU9heUFUYWlJUUlBVWdCMnBCNkNSc0loSWdDQ0FWYWlBSFFhOUliR3BxSWdkclFRdDFOZ0tnQWlBQklBY2dFR3BCQzNVMkFxQUJJQUVnQ1VHVDNBQnNJZ2NnR1dzZ0Ztb2dEMm9pQ1NBTFFlWktiQ0lMSUFWQnVSNXNhaUFJYXlBU2FpSUlhMEVMZFRZQzRBSWdBU0FJSUFscVFRdDFOZ0pnSUFFZ0V5QU1heUFOYWlJSUlCc2dHa0hjOUg1c2FpSU5hMEVMZFRZQ3dBSWdBU0FJSUExcVFRdDFOZ0tBQVNBQklBNGdCMnNnQm1vZ0Qyb2lCaUFMSUFWQjU3aC9iR29nQ21vaUJXdEJDM1UyQW9BQ0lBRWdCU0FHYWtFTGRUWUN3QUVnQVVFRWFpRUJJQUJCQkdvaEFDQUNRUUpxSVFJZ0VVRUJhaUlSUVFoSERRQUxJQlJCZ0FOcklRRWdHQ0VBUVFBaENBTkFJQU1nQ0VFQ2RHb29BZ0FnQkdvaUFpQUJJQUFvQWh3aUJrR2puUUZzSUFBb0Fnd2lEMEgycVg5c0loQnJJQUFvQWhSQnNjNEFiQ0lSSUFBb0FnUWlCU0FHYXlJS1FZTGFBR3hxSWhWcUloUWdBQ2dDQUVFTmRFR0FnSWpBQUdvaURTQUFLQUlZSWdsQm5ja0FiR29pRXlBQUtBSUlJZzRnQUNnQ0VDSUxheUlIUWZZQ2JDSU1JQXNnRG1vaUMwSE8xUUJzSWhKcWFpSVdha0VTZGtIL0IzRnFMUUFBT2dBQUlBSWdBU0FXSUJSclFSSjJRZjhIY1dvdEFBQTZBQTRnQWlBQklBVWdEeUFHYXlJV2FrR2FOV3dpR1NBRlFmRWdiR29pRnlBSlFZUmtiQ0FOYWlJVUlBZEIwQlpzSWhvZ0MwSE1NbXdpRzJwcUloeHFRUkoyUWY4SGNXb3RBQUE2QUFFZ0FpQUJJQndnRjJ0QkVuWkIvd2R4YWkwQUFEb0FEU0FDSUFFZ0NrR3h6Z0JzSUJGcklnb2dDVUcrcFg5c0lBMXFJZzBnQjBHZ0xXeHFJZ2xxUVJKMlFmOEhjV290QUFBNkFBSWdBaUFCSUFrZ0NtdEJFblpCL3dkeGFpMEFBRG9BRENBQ0lBRWdCU0FHYWtIb0pHd2lDU0FQUWVaS2JDSVBJQVZCdVI1c2FpQVJhMm9pQ2lBT1FaUGNBR3dpRGlBU2F5QU1haUFVYWlJTWFrRVNka0gvQjNGcUxRQUFPZ0FESUFJZ0FTQU1JQXByUVJKMlFmOEhjV290QUFBNkFBc2dBaUFCSUJrZ0ZrSGM5SDVzYWlJS0lCTWdHMnNnR21vaURHcEJFblpCL3dkeGFpMEFBRG9BQkNBQ0lBRWdEQ0FLYTBFU2RrSC9CM0ZxTFFBQU9nQUtJQUlnQVNBUUlCRnFJQVpCcjBoc2FpQUphaUlHSUFkQnVXWnNJaEVnQzBHQ0kyd2lDV3NnRTJvaUUycEJFblpCL3dkeGFpMEFBRG9BQlNBQ0lBRWdFeUFHYTBFU2RrSC9CM0ZxTFFBQU9nQUpJQUlnQVNBUElBVkI1N2gvYkdvZ0ZXb2lCU0FKSUE1cklCRnFJQlJxSWdacVFSSjJRZjhIY1dvdEFBQTZBQVlnQWlBQklBWWdCV3RCRW5aQi93ZHhhaTBBQURvQUNDQUNJQUVnRFNBSFFjQ2wvLzhBYkdwQkVuWkIvd2R4YWkwQUFEb0FCeUFBUVNCcUlRQWdDRUVCYWlJSVFROUhEUUFMSUJoQjRBTnFKQUFMeHdvQkZYOGpBRUhBQTJzaUZpUUFJQUFvQXRBQ0lSUWdBU2dDVkNFQUlCWWhBUU5BSUFBb0FzQUJJUWNnQWk0QllDRUlJQUFvQWtBaENpQUNMZ0VnSVFrZ0FTQUNMZ0VBSUFBb0FnQnNRUTEwUVlBSWNpSU5JQUFvQW9BQklBSXVBVUJzSWd0QnZxVi9iR3BCQzNVaUVTQUFLQUxnQVNBQ0xnRndiQ0lPSUFBb0FpQWdBaTRCRUd3aURDQUFLQUpnSUFJdUFUQnNJZ1ZySWhJZ0FDZ0NvQUVnQWk0QlVHd2lCbXRxUVFKMElnOXJOZ0xBQWlBQklBOGdFV28yQW1BZ0FTQUhJQWhzSWdnZ0NTQUtiQ0lLYWtIaXhnQnNJZ2tnQ0VIOGtYOXNhaUlSSUF0QmtoUnNJQTFxSWc5cUloVWdCU0FHYWtIdmRXd2dEa0VOZENJSGF5SU9JQVVnREdwQnQ5VUFiQ0lYSUFWQjdtUnNhbW9pRTJ0QkMzVTJBb0FESUFFZ0V5QVZha0VMZFRZQ0lDQUJJQWhCNGFkL2JDQUtRYU1uYkdvaUNDQUxRY2xIYkNBTmFpSVZhaUlUSUE0Z0JpQU1haUlPUWRMTUFHd2lHQ0FHUVlub2ZteHFhaUlaYTBFTGRUWUM0QUlnQVNBVElCbHFRUXQxTmdKQUlBRWdEeUFSYXlJUklCSkI4aDFzSUFkckloSWdCaUFGYTBINDJRQnNJZzhnQlVHWksyeHFhaUlGYTBFTGRUWUNnQUlnQVNBRklCRnFRUXQxTmdLZ0FTQUJJQXRCeHRFQWJDQU5haUlGSUFrZ0NrRzlFV3hxSWcxcklnc2dEa0dVTUd3aUNpQU1RWXU4ZjJ4cUlCSnFJZ2xyUVF0MU5nTGdBU0FCSUFrZ0MycEJDM1UyQXNBQklBRWdCU0FOYWlJRklCY2dERUh3dDM5c2FpQVlhaUFIYWlJTWEwRUxkVFlDb0FNZ0FTQUZJQXhxUVF0MU5nSUFJQUVnRlNBSWF5SUZJQThnQmtIbWszOXNhaUFLYWlBSGFpSUdhMEVMZFRZQ29BSWdBU0FGSUFacVFRdDFOZ0tBQVNBQlFRUnFJUUVnQUVFRWFpRUFJQUpCQW1vaEFpQVFRUUZxSWhCQkNFY05BQXNnRkVHQUEyc2hBU0FXSVFCQkFDRU5BMEFnQXlBTlFRSjBhaWdDQUNBRWFpSUNJQUVnQUNnQ0hDSVVRUTEwSWdzZ0FDZ0NEQ0lGSUFBb0FnUWlER3BCdDlVQWJDSUpJQXhCOExkL2JHb2dBQ2dDRkNJR0lBeHFJaEZCMHN3QWJDSU9hbW9pRWlBQUtBSVlJZ2dnQUNnQ0NDSUtha0hpeGdCc0lnOGdDa0c5RVd4cUloVWdBQ2dDQUVFTmRFR0FnSWpBQUdvaUJ5QUFLQUlRSWhCQnh0RUFiR29pRjJvaUUycEJFblpCL3dkeGFpMEFBRG9BQUNBQ0lBRWdFeUFTYTBFU2RrSC9CM0ZxTFFBQU9nQU5JQUlnQVNBRklBWnFRZTkxYkNBTGF5SVNJQWtnQlVIdVpHeHFhaUlKSUE4Z0NFSDhrWDlzYWlJUElBY2dFRUdTRkd4cUloTnFJaGhxUVJKMlFmOEhjV290QUFBNkFBRWdBaUFCSUJnZ0NXdEJFblpCL3dkeGFpMEFBRG9BRENBQ0lBRWdEaUFHUVlub2ZteHFJQkpxSWdrZ0NFSGhwMzlzSUFwQm95ZHNhaUlJSUJCQnlVZHNJQWRxSWdwcUlnNXFRUkoyUWY4SGNXb3RBQUE2QUFJZ0FpQUJJQTRnQ1d0QkVuWkIvd2R4YWkwQUFEb0FDeUFDSUFFZ0ZDQU1JQVZySWdrZ0JtdHFRUTEwSWhRZ0VFRytwWDlzSUFkcUlnZHFRUkoyUWY4SGNXb3RBQUE2QUFNZ0FpQUJJQWNnRkd0QkVuWkIvd2R4YWkwQUFEb0FDaUFDSUFFZ0VVR1VNR3dpQnlBR0lBVnJRZmpaQUd3aUVDQUxJQVpCNXBOL2JHcHFhaUlHSUFvZ0NHc2lDR3BCRW5aQi93ZHhhaTBBQURvQUJDQUNJQUVnQ0NBR2EwRVNka0gvQjNGcUxRQUFPZ0FKSUFJZ0FTQUpRZklkYkNBTGF5SUdJQkFnQlVHWksyeHFhaUlGSUJNZ0Qyc2lDMnBCRW5aQi93ZHhhaTBBQURvQUJTQUNJQUVnQ3lBRmEwRVNka0gvQjNGcUxRQUFPZ0FJSUFJZ0FTQUhJQXhCaTd4L2JHb2dCbW9pQlNBWElCVnJJZ1pxUVJKMlFmOEhjV290QUFBNkFBWWdBaUFCSUFZZ0JXdEJFblpCL3dkeGFpMEFBRG9BQnlBQVFTQnFJUUFnRFVFQmFpSU5RUTVIRFFBTElCWkJ3QU5xSkFBTC93b0JGbjhqQUVHZ0Eyc2lGaVFBSUFBb0F0QUNJUWtnQVNnQ1ZDRUFJQlloQVFOQUlBQW9BdUFCSVFvZ0FpNEJjQ0VRSUFBb0FtQWhCU0FDTGdFd0lRWWdBQ2dDb0FFaEVTQUNMZ0ZRSVJNZ0FDZ0NJQ0VJSUFJdUFSQWhDeUFCSUFJdUFRQWdBQ2dDQUd4QkRYUkJnQWh5SWd3Z0FDZ0NnQUVnQWk0QlFHd2lEU0FBS0FMQUFTQUNMZ0ZnYkNJT2F5SVBJQUFvQWtBZ0FpNEJJR3dpQjJ0Qndkb0FiR3BCQzNVMkFzQUJJQUVnRDBHWkJtd2dER29pRnlBTklBNXFJZzFCK2NrQWJDSU9JQWRCOGRjQWJHcHFJaFFnQlNBR2JDSUZJQWdnQzJ3aUNHcEIwTlFBYkNJTElBaEIyLzUrYkdvZ0VTQVRiQ0lHSUFocVFiN0tBR3dpRVdvZ0NpQVFiQ0lLSUFocUloQkJnanhzSWhOcUloVnJRUXQxTmdLQUF5QUJJQlFnRldwQkMzVTJBZ0FnQVNBUFFaVWZiQ0FNYWlJVUlBZEI0TU1BYkNBTlFhQVViQ0lWYTJvaUdDQUZJQXBxUWNLMWYyd2lHU0FGSUFacVFhdHFiQ0lhSUFzZ0JVSExOV3hxYW1vaUMydEJDM1UyQXVBQ0lBRWdDeUFZYWtFTGRUWUNJQ0FCSUFkQmpDQnNJQTVySUJkcUlnc2dCaUFLYWtINFZXd2lEaUFhSUFaQnNadC9iR29nRVdwcUloRnJRUXQxTmdMQUFpQUJJQXNnRVdwQkMzVTJBa0FnQVNBUFFZSkViQ0FNYWlJTUlBZEJqSFZzSUExQjhodHNJZzlyYWlJTklCa2dDa0dValFGc2FpQVRhaUFPYWlJUmEwRUxkVFlDb0FJZ0FTQU5JQkZxUVF0MU5nSmdJQUVnRHlBSFFjdE1iR29nREdvaURDQVFRZFVWYkNBR0lBVnJRWUk4YkdvaUR5QUlRYk1VYkdvZ0JVR1dZbXhxSWdWclFRdDFOZ0tBQWlBQklBVWdER3BCQzNVMkFvQUJJQUVnRlNBSFFlNnZmMnhxSUJScUlnY2dEeUFHUWM0WWJHb2dDa0cva0g5c2FpSUZhMEVMZFRZQzRBRWdBU0FGSUFkcVFRdDFOZ0tnQVNBQlFRUnFJUUVnQUVFRWFpRUFJQUpCQW1vaEFpQVNRUUZxSWhKQkNFY05BQXNnQ1VHQUEyc2hBU0FXSVFCQkFDRU1BMEFnQXlBTVFRSjBhaWdDQUNBRWFpSUNJQUVnQUNnQ0RDSUZJQUFvQWdRaUNHcEIwTlFBYkNJSklBaEIyLzUrYkdvZ0FDZ0NGQ0lHSUFocVFiN0tBR3dpRUdvZ0FDZ0NIQ0lLSUFocUloRkJnanhzSWhOcUlnc2dBQ2dDR0NJU0lBQW9BaEFpRG1vaURVSDV5UUJzSWhjZ0FDZ0NDQ0lIUWZIWEFHeHFJQUFvQWdCQkRYUkJnSUNJd0FCcUlnOGdEaUFTYXlJU1Faa0diR29pRG1vaUZHcEJFblpCL3dkeGFpMEFBRG9BQUNBQ0lBRWdGQ0FMYTBFU2RrSC9CM0ZxTFFBQU9nQU1JQUlnQVNBRklBcHFRY0sxZjJ3aUN5QUZJQVpxUWF0cWJDSVVJQWtnQlVITE5XeHFhbW9pQ1NBU1FaVWZiQ0FQYWlJVklBZEI0TU1BYkNBTlFhQVViQ0lZYTJvaUdXcEJFblpCL3dkeGFpMEFBRG9BQVNBQ0lBRWdHU0FKYTBFU2RrSC9CM0ZxTFFBQU9nQUxJQUlnQVNBR0lBcHFRZmhWYkNJSklCUWdCa0d4bTM5c2FpQVFhbW9pRUNBSFFZd2diQ0FYYXlBT2FpSU9ha0VTZGtIL0IzRnFMUUFBT2dBQ0lBSWdBU0FPSUJCclFSSjJRZjhIY1dvdEFBQTZBQW9nQWlBQklBc2dDa0dValFGc2FpQVRhaUFKYWlJSklCSkJna1JzSUE5cUloQWdCMEdNZFd3Z0RVSHlHMndpRFd0cUloTnFRUkoyUWY4SGNXb3RBQUE2QUFNZ0FpQUJJQk1nQ1d0QkVuWkIvd2R4YWkwQUFEb0FDU0FDSUFFZ0VVSFZGV3dnQmlBRmEwR0NQR3hxSWdrZ0NFR3pGR3hxSUFWQmxtSnNhaUlGSUEwZ0IwSExUR3hxSUJCcUlnaHFRUkoyUWY4SGNXb3RBQUE2QUFRZ0FpQUJJQWdnQld0QkVuWkIvd2R4YWkwQUFEb0FDQ0FDSUFFZ0NTQUdRYzRZYkdvZ0NrRy9rSDlzYWlJRklCZ2dCMEh1cjM5c2FpQVZhaUlHYWtFU2RrSC9CM0ZxTFFBQU9nQUZJQUlnQVNBR0lBVnJRUkoyUWY4SGNXb3RBQUE2QUFjZ0FpQUJJQklnQjJ0Qndkb0FiQ0FQYWtFU2RrSC9CM0ZxTFFBQU9nQUdJQUJCSUdvaEFDQU1RUUZxSWd4QkRVY05BQXNnRmtHZ0Eyb2tBQXVZQ1FFVWZ5TUFRWUFEYXlJVkpBQWdBQ2dDMEFJaEZpQUJLQUpVSVFBZ0ZTRUJBMEFnQUNnQ2dBRWhDQ0FDTGdGQUlRNGdBU0FBS0FKQUlBSXVBU0JzSWc4Z0FDZ0N3QUVnQWk0QllHd2lDV3RCRFhRaUNpQUNMZ0VBSUFBb0FnQnNRUTEwUVlBSWNpSUxhaUlNSUFBb0FpQWdBaTRCRUd3aUJpQUFLQUxnQVNBQ0xnRndiQ0lIYXlJUUlBQW9BbUFnQWk0Qk1Hd2lFU0FBS0FLZ0FTQUNMZ0ZRYkNJRmF5SVNha0hSSW13aUV5QVFRZjR3YkdvaUVHdEJDM1UyQXNBQ0lBRWdEQ0FRYWtFTGRUWUNJQ0FCSUFzZ0Ntc2lDaUFUSUJKQjM0bC9iR29pREd0QkMzVTJBdUFCSUFFZ0NpQU1ha0VMZFRZQ2dBRWdBU0FJSUE1c1FiSE9BR3dpRGlBTGFpSUtJQWxCRFhRaUNTQVBRYmJYQUd4cUlneHJJaEFnQnlBRklBWnFJaEpxUVkwM2JDSUlJQkZCcjExc0loTWdCa0hjVkd4cUlBZEJqSUYvYkdwcUloUnJRUXQxTmdMQUFTQUJJQkFnRkdwQkMzVTJBcUFCSUFFZ0NpQU1haUlLSUFnZ0VrSGJFR3hxSWd3Z0VVSFAwd0JzSWhFZ0JrSDNFV3hxYWlJR2EwRUxkVFlDNEFJZ0FTQUdJQXBxUVF0MU5nSUFJQUVnRDBHMkYyd2dDV3NpQmlBTElBNXJJZ3RxSWc4Z0JTQUhha0dMdlg5c0lnNGdCVUd3b1g5c0lCTnFhaUFNYWlJRmEwRUxkVFlDb0FJZ0FTQUZJQTlxUVF0MU5nSkFJQUVnQ3lBR2F5SUxJQWRCeHVVQWJDQVJheUFJYWlBT2FpSUhhMEVMZFRZQ2dBSWdBU0FISUF0cVFRdDFOZ0pnSUFGQkJHb2hBU0FBUVFScUlRQWdBa0VDYWlFQ0lBMUJBV29pRFVFSVJ3MEFDeUFXUVlBRGF5RUJJQlVoQUVFQUlRc0RRQ0FESUF0QkFuUnFLQUlBSUFScUlnSWdBU0FBS0FJTUlnOUJ6OU1BYkNJV0lBQW9BZ1FpQmtIM0VXeHFJQUFvQWhRaUJTQUdhaUlOSUFBb0Fod2lCMnBCalRkc0loRWdEVUhiRUd4cUlnNXFJZ2tnQUNnQ0dDSUtRUTEwSWd3Z0FDZ0NDQ0lJUWJiWEFHeHFJaEFnQUNnQ0FFRU5kRUdBZ0lqQUFHb2lEU0FBS0FJUVFiSE9BR3dpRW1vaUUyb2lGR3BCRW5aQi93ZHhhaTBBQURvQUFDQUNJQUVnRkNBSmEwRVNka0gvQjNGcUxRQUFPZ0FMSUFJZ0FTQUdJQWRySWdrZ0R5QUZheUlVYWtIUkltd2lGeUFKUWY0d2JHb2lDU0FJSUFwclFRMTBJZ29nRFdvaUdHcEJFblpCL3dkeGFpMEFBRG9BQVNBQ0lBRWdHQ0FKYTBFU2RrSC9CM0ZxTFFBQU9nQUtJQUlnQVNBT0lBVWdCMnBCaTcxL2JDSU9JQTlCcjExc0lnOGdCVUd3b1g5c2FtcHFJZ1VnQ0VHMkYyd2dER3NpQ0NBTklCSnJJZ2xxSWd4cVFSSjJRZjhIY1dvdEFBQTZBQUlnQWlBQklBd2dCV3RCRW5aQi93ZHhhaTBBQURvQUNTQUNJQUVnQjBIRzVRQnNJQlpySUJGcUlBNXFJZ1VnQ1NBSWF5SUlha0VTZGtIL0IzRnFMUUFBT2dBRElBSWdBU0FJSUFWclFSSjJRZjhIY1dvdEFBQTZBQWdnQWlBQklCY2dGRUhmaVg5c2FpSUZJQTBnQ21zaURXcEJFblpCL3dkeGFpMEFBRG9BQkNBQ0lBRWdEU0FGYTBFU2RrSC9CM0ZxTFFBQU9nQUhJQUlnQVNBUElBWkIzRlJzYWlBSFFZeUJmMnhxSUJGcUlnY2dFeUFRYXlJR2FrRVNka0gvQjNGcUxRQUFPZ0FGSUFJZ0FTQUdJQWRyUVJKMlFmOEhjV290QUFBNkFBWWdBRUVnYWlFQUlBdEJBV29pQzBFTVJ3MEFDeUFWUVlBRGFpUUFDK2NKQVJSL0l3QkI0QUpySWhZa0FDQUFLQUxRQWlFUklBRW9BbFFoQUNBV0lRRURRQ0FBS0FMZ0FTRUZJQUl1QVhBaERTQUFLQUpnSVFZZ0FpNEJNQ0VJSUFBb0FxQUJJUTRnQWk0QlVDRVBJQUFvQWlBaENTQUNMZ0VRSVJBZ0FTQUNMZ0VBSUFBb0FnQnNRUTEwUVlBSWNpSUxJQUFvQXNBQklBSXVBV0JzSWd3Z0FDZ0NRQ0FDTGdFZ2JDSUhhaUlYSUFBb0FvQUJJQUl1QVVCc0lncHJJaE5CdjZWL2JHcEJDM1UyQXFBQklBRWdFMEhzMWdCc0lBdHFJZ3NnQ2lBTWEwSCtvZ0ZzYWlJVElBeEJ0WWNCYkdvaUZDQUdJQWhzSWdZZ0NTQVFiQ0lKYWlJUVFlbzRiQ0lWSUFsQjlrUnNhaUFPSUE5c0lnZ2dDV3BCOUNwc0lnNXFJQVVnRFd3aUJTQUlJQkJxYWtIQUdXd2lEU0FGSUFscVFiZ1hiR29pQ1dvaUQydEJDM1UyQXNBQ0lBRWdEeUFVYWtFTGRUWUNBQ0FCSUFzZ0YwR0Z0bjlzYWlJUElBeEJ3MDFzYWlJTUlBMGdCaUFJYWtISnRYOXNhaUlRSUE0Z0NFSGFzMzlzYW1vaURtdEJDM1UyQW9BQ0lBRWdEQ0FPYWtFTGRUWUNRQ0FCSUFzZ0NpQUhhMEhKRzJ3aURHb2dCMEdSbjM5c2FpSUxJQWtnQlNBR2FrSDFqSDlzSWdrZ0JVSEhoZ0ZzYW1vaURtdEJDM1UyQXVBQklBRWdDeUFPYWtFTGRUWUNZQ0FCSUFwQnVmd0FiQ0FIUWYybWYyeHFJQTlxSWdjZ0NFR0x3QUJzSUFaQmphSi9iR29nQlVHV2xIOXNhaUFOYWlJSWEwRUxkVFlDd0FFZ0FTQUhJQWhxUVF0MU5nS0FBU0FCSUJNZ0NrRzBpMzlzYWlBTWFpSUtJQlVnQmtIWWhBRnNhaUFKYWlBUWFpSUdhMEVMZFRZQ29BSWdBU0FHSUFwcVFRdDFOZ0lnSUFGQkJHb2hBU0FBUVFScUlRQWdBa0VDYWlFQ0lCSkJBV29pRWtFSVJ3MEFDeUFSUVlBRGF5RUJJQlloQUVFQUlRd0RRQ0FESUF4QkFuUnFLQUlBSUFScUlnSWdBU0FBS0FJTUlnb2dBQ2dDQkNJRmFpSUhRZW80YkNJTklBVkI5a1JzYWlBQUtBSVVJZ1lnQldwQjlDcHNJaEZxSUFBb0Fod2lDQ0FHSUFkcWFrSEFHV3dpRWlBRklBaHFRYmdYYkdvaURtb2lEeUFBS0FJQVFRMTBRWUNBaU1BQWFpSVFJQUFvQWhnaUJ5QUFLQUlJSWdscUloY2dBQ2dDRUNJRmF5SVRRZXpXQUd4cUlnc2dCU0FIYTBIK29nRnNhaUlVSUFkQnRZY0JiR29pRldwQkVuWkIvd2R4YWkwQUFEb0FBQ0FDSUFFZ0ZTQVBhMEVTZGtIL0IzRnFMUUFBT2dBS0lBSWdBU0FTSUFZZ0NtcEJ5YlYvYkdvaUR5QUlJQXBxUWZXTWYyd2lGU0FOSUFwQjJJUUJiR3BxYWlJTklBVWdDV3RCeVJ0c0loZ2dGQ0FGUWJTTGYyeHFhaUlVYWtFU2RrSC9CM0ZxTFFBQU9nQUJJQUlnQVNBVUlBMXJRUkoyUWY4SGNXb3RBQUE2QUFrZ0FpQUJJQkVnQmtIYXMzOXNhaUFQYWlJTklBc2dGMEdGdG45c2FpSVJJQWRCdzAxc2FpSUhha0VTZGtIL0IzRnFMUUFBT2dBQ0lBSWdBU0FISUExclFSSjJRZjhIY1dvdEFBQTZBQWdnQWlBQklCVWdDRUhIaGdGc2FpQU9haUlISUFzZ0dHb2dDVUdSbjM5c2FpSUxha0VTZGtIL0IzRnFMUUFBT2dBRElBSWdBU0FMSUFkclFSSjJRZjhIY1dvdEFBQTZBQWNnQWlBQklBWkJpOEFBYkNBS1FZMmlmMnhxSUFoQmxwUi9iR29nRW1vaUNpQUZRYm44QUd3Z0NVSDlwbjlzYWlBUmFpSUdha0VTZGtIL0IzRnFMUUFBT2dBRUlBSWdBU0FHSUFwclFSSjJRZjhIY1dvdEFBQTZBQVlnQWlBQklCTkJ2NlgvL3dCc0lCQnFRUkoyUWY4SGNXb3RBQUE2QUFVZ0FFRWdhaUVBSUF4QkFXb2lERUVMUncwQUN5QVdRZUFDYWlRQUM0Y0lBUkovSXdCQndBSnJJaFFrQUNBQUtBTFFBaUVSSUFFb0FsUWhBQ0FVSVFFRFFDQUFLQUxBQVNFS0lBSXVBV0FoQnlBQUtBSkFJUXNnQWk0QklDRUpJQUVnQWk0QkFDQUFLQUlBYkVFTmRFR0FDSElpQlNBQUtBS0FBU0FDTGdGQWJDSUdRYjZsZjJ4cVFRdDFJaElnQUNnQ0lDQUNMZ0VRYkNJSUlBQW9BcUFCSUFJdUFWQnNJZ3dnQUNnQ1lDQUNMZ0V3YkNJTklBQW9BdUFCSUFJdUFYQnNJZzVySWc5cWEwRUNkQ0lUYXpZQzRBRWdBU0FTSUJOcU5nSkFJQUVnQnlBS2JDSUtJQWtnQzJ3aUIycEJtalZzSWdzZ0IwSHhJR3hxSWdjZ0JrR2R5UUJzSUFWcUlnbHFJaElnRDBIakUyd2lFeUFNUVExMElneHFJaFVnRFNBT2FpSU5RZTg4YkNJT0lBaEJzOWtBYkdwcUloWnJRUXQxTmdLZ0FpQUJJQklnRm1wQkMzVTJBZ0FnQVNBSklBZHJJZ2NnQ0VHVURtd2dEbXNnRldvaUNXdEJDM1UyQXFBQklBRWdCeUFKYWtFTGRUWUNnQUVnQVNBR1FZUmtiQ0FGYWlJRklBc2dDa0hjOUg1c2FpSUdheUlLSUF3Z0Uyc2dEMEVNZEdzaUR5QUlRWXdwYkNBTlFjOGxiQ0lIYTJvaUMydEJDM1UyQXNBQklBRWdDaUFMYWtFTGRUWUNZQ0FCSUFVZ0Jtb2lCU0FJUWRQUUFHd2dCeUFQYW1zaUNHdEJDM1UyQW9BQ0lBRWdCU0FJYWtFTGRUWUNJQ0FCUVFScUlRRWdBRUVFYWlFQUlBSkJBbW9oQWlBUVFRRnFJaEJCQ0VjTkFBc2dFVUdBQTJzaEFDQVVJUUpCQUNFUUEwQWdBeUFRUVFKMGFpZ0NBQ0FFYWlJQklBQWdBaWdDSENJRklBSW9BZ3dpQm1vaUVVSHZQR3dpQ2lBQ0tBSUVJZ2hCczlrQWJHb2dCaUFGYXlJRlFlTVRiQ0lISUFJb0FoUWlDMEVOZENJSmFpSVNhaUlNSUFJb0FoZ2lEU0FDS0FJSUlnWnFRWm8xYkNJT0lBWkI4U0JzYWlJVElBSW9BZ0JCRFhSQmdJQ0l3QUJxSWdZZ0FpZ0NFQ0lQUVozSkFHeHFJaFZxSWhacVFSSjJRZjhIY1dvdEFBQTZBQUFnQVNBQUlCWWdER3RCRW5aQi93ZHhhaTBBQURvQUNTQUJJQUFnQ0VIVDBBQnNJQkZCenlWc0loRWdDU0FIYXlBRlFReDBheUlIYW1zaUNTQU9JQTFCM1BSK2JHb2lEQ0FQUVlSa2JDQUdhaUlOYWlJT2FrRVNka0gvQjNGcUxRQUFPZ0FCSUFFZ0FDQU9JQWxyUVJKMlFmOEhjV290QUFBNkFBZ2dBU0FBSUFnZ0JTQUxhbXRCRFhRaUJTQVBRYjZsZjJ3Z0Jtb2lCbXBCRW5aQi93ZHhhaTBBQURvQUFpQUJJQUFnQmlBRmEwRVNka0gvQjNGcUxRQUFPZ0FISUFFZ0FDQUhJQWhCakNsc0lCRnJhaUlGSUEwZ0RHc2lCbXBCRW5aQi93ZHhhaTBBQURvQUF5QUJJQUFnQmlBRmEwRVNka0gvQjNGcUxRQUFPZ0FHSUFFZ0FDQUlRWlFPYkNBS2F5QVNhaUlJSUJVZ0Uyc2lCV3BCRW5aQi93ZHhhaTBBQURvQUJDQUJJQUFnQlNBSWEwRVNka0gvQjNGcUxRQUFPZ0FGSUFKQklHb2hBaUFRUVFGcUloQkJDa2NOQUFzZ0ZFSEFBbW9rQUF1M0J3RVRmeU1BUWFBQ2F5SVNKQUFnQUNnQzBBSWhEQ0FCS0FKVUlRQWdFaUVCQTBBZ0FDZ0NZQ0VLSUFJdUFUQWhDQ0FBS0FLZ0FTRUdJQUl1QVZBaERpQUFLQUxnQVNFUElBSXVBWEFoQ1NBQUtBSWdJUkFnQWk0QkVDRVRJQUVnQWk0QkFDQUFLQUlBYkVFTmRFR0FDSElpQ3lBQUtBTEFBU0FDTGdGZ2JDSVJRYjZsZjJ4cUloUWdBQ2dDUUNBQ0xnRWdiQ0lISUFBb0FvQUJJQUl1QVVCc0lnVnJJaFZCdnFWL2JHcEJDM1UyQW9BQklBRWdFVUdoTFd3Z0Myb2lDeUFGSUFkcVFZZlZBR3dpRVNBRlFkd1BiQ0lXYTJvaUZ5QUdJQTVzSWdVZ0VDQVRiQ0lHYWtHWE9td2lEaUFJSUFwc1FjK3hmMndpQ21zZ0NTQVBiQ0lJSUFacVFmb2ViQ0lQYWlJSmEwRUxkVFlDZ0FJZ0FTQUpJQmRxUVF0MU5nSUFJQUVnRkNBVlFhRXRiR29pQ1NBR0lBVWdDR3ByUWJIT0FHd2lCbXRCQzNVMkF1QUJJQUVnQmlBSmFrRUxkVFlDSUNBQklBZEJxOFVBYkNJSElBc2dFV3RxSWdZZ0NpQUZJQWhyUVpIWkFHd2lCV3NnRG1vaUNHdEJDM1UyQXNBQklBRWdCaUFJYWtFTGRUWUNRQ0FCSUFzZ0Iyc2dGbW9pQnlBRklBcHFJQTlxSWdWclFRdDFOZ0tnQVNBQklBVWdCMnBCQzNVMkFtQWdBVUVFYWlFQklBQkJCR29oQUNBQ1FRSnFJUUlnRFVFQmFpSU5RUWhIRFFBTElBeEJnQU5ySVFBZ0VpRUJRUUFoRFFOQUlBTWdEVUVDZEdvb0FnQWdCR29pQWlBQUlBRW9BaFFpQnlBQktBSUVJZ1ZxUVpjNmJDSU9JQUVvQWd4Qno3Ri9iQ0lMYXlBQktBSWNJZ1lnQldwQitoNXNJZzlxSWdrZ0FTZ0NBRUVOZEVHQWdJakFBR29pRUNBQktBSVlJaE5Cb1Mxc2FpSUtJQUVvQWhBaUNDQUJLQUlJSWd4cVFZZlZBR3dpRVNBSVFkd1BiQ0lVYTJvaUZXcEJFblpCL3dkeGFpMEFBRG9BQUNBQ0lBQWdGU0FKYTBFU2RrSC9CM0ZxTFFBQU9nQUlJQUlnQUNBRklBWWdCMnByUWJIT0FHd2lCU0FUUWI2bGYyd2dFR29pQ1NBTUlBaHJJZ2hCb1Mxc2FpSVFha0VTZGtIL0IzRnFMUUFBT2dBQklBSWdBQ0FRSUFWclFSSjJRZjhIY1dvdEFBQTZBQWNnQWlBQUlBc2dCeUFHYTBHUjJRQnNJZ2RySUE1cUlnVWdERUdyeFFCc0lnWWdDaUFSYTJvaURHcEJFblpCL3dkeGFpMEFBRG9BQWlBQ0lBQWdEQ0FGYTBFU2RrSC9CM0ZxTFFBQU9nQUdJQUlnQUNBSElBdHFJQTlxSWdjZ0NpQUdheUFVYWlJRmFrRVNka0gvQjNGcUxRQUFPZ0FESUFJZ0FDQUZJQWRyUVJKMlFmOEhjV290QUFBNkFBVWdBaUFBSUFrZ0NFRytwZi8vQUd4cVFSSjJRZjhIY1dvdEFBQTZBQVFnQVVFZ2FpRUJJQTFCQVdvaURVRUpSdzBBQ3lBU1FhQUNhaVFBQ3pRQUlBTW9BZ0FnQkdvZ0FDZ0MwQUlnQVNnQ1ZDZ0NBQ0FDTHdFQWJFR0VJR3BCQTNaQi93ZHhha0dBQTJzdEFBQTZBQUFMd3dFQkJYOGdBeWdDQUNBRWFpSUZJQUFvQXRBQ1FZQURheUlBSUFFb0FsUWlBU2dDSkNBQ0x3RVNiQ0lHSUFFb0FnUWdBaThCQW13aUIyb2lDQ0FCS0FJZ0lBSXZBUkJzSWdrZ0FTZ0NBQ0FDTHdFQWJFR0VJR29pQVdvaUFtcEJBM1pCL3dkeGFpMEFBRG9BQUNBRklBQWdBaUFJYTBFRGRrSC9CM0ZxTFFBQU9nQUJJQU1vQWdRZ0JHb2lBaUFBSUFjZ0Jtc2lBeUFCSUFscklnRnFRUU4yUWY4SGNXb3RBQUE2QUFBZ0FpQUFJQUVnQTJ0QkEzWkIvd2R4YWkwQUFEb0FBUXZWQkFFUGZ5QURLQUlBSUFScUlnVWdBQ2dDMEFKQmdBTnJJZ0FnQWk0QkVDQUJLQUpVSWdFb0FpQnNRYkhPQUd3aUNDQUNMZ0VBSUFFb0FnQnNRUTEwUVlBSWNpSUdJQUVvQWtBZ0FpNEJJR3dpQjBHaExXeHFJZ2xxUVFKMFFZQ0FpTUFBYWtHQVFIRWlDaUFDTGdFVUlBRW9BaWhzUWJIT0FHd2lDeUFDTGdFRUlBRW9BZ2hzUVExMFFZQUljaUlNSUFFb0FrZ2dBaTRCSkd3aURVR2hMV3hxSWc1cVFRdDFJZzlCb1Mxc2FpSVFJQUl1QVJJZ0FTZ0NKR3hCc2M0QWJDSVJJQUl1QVFJZ0FTZ0NCR3hCRFhSQmdBaHlJaElnQVNnQ1JDQUNMZ0VpYkNJQ1FhRXRiR29pRTJwQkMzVkJzYzRBYkNJQmFrRVNka0gvQjNGcUxRQUFPZ0FBSUFVZ0FDQVFJQUZyUVJKMlFmOEhjV290QUFBNkFBSWdCU0FBSUE5QnZxWC8vd0JzSUFwcVFSSjJRZjhIY1dvdEFBQTZBQUVnQXlnQ0JDQUVhaUlCSUFBZ0IwRytwZi8vQTJ3Z0JtcEJBblJCZ0lDSXdBQnFRWUJBY1NJRklBMUJ2cVYvYkNBTWFrRUxkU0lHUWFFdGJHb2lCeUFDUWI2bGYyd2dFbXBCQzNWQnNjNEFiQ0lDYWtFU2RrSC9CM0ZxTFFBQU9nQUFJQUVnQUNBSElBSnJRUkoyUWY4SGNXb3RBQUE2QUFJZ0FTQUFJQVpCdnFYLy93QnNJQVZxUVJKMlFmOEhjV290QUFBNkFBRWdBeWdDQ0NBRWFpSUJJQUFnQ1NBSWEwRUNkRUdBZ0lqQUFHcEJnRUJ4SWdJZ0RpQUxhMEVMZFNJRFFhRXRiR29pQkNBVElCRnJRUXQxUWJIT0FHd2lCV3BCRW5aQi93ZHhhaTBBQURvQUFDQUJJQUFnQkNBRmEwRVNka0gvQjNGcUxRQUFPZ0FDSUFFZ0FDQURRYjZsLy84QWJDQUNha0VTZGtIL0IzRnFMUUFBT2dBQkM1TUdBUWQvSUFBb0F0QUNJUXNqQUVGQWFpSUFJQUVvQWxRaUFTZ0NRQ0FDTGdFZ2JDSUdJQUVvQWdBZ0FpNEJBR3dpQldwQkFuUWlDQ0FCS0FKZ0lBSXVBVEJzSWdrZ0FTZ0NJQ0FDTGdFUWJDSUhha0hSSW14QmdBaHFJZ29nQjBIK01HeHFRUXQxSWdkck5nSXdJQUFnQnlBSWFqWUNBQ0FBSUFVZ0JtdEJBblFpQmlBS0lBbEIzNGwvYkdwQkMzVWlCV3MyQWlBZ0FDQUZJQVpxTmdJUUlBQWdBU2dDUkNBQ0xnRWliQ0lHSUFFb0FnUWdBaTRCQW13aUJXcEJBblFpQ0NBQktBSmtJQUl1QVRKc0lna2dBU2dDSkNBQ0xnRVNiQ0lIYWtIUklteEJnQWhxSWdvZ0IwSCtNR3hxUVF0MUlnZHJOZ0kwSUFBZ0J5QUlhallDQkNBQUlBVWdCbXRCQW5RaUJpQUtJQWxCMzRsL2JHcEJDM1VpQldzMkFpUWdBQ0FGSUFacU5nSVVJQUFnQVNnQ1NDQUNMZ0VrYkNJR0lBRW9BZ2dnQWk0QkJHd2lCV3BCQW5RaUNDQUJLQUpvSUFJdUFUUnNJZ2tnQVNnQ0tDQUNMZ0VVYkNJSGFrSFJJbXhCZ0FocUlnb2dCMEgrTUd4cVFRdDFJZ2RyTmdJNElBQWdCeUFJYWpZQ0NDQUFJQVVnQm10QkFuUWlCaUFLSUFsQjM0bC9iR3BCQzNVaUJXczJBaWdnQUNBRklBWnFOZ0lZSUFBZ0FTZ0NUQ0FDTGdFbWJDSUdJQUVvQWd3Z0FpNEJCbXdpQldwQkFuUWlDQ0FCS0FKc0lBSXVBVFpzSWdrZ0FTZ0NMQ0FDTGdFV2JDSUJha0hSSW14QmdBaHFJZ0lnQVVIK01HeHFRUXQxSWdGck5nSThJQUFnQVNBSWFqWUNEQ0FBSUFVZ0JtdEJBblFpQVNBQ0lBbEIzNGwvYkdwQkMzVWlBbXMyQWl3Z0FDQUJJQUpxTmdJY0lBdEJnQU5ySVFFZ0FDRUNRUUFoQUFOQUlBTWdBRUVDZEdvb0FnQWdCR29pQ3lBQklBSW9BZ3dpQmlBQ0tBSUVJZ1ZxUWRFaWJDSUlJQVZCL2pCc2FpSUZJQUlvQWdCQmtJQUJhaUlKSUFJb0FnZ2lCMnBCRFhRaUNtcEJFblpCL3dkeGFpMEFBRG9BQUNBTElBRWdDaUFGYTBFU2RrSC9CM0ZxTFFBQU9nQURJQXNnQVNBSUlBWkIzNGwvYkdvaUJpQUpJQWRyUVExMElnVnFRUkoyUWY4SGNXb3RBQUE2QUFFZ0N5QUJJQVVnQm10QkVuWkIvd2R4YWkwQUFEb0FBaUFDUVJCcUlRSWdBRUVCYWlJQVFRUkhEUUFMQzZFRUFRdC9JQUFvQXRBQ0lRWWdBU2dDVkNFQkl3QkI4QUJySWdvaEFBTkFJQUVvQW1BaEJ5QUNMZ0V3SVFVZ0FTZ0NJQ0VJSUFJdUFSQWhDeUFBSUFJdUFRQWdBU2dDQUd4QkRYUkJnQWh5SWd3Z0FTZ0NRQ0FDTGdFZ2JDSU5JQUVvQW9BQklBSXVBVUJzSWc1cklnOUJ3S1YvYkdwQkMzVTJBaWdnQUNBUFFkQVdiQ0FNYWlJTUlBMGdEbXBCekRKc0lnMXFJZzRnQlNBSGJDSUhJQWdnQzJ3aUJXcEJtalZzSWdnZ0JVSHhJR3hxSWdWclFRdDFOZ0pRSUFBZ0JTQU9ha0VMZFRZQ0FDQUFJQXdnRFdzaUJTQUlJQWRCM1BSK2JHb2lCMnRCQzNVMkFqd2dBQ0FGSUFkcVFRdDFOZ0lVSUFCQkJHb2hBQ0FCUVFScUlRRWdBa0VDYWlFQ0lBbEJBV29pQ1VFRlJ3MEFDeUFHUVlBRGF5RUFJQW9oQWtFQUlRa0RRQ0FESUFsQkFuUnFLQUlBSUFScUlnRWdBQ0FDS0FJTUlnb2dBaWdDQkNJR2FrR2FOV3dpQnlBR1FmRWdiR29pQmlBQ0tBSUFRUTEwUVlDQWlNQUFhaUlGSUFJb0FnZ2lDQ0FDS0FJUUlndHJJZ3hCMEJac2FpSU5JQWdnQzJwQnpESnNJZ2hxSWd0cVFSSjJRZjhIY1dvdEFBQTZBQUFnQVNBQUlBc2dCbXRCRW5aQi93ZHhhaTBBQURvQUJDQUJJQUFnQnlBS1FkejBmbXhxSWdvZ0RTQUlheUlHYWtFU2RrSC9CM0ZxTFFBQU9nQUJJQUVnQUNBR0lBcHJRUkoyUWY4SGNXb3RBQUE2QUFNZ0FTQUFJQXhCd0tYLy93QnNJQVZxUVJKMlFmOEhjV290QUFBNkFBSWdBa0VVYWlFQ0lBbEJBV29pQ1VFRlJ3MEFDd3ZwQkFFTWZ5TUFRWkFCYXlJTkpBQWdBQ2dDMEFJaERpQUJLQUpVSVFFZ0RTRUFBMEFnQVNnQ1FDRUhJQUl1QVNBaENTQUFJQUl1QVFBZ0FTZ0NBR3hCRFhSQmdBaHlJZ29nQVNnQ2dBRWdBaTRCUUd3aUMwRytwWDlzYWtFTGRTSVBJQUVvQWlBZ0FpNEJFR3dpQlNBQktBSmdJQUl1QVRCc0lnWWdBU2dDb0FFZ0FpNEJVR3dpREdwclFRSjBJaEJyTmdKZ0lBQWdEeUFRYWpZQ0dDQUFJQWNnQ1d4QnNjNEFiQ0lISUF0Qm9TMXNJQXBxSWdscUlnb2dCU0FNYWtHMkYyd2lDeUFGSUFacVFRMTBhaUlGYTBFTGRUWUNlQ0FBSUFVZ0NtcEJDM1UyQWdBZ0FDQUpJQWRySWdVZ0N5QU1JQVpyUVExMGFpSUdhMEVMZFRZQ1NDQUFJQVVnQm1wQkMzVTJBakFnQUVFRWFpRUFJQUZCQkdvaEFTQUNRUUpxSVFJZ0NFRUJhaUlJUVFaSERRQUxJQTVCZ0FOcklRQWdEU0VDUVFBaENBTkFJQU1nQ0VFQ2RHb29BZ0FnQkdvaUFTQUFJQUlvQWhRaUJTQUNLQUlFSWdacVFiWVhiQ0lPSUFJb0Fnd2lEQ0FHYWtFTmRHb2lCeUFDS0FJQVFRMTBRWUNBaU1BQWFpSUpJQUlvQWhBaUNrR2hMV3hxSWdzZ0FpZ0NDRUd4emdCc0lnOXFJaEJxUVJKMlFmOEhjV290QUFBNkFBQWdBU0FBSUJBZ0IydEJFblpCL3dkeGFpMEFBRG9BQlNBQklBQWdCaUFGSUF4cWEwRU5kQ0lHSUFwQnZxVi9iQ0FKYWlJSGFrRVNka0gvQjNGcUxRQUFPZ0FCSUFFZ0FDQUhJQVpyUVJKMlFmOEhjV290QUFBNkFBUWdBU0FBSUE0Z0JTQU1hMEVOZEdvaUJTQUxJQTlySWdacVFSSjJRZjhIY1dvdEFBQTZBQUlnQVNBQUlBWWdCV3RCRW5aQi93ZHhhaTBBQURvQUF5QUNRUmhxSVFJZ0NFRUJhaUlJUVFaSERRQUxJQTFCa0FGcUpBQUx3d1lCRUg4akFFSFFBV3NpRVNRQUlBQW9BdEFDSVE0Z0FTZ0NWQ0VCSUJFaEFBTkFJQUVvQXFBQklRZ2dBaTRCVUNFSklBRW9BaUFoRFNBQ0xnRVFJUThnQVNnQ1lDRUtJQUl1QVRBaEVpQUFJQUl1QVFBZ0FTZ0NBR3hCRFhSQmdBaHlJZ1lnQVNnQ2dBRWdBaTRCUUd3aUN5QUJLQUxBQVNBQ0xnRmdiQ0lGSUFFb0FrQWdBaTRCSUd3aURHb2lFR3RCd2RvQWJHcEJDM1UyQWxRZ0FDQVFRY2JSQUd3Z0Jtb2lFQ0FMSUFWclFiYzRiQ0lUSUFWQmczdHNhbW9pRkNBSUlBbHNJZ1VnRFNBUGJDSUlha0dqSjJ3aURTQUtJQkpzSWdrZ0NHcEI3enRzSWc4Z0NDQUphMEh6Q213aUNHdHFJZ3ByUVF0MU5nS29BU0FBSUFvZ0ZHcEJDM1UyQWdBZ0FDQU1JQXRyUVpJVWJDSUtJQXhCOGVGK2JHb2dFR29pRENBRklBbHFRZUduZjJ3aUNTQU5JQVZCM3ZjQWJHcHFJZ1ZyUVF0MU5nSndJQUFnQlNBTWFrRUxkVFlDT0NBQUlBdEJsWXAvYkNBR2FpQUthaUFUYWlJTElBZ2dEMm9nQ1dvaUJtdEJDM1UyQW93QklBQWdCaUFMYWtFTGRUWUNIQ0FBUVFScUlRQWdBVUVFYWlFQklBSkJBbW9oQWlBSFFRRnFJZ2RCQjBjTkFBc2dEa0dBQTJzaEFDQVJJUUpCQUNFTEEwQWdBeUFMUVFKMGFpZ0NBQ0FFYWlJQklBQWdBaWdDRENJR0lBSW9BZ1FpQjJwQjd6dHNJZzRnQnlBR2EwSHpDbXdpRFdzZ0FpZ0NGQ0lGSUFkcVFhTW5iQ0lQYWlJS0lBSW9BaEFpQnlBQ0tBSVlJZ3hyUWJjNGJDSVNJQXhCZzN0c2FpQUNLQUlBUVExMFFZQ0FpTUFBYWlJSUlBd2dBaWdDQ0NJSmFpSU1RY2JSQUd4cUloQnFJaE5xUVJKMlFmOEhjV290QUFBNkFBQWdBU0FBSUJNZ0NtdEJFblpCL3dkeGFpMEFBRG9BQmlBQklBQWdCU0FHYWtIaHAzOXNJZ1lnRFNBT2Ftb2lEaUFKSUFkclFaSVViQ0lOSUFkQmxZcC9iQ0FJYW1vZ0Vtb2lDbXBCRW5aQi93ZHhhaTBBQURvQUFTQUJJQUFnQ2lBT2EwRVNka0gvQjNGcUxRQUFPZ0FGSUFFZ0FDQVBJQVZCM3ZjQWJHb2dCbW9pQmlBTklBbEI4ZUYrYkdvZ0VHb2lCV3BCRW5aQi93ZHhhaTBBQURvQUFpQUJJQUFnQlNBR2EwRVNka0gvQjNGcUxRQUFPZ0FFSUFFZ0FDQUhJQXhyUWNIYUFHd2dDR3BCRW5aQi93ZHhhaTBBQURvQUF5QUNRUnhxSVFJZ0MwRUJhaUlMUVFkSERRQUxJQkZCMEFGcUpBQUxnUWtCRW44akFFR0FBbXNpRWlRQUlBQW9BdEFDSVJFZ0FTZ0NWQ0VBSUJJaEFVRUlJUVlEUUNBQkFuOENRQ0FDTGdFUUlnZ2dBaThCSUNJRmNrSC8vd054RFFCQkFDRUZJQUl2QVRBTkFDQUNMd0ZBRFFBZ0FpOEJVQTBBSUFJdkFXQU5BQ0FDTHdGd0RRQWdBU0FDTGdFQUlBQW9BZ0JzUVFKMElnVTJBc0FCSUFFZ0JUWUNvQUVnQVNBRk5nS0FBU0FCSUFVMkFtQWdBU0FGTmdKQUlBRWdCVFlDSUNBQklBVTJBZ0JCT0F3QkN5QUJJQUFvQXNBQklBSXVBV0JzSWdrZ0FDZ0NRQ0FGUVJCMFFSQjFiQ0lGYWtIUkltd2lEU0FGUWY0d2JHb2lEaUFDTGdGQUlBQW9Bb0FCYkVFTmRDSUtJQUl1QVFBZ0FDZ0NBR3hCRFhSQmdBaHlJZ3RxSWc5cUlnd2dBQ2dDSUNBSWJDSUZJQUFvQXVBQklBSXVBWEJzSWdocVFiTkdiQ0lUSUFWQmkrQUFiR29nQlNBQUtBS2dBU0FDTGdGUWJDSUhhaUlRSUFBb0FtQWdBaTRCTUd3aUJTQUlhaUlVYWtHaHl3QnNJaFVnRUVHRVoyeHFJaEJxSWhaclFRdDFOZ0xnQVNBQklBd2dGbXBCQzNVMkFnQWdBU0FOSUFsQjM0bC9iR29pQ1NBTElBcHJJZzFxSWdvZ0ZTQVVRYnVDZjJ4cUlnc2dCU0FIYWtIOTIzNXNJZ3dnQlVIVXhBRnNhbW9pQld0QkMzVTJBc0FCSUFFZ0JTQUtha0VMZFRZQ0lDQUJJQTBnQ1dzaUJTQU1JQWRCczRNQmJHb2dFR29pQjJ0QkMzVTJBcUFCSUFFZ0JTQUhha0VMZFRZQ1FDQUJJQk1nQ0VHT0UyeHFJQXRxSWdVZ0R5QU9heUlJYWtFTGRUWUNZQ0FJSUFWclFRdDFJUVZCSUF0QkFuUnFJQVUyQWdBZ0FrRUNhaUVDSUFCQkJHb2hBQ0FCUVFScUlRRWdCa0VCU3lFRklBWkJBV3NoQmlBRkRRQUxJQkZCZ0FOcklRQWdFaUVDUVFBaENBTkFJQUlvQWdCQmtJQUJhaUVHSUFNZ0NFRUNkR29vQWdBZ0JHb2hBUUpBQWtBZ0FpZ0NCQ0lISUFJb0FnZ2lCWElOQUVFQUlRVWdBaWdDREEwQUlBSW9BaEFOQUNBQ0tBSVVEUUFnQWlnQ0dBMEFJQUlvQWh3TkFDQUJJQUFnQmtFRmRrSC9CM0ZxTVFBQVFvR0NoSWlRb01DQUFYNDNBQUFNQVFzZ0FTQUFJQUlvQWh3aUVTQUhha0d6Um13aURTQUhRWXZnQUd4cUlBSW9BZ3dpQ1NBUmFpSU9JQWNnQWlnQ0ZDSUhhaUlLYWtHaHl3QnNJZ3NnQ2tHRVoyeHFJZ3BxSWc4Z0FpZ0NHQ0lNSUFWcVFkRWliQ0lUSUFWQi9qQnNhaUlGSUFJb0FoQWlFQ0FHYWtFTmRDSVVhaUlWYWtFU2RrSC9CM0ZxTFFBQU9nQUFJQUVnQUNBVklBOXJRUkoyUWY4SGNXb3RBQUE2QUFjZ0FTQUFJQXNnRGtHN2duOXNhaUlPSUFjZ0NXcEIvZHQrYkNJTElBbEIxTVFCYkdwcUlna2dFeUFNUWQrSmYyeHFJZzhnQmlBUWEwRU5kQ0lHYWlJTWFrRVNka0gvQjNGcUxRQUFPZ0FCSUFFZ0FDQU1JQWxyUVJKMlFmOEhjV290QUFBNkFBWWdBU0FBSUFzZ0IwR3pnd0ZzYWlBS2FpSUhJQVlnRDJzaUJtcEJFblpCL3dkeGFpMEFBRG9BQWlBQklBQWdCaUFIYTBFU2RrSC9CM0ZxTFFBQU9nQUZJQUVnQUNBTklCRkJqaE5zYWlBT2FpSUdJQlFnQldzaUJXcEJFblpCL3dkeGFpMEFBRG9BQXlBQklBQWdCU0FHYTBFU2RrSC9CM0ZxTFFBQU9nQUVDeUFDUVNCcUlRSWdDRUVCYWlJSVFRaEhEUUFMSUJKQmdBSnFKQUFMa0FnQkVYOGpBRUdBQW1zaUVDUUFJQUFvQXRBQ0lRa2dBU2dDVkNFQUlCQWhBVUVJSVFjRFFDQUJBbjhDUUNBQ0xnRVFJZ1VnQWk4QklDSUdja0gvL3dOeERRQkJBQ0VHSUFJdkFUQU5BQ0FDTHdGQURRQWdBaThCVUEwQUlBSXZBV0FOQUNBQ0x3RndEUUFnQVNBQUtBSUFJQUl1QVFCc0lnWTJBc0FCSUFFZ0JqWUNvQUVnQVNBR05nS0FBU0FCSUFZMkFtQWdBU0FHTmdKQUlBRWdCallDSUNBQklBWTJBZ0JCT0F3QkN5QUJJQUFvQXNBQklBSXVBV0JzSWdnZ0FDZ0NRQ0FHUVJCMFFSQjFiQ0lMYWlJR0lBQW9Bb0FCSUFJdUFVQnNJZ29nQUNnQ0FDQUNMZ0VBYkNJTWFpSU5haUlPSUFBb0F1QUJJQUl1QVhCc0lnOGdBQ2dDSUNBRmJDSVJhaUlTSUFBb0FxQUJJQUl1QVZCc0loTWdBQ2dDWUNBQ0xnRXdiQ0lVYWlJVmFpSUZhellDNEFFZ0FTQUZJQTVxTmdJQUlBRWdDeUFJYTBIcUFteEJDSFVnQm1zaUNDQU1JQXBySWd0cUlnb2dFU0FQYXlJTUlCTWdGR3NpRG1wQjJRTnNRUWgxSWc4Z0JTQU9RWjBGYkVFSWRXcHJJZ1ZyTmdMQUFTQUJJQVVnQ21vMkFpQWdBU0FMSUFocklnZ2dFaUFWYTBIcUFteEJDSFVnQldzaUJXczJBcUFCSUFFZ0JTQUlhallDUUNBQklBOGdERUdWQW14QkNIVWdCV3BySWdVZ0RTQUdheUlHYWpZQ1lDQUdJQVZySVFaQklBdEJBblJxSUFZMkFnQWdBa0VDYWlFQ0lBQkJCR29oQUNBQlFRUnFJUUVnQjBFQlN5RUdJQWRCQVdzaEJ5QUdEUUFMSUFsQmdBTnJJUUFnRUNFQ1FRQWhCZ05BSUFJb0FnQkJrSUFCYWlFRklBTWdCa0VDZEdvb0FnQWdCR29oQVFKQUFrQWdBaWdDQkNJSklBSW9BZ2dpQjNJTkFFRUFJUWNnQWlnQ0RBMEFJQUlvQWhBTkFDQUNLQUlVRFFBZ0FpZ0NHQTBBSUFJb0Fod05BQ0FCSUFBZ0JVRUZka0gvQjNGcU1RQUFRb0dDaElpUW9NQ0FBWDQzQUFBTUFRc2dBU0FBSUFJb0Fod2lDaUFKYWlJTUlBSW9BZ3dpRFNBQ0tBSVVJZzVxSWc5cUlnZ2dBaWdDR0NJUklBZHFJZ3NnQWlnQ0VDSVNJQVZxSWhOcUloUnFRUVYyUWY4SGNXb3RBQUE2QUFBZ0FTQUFJQlFnQ0d0QkJYWkIvd2R4YWkwQUFEb0FCeUFCSUFBZ0NTQUtheUlLSUE0Z0RXc2lDV3BCMlFOc1FRaDFJZzBnQ1VHZEJXeEJDSFVnQ0dwcklna2dCeUFSYTBIcUFteEJDSFVnQzJzaUNDQUZJQkpySWdWcUlnZHFRUVYyUWY4SGNXb3RBQUE2QUFFZ0FTQUFJQWNnQ1d0QkJYWkIvd2R4YWkwQUFEb0FCaUFCSUFBZ0RDQVBhMEhxQW14QkNIVWdDV3NpQnlBRklBaHJJZ1ZxUVFWMlFmOEhjV290QUFBNkFBSWdBU0FBSUFVZ0IydEJCWFpCL3dkeGFpMEFBRG9BQlNBQklBQWdEU0FLUVpVQ2JFRUlkU0FIYW1zaUJ5QVRJQXRySWdWcVFRVjJRZjhIY1dvdEFBQTZBQU1nQVNBQUlBVWdCMnRCQlhaQi93ZHhhaTBBQURvQUJBc2dBa0VnYWlFQ0lBWkJBV29pQmtFSVJ3MEFDeUFRUVlBQ2FpUUFDL0lJQWc5OUJYOGpBRUdBQW1zaUZpUUFJQUFvQXRBQ0lSY2dBU2dDVkNFQUlCWWhBVUVJSVJRRFFDQUJBbjhDUUNBQ0x3RVFJaGdnQWk4QklDSVZjZzBBUVFBaEZTQUNMd0V3RFFBZ0FpOEJRQTBBSUFJdkFWQU5BQ0FDTHdGZ0RRQWdBaThCY0EwQUlBRWdBQ29DQUNBQ0xnRUFzcFFpQmpnQ3dBRWdBU0FHT0FLZ0FTQUJJQVk0QW9BQklBRWdCamdDWUNBQklBWTRBa0FnQVNBR09BSWdJQUVnQmpnQ0FFRTREQUVMSUFFZ0FDb0NBQ0FDTGdFQXNwUWlCeUFBS2dLQUFTQUNMZ0ZBc3BRaUNKSWlEU0FBS2dKQUlCVkJFSFJCRUhXeWxDSUpJQUFxQXNBQklBSXVBV0N5bENJS2tpSUdraUlMSUFBcUFtQWdBaTRCTUxLVUlnd2dBQ29Db0FFZ0FpNEJVTEtVSWc2U0lnOGdBQ29DSUNBWVFSQjBRUkIxc3BRaUVDQUFLZ0xnQVNBQ0xnRndzcFFpRVpJaUVwSWlCWk00QXVBQklBRWdDeUFGa2pnQ0FDQUJJQWNnQ0pNaUJ5QUpJQXFUUS9NRXRUK1VJQWFUSWdpU0lna2dEaUFNa3lJS0lCQWdFWk1pQzVKRFhvUHNQNVFpRENBS1EzVTlKOENVa2lBRmt5SUZremdDd0FFZ0FTQUpJQVdTT0FJZ0lBRWdCeUFJa3lJSElCSWdENU5EOHdTMVA1UWdCWk1pQlpNNEFxQUJJQUVnQnlBRmtqZ0NRQ0FCSUEwZ0JwTWlCaUFNSUF0RDFJdUt2NVNTSUFXVElnV1NPQUpnSUFZZ0JaTWhCa0VnQzBFQ2RHb2dCamdDQUNBQ1FRSnFJUUlnQUVFRWFpRUFJQUZCQkdvaEFTQVVRUUZMSVJVZ0ZFRUJheUVVSUJVTkFBc2dGMEdBQTJzaEFDQVdJUUpCQUNFVUEwQWdBeUFVUVFKMGFpZ0NBQ0FFYWlJQklBQUNmeUFDS2dJQVF3QWdBRVNTSWdjZ0Fpb0NFQ0lJa2lJTklBSXFBZ2dpQ1NBQ0tnSVlJZ3FTSWdhU0lnc2dBaW9DRkNJTUlBSXFBZ3dpRHBJaUR5QUNLZ0lFSWhBZ0Fpb0NIQ0lSa2lJU2tpSUZraUlUaTBNQUFBQlBYUVJBSUJPb0RBRUxRWUNBZ0lCNEMwSC9CM0ZxTFFBQU9nQUFJQUVnQUFKL0lBc2dCWk1pQzR0REFBQUFUMTBFUUNBTHFBd0JDMEdBZ0lDQWVBdEIvd2R4YWkwQUFEb0FCeUFCSUFBQ2Z5QUhJQWlUSWdjZ0NTQUtrMFB6QkxVL2xDQUdreUlJa2lJSklBd2dEcE1pQ2lBUUlCR1RJZ3VTUTE2RDdEK1VJZ3dnQ2tOMVBTZkFsSklnQlpNaUJaSWlDb3REQUFBQVQxMEVRQ0FLcUF3QkMwR0FnSUNBZUF0Qi93ZHhhaTBBQURvQUFTQUJJQUFDZnlBSklBV1RJZ21MUXdBQUFFOWRCRUFnQ2FnTUFRdEJnSUNBZ0hnTFFmOEhjV290QUFBNkFBWWdBU0FBQW44Z0J5QUlreUlISUJJZ0Q1TkQ4d1MxUDVRZ0JaTWlCWklpQ0l0REFBQUFUMTBFUUNBSXFBd0JDMEdBZ0lDQWVBdEIvd2R4YWkwQUFEb0FBaUFCSUFBQ2Z5QUhJQVdUSWdlTFF3QUFBRTlkQkVBZ0I2Z01BUXRCZ0lDQWdIZ0xRZjhIY1dvdEFBQTZBQVVnQVNBQUFuOGdEU0FHa3lJR0lBd2dDMFBVaTRxL2xKSWdCWk1pQlpJaUI0dERBQUFBVDEwRVFDQUhxQXdCQzBHQWdJQ0FlQXRCL3dkeGFpMEFBRG9BQXlBQklBQUNmeUFHSUFXVElnYUxRd0FBQUU5ZEJFQWdCcWdNQVF0QmdJQ0FnSGdMUWY4SGNXb3RBQUE2QUFRZ0FrRWdhaUVDSUJSQkFXb2lGRUVJUncwQUN5QVdRWUFDYWlRQUN4a0FJQUFnQUNnQ0FDZ0NDQkVCQUNBQUVMUUZRUUVRQXdBTFd3RUJmeUFBS0FJQUlRSWdBVUVBU0FSQUFrQWdBaWdDYkNJQkJFQWdBaWdDYUVFRFNBMEJDeUFBSUFJb0FnZ1JBUUFnQWlnQ2JDRUJDeUFDSUFGQkFXbzJBbXdQQ3lBQklBSW9BbWhNQkVBZ0FDQUNLQUlJRVFFQUN3dGNBUUovSXdCQjRBRnJJZ0VrQUNBQUlBRkJFR29pQWlBQUtBSUFLQUlNRVFJQUlBRWdBallDQUVHdzhRSW9BZ0FoQWlNQVFSQnJJZ0FrQUNBQUlBRTJBZ3dnQWtHU29BSWdBUkNEQlNBQVFSQnFKQUFnQVVIZ0FXb2tBQXVUQWdJRWZ3TitJd0JCTUdzaUF5UUFBa0FDUUFKL0FrQWdBQ2dDQUNJQ0tBSVVJZ0JCQUV3TkFDQUFJQUlvQW5SS0RRQWdBaWdDY0NBQVFRSjBhZ3dCQ3lBQ0tBSjRJZ1JGRFFFZ0FDQUNLQUo4SWdWSURRRWdBQ0FDS0FLQUFVb05BU0FFSUFBZ0JXdEJBblJxQ3lnQ0FDSUVEUUVMSUFJZ0FEWUNHQ0FDS0FKd0tBSUFJUVFMSUFRaEFBSkFBa0FEUUNBQUxRQUFJZ1ZGRFFFZ0FFRUJhaUVBSUFWQkpVY05BQXNnQUMwQUFFSHpBRWNOQUNBRElBSkJHR28yQWlBZ0FTQUVJQU5CSUdvUXBRSU1BUXNnQWlrQ0lDRUdJQUlwQWlnaEJ5QUNLUUlZSVFnZ0F5QUNLUUl3TndNWUlBTWdCemNERUNBRElBWTNBd2dnQXlBSU53TUFJQUVnQkNBREVLVUNDeUFEUVRCcUpBQUxGUUFnQUNnQ0FDSUFRUUEyQWhRZ0FFRUFOZ0pzQzhFQkFRZC9JQUFvQXNBQ1FRQktCRUFnQUNnQzNBTWdBU2dDQkdvaUFTMEFqQUVoQlNBREtBSUFJUVlnQVMwQWxnRWlDRUVCYXlFSkEwQWdBQ2dDY0NJQlFRQktCRUFnQVNBR0lBUkJBblJxS0FJQUlnRnFJUW9nQWlBSFFRSjBhaWdDQUNFREEwQWdCUVJBSUFFZ0F5MEFBQ0FGRURvZ0JXb2hBUXNnQTBFQmFpRURJQUVnQ2trTkFBc0xJQWhCQWs4RVFDQUdJQVFnQmlBRVFRRnFJQWtnQUNnQ2NCQ0pBd3NnQjBFQmFpRUhJQVFnQ0dvaUJDQUFLQUxBQWtnTkFBc0xDNTRCQVFWL0lBQW9Bc0FDUVFCS0JFQWdBeWdDQUNFRkEwQWdCU0FFSUFVZ0JFRUJja0VCSUFBb0FuQWlBVUVBU2dSL0lBVWdCRUVDZEdvb0FnQWlBeUFCYWlFSElBSWdCa0VDZEdvb0FnQWhBUU5BSUFNZ0FTMEFBQ0lJT2dBQklBTWdDRG9BQUNBQlFRRnFJUUVnQTBFQ2FpSURJQWRKRFFBTElBQW9BbkFGSUFFTEVJa0RJQVpCQVdvaEJpQUVRUUpxSWdRZ0FDZ0N3QUpJRFFBTEN3dUVBUUVFZnlBQUtBTEFBaUlCUVFCS0JFQWdBeWdDQUNFRkEwQWdBQ2dDY0NJRFFRQktCRUFnQXlBRklBUkJBblFpQTJvb0FnQWlBV29oQmlBQ0lBTnFLQUlBSVFNRFFDQUJJQU10QUFBaUJ6b0FBU0FCSUFjNkFBQWdBMEVCYWlFRElBRkJBbW9pQVNBR1NRMEFDeUFBS0FMQUFpRUJDeUFFUVFGcUlnUWdBVWdOQUFzTEN3a0FJQU1nQWpZQ0FBc0pBQ0FEUVFBMkFnQUxId0VCZnlBQUtBTGNBeUlCSUFBb0FzQUNOZ0pjSUFFZ0FDZ0NkRFlDWUF1akFnRUZmeUFBS0FMY0F5SURLQUpjSWdjZ0FDZ0N3QUlpQ0U0RVFDQUFLQUlrUVFCS0JFQWdBMEVNYWlFS0lBQW9BdGdCSVFoQkFDRUhBMEFnQUNBSUlBRWdCMEVDZENJSmFpZ0NBQ0FESUFscUlnc29BbVFnQWlnQ0FHeEJBblJxSUFrZ0Ntb2dDeWdDTkJFSEFDQUlRZGdBYWlFSUlBZEJBV29pQnlBQUtBSWtTQTBBQ3lBQUtBTEFBaUVJQ3lBRFFRQTJBbHhCQUNFSEN5QUFJQU5CREdvZ0J5QUVJQVVvQWdBaUFVRUNkR29nQ0NBSGF5SUVJQU1vQW1BaUJ5QUVJQWRKR3lJRUlBWWdBV3NpQVNBQklBUkxHeUlCSUFBb0F1QURLQUlFRVFZQUlBVWdCU2dDQUNBQmFqWUNBQ0FESUFNb0FtQWdBV3MyQW1BZ0F5QURLQUpjSUFGcUlnRTJBbHdnQUNnQ3dBSWdBVXdFUUNBQ0lBSW9BZ0JCQVdvMkFnQUxDOWdCQUFKQUlBQW9Bc2dESWdFb0FoZ2lBZ1JBSUFFb0Fnd2hBd3dCQ3lBQklBQWdBU2dDQ0NBQktBSVVJQUVvQWhCQkFDQUFLQUlFS0FJY0VRb0FJZ00yQWd3Z0FTZ0NHQ0VDQ3lBQUlBTWdBa0VDZEdvZ0JDQUZLQUlBSWdOQkFuUnFJQUVvQWhBZ0Ftc2lBaUFHSUFOcklnTWdBaUFEU1JzaUFpQUFLQUowSUFFb0FoUnJJZ01nQWlBRFNSc2lBaUFBS0FMa0F5Z0NCQkVIQUNBRklBVW9BZ0FnQW1vMkFnQWdBU0FCS0FJWUlBSnFJZ0EyQWhnZ0FDQUJLQUlRSWdCUEJFQWdBVUVBTmdJWUlBRWdBU2dDRkNBQWFqWUNGQXNMMHdFQkFuOGdBQ2dDeUFNaUJFRVlhaUVJQWtBZ0JDZ0NHQ0lHQkVBZ0JDZ0NEQ0VIREFFTElBUWdBQ0FFS0FJSUlBUW9BaFFnQkNnQ0VFRUJJQUFvQWdRb0Fod1JDZ0FpQnpZQ0RDQUVLQUlZSVFZTElBQWdBU0FDSUFNZ0J5QUlJQVFvQWhBZ0FDZ0MzQU1vQWdRUkRBQWdCaUFFS0FJWUlnRkpCSDhnQUNBRUtBSU1JQVpCQW5ScVFRQWdBU0FHYXlJQklBQW9BdVFES0FJRUVRY0FJQVVnQlNnQ0FDQUJhallDQUNBRUtBSVlCU0FCQ3lBRUtBSVFJZ0JQQkVBZ0JFRUFOZ0lZSUFRZ0JDZ0NGQ0FBYWpZQ0ZBc0xqd0VCQkg4akFFRVFheUlISkFBZ0FDZ0N5QU1pQ0NnQ0VDRUpJQVVvQWdBaENpQUhRUUEyQWd3Z0FDQUJJQUlnQXlBSUtBSU1JQWRCREdvZ0JpQUtheUlCSUFrZ0FTQUpTUnNnQUNnQzNBTW9BZ1FSREFBZ0FDQUlLQUlNSUFRZ0JTZ0NBRUVDZEdvZ0J5Z0NEQ0FBS0FMa0F5Z0NCQkVIQUNBRklBVW9BZ0FnQnlnQ0RHbzJBZ0FnQjBFUWFpUUFDOXdCQVFGL0lBQW9Bc2dESVFJQ1FBSkFBa0FDUUFKQUlBRU9CQUFEQWdFREN5QUFLQUpVQkVBZ0FrSFVBVFlDQkNBQ0tBSU1EUVFnQWlBQUlBSW9BZ2hCQUNBQ0tBSVFRUUVnQUNnQ0JDZ0NIQkVLQURZQ0RBd0VDeUFDSUFBb0F0d0RLQUlFTmdJRURBTUxJQUlvQWdoRkJFQWdBQ2dDQUNJQlFRTTJBaFFnQUNBQktBSUFFUUVBQ3lBQ1FkVUJOZ0lFREFJTElBSW9BZ2hGQkVBZ0FDZ0NBQ0lCUVFNMkFoUWdBQ0FCS0FJQUVRRUFDeUFDUWRZQk5nSUVEQUVMSUFBb0FnQWlBVUVETmdJVUlBQWdBU2dDQUJFQkFBc2dBa0lBTndJVUN6d0FJQUFnQVNBQ0tBSUFJQVFnQlNnQ0FFRUNkR29nQUNnQzNBTW9BZ3dSQndBZ0JTQUZLQUlBUVFGcU5nSUFJQUlnQWlnQ0FFRUJhallDQUF2Q0F3RU1meUFDUVFKMElnSWdBU2dDQ0dvb0FnQWhCU0FCS0FJRUlBSnFLQUlBSVFZZ0FTZ0NBQ0FDYWlnQ0FDRUhJQU1vQWdBaEFTQUFLQUxRQWlFQ0lBQW9BdHdESWdNb0Fod2hDQ0FES0FJWUlRc2dBeWdDRkNFTUlBTW9BaEFoRFNBQUtBSndJZ05CQWs4RWZ5QURRUUYySVFNRFFDQU1JQVl0QUFCQkFuUWlCR29vQWdBaERpQUxJQVV0QUFCQkFuUWlDV29vQWdBaENpQUVJQWhxS0FJQUlROGdBU0FDSUFrZ0RXb29BZ0FpQ1NBSExRQUFJZ1JxYWkwQUFEb0FBQ0FCSUFJZ0JDQUtJQTlxUVJCMUlncHFhaTBBQURvQUFTQUJJQUlnQkNBT2Ftb3RBQUE2QUFJZ0FTQUNJQWtnQnkwQUFTSUVhbW90QUFBNkFBTWdBU0FDSUFRZ0NtcHFMUUFBT2dBRUlBRWdBaUFFSUE1cWFpMEFBRG9BQlNBQlFRWnFJUUVnQjBFQ2FpRUhJQVZCQVdvaEJTQUdRUUZxSVFZZ0EwRUJheUlERFFBTElBQW9BbkFGSUFNTFFRRnhCRUFnRENBR0xRQUFRUUowSWdCcUtBSUFJUU1nQ3lBRkxRQUFRUUowSWdWcUtBSUFJUVlnQUNBSWFpZ0NBQ0VJSUFFZ0FpQUhMUUFBSWdBZ0JTQU5haWdDQUdwcUxRQUFPZ0FBSUFFZ0FpQUFJQVlnQ0dwQkVIVnFhaTBBQURvQUFTQUJJQUlnQUNBRGFtb3RBQUE2QUFJTEM0c0NBUU4vSXdCQkVHc2lDQ1FBQWtBQ1FDQUFLQUxjQXlJSEtBSWtCRUFnQjBFZ2FrRUFJQVFnQlNnQ0FFRUNkR3BCQUVFQklBY29BaWdRaVFNZ0IwRUFOZ0lrSUFVZ0JTZ0NBRUVCYWpZQ0FDQUhJQWNvQWl4QkFXczJBaXdNQVFzZ0J5Z0NMQ0VKSUFnZ0JDQUZLQUlBSWdOQkFuUnFJZ1FvQWdBMkFnZ2dDQUovSUFrZ0JpQURheUlESUFNZ0NVc2JJZ05CQWlBRFFRSkpHeUlEUVFKUEJFQWdCQ2dDQkF3QkN5QUhRUUUyQWlRZ0J5Z0NJQXMyQWd3Z0FDQUJJQUlvQWdBZ0NFRUlhaUFIS0FJTUVRY0FJQWNvQWlRaEFDQUZJQVVvQWdBZ0EybzJBZ0FnQnlBSEtBSXNJQU5yTmdJc0lBQU5BUXNnQWlBQ0tBSUFRUUZxTmdJQUN5QUlRUkJxSkFBTGhnVUJEbjhnQWtFQ2RDSUZJQUVvQWdocUtBSUFJUW9nQVNnQ0JDQUZhaWdDQUNFTElBRW9BZ0FnQWtFRGRHb2lBU2dDQUNFSElBRW9BZ1FoQ0NBREtBSUVJUUlnQXlnQ0FDRURJQUFvQXRBQ0lRUWdBQ2dDM0FNaUFTZ0NIQ0VPSUFFb0FoZ2hEeUFCS0FJVUlSQWdBU2dDRUNFUklBQW9BbkFpQVVFQ1R3Ui9JQUZCQVhZaENRTkFJQkFnQ3kwQUFFRUNkQ0lCYWlnQ0FDRU1JQThnQ2kwQUFFRUNkQ0lHYWlnQ0FDRUZJQUVnRG1vb0FnQWhBU0FESUFRZ0JpQVJhaWdDQUNJTklBY3RBQUFpQm1wcUxRQUFPZ0FBSUFNZ0JDQUdJQUVnQldwQkVIVWlCV3BxTFFBQU9nQUJJQU1nQkNBR0lBeHFhaTBBQURvQUFpQURJQVFnRFNBSExRQUJJZ0ZxYWkwQUFEb0FBeUFESUFRZ0FTQUZhbW90QUFBNkFBUWdBeUFFSUFFZ0RHcHFMUUFBT2dBRklBSWdCQ0FOSUFndEFBQWlBV3BxTFFBQU9nQUFJQUlnQkNBQklBVnFhaTBBQURvQUFTQUNJQVFnQVNBTWFtb3RBQUE2QUFJZ0FpQUVJQTBnQ0MwQUFTSUJhbW90QUFBNkFBTWdBaUFFSUFFZ0JXcHFMUUFBT2dBRUlBSWdCQ0FCSUF4cWFpMEFBRG9BQlNBQ1FRWnFJUUlnQ0VFQ2FpRUlJQU5CQm1vaEF5QUhRUUpxSVFjZ0NrRUJhaUVLSUF0QkFXb2hDeUFKUVFGcklna05BQXNnQUNnQ2NBVWdBUXRCQVhFRVFDQVFJQXN0QUFCQkFuUWlBR29vQWdBaENTQVBJQW90QUFCQkFuUWlBV29vQWdBaEJTQUFJQTVxS0FJQUlRQWdBeUFFSUFFZ0VXb29BZ0FpQVNBSExRQUFJZ1pxYWkwQUFEb0FBQ0FESUFRZ0JpQUFJQVZxUVJCMUlnQnFhaTBBQURvQUFTQURJQVFnQmlBSmFtb3RBQUE2QUFJZ0FpQUVJQUVnQ0MwQUFDSURhbW90QUFBNkFBQWdBaUFFSUFBZ0EycHFMUUFBT2dBQklBSWdCQ0FESUFscWFpMEFBRG9BQWdzTEd3RUJmeUFBS0FMY0F5SUJRUUEyQWlRZ0FTQUFLQUowTmdJc0M0VURBUU4vQWtBZ0FBSi9JQUFvQXJ3RElnRW9BZ2dFUUNBQlFRQTJBZ2dnQUVFQUlBQW9BdVFES0FJQUVRSUFJQUJCQWlBQUtBTElBeWdDQUJFQ0FFRUNEQUVMQWtBZ0FDZ0NWRVVOQUNBQUtBS0lBUTBBQWtBZ0FDZ0NYRVVOQUNBQUtBSnNSUTBBSUFBZ0FTZ0NHRFlDNUFNZ0FVRUJOZ0lJREFFTElBQW9BbVFFUUNBQUlBRW9BaFEyQXVRRERBRUxJQUFvQWdBaUFrRXZOZ0lVSUFBZ0FpZ0NBQkVCQUFzZ0FDQUFLQUxZQXlnQ0FCRUJBQ0FBSUFBb0FzUURLQUlJRVFFQUlBQW9Ba1FOQVNBQktBSVFSUVJBSUFBZ0FDZ0M0QU1vQWdBUkFRQUxJQUFnQUNnQzNBTW9BZ0FSQVFBZ0FDZ0NWQVJBSUFBZ0FTZ0NDQ0FBS0FMa0F5Z0NBQkVDQUFzZ0FFRURRUUFnQVNnQ0NCc2dBQ2dDeUFNb0FnQVJBZ0JCQUFzZ0FDZ0N3QU1vQWdBUkFnQUxBa0FnQUNnQ0NDSUNSUTBBSUFJZ0FTZ0NEQ0lETmdJTUlBSWdBMEVDUVFFZ0FTZ0NDQnRxSWdFMkFoQWdBQ2dDUUVVTkFDQUFLQUxNQXlnQ0ZBMEFJQUpCQWtFQklBQW9BbXdiSUFGcU5nSVFDd3N2QVFGL0lBQW9BcndESVFFZ0FDZ0NWQVJBSUFBZ0FDZ0M1QU1vQWdnUkFRQUxJQUVnQVNnQ0RFRUJhallDREFzY0FDQUFRUUJCQUVFQUlBRWdBaUFESUFBb0FzZ0RLQUlFRVF3QUMyRUJBbjhDUUNBQUtBTEFBeUlFS0FJd0lBUW9BalFpQlU4RVFDQUFJQVJCQ0dvZ0FDZ0N4QU1vQWd3UkF3QkZEUUVnQkVFQU5nSXdJQVFvQWpRaEJRc2dBQ0FFUVFocUlBUkJNR29nQlNBQklBSWdBeUFBS0FMSUF5Z0NCQkVNQUFzTHVBY0JEMzhDUUNBQUtBTEFBeUlFS0FJNFJRUkFJQUFnQkNBRUtBSkVRUUowYWlnQ1BDQUFLQUxFQXlnQ0RCRURBRVVOQVNBRVFRRTJBamdnQkNBRUtBSk1RUUZxTmdKTUN3SkFBa0FDUUNBRUtBSklEZ01CQWdBREN5QUFJQVFnQkNnQ1JFRUNkR29vQWp3Z0JFRXdhaUFFS0FJMElBRWdBaUFESUFBb0FzZ0RLQUlFRVF3QUlBUW9BakFnQkNnQ05Fa05BaUFFUVFBMkFrZ2dBaWdDQUNBRFR3MENDeUFFUVFBMkFqQWdCQ0FBS0FMSUFpSU5RUUZyTmdJMEFrQWdCQ2dDVENBQUtBTE1Ba2NOQUNBQUtBSWtJaEJCQUV3TkFDQUFLQUxBQXlJT0lBNG9Ba1JCQW5ScUlSRWdBQ2dDMkFFaEJ3TkFJQWNvQWpBZ0J5Z0NLQ0FIS0FJTWJDSUZjQ0lHSUFVZ0Joc2hCaUFGSUExdElRVWdDRVVFUUNBT0lBWkJBV3NnQlcxQkFXbzJBalFMQWtBZ0JVRUFUQTBBSUFWQkFYUWlCVUVCSUFWQkFVb2JJZ2xCQTNFaER5QVJLQUk4SUFoQkFuUnFLQUlBSWdvZ0JrRUNkR3BCQkdzaEMwRUFJUXhCQUNFRklBbEJBV3RCQTA4RVFDQUpRZnovLy84SGNTRVNRUUFoQ1FOQUlBb2dCU0FHYWtFQ2RHb2dDeWdDQURZQ0FDQUtJQVZCQVhJZ0JtcEJBblJxSUFzb0FnQTJBZ0FnQ2lBRlFRSnlJQVpxUVFKMGFpQUxLQUlBTmdJQUlBb2dCVUVEY2lBR2FrRUNkR29nQ3lnQ0FEWUNBQ0FGUVFScUlRVWdDVUVFYWlJSklCSkhEUUFMQ3lBUFJRMEFBMEFnQ2lBRklBWnFRUUowYWlBTEtBSUFOZ0lBSUFWQkFXb2hCU0FNUVFGcUlnd2dEMGNOQUFzTElBZEIyQUJxSVFjZ0NFRUJhaUlJSUJCSERRQUxDeUFFUVFFMkFrZ0xJQUFnQkNBRUtBSkVRUUowYWlnQ1BDQUVRVEJxSUFRb0FqUWdBU0FDSUFNZ0FDZ0N5QU1vQWdRUkRBQWdCQ2dDTUNBRUtBSTBTUTBBSUFBb0FzZ0NJUUVDUUNBRUtBSk1RUUZIRFFBZ0FDZ0NKQ0lLUVFCTURRQWdBVUVDYWlFTElBRkJBV29oRGlBQUtBTEFBeUVHSUFBb0F0Z0JJUWRCQUNFSUEwQWdCeWdDS0NBSEtBSU1iQ0FCYlNJQVFRQktCRUFnQ0VFQ2RDSURJQVlvQWtCcUtBSUFJUUlnQmlnQ1BDQURhaWdDQUNFRElBQWdDMndoQ1NBQUlBNXNJUTlCQUNFRkEwQWdBeUFGSUFCclFRSjBJZ3hxSUFNZ0JTQVBha0VDZENJTmFpZ0NBRFlDQUNBQ0lBeHFJQUlnRFdvb0FnQTJBZ0FnQXlBRklBbHFRUUowSWd4cUlBTWdCVUVDZENJTmFpZ0NBRFlDQUNBQ0lBeHFJQUlnRFdvb0FnQTJBZ0FnQlVFQmFpSUZJQUJIRFFBTEN5QUhRZGdBYWlFSElBaEJBV29pQ0NBS1J3MEFDd3NnQkVFQU5nSTRJQVJCQWpZQ1NDQUVJQUZCQW1vMkFqUWdCQ0FCUVFGcU5nSXdJQVFnQkNnQ1JFRUJjellDUkFzTHJRY0JFWDhnQUNnQ3dBTWhCd0pBQWtBQ1FDQUJEZ01BQWdFQ0N5QUFLQUxjQXlnQ0NBUkFJQWRCeVFFMkFnUWdBQ2dDSkNJUVFRQktCRUFnQUNnQ3lBSWlEa0VDYXlFUklBNUJBbW9oRWlBQUtBTFlBU0VOQTBBZ0QwRUNkQ0lBSUFjb0FrQnFLQUlBSVFFZ0J5Z0NQQ0FBYWlnQ0FDRUNJQUFnQjJvb0FnZ2hCQUpBSUEwb0FpZ2dEU2dDREd3Z0RtMGlCU0FTYkNJSlFRQk1EUUJCQUNFR1FRQWhBQ0FKUVFGclFRTlBCRUFnQ1VGOGNTRUxRUUFoQ2dOQUlBRWdBRUVDZENJRGFpQURJQVJxS0FJQUlnZzJBZ0FnQWlBRGFpQUlOZ0lBSUFFZ0EwRUVjaUlJYWlBRUlBaHFLQUlBSWd3MkFnQWdBaUFJYWlBTU5nSUFJQUVnQTBFSWNpSUlhaUFFSUFocUtBSUFJZ3cyQWdBZ0FpQUlhaUFNTmdJQUlBRWdBMEVNY2lJRGFpQURJQVJxS0FJQUlnZzJBZ0FnQWlBRGFpQUlOZ0lBSUFCQkJHb2hBQ0FLUVFScUlnb2dDMGNOQUFzTElBbEJBM0VpQ1VVTkFBTkFJQUVnQUVFQ2RDSURhaUFESUFScUtBSUFJZ28yQWdBZ0FpQURhaUFLTmdJQUlBQkJBV29oQUNBR1FRRnFJZ1lnQ1VjTkFBc0xBa0FnQlVFQVRBMEFJQVZCQVhRaUJrRUJJQVpCQVVvYklncEJBWEVoQ0NBRklCRnNJUU1nQlNBT2JDRUpRUUFoQUNBR1FRSk9CRUFnQ2tIKy8vLy9CM0VoQ2tFQUlRWURRQ0FCSUFBZ0EycEJBblFpQzJvZ0JDQUFJQWxxUVFKMElneHFLQUlBTmdJQUlBRWdER29nQkNBTGFpZ0NBRFlDQUNBQklBQkJBWElpQ3lBRGFrRUNkQ0lNYWlBRUlBa2dDMnBCQW5RaUMyb29BZ0EyQWdBZ0FTQUxhaUFFSUF4cUtBSUFOZ0lBSUFCQkFtb2hBQ0FHUVFKcUlnWWdDa2NOQUFzTElBZ0VRQ0FCSUFBZ0EycEJBblFpQm1vZ0JDQUFJQWxxUVFKMElnQnFLQUlBTmdJQUlBQWdBV29nQkNBR2FpZ0NBRFlDQUF0QkFDRUVRUUFoQVNBRlFRRnJRUU5QQkVBZ0JVRjhjU0VHUVFBaEFBTkFJQUlnQVNBRmEwRUNkR29nQWlnQ0FEWUNBQ0FDSUFGQkFYSWdCV3RCQW5ScUlBSW9BZ0EyQWdBZ0FpQUJRUUp5SUFWclFRSjBhaUFDS0FJQU5nSUFJQUlnQVVFRGNpQUZhMEVDZEdvZ0FpZ0NBRFlDQUNBQlFRUnFJUUVnQUVFRWFpSUFJQVpIRFFBTEN5QUZRUU54SWdCRkRRQURRQ0FDSUFFZ0JXdEJBblJxSUFJb0FnQTJBZ0FnQVVFQmFpRUJJQVJCQVdvaUJDQUFSdzBBQ3dzZ0RVSFlBR29oRFNBUFFRRnFJZzhnRUVjTkFBc0xJQWRCQURZQ1RDQUhRZ0EzQWtRZ0IwRUFOZ0k0RHdzZ0IwSEtBVFlDQkNBSElBY29BalEyQWpBUEN5QUhRY3NCTmdJRUR3c2dBQ2dDQUNJQlFRTTJBaFFnQUNBQktBSUFFUUVBQzVZTEFTMS9Jd0JCZ0FGcklnZ2tBQ0FBS0FMTUFrRUJheUVwSUFBb0FzUURJUlFDZndKQUEwQWdBQ2dDa0FFaUJDQUFLQUtZQVNJR1NnMEJJQUFvQXN3RElnc29BaFFOQVNBRUlBWkdCRUFnQUNnQ2xBRWdBQ2dDbkFFZ0FDZ0NuQU5GYWtzTkFnc2dBQ0FMS0FJQUVRQUFEUUFMUVFBTUFRc2dBQ2dDSkVFQVNnUkFJQUFvQXRnQklRa0RRQUpBSUFrb0FqUkZEUUFDZnlBQUtBS2NBU0lWSUNsUElpcEZCRUFnQ1NnQ0RDSUVRUUYwSVFjZ0JBd0JDeUFKS0FJZ0lBa29BZ3dpQkhBaUJpQUVJQVliSWdjTElSWUNmeUFWQkVBZ0FDQVVJQTVCQW5ScUtBSklJQVFnRlVFQmEyd2dCQ0FIYWtFQUlBQW9BZ1FvQWlBUkNnQWdDU2dDREVFQ2RHb01BUXNnQUNBVUlBNUJBblJxS0FKSVFRQWdCMEVBSUFBb0FnUW9BaUFSQ2dBTElTc2dGa0VBVEEwQUlBNUJBblFpQ3lBQUtBTFlBMm9vQWdRaExDQVdRUUZySVMwZ0ZDZ0NjQ0FPUVJoc2FpRVBJQWtvQWxBaUJDOEJCQ0lHUVFoMElSd2dCa0VIZENFZElBUXZBUklpQmtFSWRDRWVJQVpCQjNRaEh5QUVMd0VBSWdaQkJXd2hMaUFFTHdFZ0lnZEJDSFFoSUNBSFFRZDBJU0VnQmtFSmJDRWlJQVF2QVJBaUIwRUlkQ0VqSUFkQkIzUWhKQ0FFTHdFQ0lnUkJDSFFoSlNBRVFRZDBJU1lnQmtFa2JDRW5JQUVnQzJvb0FnQWhGMEVBSVJBRFFDQXJJQkJCQW5ScUlnUW9BZ0FpQnlFTklCQWdGWElFUUNBRVFRUnJLQUlBSVEwTElBY2hFU0FKS0FJY1FRRnJJU2hCQUNFWUlDb2dFQ0F0Um5GRkJFQWdCQ2dDQkNFUkN5QVJMZ0VBSWhraEJDQUhMZ0VBSWhJaEJpQU5MZ0VBSWhvaEMwRUFJUnNEUUNBTElRVWdHaUVMSUFZaENpQVNJUVlnQkNFTUlCa2hCQ0FJSUFkQmdBRVFQeG9nR0NBb1NRUkFJQkV1QVlBQklSa2dEUzRCZ0FFaEdpQUhMZ0dBQVNFU0N3SkFJQThvQWdRaUEwVU5BQ0FJTHdFQ0RRQWdDQUovSUNjZ0NpQVNhMndpQWtFQVRnUkFJQUlnSm1vZ0pXMGlBaUFEUVFCTURRRWFJQUpCQVNBRGRDSURRUUZySUFJZ0EwZ2JEQUVMUVFBZ0ppQUNheUFsYlNJQ1FRRWdBM1FpRTBFQmF5QUNJQk5JR3lBQ0lBTkJBRW9iYXdzN0FRSUxBa0FnRHlnQ0NDSURSUTBBSUFndkFSQU5BQ0FJQW44Z0p5QUxJQVJyYkNJQ1FRQk9CRUFnQWlBa2FpQWpiU0lDSUFOQkFFd05BUm9nQWtFQklBTjBJZ05CQVdzZ0FpQURTQnNNQVF0QkFDQWtJQUpySUNOdElnSkJBU0FEZENJVFFRRnJJQUlnRTBnYklBSWdBMEVBU2h0ckN6c0JFQXNDUUNBUEtBSU1JZ05GRFFBZ0NDOEJJQTBBSUFnQ2Z5QWlJQXNnQmtFQmRHc2dCR3BzSWdKQkFFNEVRQ0FDSUNGcUlDQnRJZ0lnQTBFQVRBMEJHaUFDUVFFZ0EzUWlBMEVCYXlBQ0lBTklHd3dCQzBFQUlDRWdBbXNnSUcwaUFrRUJJQU4wSWhOQkFXc2dBaUFUU0JzZ0FpQURRUUJLRzJzTE93RWdDd0pBSUE4b0FoQWlBMFVOQUNBSUx3RVNEUUFnQ0FKL0lDNGdCU0FNSUJwcWF5QVphbXdpQlVFQVRnUkFJQVVnSDJvZ0htMGlCU0FEUVFCTURRRWFJQVZCQVNBRGRDSU1RUUZySUFVZ0RFZ2JEQUVMUVFBZ0h5QUZheUFlYlNJRlFRRWdBM1FpREVFQmF5QUZJQXhJR3lBRklBTkJBRW9iYXdzN0FSSUxBa0FnRHlnQ0ZDSUZSUTBBSUFndkFRUU5BQ0FJQW44Z0lpQUtJQVpCQVhScklCSnFiQ0lLUVFCT0JFQWdDaUFkYWlBY2JTSUtJQVZCQUV3TkFSb2dDa0VCSUFWMElnVkJBV3NnQlNBS1Noc01BUXRCQUNBZElBcHJJQnh0SWdwQkFTQUZkQ0lNUVFGcklBb2dERWdiSUFvZ0JVRUFTaHRyQ3pzQkJBc2dBQ0FKSUFnZ0Z5QWJJQ3dSQmdBZ0VVR0FBV29oRVNBTlFZQUJhaUVOSUFkQmdBRnFJUWNnQ1NnQ0pDQWJhaUViSUJoQkFXb2lHQ0FvVFEwQUN5QVhJQWtvQWloQkFuUnFJUmNnRUVFQmFpSVFJQlpIRFFBTEN5QUpRZGdBYWlFSklBNUJBV29pRGlBQUtBSWtTQTBBQ3dzZ0FDQUFLQUtjQVVFQmFpSUJOZ0tjQVVFRFFRUWdBU0FBS0FMTUFra2JDeUVBSUFoQmdBRnFKQUFnQUF2K0JRRVVmeUFBS0FMTUFpRUVBa0FnQUNnQ3hBTWlCU2dDR0NJSUlBVW9BaHdpQWtnRVFDQUVRUUZySVJNZ0FDZ0M2QUpCQVdzaERTQUZRU0JxSVFzZ0JTZ0NGQ0VHQTBBZ0JpQU5UUVJBQTBBZ0FDZ0N0QU1FUUNBTEtBSUFRUUFnQUNnQzhBSkJCM1FRT2hvTElBQWdDeUFBS0FMVUF5Z0NCQkVEQUVVTkJDQUFLQUxVQWlJQ1FRQktCRUJCQUNFSFFRQWhEZ05BQWtBZ0FDQU9RUUowYWlnQzJBSWlBeWdDTkVVRVFDQURLQUpBSUFkcUlRY01BUXNnQXlnQ1BDSUVRUUJNRFFBZ0F5Z0NSQ0FHYkNFTUlBTW9BZ1JCQW5RaUFpQUFLQUxZQTJvb0FnUWhEeUFCSUFKcUtBSUFJQU1vQWlnaUFpQUliRUVDZEdvaENTQURRVGhCeUFBZ0JpQU5TUnRxS0FJQUloQkJBU0FRUVFGS0d5SUtRZjcvLy84SGNTRVVJQXBCQVhFaEZTQVFRUUJNSVJGQkFDRUtBMEFDUUFKQUlCTWdBQ2dDbEFGTkJFQWdBeWdDVENBSUlBcHFUQ0FSY2tVTkFRd0NDeUFSRFFFTFFRQWhCQ0FNSVFKQkFDRVNJQkJCQWs0RVFBTkFJQUFnQXlBTElBUWdCMnBCQW5ScUtBSUFJQWtnQWlBUEVRWUFJQUFnQXlBTElBUkJBWElnQjJwQkFuUnFLQUlBSUFrZ0F5Z0NKQ0FDYWlJQ0lBOFJCZ0FnQkVFQ2FpRUVJQU1vQWlRZ0Ftb2hBaUFTUVFKcUloSWdGRWNOQUFzTElCVUVRQ0FBSUFNZ0JTQUVJQWRxUVFKMGFpZ0NJQ0FKSUFJZ0R4RUdBQXNnQXlnQ1BDRUVJQU1vQWlnaEFnc2dDU0FDUVFKMGFpRUpJQU1vQWpnZ0Iyb2hCeUFLUVFGcUlnb2dCRWdOQUFzZ0FDZ0MxQUloQWdzZ0RrRUJhaUlPSUFKSURRQUxDeUFHUVFGcUlnWWdEVTBOQUFzZ0JTZ0NIQ0VDQzBFQUlRWWdCVUVBTmdJVUlBaEJBV29pQ0NBQ1NBMEFDeUFBS0FMTUFpRUVDMEVCSVFJZ0FDQUFLQUtjQVVFQmFqWUNuQUVnQUNBQUtBS1VBVUVCYWlJQk5nS1VBU0FCSUFSSkJFQWdBQ2dDeEFNaERDQUFLQUxVQWtFQlRBUkFJQUFvQXRnQ1FReEJ6QUFnQVNBRVFRRnJTUnRxS0FJQUlRSUxJQXhDQURjQ0ZDQU1JQUkyQWh4QkF3OExJQUFnQUNnQ3pBTW9BZ3dSQVFCQkJBOExJQVVnQmpZQ0ZDQUZJQWcyQWhoQkFBdXdCUUVUZnlNQVFSQnJJZ2drQUNBQUtBTEVBeUVESUFBb0F0UUNRUUJLQkVBRFFDQUlJQUZCQW5RaUFtb2dBQ0FESUFBZ0Ftb29BdGdDSWdJb0FnUkJBblJxS0FKSUlBSW9BZ3dpQWlBQUtBS1VBV3dnQWtFQklBQW9BZ1FvQWlBUkNnQTJBZ0FnQVVFQmFpSUJJQUFvQXRRQ1NBMEFDd3NDZnlBREtBSVlJZ2NnQXlnQ0hDSUNTQVJBSUFOQklHb2hEU0FBS0FMb0FpRUJJQU1vQWhRaEJBTkFJQUVnQkVzRVFBTkFRUUFoQ1VFQUlRSWdBQ2dDMUFJaURrRUFTZ1JBQTBBZ0FDQUpRUUowSWdGcUtBTFlBaUlGS0FJOElnOUJBRW9FUUNBRktBSTRJZ1VnQkd3aEVDQUZRWHh4SVJFZ0JVRURjU0VMSUFWQkFXc2hFaUFCSUFocUtBSUFJUk5CQUNFS0EwQUNRQ0FGUVFCTURRQWdFeUFISUFwcVFRSjBhaWdDQUNBUVFRZDBhaUVCUVFBaERDQVNRUU5QQkVBRFFDQURJQUpCQW5ScUlnWWdBVUdBQVdvMkFpUWdCaUFCTmdJZ0lBWWdBVUdBQW1vMkFpZ2dCaUFCUVlBRGFqWUNMQ0FDUVFScUlRSWdBVUdBQkdvaEFTQU1RUVJxSWd3Z0VVY05BQXNMUVFBaEJpQUxSUTBBQTBBZ0F5QUNRUUowYWlBQk5nSWdJQUpCQVdvaEFpQUJRWUFCYWlFQklBWkJBV29pQmlBTFJ3MEFDd3NnQ2tFQmFpSUtJQTlIRFFBTEN5QUpRUUZxSWdrZ0RrY05BQXNMSUFBZ0RTQUFLQUxVQXlnQ0JCRURBRVVFUUNBRElBUTJBaFFnQXlBSE5nSVlRUUFNQlFzZ0JFRUJhaUlFSUFBb0F1Z0NJZ0ZKRFFBTElBTW9BaHdoQWd0QkFDRUVJQU5CQURZQ0ZDQUhRUUZxSWdjZ0FrZ05BQXNMUVFFaEFpQUFJQUFvQXBRQlFRRnFJZ0UyQXBRQklBQW9Bc3dDSWdRZ0FVc0VRQ0FBS0FMRUF5RURJQUFvQXRRQ1FRRk1CRUFnQUNnQzJBSkJERUhNQUNBQklBUkJBV3RKRzJvb0FnQWhBZ3NnQTBJQU53SVVJQU1nQWpZQ0hFRUREQUVMSUFBZ0FDZ0N6QU1vQWd3UkFRQkJCQXNoQVNBSVFSQnFKQUFnQVF1bUF3RU5meUFBS0FMTUFrRUJheUVMSUFBb0FzUURJUXdDUUFOQUlBQW9BcEFCSWdNZ0FDZ0NtQUVpQkU0RVFDQURJQVJIRFFJZ0FDZ0NsQUVnQUNnQ25BRkxEUUlMSUFBZ0FDZ0N6QU1vQWdBUkFBQU5BQXRCQUE4TElBQW9BaVJCQUVvRVFDQUFLQUxZQVNFQ0EwQUNRQ0FDS0FJMFJRMEFJQUFnRENBRlFRSjBJZ05xS0FKSUlBSW9BZ3dpQkNBQUtBS2NBV3dnQkVFQUlBQW9BZ1FvQWlBUkNnQWhEUUovSUFzZ0FDZ0NuQUZMQkVBZ0FpZ0NEQXdCQ3lBQ0tBSWdJQUlvQWd3aUJIQWlCaUFFSUFZYkN5SUdRUUJNRFFBZ0FDZ0MyQU1nQTJvb0FnUWhEaUFCSUFOcUtBSUFJUWNnQWlnQ0hDRURRUUFoQ0FOQVFRQWhCQ0FEQkVBZ0RTQUlRUUowYWlnQ0FDRURRUUFoQ1VFQUlRb0RRQ0FBSUFJZ0F5QUhJQWtnRGhFR0FDQURRWUFCYWlFRElBSW9BaVFnQ1dvaENTQUtRUUZxSWdvZ0FpZ0NIQ0lFU1EwQUN3c2dCeUFDS0FJb1FRSjBhaUVISUFRaEF5QUlRUUZxSWdnZ0JrY05BQXNMSUFKQjJBQnFJUUlnQlVFQmFpSUZJQUFvQWlSSURRQUxDeUFBSUFBb0Fwd0JRUUZxSWdFMkFwd0JRUU5CQkNBQklBQW9Bc3dDU1JzTFRRRUNmeUFBUVFBMkFwUUJRUUVoQVNBQUtBTEVBeUVDSUFBb0F0UUNRUUZNQkVBZ0FDZ0MyQUpCekFCQkRDQUFLQUxNQWtFQlJodHFLQUlBSVFFTElBSkNBRGNDRkNBQ0lBRTJBaHdMM0FJQkNYOGdBQ2dDeEFNaUFTZ0NFQVJBSUFFQ2Z3SkFJQUFvQWxCRkRRQWdBQ2dDNEFGRkRRQWdBQ2dDb0FGRkRRQWdBU2dDY0NJQ1JRUkFJQUVnQUVFQklBQW9BaVJCR0d3Z0FDZ0NCQ2dDQUJFRUFDSUNOZ0p3Q3lBQUtBSWtRUUJNRFFBZ0FDZ0MyQUVoQXdOQUlBTW9BbEFpQVVVTkFTQUJMd0VBUlEwQklBRXZBUUpGRFFFZ0FTOEJFRVVOQVNBQkx3RWdSUTBCSUFFdkFSSkZEUUVnQVM4QkJFVU5BU0FBS0FLZ0FTQUZRUWgwYWlJQktBSUFRUUJJRFFFZ0FpQUJLQUlFTmdJRUlBRW9BZ1FoQmlBQ0lBRW9BZ2cyQWdnZ0FTZ0NDQ0VISUFJZ0FTZ0NERFlDRENBQktBSU1JUWdnQWlBQktBSVFOZ0lRSUFFb0FoQWhDU0FDSUFFb0FoUTJBaFJCQVNBRUlBa2dBU2dDRkhJZ0NDQUdJQWR5Y25JYklRUWdBMEhZQUdvaEF5QUNRUmhxSVFJZ0JVRUJhaUlGSUFBb0FpUklEUUFMUWNjQklBUU5BUm9MUWNNQkN6WUNEQXNnQUVFQU5nS2NBUXY2Q2dFT2Z5TUFRVEJySWdRa0FDQUFLQUxVQXlFSEFuOENRQ0FBS0FLWUFrVU5BQ0FIS0FJc0RRQWdBQ2dDMEFNaUF5QURLQUlZSUFjb0FoQkJDRzFxTmdJWUlBZEJBRFlDRUVFQUlBQWdBeWdDQ0JFQUFFVU5BUm9nQUNnQzFBSkJBRW9FUUVFQUlRTURRQ0FISUFOQkFuUnFRUUEyQWhnZ0EwRUJhaUlESUFBb0F0UUNTQTBBQ3dzZ0IwRUFOZ0lVSUFjZ0FDZ0NtQUkyQWl3Z0FDZ0N1QU1OQUNBSFFRQTJBaWdMSUFjb0FpaEZCRUFnQUNnQ3RBTWhEU0FBS0FLd0F5RVBJQVFnQURZQ0tDQUVJQUFvQWhnaUNDZ0NBQ0lHTmdJWUlBUWdDQ2dDQkNJQ05nSWNJQWNvQWhBaEF5QUhLQUlNSVFVZ0JDQUhLQUlrTmdJUUlBUWdCeWtDSERjRENDQUVJQWNwQWhRM0F3QWdBQ2dDOEFKQkFFb0VRQU5BSUFFZ0RFRUNkQ0lMYWlnQ0FDRU9JQWNnQzJvaUNpZ0NaQ0VJQW44Q1FBSi9JQU5CQjB3RVFFRUFJQVJCR0dvZ0JTQURRUUFRYWtVTkJ4b2dCQ2dDSUNFRlFRRWdCQ2dDSkNJRFFRaElEUUVhQ3lBSUlBVWdBMEVJYTNWQi93RnhJZ0pCQW5ScUtBS1FBU0lHRFFGQkNRc2hBa0VBSUFSQkdHb2dCU0FESUFnZ0FoRGRBU0lDUVFCSURRVWFJQVFvQWlBaEJTQUVLQUlrREFFTElBSWdDR3BCa0FscUxRQUFJUUlnQXlBR2F3c2hBeUFLS0FLTUFTRUpBa0FDUUNBS0tBSzBBU0lLQkVBZ0FnUi9JQUlnQTBvRVFFRUFJQVJCR0dvZ0JTQURJQUlRYWtVTkNCb2dCQ2dDSUNFRklBUW9BaVFoQXdzZ0FrRUNkQ0lHUWNDN0Ftb29BZ0FpQ0NBRklBTWdBbXNpQTNWeElnSkJBQ0FJSUFJZ0JrRzh1d0pxS0FJQVNodHJCVUVBQ3lFQ0lBUWdBQ0FMYWlnQzlBSkJBblJxSWdaQkJHb2dCaWdDQkNBQ2FpSUNOZ0lBSUE0Z0Fqc0JBRUVCSVFnZ0NrRUNTQTBCQTBBQ2Z3SkFBbjhnQTBFSFRBUkFRUUFnQkVFWWFpQUZJQU5CQUJCcVJRMExHaUFFS0FJZ0lRVkJBU0FFS0FJa0lnTkJDRWdOQVJvTElBa2dCU0FEUVFocmRVSC9BWEVpQWtFQ2RHb29BcEFCSWdZTkFVRUpDeUVDUVFBZ0JFRVlhaUFGSUFNZ0NTQUNFTjBCSWdKQkFFZ05DUm9nQkNnQ0lDRUZJQVFvQWlRTUFRc2dBaUFKYWtHUUNXb3RBQUFoQWlBRElBWnJDeUVESUFKQkJIWWhCZ0pBSUFKQkQzRWlBZ1JBSUFJZ0Ewb0VRRUVBSUFSQkdHb2dCU0FESUFJUWFrVU5DaG9nQkNnQ0lDRUZJQVFvQWlRaEF3c2dEaUFQSUFZZ0NHb2lDRUVDZEdvb0FnQkJBWFJxSUFKQkFuUWlCa0hBdXdKcUtBSUFJZ3NnQlNBRElBSnJJZ04xY1NJQ1FRQWdDeUFDSUFaQnZMc0NhaWdDQUVvYmF6c0JBQXdCQ3lBR1FROUhEUVFnQ0VFUGFpRUlDeUFJUVFGcUlnZ2dDa2dOQUFzTUFRdEJBU0VJSUFKRkRRQWdBaUFEU2dSL1FRQWdCRUVZYWlBRklBTWdBaEJxUlEwR0dpQUVLQUlnSVFVZ0JDZ0NKQVVnQXdzZ0Ftc2hBd3NnQ0NBTlNnMEFBMEFDZndKQUFuOGdBMEVIVEFSQVFRQWdCRUVZYWlBRklBTkJBQkJxUlEwSkdpQUVLQUlnSVFWQkFTQUVLQUlrSWdOQkNFZ05BUm9MSUFrZ0JTQURRUWhyZFVIL0FYRWlBa0VDZEdvb0FwQUJJZ1lOQVVFSkN5RUNRUUFnQkVFWWFpQUZJQU1nQ1NBQ0VOMEJJZ0pCQUVnTkJ4b2dCQ2dDSUNFRklBUW9BaVFNQVFzZ0FpQUpha0dRQ1dvdEFBQWhBaUFESUFackN5RURJQUpCQkhZaEJnSkFJQUpCRDNFaUFnUkFJQUlnQTBvRWYwRUFJQVJCR0dvZ0JTQURJQUlRYWtVTkNCb2dCQ2dDSUNFRklBUW9BaVFGSUFNTElBSnJJUU1NQVFzZ0JrRVBSeUVDUVE4aEJpQUNEUUlMSUFZZ0NHcEJBV29pQ0NBTlRBMEFDd3NnREVFQmFpSU1JQUFvQXZBQ1NBMEFDeUFBS0FJWUlRZ2dCQ2dDR0NFR0lBUW9BaHdoQWdzZ0NDQUNOZ0lFSUFnZ0JqWUNBQ0FISUFNMkFoQWdCeUFGTmdJTUlBY2dCQ2dDRURZQ0pDQUhJQVFwQXdnM0Fod2dCeUFFS1FNQU53SVVDeUFISUFjb0FpeEJBV3MyQWl4QkFRc2hCaUFFUVRCcUpBQWdCZ3Z0Q2dFTWZ5TUFRVEJySWdRa0FDQUFLQUxVQXlFSEFuOENRQ0FBS0FLWUFrVU5BQ0FIS0FJc0RRQWdBQ2dDMEFNaUF5QURLQUlZSUFjb0FoQkJDRzFxTmdJWUlBZEJBRFlDRUVFQUlBQWdBeWdDQ0JFQUFFVU5BUm9nQUNnQzFBSkJBRW9FUUVFQUlRTURRQ0FISUFOQkFuUnFRUUEyQWhnZ0EwRUJhaUlESUFBb0F0UUNTQTBBQ3dzZ0IwRUFOZ0lVSUFjZ0FDZ0NtQUkyQWl3Z0FDZ0N1QU1OQUNBSFFRQTJBaWdMSUFjb0FpaEZCRUFnQkNBQU5nSW9JQVFnQUNnQ0dDSUNLQUlBSWdnMkFoZ2dCQ0FDS0FJRUlnWTJBaHdnQnlnQ0VDRURJQWNvQWd3aEJTQUVJQWNvQWlRMkFoQWdCQ0FIS1FJY053TUlJQVFnQnlrQ0ZEY0RBQ0FBS0FMd0FrRUFTZ1JBQTBBZ0FTQUxRUUowSWdwcUtBSUFJUXdnQnlBS2FpSUlLQUprSVFJQ2Z3SkFBbjhnQTBFSFRBUkFRUUFnQkVFWWFpQUZJQU5CQUJCcVJRMEhHaUFFS0FJZ0lRVkJBU0FFS0FJa0lnTkJDRWdOQVJvTElBSWdCU0FEUVFocmRVSC9BWEVpQmtFQ2RHb29BcEFCSWdrTkFVRUpDeUVKUVFBZ0JFRVlhaUFGSUFNZ0FpQUpFTjBCSWdKQkFFZ05CUm9nQkNnQ0lDRUZJQVFvQWlRTUFRc2dBaUFHYWtHUUNXb3RBQUFoQWlBRElBbHJDeUVESUFnb0Fvd0JJUWtDUUFKQUlBZ29BclFCSWcwRVFDQUNCSDhnQWlBRFNnUkFRUUFnQkVFWWFpQUZJQU1nQWhCcVJRMElHaUFFS0FJZ0lRVWdCQ2dDSkNFREN5QUNRUUowSWdaQndMc0NhaWdDQUNJSUlBVWdBeUFDYXlJRGRYRWlBa0VBSUFnZ0FpQUdRYnk3QW1vb0FnQktHMnNGUVFBTElRZ2dCQ0FBSUFwcUtBTDBBa0VDZEdvaUFrRUVhaUFDS0FJRUlBaHFJZ0kyQWdBZ0RDQUNPd0VBUVFFaENDQU5RUUpJRFFFRFFBSi9Ba0FDZnlBRFFRZE1CRUJCQUNBRVFSaHFJQVVnQTBFQUVHcEZEUXNhSUFRb0FpQWhCVUVCSUFRb0FpUWlBMEVJU0EwQkdnc2dDU0FGSUFOQkNHdDFRZjhCY1NJQ1FRSjBhaWdDa0FFaUJnMEJRUWtMSVFKQkFDQUVRUmhxSUFVZ0F5QUpJQUlRM1FFaUFrRUFTQTBKR2lBRUtBSWdJUVVnQkNnQ0pBd0JDeUFDSUFscVFaQUphaTBBQUNFQ0lBTWdCbXNMSVFNZ0FrRUVkaUVHQWtBZ0FrRVBjU0lDQkVBZ0FpQURTZ1JBUVFBZ0JFRVlhaUFGSUFNZ0FoQnFSUTBLR2lBRUtBSWdJUVVnQkNnQ0pDRURDeUFNSUFZZ0NHb2lCa0VDZEVIQXdnSnFLQUlBUVFGMGFpQUNRUUowSWdoQndMc0NhaWdDQUNJS0lBVWdBeUFDYXlJRGRYRWlBa0VBSUFvZ0FpQUlRYnk3QW1vb0FnQktHMnM3QVFBTUFRc2dCa0VQUncwRUlBaEJEMm9oQmdzZ0JrRUJhaUlJSUExSURRQUxJQVpCUGt3TkFRd0NDMEVCSVFnZ0FrVU5BQ0FDSUFOS0JIOUJBQ0FFUVJocUlBVWdBeUFDRUdwRkRRWWFJQVFvQWlBaEJTQUVLQUlrQlNBREN5QUNheUVEQ3dOQUFuOENRQUovSUFOQkIwd0VRRUVBSUFSQkdHb2dCU0FEUVFBUWFrVU5DUm9nQkNnQ0lDRUZRUUVnQkNnQ0pDSURRUWhJRFFFYUN5QUpJQVVnQTBFSWEzVkIvd0Z4SWdKQkFuUnFLQUtRQVNJR0RRRkJDUXNoQWtFQUlBUkJHR29nQlNBRElBa2dBaERkQVNJQ1FRQklEUWNhSUFRb0FpQWhCU0FFS0FJa0RBRUxJQUlnQ1dwQmtBbHFMUUFBSVFJZ0F5QUdhd3NoQXlBQ1FRUjJJUVlDUUNBQ1FROXhJZ0lFUUNBQ0lBTktCSDlCQUNBRVFSaHFJQVVnQXlBQ0VHcEZEUWdhSUFRb0FpQWhCU0FFS0FJa0JTQURDeUFDYXlFRERBRUxJQVpCRDBjaEFrRVBJUVlnQWcwQ0N5QUdJQWhxUVFGcUlnaEJ3QUJJRFFBTEN5QUxRUUZxSWdzZ0FDZ0M4QUpJRFFBTElBUW9BaHdoQmlBRUtBSVlJUWdnQUNnQ0dDRUNDeUFDSUFZMkFnUWdBaUFJTmdJQUlBY2dBellDRUNBSElBVTJBZ3dnQnlBRUtBSVFOZ0lrSUFjZ0JDa0RDRGNDSENBSElBUXBBd0EzQWhRTElBY2dCeWdDTEVFQmF6WUNMRUVCQ3lFR0lBUkJNR29rQUNBR0MrY0ZBUXQvSXdCQk1Hc2lBeVFBSUFBb0FxZ0RJUW9nQUNnQzFBTWhCQUovQWtBZ0FDZ0NtQUpGRFFBZ0JDZ0NMQTBBSUFBb0F0QURJZ1VnQlNnQ0dDQUVLQUlRUVFodGFqWUNHQ0FFUVFBMkFoQkJBQ0FBSUFVb0FnZ1JBQUJGRFFFYUlBQW9BdFFDUVFCS0JFQkJBQ0VGQTBBZ0JDQUZRUUowYWtFQU5nSVlJQVZCQVdvaUJTQUFLQUxVQWtnTkFBc0xJQVJCQURZQ0ZDQUVJQUFvQXBnQ05nSXNJQUFvQXJnRERRQWdCRUVBTmdJb0N5QUVLQUlvUlFSQUlBTWdBRFlDS0NBRElBQW9BaGdpQWlnQ0FDSUlOZ0lZSUFNZ0FpZ0NCQ0lHTmdJY0lBUW9BaEFoQlNBRUtBSU1JUWNnQXlBRUtBSWtOZ0lRSUFNZ0JDa0NIRGNEQ0NBRElBUXBBaFEzQXdBZ0FDZ0M4QUpCQUVvRVFFRUFJUWdEUUNBQklBaEJBblFpQW1vb0FnQWhDeUFFSUFBZ0FDQUNhaWdDOUFKQkFuUWlER29vQXRnQ0tBSVVRUUowYWlnQ01DRUNBbjhDUUFKL0lBVkJCMHdFUUVFQUlBTkJHR29nQnlBRlFRQVFha1VOQnhvZ0F5Z0NJQ0VIUVFFZ0F5Z0NKQ0lGUVFoSURRRWFDeUFDSUFjZ0JVRUlhM1ZCL3dGeElnWkJBblJxS0FLUUFTSUpEUUZCQ1FzaENVRUFJQU5CR0dvZ0J5QUZJQUlnQ1JEZEFTSUNRUUJJRFFVYUlBTW9BaUFoQnlBREtBSWtEQUVMSUFJZ0JtcEJrQWxxTFFBQUlRSWdCU0FKYXdzaEJTQUNCSDhnQWlBRlNnUkFRUUFnQTBFWWFpQUhJQVVnQWhCcVJRMEZHaUFES0FJZ0lRY2dBeWdDSkNFRkN5QUNRUUowSWdaQndMc0NhaWdDQUNJSklBY2dCU0FDYXlJRmRYRWlBa0VBSUFrZ0FpQUdRYnk3QW1vb0FnQktHMnNGUVFBTElRWWdBeUFNYWlJQ1FRUnFJQUlvQWdRZ0Jtb2lBallDQUNBTElBSWdDblE3QVFBZ0NFRUJhaUlJSUFBb0F2QUNTQTBBQ3lBREtBSWNJUVlnQXlnQ0dDRUlJQUFvQWhnaEFnc2dBaUFHTmdJRUlBSWdDRFlDQUNBRUlBVTJBaEFnQkNBSE5nSU1JQVFnQXlnQ0VEWUNKQ0FFSUFNcEF3ZzNBaHdnQkNBREtRTUFOd0lVQ3lBRUlBUW9BaXhCQVdzMkFpeEJBUXNoQmlBRFFUQnFKQUFnQmd1VkJnRU1meU1BUVNCcklnTWtBQ0FBS0FMVUF5RUVBbjhDUUNBQUtBS1lBa1VOQUNBRUtBSXNEUUFnQUNnQzBBTWlBaUFDS0FJWUlBUW9BaEJCQ0cxcU5nSVlJQVJCQURZQ0VFRUFJQUFnQWlnQ0NCRUFBRVVOQVJvZ0FDZ0MxQUpCQUVvRVFFRUFJUUlEUUNBRUlBSkJBblJxUVFBMkFoZ2dBa0VCYWlJQ0lBQW9BdFFDU0EwQUN3c2dCRUVBTmdJVUlBUWdBQ2dDbUFJMkFpd2dBQ2dDdUFNTkFDQUVRUUEyQWlnTElBUW9BaWhGQkVBQ1FDQUVLQUlVSWdJRVFDQUNRUUZySVFVTUFRc2dBeUFBTmdJWUlBTWdBQ2dDR0NJQ0tBSUFOZ0lJSUFNZ0FpZ0NCRFlDRENBRUtBSVFJUUlnQkNnQ0RDRUdBbjlCQUNBQUtBS2NBeUlJSUFBb0FxQURJZ3BLRFFBYUlBUW9Ba0FoQ1NBQktBSUFJUXNnQUNnQ3NBTWhEQ0FBS0FLb0F5RU5BMEFDZndKQUFuOGdBa0VIVEFSQVFRQWdBMEVJYWlBR0lBSkJBQkJxUlEwSUdpQURLQUlRSVFaQkFTQURLQUlVSWdKQkNFZ05BUm9MSUFrZ0JpQUNRUWhyZFVIL0FYRWlBVUVDZEdvb0FwQUJJZ1VOQVVFSkN5RUJRUUFnQTBFSWFpQUdJQUlnQ1NBQkVOMEJJZ0ZCQUVnTkJob2dBeWdDRUNFR0lBTW9BaFFNQVFzZ0FTQUpha0dRQ1dvdEFBQWhBU0FDSUFWckN5RUNJQUZCQkhZaEJ3SkFJQUZCRDNFaUJRUkFJQUlnQlVnRVFFRUFJQU5CQ0dvZ0JpQUNJQVVRYWtVTkJ4b2dBeWdDRUNFR0lBTW9BaFFoQWdzZ0N5QU1JQWNnQ0dvaUFVRUNkR29vQWdCQkFYUnFJQVZCQW5RaUIwSEF1d0pxS0FJQUlnZ2dCaUFDSUFWcklnSjFjU0lGUVFBZ0NDQUZJQWRCdkxzQ2FpZ0NBRW9iYXlBTmREc0JBQXdCQ3lBSFFROUhCRUJCQUNBQlFSQkpEUU1hSUFJZ0IwZ0VRRUVBSUFOQkNHb2dCaUFDSUFjUWFrVU5CeG9nQXlnQ0VDRUdJQU1vQWhRaEFnc2dCMEVDZEVIQXV3SnFLQUlBSUFZZ0FpQUhheUlDZFhGQmZ5QUhkRUYvYzJvTUF3c2dDRUVQYWlFQkN5QUJRUUZxSVFnZ0FTQUtTQTBBQzBFQUN5RUZJQUFvQWhnaUFDQURLQUlJTmdJQUlBQWdBeWdDRERZQ0JDQUVJQUkyQWhBZ0JDQUdOZ0lNQ3lBRUlBVTJBaFFMSUFRZ0JDZ0NMRUVCYXpZQ0xFRUJDeUVGSUFOQklHb2tBQ0FGQzZrREFRaC9Jd0JCSUdzaUJDUUFJQUFvQXRRRElRTUNRQUpBSUFBb0FwZ0NSUTBBSUFNb0Fpd05BQ0FBS0FMUUF5SUNJQUlvQWhnZ0F5Z0NFRUVJYldvMkFoZ2dBMEVBTmdJUUlBQWdBaWdDQ0JFQUFFVU5BU0FBS0FMVUFrRUFTZ1JBUVFBaEFnTkFJQU1nQWtFQ2RHcEJBRFlDR0NBQ1FRRnFJZ0lnQUNnQzFBSklEUUFMQ3lBRFFRQTJBaFFnQXlBQUtBS1lBallDTENBQUtBSzRBdzBBSUFOQkFEWUNLQXNnQkNBQU5nSVlJQVFnQUNnQ0dDSUZLQUlBSWdZMkFnZ2dCQ0FGS0FJRUlnYzJBZ3hCQVNFSklBTW9BaEFoQWlBREtBSU1JUWdnQUNnQzhBSkJBRW9FUUVFQklBQW9BcWdEZENFR1FRQWhCUU5BSUFKQkFFd0VRQ0FFUVFocUlBZ2dBa0VCRUdwRkJFQkJBQ0VKREFRTElBUW9BaEFoQ0NBRUtBSVVJUUlMSUFnZ0FrRUJheUlDZGtFQmNRUkFJQUVnQlVFQ2RHb29BZ0FpQnlBSEx3RUFJQVp5T3dFQUN5QUZRUUZxSWdVZ0FDZ0M4QUpJRFFBTElBUW9BZ3doQnlBRUtBSUlJUVlnQUNnQ0dDRUZDeUFGSUFjMkFnUWdCU0FHTmdJQUlBTWdBallDRUNBRElBZzJBZ3dnQXlBREtBSXNRUUZyTmdJc0N5QUVRU0JxSkFBZ0NRdTJDZ0VSZnlNQVFhQUNheUlESkFBZ0FDZ0MxQU1oQmdKQUFrQWdBQ2dDbUFKRkRRQWdCaWdDTEEwQUlBQW9BdEFESWdnZ0NDZ0NHQ0FHS0FJUVFRaHRhallDR0NBR1FRQTJBaEFnQUNBSUtBSUlFUUFBUlEwQklBQW9BdFFDUVFCS0JFQURRQ0FHSUFKQkFuUnFRUUEyQWhnZ0FrRUJhaUlDSUFBb0F0UUNTQTBBQ3dzZ0JrRUFOZ0lVSUFZZ0FDZ0NtQUkyQWl3Z0FDZ0N1QU1OQUNBR1FRQTJBaWdMQWtBZ0JpZ0NLRVVFUUNBQUtBS3dBeUVOSUFBb0FxQURJUXNnQUNnQ3FBTWhCQ0FESUFBMkFwZ0NJQU1nQUNnQ0dDSUlLQUlBTmdLSUFpQURJQWdvQWdRMkFvd0NRWDhnQkhRaERrRUJJQVIwSVF3Z0JpZ0NFQ0VDSUFBb0Fwd0RJUVFnQVNnQ0FDRUtJQVlvQWd3aEJRSi9Ba0FnQmlnQ0ZDSUlCRUFNQVFzZ0JpZ0NRQ0VQQTBBQ2Z3SkFBbjhnQWtFSFRBUkFJQU5CaUFKcUlBVWdBa0VBRUdwRkRRZ2dBeWdDa0FJaEJVRUJJQU1vQXBRQ0lnSkJDRWdOQVJvTElBOGdCU0FDUVFocmRVSC9BWEVpQVVFQ2RHb29BcEFCSWdnTkFVRUpDeUVCSUFOQmlBSnFJQVVnQWlBUElBRVEzUUVpQVVFQVNBMEdJQU1vQXBBQ0lRVWdBeWdDbEFJTUFRc2dBU0FQYWtHUUNXb3RBQUFoQVNBQ0lBaHJDeUVDSUFGQkJIWWhDUUpBQWtBQ1FBSkFBa0FnQVVFUGNRNENBZ0VBQ3lBQUtBSUFJZ0ZCK1FBMkFoUWdBRUYvSUFFb0FnUVJBZ0FMSUFKQkFFd0VRQ0FEUVlnQ2FpQUZJQUpCQVJCcVJRMElJQU1vQXBBQ0lRVWdBeWdDbEFJaEFnc2dEQ0FPSUFVZ0FrRUJheUlDZGtFQmNSc2hFQXdCQzBFQUlSQWdDVUVQUmcwQVFRRWdDWFFoQ0NBQlFSQkpEUU1nQWlBSlNBUkFJQU5CaUFKcUlBVWdBaUFKRUdwRkRRY2dBeWdDa0FJaEJTQURLQUtVQWlFQ0N5QUpRUUowUWNDN0Ftb29BZ0FnQlNBQ0lBbHJJZ0oxY1NBSWFpSUlEUU1NQVFzZ0JDQUxJQVFnQzBvYkloSkJBV29oQ0FKQUEwQUNRQ0FLSUEwZ0JDSUJRUUowYWlnQ0FFRUJkR29pQkM4QkFBUkFJQUpCQUV3RVFDQURRWWdDYWlBRklBSkJBUkJxUlEwS0lBTW9BcEFDSVFVZ0F5Z0NsQUloQWdzZ0JTQUNRUUZySWdKMlFRRnhSUTBCSUF3Z0JDNEJBQ0lSY1EwQklBUWdFU0FPSUF3Z0VVRUFTQnRxT3dFQURBRUxJQWxCQUV3TkFpQUpRUUZySVFrTElBRkJBV29oQkNBQklCSkhEUUFMSUFnaEFRc2dFQVJBSUFvZ0RTQUJRUUowYWlnQ0FDSUVRUUYwYWlBUU93RUFJQU1nQjBFQ2RHb2dCRFlDQUNBSFFRRnFJUWNMSUFGQkFXb2hCQ0FCSUF0SURRRUxDMEVBREFFTElBUWdDeUFFSUF0S0d5RUxBMEFDUUNBS0lBMGdCQ0lCUVFKMGFpZ0NBRUVCZEdvaUJDOEJBRVVOQUNBQ1FRQk1CRUFnQTBHSUFtb2dCU0FDUVFFUWFrVU5CU0FES0FLUUFpRUZJQU1vQXBRQ0lRSUxJQVVnQWtFQmF5SUNka0VCY1VVTkFDQU1JQVF1QVFBaUNYRU5BQ0FFSUFrZ0RpQU1JQWxCQUVnYmFqc0JBQXNnQVVFQmFpRUVJQUVnQzBjTkFBc2dDRUVCYXdzaEFTQUFLQUlZSWdBZ0F5Z0NpQUkyQWdBZ0FDQURLQUtNQWpZQ0JDQUdJQUUyQWhRZ0JpQUNOZ0lRSUFZZ0JUWUNEQXNnQmlBR0tBSXNRUUZyTmdJc1FRRWhCQXdCQ3lBSFJRUkFRUUFoQkF3QkN5QUhRUUZySVFBZ0IwRURjU0lCQkVCQkFDRUNBMEFnQ2lBRElBZEJBV3NpQjBFQ2RHb29BZ0JCQVhScVFRQTdBUUFnQWtFQmFpSUNJQUZIRFFBTEMwRUFJUVFnQUVFRFNRMEFBMEFnQ2lBSFFRSjBJQU5xSWdCQkJHc29BZ0JCQVhScVFRQTdBUUFnQ2lBQVFRaHJLQUlBUVFGMGFrRUFPd0VBSUFvZ0FFRU1heWdDQUVFQmRHcEJBRHNCQUNBS0lBTWdCMEVFYXlJSFFRSjBhaWdDQUVFQmRHcEJBRHNCQUNBSERRQUxDeUFEUWFBQ2FpUUFJQVFMelFzQkIzOGdBQ2dDbkFNaEFpQUFLQUxVQXlFRUFrQWdBQ2dDNEFFRVFDQUFLQUtnQXlFQkFrQUNRQUpBSUFKRkJFQWdBVVVOQVF3Q0N5QUJJQUpJRFFFZ0FTQUFLQUswQTBvTkFTQUFLQUxVQWtFQlJ3MEJDd0pBSUFBb0FxUURJZ0ZGQkVBZ0FDZ0NxQU1oQlF3QkN5QUJRUUZySWdVZ0FDZ0NxQU5IRFFFTElBVkJEa2dOQVFzZ0FDZ0NBQ0lCSUFJMkFoZ2dBVUVSTmdJVUlBQW9BZ0FnQUNnQ29BTTJBaHdnQUNnQ0FDQUFLQUtrQXpZQ0lDQUFLQUlBSUFBb0FxZ0ROZ0lrSUFBZ0FDZ0NBQ2dDQUJFQkFBc2dBQ2dDMUFJaUFrRUFTZ1JBQTBBZ0FDZ0NvQUVnQUNBSFFRSjBhaWdDMkFJb0FnUWlBMEVJZEdvaEJRSi9RUUFnQUNnQ25BTWlBVVVOQUJvZ0FTQUZLQUlBUVFCT0RRQWFJQUFvQWdBaUFTQUROZ0lZSUFGQjlnQTJBaFFnQUNnQ0FFRUFOZ0ljSUFCQmZ5QUFLQUlBS0FJRUVRSUFJQUFvQXB3REN5SUNJQUFvQXFBRFRBUkFBMEFnQUNnQ3BBTWdCU0FDUVFKMGFpSUdLQUlBSWdGQkFDQUJRUUJLRzBjRVFDQUFLQUlBSWdFZ0F6WUNHQ0FCUWZZQU5nSVVJQUFvQWdBZ0FqWUNIQ0FBUVg4Z0FDZ0NBQ2dDQkJFQ0FBc2dCaUFBS0FLb0F6WUNBQ0FDSUFBb0FxQURTQ0VCSUFKQkFXb2hBaUFCRFFBTEN5QUhRUUZxSWdjZ0FDZ0MxQUlpQWtnTkFBc0xJQVJCdXdGQnZBRWdBQ2dDbkFNaUJSdEJ2UUZCdmdFZ0JSc2dBQ2dDcEFNYk5nSUVBa0FnQWtFQVRBMEFRUUFoQWdOQUlBQWdBa0VDZENJR2FpZ0MyQUloQVFKQUlBVkZCRUFnQUNnQ3BBTU5BU0FBUVFFZ0FTZ0NGQ0lCSUFRZ0FVRUNkR3BCTUdvUWpBTU1BUXNnQUVFQUlBRW9BaGdpQVNBRUlBRkJBblJxSWdGQk1Hb1FqQU1nQkNBQktBSXdOZ0pBQ3lBRUlBWnFRUUEyQWhnZ0FrRUJhaUlDSUFBb0F0UUNUZzBCSUFBb0Fwd0RJUVVNQUFzQUN5QUVRUUEyQWhRTUFRc0NRQUpBSUFJTkFDQUFLQUtrQXcwQUlBQW9BcWdERFFBZ0FDZ0MzQUZGSUFBb0FxQURJZ0ZCUDBweERRRWdBU0FBS0FLMEEwWU5BUXNnQUNnQ0FDSUJRZjBBTmdJVUlBQkJmeUFCS0FJRUVRSUFDeUFFUWI4QlFjQUJJQUFvQXJRRFFUOUdHellDQkVFQUlRSWdBQ2dDMUFKQkFFb0VRQU5BSUFCQkFTQUFJQUpCQW5RaUJXb29BdGdDSWdZb0FoUWlBU0FFSUFGQkFuUnFRY1FBYWhDTUF5QUFLQUswQXdSQUlBQkJBQ0FHS0FJWUlnRWdCQ0FCUVFKMGFrSFVBR29RakFNTElBUWdCV3BCQURZQ0dDQUNRUUZxSWdJZ0FDZ0MxQUpJRFFBTEMwRUFJUVVnQUNnQzhBSkJBRXdOQUFOQUlBUWdCVUVDZENJQmFpSUdJQVFnQUNBQUlBRnFLQUwwQWtFQ2RHb29BdGdDSWdFb0FoUkJBblJxS0FKRU5nSmtJQVlnQkNBQktBSVlRUUowYWlnQ1ZEWUNqQUVDUUNBQktBSTBSUVJBUVFBaEFnd0JDeUFCS0FJa0lRTWdBU2dDS0NFQlFRRWhBZ0ovQWtBQ1FBSkFBa0FDUUFKQUFrQWdBQ2dDdEFNT01RZ0dCZ0FHQmdZR0FRWUdCZ1lHQmdJR0JnWUdCZ1lHQmdNR0JnWUdCZ1lHQmdZR0JBWUdCZ1lHQmdZR0JnWUdCZ1VHQzBFQklBRkJBV3NnQVVFRGEwRitTUnRCQTNSQkFTQURRUUZySUFOQkEydEJma2tiUVFKMGFrSHd0QUpxREFZTFFRSWdBVUVCYXlBQlFRUnJRWDFKRzBFTWJFRUNJQU5CQVdzZ0EwRUVhMEY5U1J0QkFuUnFRWUMxQW1vTUJRdEJBeUFCUVFGcklBRkJCV3RCZkVrYlFRUjBRUU1nQTBFQmF5QURRUVZyUVh4SkcwRUNkR3BCc0xVQ2Fnd0VDMEVFSUFGQkFXc2dBVUVHYTBGN1NSdEJGR3hCQkNBRFFRRnJJQU5CQm10QmUwa2JRUUowYWtId3RRSnFEQU1MUVFVZ0FVRUJheUFCUVFkclFYcEpHMEVZYkVFRklBTkJBV3NnQTBFSGEwRjZTUnRCQW5ScVFlQzJBbW9NQWd0QkJpQUJRUUZySUFGQkNHdEJlVWtiUVJ4c1FRWWdBMEVCYXlBRFFRaHJRWGxKRzBFQ2RHcEI4TGNDYWd3QkMwRUhJQUZCQVdzZ0FVRUphMEY0U1J0QkJYUkJCeUFEUVFGcklBTkJDV3RCZUVrYlFRSjBha0hBdVFKcUN5Z0NBRUVCYWlFQ0N5QUdJQUkyQXJRQklBVkJBV29pQlNBQUtBTHdBa2dOQUFzTElBUkJBRFlDS0NBRVFnQTNBZ3dnQkNBQUtBS1lBallDTEFzdEFRRi9JQUFvQXRBRElnRWdBU2dDR0NBQUtBTFVBeUlBUVJCcUtBSUFRUWh0YWpZQ0dDQUFRUUEyQWhBTHpBWUJEbjhnQUNnQzFBTWhCaUFBS0FLWUFnUkFJQVlnQmlnQ09DSURCSDhnQXdVZ0FCRE9BaUFHS0FJNEMwRUJhellDT0FzQ1FBSkFJQVlvQWhSQmYwWU5BQ0FBS0FMd0FrRUFUQTBBSUFBb0FyQURJUTRnQmtHOEFXb2hEd05BSUFFZ0NrRUNkQ0lEYWlnQ0FDRU5Ba0FnQUNBR0lBQWdBQ0FEYWlnQzlBSkJBblFpQTJvb0F0Z0NJZ3NvQWhRaUNFRUNkR29pREVFOGFpZ0NBQ0FESUFacUlnVkJLR29vQWdCcUlnSVFYMFVFUUNBRlFRQTJBaWdnQlNnQ0dDRUREQUVMUVFBaEIwRUFJUU1DUUNBQUlBSWdBQ0FDUVFGcUVGOGlDV3BCQW1vaUFoQmZJZ1JGRFFBZ0JDRURJQUFnRENnQ1BFRVVhaUlDRUY5RkRRQURRQ0FEUVFGMElnTkJnSUFDUmcwRklBQWdBa0VCYWlJQ0VGOE5BQXNMQWtBZ0EwRUJJQUFnQ0dvaUNDMEE2QUYwUVFGMVNBMEFJQWxCQW5RaEJFRUJJQWd0QVBnQmRFRUJkU0FEU0FSQUlBUkJER29oQnd3QkN5QUVRUVJxSVFjTElBVWdCellDS0FKQUlBTkJBa2tFUUNBRElRSU1BUXNnQWtFT2FpRUhJQU1oQWdOQUlBTkJBWFVpQkVFQUlBQWdCeEJmR3lBQ2NpRUNJQU5CQTBzaENDQUVJUU1nQ0EwQUN3c2dCU0FGS0FJWUlBSkJmM01nQWtFQmFpQUpHMm9pQXpZQ0dBc2dEU0FET3dFQUFrQWdBQ2dDdEFORkRRQWdBQ0FMS0FJWUlnTnFJUWtnQmlBRFFRSjBhaUVIUVFBaEF3TkFJQUFnQnlnQ2ZDQURJZ1JCQTJ4cUlnSVFYdzBCQTBBQ1FDQUVRUUZxSVFNZ0FDQUNRUUZxRUY4TkFDQUNRUU5xSVFJZ0F5SUVJQUFvQXJRRFNBMEJEQVlMQ3lBQUlBOFFYeUVMQWtBZ0FDQUNRUUpxSWdVUVh5SUNSUVJBUVFBaEJBd0JDd0pBSUFBZ0JSQmZSUTBBSUFKQkFYUWhBaUFBSUFjb0FueEJ2UUZCMlFFZ0JDQUpMUUNJQWtnYmFpSUZFRjlGRFFBRFFDQUNRUUYwSWdKQmdJQUNSZzBISUFBZ0JVRUJhaUlGRUY4TkFBc0xJQUpCQWtrRVFDQUNJUVFNQVFzZ0JVRU9haUVJSUFJaEJBTkFJQUpCQVhVaUJVRUFJQUFnQ0JCZkd5QUVjaUVFSUFKQkEwc2hEQ0FGSVFJZ0RBMEFDd3NnRFNBT0lBTkJBblJxS0FJQVFRRjBhaUFFUVg5eklBUkJBV29nQ3hzN0FRQWdBeUFBS0FLMEEwZ05BQXNMSUFwQkFXb2lDaUFBS0FMd0FrZ05BQXNMUVFFUEN5QUFLQUlBSWdGQjlRQTJBaFFnQUVGL0lBRW9BZ1FSQWdBZ0JrRi9OZ0lVUVFFTGp3TUJDbjhnQUNnQzFBTWhBeUFBS0FLWUFnUkFJQU1nQXlnQ09DSUNCSDhnQWdVZ0FCRE9BaUFES0FJNEMwRUJhellDT0FzQ1FDQURLQUlVUVg5R0RRQkJmeUFBS0FLb0F5SUNkQ0VGUVFFZ0FuUWhCaUFBS0FLZ0F5RUVJQUVvQWdBaEJ5QUFLQUt3QXlFSUlBQW9BdGdDS0FJWUlRSUNRQU5BSUFjZ0NDQUVRUUowYWlnQ0FFRUJkR292QVFBTkFTQUVRUUZySWdRTkFBdEJBQ0VFQ3lBRFFid0JhaUVLSUFBb0Fwd0RRUUZySVFFZ0F5QUNRUUowYWlFTEEwQWdDeWdDZkNBQlFRTnNhaUVDSUFFZ0JFNEVRQ0FBSUFJUVh3MENDd0pBQW44Q1FBTkFJQWNnQ0NBQlFRRnFJZ0ZCQW5ScUtBSUFRUUYwYWlJSkx3RUFCRUFnQUNBQ1FRSnFFRjlGRFFRZ0NTNEJBQ0lDUVFCT0RRSWdBaUFGYWd3REN5QUFJQUpCQVdvUVh3UkFJQVVnQmlBQUlBb1FYeHNNQXdzZ0FrRURhaUVDSUFFZ0FDZ0NvQU5JRFFBTElBQW9BZ0FpQVVIMUFEWUNGQ0FBUVg4Z0FTZ0NCQkVDQUNBRFFYODJBaFJCQVE4TElBSWdCbW9MSVFJZ0NTQUNPd0VBQ3lBQklBQW9BcUFEU0EwQUN3dEJBUXVOQVFFRWZ5QUFLQUxVQXlFQ0lBQW9BcGdDQkVBZ0FpQUNLQUk0SWdNRWZ5QURCU0FBRU00Q0lBSW9BamdMUVFGck5nSTRDeUFBS0FMd0FrRUFTZ1JBSUFKQnZBRnFJUU5CQVNBQUtBS29BM1FoQkVFQUlRSURRQ0FBSUFNUVh3UkFJQUVnQWtFQ2RHb29BZ0FpQlNBRkx3RUFJQVJ5T3dFQUN5QUNRUUZxSWdJZ0FDZ0M4QUpJRFFBTEMwRUJDOUFEQVF4L0lBQW9BdFFESVFNZ0FDZ0NtQUlFUUNBRElBTW9BamdpQkFSL0lBUUZJQUFRemdJZ0F5Z0NPQXRCQVdzMkFqZ0xBa0FDUUNBREtBSVVRWDlHRFFBZ0EwRzhBV29oQnlBQUtBS2NBMEVCYXlFRUlBQWdBQ2dDMkFJb0FoZ2lBbW9oQ0NBRElBSkJBblJxSVFZZ0FTZ0NBQ0VKSUFBb0FyQURJUW9EUUNBQUlBWW9BbndnQkNJQ1FRTnNhaUlCRUY4TkFRTkFBa0FnQWtFQmFpRUVJQUFnQVVFQmFoQmZEUUFnQVVFRGFpRUJJQVFpQWlBQUtBS2dBMGdOQVF3RUN3c2dBQ0FIRUY4aEN3SkFJQUFnQVVFQ2FpSUZFRjhpQVVVRVFFRUFJUUlNQVFzQ1FDQUFJQVVRWDBVTkFDQUJRUUYwSVFFZ0FDQUdLQUo4UWIwQlFka0JJQUlnQ0MwQWlBSklHMm9pQlJCZlJRMEFBMEFnQVVFQmRDSUJRWUNBQWtZTkJTQUFJQVZCQVdvaUJSQmZEUUFMQ3lBQlFRSkpCRUFnQVNFQ0RBRUxJQVZCRG1vaERDQUJJUUlEUUNBQlFRRjFJZ1ZCQUNBQUlBd1FYeHNnQW5JaEFpQUJRUU5MSVEwZ0JTRUJJQTBOQUFzTElBa2dDaUFFUVFKMGFpZ0NBRUVCZEdvZ0FrRi9jeUFDUVFGcUlBc2JJQUFvQXFnRGREc0JBQ0FFSUFBb0FxQURTQTBBQ3d0QkFROExJQUFvQWdBaUFVSDFBRFlDRkNBQVFYOGdBU2dDQkJFQ0FDQURRWDgyQWhSQkFRdjFBd0VMZnlBQUtBTFVBeUVFSUFBb0FwZ0NCRUFnQkNBRUtBSTRJZ0lFZnlBQ0JTQUFFTTRDSUFRb0FqZ0xRUUZyTmdJNEN3SkFJQVFvQWhSQmYwWU5BQ0FBS0FMd0FrRUFUQTBBQTBBZ0FTQUpRUUowSWdKcUtBSUFJUXNDUUNBQUlBUWdBQ0FBSUFKcUtBTDBBa0VDZENJQ2FpZ0MyQUlvQWhRaUJrRUNkR29pREVFOGFpZ0NBQ0FDSUFScUlnZEJLR29vQWdCcUlnTVFYMFVFUUNBSFFRQTJBaWdnQnlnQ0dDRUNEQUVMUVFBaENFRUFJUUlDUUNBQUlBTWdBQ0FEUVFGcUVGOGlDbXBCQW1vaUF4QmZJZ1ZGRFFBZ0JTRUNJQUFnRENnQ1BFRVVhaUlERUY5RkRRQURRQ0FDUVFGMElnSkJnSUFDUmdSQUlBQW9BZ0FpQVVIMUFEWUNGQ0FBUVg4Z0FTZ0NCQkVDQUNBRVFYODJBaFJCQVE4TElBQWdBMEVCYWlJREVGOE5BQXNMQWtBZ0FrRUJJQUFnQm1vaUJpMEE2QUYwUVFGMVNBMEFJQXBCQW5RaEJVRUJJQVl0QVBnQmRFRUJkU0FDU0FSQUlBVkJER29oQ0F3QkN5QUZRUVJxSVFnTElBY2dDRFlDS0FKQUlBSkJBa2tFUUNBQ0lRTU1BUXNnQTBFT2FpRUlJQUloQXdOQUlBSkJBWFVpQlVFQUlBQWdDQkJmR3lBRGNpRURJQUpCQTBzaEJpQUZJUUlnQmcwQUN3c2dCeUFIS0FJWUlBTkJmM01nQTBFQmFpQUtHMm9pQWpZQ0dBc2dDeUFDSUFBb0FxZ0RkRHNCQUNBSlFRRnFJZ2tnQUNnQzhBSklEUUFMQzBFQkM1Y0lBUWQvSUFBb0Fwd0RJUUlnQUNnQzFBTWhBd0pBSUFBb0F1QUJCRUFnQUNnQ29BTWhBUUpBQWtBQ1FDQUNSUVJBSUFGRkRRRU1BZ3NnQVNBQ1NBMEJJQUVnQUNnQ3RBTktEUUVnQUNnQzFBSkJBVWNOQVFzQ1FDQUFLQUtrQXlJQlJRUkFJQUFvQXFnRElRUU1BUXNnQVVFQmF5SUVJQUFvQXFnRFJ3MEJDeUFFUVE1SURRRUxJQUFvQWdBaUFTQUNOZ0lZSUFGQkVUWUNGQ0FBS0FJQUlBQW9BcUFETmdJY0lBQW9BZ0FnQUNnQ3BBTTJBaUFnQUNnQ0FDQUFLQUtvQXpZQ0pDQUFJQUFvQWdBb0FnQVJBUUFMSUFBb0F0UUNJZ0pCQUVvRVFBTkFJQUFvQXFBQklBQWdCa0VDZEdvb0F0Z0NLQUlFSWdSQkNIUnFJUVVDZjBFQUlBQW9BcHdESWdGRkRRQWFJQUVnQlNnQ0FFRUFUZzBBR2lBQUtBSUFJZ0VnQkRZQ0dDQUJRZllBTmdJVUlBQW9BZ0JCQURZQ0hDQUFRWDhnQUNnQ0FDZ0NCQkVDQUNBQUtBS2NBd3NpQWlBQUtBS2dBMHdFUUFOQUlBQW9BcVFESUFVZ0FrRUNkR29pQnlnQ0FDSUJRUUFnQVVFQVNodEhCRUFnQUNnQ0FDSUJJQVEyQWhnZ0FVSDJBRFlDRkNBQUtBSUFJQUkyQWh3Z0FFRi9JQUFvQWdBb0FnUVJBZ0FMSUFjZ0FDZ0NxQU0yQWdBZ0FpQUFLQUtnQTBnaEFTQUNRUUZxSVFJZ0FRMEFDd3NnQmtFQmFpSUdJQUFvQXRRQ0lnSklEUUFMQ3lBQUtBS2NBeUVCSUFBb0FxUURSUVJBSUFGRkJFQWdBMEcwQVRZQ0JBd0RDeUFEUWJVQk5nSUVEQUlMSUFGRkJFQWdBMEcyQVRZQ0JBd0NDeUFEUWJjQk5nSUVEQUVMQWtBQ1FDQUNEUUFnQUNnQ3BBTU5BQ0FBS0FLb0F3MEFJQUFvQXFBRElnRkJQMG9OQVNBQklBQW9BclFEUmcwQkN5QUFLQUlBSWdGQi9RQTJBaFFnQUVGL0lBRW9BZ1FSQWdBTElBTkJ1QUUyQWdRZ0FDZ0MxQUloQWdzZ0FrRUFTZ1JBUVFBaEJBTkFJQUFnQkVFQ2RDSUhhaWdDMkFJaEJRSkFBa0FnQUNnQzRBRUVRQ0FBS0FLY0F3MEJJQUFvQXFRRERRSUxJQVVvQWhRaUFrRVFUd1JBSUFBb0FnQWlBU0FDTmdJWUlBRkJNallDRkNBQUlBQW9BZ0FvQWdBUkFRQUxJQU1nQWtFQ2RHb2lBVUU4YWlnQ0FDSUNSUVJBSUFFZ0FFRUJRY0FBSUFBb0FnUW9BZ0FSQkFBaUFqWUNQQXNnQWtJQU53QUFJQUpDQURjQU9DQUNRZ0EzQURBZ0FrSUFOd0FvSUFKQ0FEY0FJQ0FDUWdBM0FCZ2dBa0lBTndBUUlBSkNBRGNBQ0NBRElBZHFJZ0ZCQURZQ0tDQUJRUUEyQWhnZ0FDZ0M0QUZGQkVBZ0FDZ0N0QU1OQVF3Q0N5QUFLQUtjQTBVTkFRc2dCU2dDR0NJQ1FSQlBCRUFnQUNnQ0FDSUJJQUkyQWhnZ0FVRXlOZ0lVSUFBZ0FDZ0NBQ2dDQUJFQkFBc2dBeUFDUVFKMGFpSUJRZndBYWlnQ0FDSUNSUVJBSUFFZ0FFRUJRWUFDSUFBb0FnUW9BZ0FSQkFBaUFqWUNmQXNnQWtFQVFZQUNFRG9hQ3lBRVFRRnFJZ1FnQUNnQzFBSklEUUFMQ3lBRFFYQTJBaFFnQTBJQU53SU1JQU1nQUNnQ21BSTJBamdMcXcwQ0NuOEJmQ0FBS0FJa1FRQktCRUFnQUNnQzJBTWhDaUFBS0FMWUFTRUhBMEFnQVNFR0lBSWhCQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FIS0FJb0lBY29BaVFpQ0VFSWRHb2lBMEdERUV3RVFDQURRWUVJVEFSQUFrQWdBMEdCQkdzT0JCY0RJaDRBQzBHUUFTRUJRUUFoQWdKQUlBTkJnUUpyRGdJbUh3QUxJQU5CZ3dackRnUURJU0VjSVFzZ0EwR0NERXdFUUFKQUlBTkJnZ2hyRGdjV0lnVWlJaUljQUFzZ0EwR0ZDbXNPQmdVaElTRWhHaUVMQWtBZ0EwR0RER3NPQ2hRaElRWWhJU0VoSVJrQUN5QURRWWNPYXc0SUJpQWdJQ0FnSUJjZ0N5QURRWVVZVEFSQUlBTkJoQlJNQkVBZ0EwR0VFR3NPRFJNaElTRWZJU0VoSVNFaElSY2dDeUFEUVlVVWF3NEdFU0FnSUNBSENBc2dBMEdHSEV3RVFDQURRWVlZYXc0SEVDQWdJQ0FnQ1FvTEFrQWdBMEdISEdzT0NBOGdJQ0FnSUNBTEFBc2dBMEdJSUdzT0NRMGZIeDhmSHg4ZkRBc0xRWkVCSVFGQkFDRUNEQ0lMUVpJQklRRU1JUXRCa3dFaEFVRUFJUUlNSUF0QmxBRWhBVUVBSVFJTUh3dEJsUUVoQVVFQUlRSU1IZ3RCbGdFaEFVRUFJUUlNSFF0Qmx3RWhBVUVBSVFJTUhBc2dBMEdMRmtjTkYwR1lBU0VCUVFBaEFnd2JDMEdaQVNFQlFRQWhBZ3dhQ3lBRFFZMGFSdzBWUVpvQklRRkJBQ0VDREJrTFFac0JJUUZCQUNFQ0RCZ0xJQU5Cang1SERSTkJuQUVoQVVFQUlRSU1Gd3RCblFFaEFVRUFJUUlNRmd0Qm5nRWhBVUVBSVFJTUZRdEJud0VoQVVFQUlRSU1GQXRCb0FFaEFVRUFJUUlNRXd0Qm9RRWhBVUVBSVFJTUVndEJvZ0VoQVVFQUlRSU1FUXRCb3dFaEFVRUFJUUlNRUF0QnBBRWhBVUVBSVFJTUR3dEJwUUVoQVVFQUlRSU1EZ3RCcGdFaEFVRUFJUUlNRFF0QnB3RWhBVUVBSVFJTURBdEJxQUVoQVVFQUlRSU1Dd3RCcVFFaEFVRUFJUUlNQ2d0QnFnRWhBVUVBSVFJTUNRdEJxd0VoQVF3SUMwR3NBU0VCUVFBaEFnd0hDMEd0QVNFQkRBWUxJQUFvQWtnaUFrRURTUTBDSUFBb0FnQWlBVUV4TmdJVUlBQWdBU2dDQUJFQkFBd0RDeUFEUVlrU1JnMERDeUFBS0FJQUlnRWdDRFlDR0NBQlFRYzJBaFFnQUNnQ0FDQUhLQUlvTmdJY0lBQWdBQ2dDQUNnQ0FCRUJBQXdCQ3lBQ1FRSjBRZUMwQW1vb0FnQWhBUXdDQ3lBR0lRRWdCQ0VDREFFTFFhNEJJUUZCQUNFQ0N5QUtJQWxCQW5ScUlnUWdBVFlDQkFKQUlBY29BalJGRFFBZ0JDZ0NMQ0FDUmcwQUlBY29BbEFpQTBVTkFDQUVJQUkyQWl3Q1FBSkFBa0FDUUNBQ0RnTUFBUUlEQ3lBSEtBSlVJUVpCQUNFRkEwQWdCaUFGUVFKMGFpQURJQVZCQVhScUx3RUFOZ0lBSUFZZ0JVRUJjaUlFUVFKMGFpQURJQVJCQVhScUx3RUFOZ0lBSUFZZ0JVRUNjaUlFUVFKMGFpQURJQVJCQVhScUx3RUFOZ0lBSUFZZ0JVRURjaUlFUVFKMGFpQURJQVJCQVhScUx3RUFOZ0lBSUFWQkJHb2lCVUhBQUVjTkFBc01Bd3NnQnlnQ1ZDRUdRUUFoQlFOQUlBWWdCVUVDZEdvZ0JVRUJkQ0lFUWFDekFtb3VBUUFnQXlBRWFpOEJBR3hCZ0JCcVFReDFOZ0lBSUFZZ0JVRUJjaUlFUVFKMGFpQUVRUUYwSWdSQm9MTUNhaTRCQUNBRElBUnFMd0VBYkVHQUVHcEJESFUyQWdBZ0JVRUNhaUlGUWNBQVJ3MEFDd3dDQ3lBSEtBSlVJUWhCQUNFR1FRQWhCUU5BSUFnZ0JVRUNkR29nQmtFRGRFR2d0QUpxS3dNQUlnc2dBeUFGUVFGMGFpOEJBTGlpUkFBQUFBQUFBTUEvb3JZNEFnQWdDQ0FGUVFGeUlnUkJBblJxSUFzZ0F5QUVRUUYwYWk4QkFMaWlSTzloU0xGUU1mWS9va1FBQUFBQUFBREFQNksyT0FJQUlBZ2dCVUVDY2lJRVFRSjBhaUFMSUFNZ0JFRUJkR292QVFDNG9rVEtiMDJScnVmMFA2SkVBQUFBQUFBQXdEK2l0amdDQUNBSUlBVkJBM0lpQkVFQ2RHb2dDeUFESUFSQkFYUnFMd0VBdUtKRXFoRnM3MkxROGoraVJBQUFBQUFBQU1BL29yWTRBZ0FnQ0NBRlFRUnlJZ1JCQW5ScUlBc2dBeUFFUVFGMGFpOEJBTGlpUkFBQUFBQUFBTUEvb3JZNEFnQWdDQ0FGUVFWeUlnUkJBblJxSUFzZ0F5QUVRUUYwYWk4QkFMaWlSRHUvcDhCcEpPay9va1FBQUFBQUFBREFQNksyT0FJQUlBZ2dCVUVHY2lJRVFRSjBhaUFMSUFNZ0JFRUJkR292QVFDNG9rUzdJTWQ3ZWxIaFA2SkVBQUFBQUFBQXdEK2l0amdDQUNBSUlBVkJCM0lpQkVFQ2RHb2dDeUFESUFSQkFYUnFMd0VBdUtKRVhhdHkzbFdvMFQraVJBQUFBQUFBQU1BL29yWTRBZ0FnQlVFSWFpRUZJQVpCQVdvaUJrRUlSdzBBQ3d3QkN5QUFLQUlBSWdSQk1UWUNGQ0FBSUFRb0FnQVJBUUFMSUFkQjJBQnFJUWNnQ1VFQmFpSUpJQUFvQWlSSURRQUxDd3VuQWdFSmZ5QUVRUUJLQkVBZ0FDZ0NjQ0lKUVh4eElRc2dDVUVEY1NFS0lBQW9BaVFpQmtFQVRDRU1JQWxCQVd0QkEwa2hEUU5BUVFBaENDQU1SUVJBQTBBQ1FDQUpSUTBBSUFFZ0NFRUNkR29vQWdBZ0FrRUNkR29vQWdBaEFDQURLQUlBSUFocUlRVkJBQ0VISUExRkJFQURRQ0FGSUFBdEFBQTZBQUFnQlNBR2FpSUZJQUF0QUFFNkFBQWdCU0FHYWlJRklBQXRBQUk2QUFBZ0JTQUdhaUlGSUFBdEFBTTZBQUFnQUVFRWFpRUFJQVVnQm1vaEJTQUhRUVJxSWdjZ0MwY05BQXNMUVFBaEJ5QUtSUTBBQTBBZ0JTQUFMUUFBT2dBQUlBVWdCbW9oQlNBQVFRRnFJUUFnQjBFQmFpSUhJQXBIRFFBTEN5QUlRUUZxSWdnZ0JrY05BQXNMSUFOQkJHb2hBeUFDUVFGcUlRSWdCRUVCU2lFQUlBUkJBV3NoQkNBQURRQUxDd3ZBQWdFT2Z5QUVRUUJLQkVBZ0FDZ0MwQUloQlNBQUtBSndJUWNnQUNnQzRBTWlBQ2dDRkNFS0lBQW9BaEFoQ3lBQUtBSU1JUXdnQUNnQ0NDRU5BMEFnQkNFSUlBY0VRQ0FDUVFKMElnQWdBU2dDREdvb0FnQWhEaUFCS0FJSUlBQnFLQUlBSVE4Z0FTZ0NCQ0FBYWlnQ0FDRVFJQUVvQWdBZ0FHb29BZ0FoRVNBREtBSUFJUVJCQUNFQUEwQWdBQ0FRYWkwQUFDRUdJQVFnQlNBQUlCRnFMUUFBUWY4QmN5SUpJQTBnQUNBUGFpMEFBRUVDZENJU2FpZ0NBR3RxTFFBQU9nQUFJQVFnQlNBSklBc2dFbW9vQWdBZ0NpQUdRUUowSWdacUtBSUFha0VRZFd0cUxRQUFPZ0FCSUFRZ0JTQUpJQVlnREdvb0FnQnJhaTBBQURvQUFpQUVJQUFnRG1vdEFBQTZBQU1nQkVFRWFpRUVJQUJCQVdvaUFDQUhSdzBBQ3dzZ0EwRUVhaUVESUFKQkFXb2hBaUFJUVFGcklRUWdDRUVDVGcwQUN3c0w4UUlCQzM4Z0JFRUFTZ1JBSUFBb0FuQWlDRUYrY1NFT0lBaEJBWEVoRHdOQUlBUWhEQUpBSUFoRkRRQWdBa0VDZENJQUlBRW9BZ2hxS0FJQUlRWWdBU2dDQkNBQWFpZ0NBQ0VKSUFFb0FnQWdBR29vQWdBaEJ5QURLQUlBSVFSQkFDRUFRUUFoRFNBSVFRRkhCRUFEUUNBQUlBZHFMUUFBSVFvZ0FDQUdhaTBBQUNFTElBUWdBQ0FKYWkwQUFDSUZPZ0FCSUFRZ0JTQUxha0dBQVhNNkFBSWdCQ0FGSUFwcVFZQUJjem9BQUNBSElBQkJBWElpQldvdEFBQWhDaUFGSUFacUxRQUFJUXNnQkNBRklBbHFMUUFBSWdVNkFBUWdCQ0FGSUF0cVFZQUJjem9BQlNBRUlBVWdDbXBCZ0FGek9nQURJQUJCQW1vaEFDQUVRUVpxSVFRZ0RVRUNhaUlOSUE1SERRQUxDeUFQUlEwQUlBQWdCMm90QUFBaEJ5QUFJQVpxTFFBQUlRWWdCQ0FBSUFscUxRQUFJZ0E2QUFFZ0JDQUFJQVpxUVlBQmN6b0FBaUFFSUFBZ0IycEJnQUZ6T2dBQUN5QURRUVJxSVFNZ0FrRUJhaUVDSUF4QkFXc2hCQ0FNUVFKT0RRQUxDd3VwQWdFSmZ5QUVRUUJLQkVBZ0FDZ0NjQ0lGUVg1eElRd2dCVUVCY1NFTkEwQWdCQ0VKQWtBZ0JVVU5BQ0FDUVFKMElnQWdBU2dDQ0dvb0FnQWhCaUFCS0FJRUlBQnFLQUlBSVFjZ0FTZ0NBQ0FBYWlnQ0FDRUlJQU1vQWdBaEJFRUFJUUJCQUNFS0lBVkJBVWNFUUFOQUlBUWdBQ0FJYWkwQUFEb0FBQ0FFSUFBZ0Iyb3RBQUE2QUFFZ0JDQUFJQVpxTFFBQU9nQUNJQVFnQ0NBQVFRRnlJZ3RxTFFBQU9nQURJQVFnQnlBTGFpMEFBRG9BQkNBRUlBWWdDMm90QUFBNkFBVWdBRUVDYWlFQUlBUkJCbW9oQkNBS1FRSnFJZ29nREVjTkFBc0xJQTFGRFFBZ0JDQUFJQWhxTFFBQU9nQUFJQVFnQUNBSGFpMEFBRG9BQVNBRUlBQWdCbW90QUFBNkFBSUxJQU5CQkdvaEF5QUNRUUZxSVFJZ0NVRUJheUVFSUFsQkFrNE5BQXNMQzZJQ0FRMS9JQVJCQUVvRVFDQUFLQUxRQWlFRklBQW9BbkFoQnlBQUtBTGdBeUlBS0FJVUlRb2dBQ2dDRUNFTElBQW9BZ3doRENBQUtBSUlJUTBEUUNBRUlRZ2dCd1JBSUFKQkFuUWlBQ0FCS0FJSWFpZ0NBQ0VPSUFFb0FnUWdBR29vQWdBaER5QUJLQUlBSUFCcUtBSUFJUkFnQXlnQ0FDRUVRUUFoQUFOQUlBQWdEMm90QUFBaEJpQUVJQVVnQUNBUWFpMEFBQ0lKSUEwZ0FDQU9haTBBQUVFQ2RDSVJhaWdDQUdwcUxRQUFPZ0FBSUFRZ0JTQUpJQXNnRVdvb0FnQWdDaUFHUVFKMElnWnFLQUlBYWtFUWRXcHFMUUFBT2dBQklBUWdCU0FKSUFZZ0RHb29BZ0JxYWkwQUFEb0FBaUFFUVFOcUlRUWdBRUVCYWlJQUlBZEhEUUFMQ3lBRFFRUnFJUU1nQWtFQmFpRUNJQWhCQVdzaEJDQUlRUUpPRFFBTEN3dldBZ0VKZnlBRVFRQktCRUFnQUNnQ2NDSUlRWHh4SVF3Z0NFRURjU0VKSUFoQkFXdEJBMGtoRFFOQUlBUWhDZ0pBSUFoRkRRQWdBU2dDQUNBQ1FRSjBhaWdDQUNFR0lBTW9BZ0FoQkVFQUlRdEJBQ0VBUVFBaEJ5QU5SUVJBQTBBZ0JDQUFJQVpxTFFBQUlnVTZBQUVnQkNBRk9nQUNJQVFnQlRvQUFDQUVJQVlnQUVFQmNtb3RBQUFpQlRvQUJDQUVJQVU2QUFVZ0JDQUZPZ0FESUFRZ0JpQUFRUUp5YWkwQUFDSUZPZ0FISUFRZ0JUb0FDQ0FFSUFVNkFBWWdCQ0FHSUFCQkEzSnFMUUFBSWdVNkFBb2dCQ0FGT2dBTElBUWdCVG9BQ1NBQVFRUnFJUUFnQkVFTWFpRUVJQWRCQkdvaUJ5QU1SdzBBQ3dzZ0NVVU5BQU5BSUFRZ0FDQUdhaTBBQUNJSE9nQUJJQVFnQnpvQUFpQUVJQWM2QUFBZ0FFRUJhaUVBSUFSQkEyb2hCQ0FMUVFGcUlnc2dDVWNOQUFzTElBTkJCR29oQXlBQ1FRRnFJUUlnQ2tFQmF5RUVJQXBCQWs0TkFBc0xDK29CQVFkL0lBUkJBRW9FUUNBQUtBSndJUWNnQUNnQzRBTW9BaGdoQlFOQUlBUWhBQ0FIQkVBZ0FrRUNkQ0lFSUFFb0FnaHFLQUlBSVFnZ0FTZ0NCQ0FFYWlnQ0FDRUpJQUVvQWdBZ0JHb29BZ0FoQ2lBREtBSUFJUXRCQUNFRUEwQWdCQ0FMYWlBRklBUWdDV290QUFBaUJrRUNkR3BCZ0FocUtBSUFJQVVnQmtHQUFXb2lCaUFFSUFwcUxRQUFha0gvQVhGQkFuUnFLQUlBYWlBRklBWWdCQ0FJYWkwQUFHcEIvd0Z4UVFKMGFrR0FFR29vQWdCcVFSQjJPZ0FBSUFSQkFXb2lCQ0FIUncwQUN3c2dBMEVFYWlFRElBSkJBV29oQWlBQVFRRnJJUVFnQUVFQ1RnMEFDd3NMMUFFQkJuOGdCRUVBU2dSQUlBQW9BbkFoQmlBQUtBTGdBeWdDR0NFRkEwQWdCQ0VBSUFZRVFDQUNRUUowSWdRZ0FTZ0NDR29vQWdBaEJ5QUJLQUlFSUFScUtBSUFJUWdnQVNnQ0FDQUVhaWdDQUNFSklBTW9BZ0FoQ2tFQUlRUURRQ0FFSUFwcUlBVWdCQ0FIYWkwQUFFRUNkR3BCZ0JCcUtBSUFJQVVnQkNBSWFpMEFBRUVDZEdwQmdBaHFLQUlBSUFVZ0JDQUphaTBBQUVFQ2RHb29BZ0JxYWtFUWRqb0FBQ0FFUVFGcUlnUWdCa2NOQUFzTElBTkJCR29oQXlBQ1FRRnFJUUlnQUVFQmF5RUVJQUJCQWs0TkFBc0xDeGNBSUFFb0FnQWdBaUFEUVFBZ0JDQUFLQUp3RUlrREM2Y0tBUTEvSXdCQkVHc2lBaVFBQWtBZ0FDZ0NHQ0lHS0FJRUlnUkZCRUFnQUNBR0tBSU1FUUFBUlFSQVFRQWhCQXdDQ3lBR0tBSUVJUVFMSUFZb0FnQWlBUzBBQUNFRklBUkJBV3NpQkFSL0lBRkJBV29GSUFBZ0JpZ0NEQkVBQUVVRVFFRUFJUVFNQWdzZ0JpZ0NCQ0VFSUFZb0FnQUxJZ0ZCQVdvaENDQUVRUUZySVFSQkRrRUFJQUV0QUFBZ0JVRUlkSElpQVVFQ2F5SUZJQUVnQlVrYklBRkJEMHNiSWdFRVFBTkFJQVJGQkVBZ0FDQUdLQUlNRVFBQVJRUkFRUUFoQkF3RUN5QUdLQUlBSVFnZ0JpZ0NCQ0VFQ3lBQ1FRSnFJQU5xSUFndEFBQTZBQUFnQ0VFQmFpRUlJQVJCQVdzaEJDQURRUUZxSWdNZ0FVY05BQXNMSUFVZ0FXc2hEQUpBQWtBQ1FDQUFLQUs0QXlJRFFlQUJheUlIQkVBZ0IwRU9SZ1JBREFJRkRBTUxBQXNnQVNBTWFpRUZBa0FDUUFKQUFrQWdBVUVPVHdSQUlBSXRBQUpCeWdCSERRSWdBaTBBQTBIR0FFY05BU0FDTFFBRVFja0FSdzBCSUFJdEFBVkJ4Z0JIRFFFZ0FpMEFCZzBCSUFCQkFUWUNuQUlnQUNBQ0xRQUhJZ0U2QUtBQ0lBQWdBaTBBQ0NJSE9nQ2hBaUFBSUFJdEFBa2lDVG9Bb2dJZ0FDQUNMd0FLSWdOQkNIUWdBMEVJZG5JaUNqc0JwQUlnQUNBQ0x3QU1JZ05CQ0hRZ0EwRUlkbklpQ3pzQnBnSWdBVUVCYTBIL0FYRkJBazhFUUNBQUtBSUFJZ01nQVRZQ0dDQURRZm9BTmdJVUlBQW9BZ0FnQUMwQW9RSTJBaHdnQUVGL0lBQW9BZ0FvQWdRUkFnQWdBQzBBb2dJaENTQUFMd0dtQWlFTElBQXZBYVFDSVFvZ0FDMEFvUUloQnlBQUxRQ2dBaUVCQ3lBQUtBSUFJZ01nQVRZQ0dDQURRZGtBTmdJVUlBTWdDVFlDS0NBRElBdEIvLzhEY1RZQ0pDQURJQXBCLy84RGNUWUNJQ0FESUFjMkFod2dBRUVCSUFNb0FnUVJBZ0FnQWkwQUR5SURJQUl0QUE0aUFYSUVRQ0FBS0FJQUlnRkIzQUEyQWhRZ0FTQUNMUUFPTmdJWUlBQW9BZ0FnQWkwQUR6WUNIQ0FBUVFFZ0FDZ0NBQ2dDQkJFQ0FDQUNMUUFQSVFNZ0FpMEFEaUVCQ3lBRlFRNXJJZ1VnQVNBRGJFRURiRVlOQkNBQUtBSUFJZ0VnQlRZQ0dDQUJRZG9BTmdJVURBTUxJQUZCQmtrTkFTQUNMUUFDUWNvQVJ3MEJDeUFDTFFBRFFjWUFSdzBBSUFJdEFBUkIyQUJIRFFBZ0FpMEFCVUhZQUVjTkFDQUNMUUFHRFFBQ1FBSkFBa0FDUUNBQ0xRQUhRUkJyRGdRQUFRTUNBd3NnQUNnQ0FDSUJJQVUyQWhnZ0FVSHVBRFlDRkF3RUN5QUFLQUlBSWdFZ0JUWUNHQ0FCUWU4QU5nSVVEQU1MSUFBb0FnQWlBU0FGTmdJWUlBRkI4QUEyQWhRTUFnc2dBQ2dDQUNJQlFkc0FOZ0lVSUFFZ0FpMEFCellDR0NBQUtBSUFJQVUyQWh3TUFRc2dBQ2dDQUNJQklBVTJBaGdnQVVIUEFEWUNGQXNnQUVFQklBQW9BZ0FvQWdRUkFnQUxEQUlMQWtBZ0FVRU1TUTBBSUFJdEFBSkJ3UUJIRFFBZ0FpMEFBMEhrQUVjTkFDQUNMUUFFUWU4QVJ3MEFJQUl0QUFWQjRnQkhEUUFnQWkwQUJrSGxBRWNOQUNBQ0xRQUlJUU1nQWkwQUJ5RUhJQUl0QUFvaENTQUNMUUFKSVFvZ0FpMEFEQ0VMSUFJdEFBc2hEU0FDTFFBTklRVWdBQ2dDQUNJQlFjNEFOZ0lVSUFFZ0JUWUNKQ0FCSUFzZ0RVRUlkSEkyQWlBZ0FTQUpJQXBCQ0hSeU5nSWNJQUVnQXlBSFFRaDBjallDR0NBQVFRRWdBU2dDQkJFQ0FDQUFJQVU2QUt3Q0lBQkJBVFlDcUFJTUFnc2dBQ2dDQUNJQklBVTJBaGdnQVVIUUFEWUNGQ0FBUVFFZ0FDZ0NBQ2dDQkJFQ0FBd0JDeUFBS0FJQUlnRWdBellDR0NBQlFjWUFOZ0lVSUFBZ0FDZ0NBQ2dDQUJFQkFBc2dCaUFFTmdJRUlBWWdDRFlDQUVFQklRUWdERUVBVEEwQUlBQWdEQ0FBS0FJWUtBSVFFUUlBQ3lBQ1FSQnFKQUFnQkFzMkFDQUFRUUEyQXRnQklBQkJBRFlDdUFNZ0FFRUFOZ0tRQVNBQUtBTFFBeUlBUVFBMkFxUUJJQUJCQURZQ0dDQUFRZ0EzQWd3TGl6c0JEMzhqQUVHZ0Ftc2lDU1FBSUFBb0FyZ0RJUUVEUUFKQUFrQUNRQ0FCRFFBZ0FDZ0MwQU1vQWd4RkJFQWdBQ2dDR0NJQ0tBSUVJZ0ZGQkVBZ0FDQUNLQUlNRVFBQVJRUkFRUUFoQVF3RUN5QUNLQUlFSVFFTElBSW9BZ0FpQXkwQUFDRUZJQUZCQVdzaUJBUi9JQU5CQVdvRklBQWdBaWdDREJFQUFFVUVRRUVBSVFFTUJBc2dBaWdDQkNFRUlBSW9BZ0FMSWdGQkFXb2hBeUFGUWY4QlJpQUJMUUFBSWdGQjJBRkdjVVVFUUNBQUtBSUFJZ1lnQlRZQ0dDQUdRVGMyQWhRZ0FDZ0NBQ0FCTmdJY0lBQWdBQ2dDQUNnQ0FCRUJBQXNnQUNBQk5nSzRBeUFDSUFSQkFXczJBZ1FnQWlBRE5nSUFEQUVMSUFBUTN3TkZCRUJCQUNFQkRBSUxJQUFvQXJnRElRRUxBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUNBQlFRRnJEdjRCRHhFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFU0FRSUZDUVVGQlFVREJBVUlCUVVGRHc4UER3OFBEdzhBQndZS0VBc1JFUTBORFEwTkRRME5EUTBORFEwTkRRMFJFUkVSRVJFUkVRd1JFUkVSRVE0UkN5QUFLQUlBSWdKQjZBQTJBaFFnQUVFQklBSW9BZ1FSQWdBZ0FDZ0MwQU1pQVNnQ0RBUkFJQUFvQWdBaUFrSEFBRFlDRkNBQUlBSW9BZ0FSQVFBZ0FDZ0MwQU1oQVFzZ0FFSUFOd0RvQVNBQVFnQTNBUEFCSUFCQ2dZS0VpSkNnd0lBQk53Q0FBaUFBUW9HQ2hJaVFvTUNBQVRjQStBRWdBRUtGaXBTbzBLREJnZ1UzQUpBQ0lBQkNoWXFVcU5DZ3dZSUZOd0NJQWlBQVFnQTNBN0FDSUFCQkFEWUNLQ0FBUWdBM0E1Z0NJQUJCQURvQXJBSWdBRUtCZ0FRM0FxUUNJQUJCQURvQW9nSWdBRUdCQWpzQm9BSWdBVUVCTmdJTURCUUxRUUFoQVNBQVFRQkJBRUVBRU04Q0RSTU1FZ3RCQUNFQklBQkJBRUVCUVFBUXp3SU5FZ3dSQzBFQUlRRWdBRUVBUVFCQkFSRFBBZzBSREJBTFFRQWhBU0FBUVFCQkFVRUJFTThDRFJBTUR3c2dBQ2dDQUNJQ0lBRTJBaGdnQWtFL05nSVVJQUFnQUNnQ0FDZ0NBQkVCQUF3UEN5QUFLQUlZSWdZb0FnUWhBU0FHS0FJQUlRTWdBQ2dDMEFNb0FoQkZCRUFnQUNnQ0FDSUNRVHcyQWhRZ0FrRVlha0g0c1FKQjBBQVFQeG9nQUNBQUtBSUFLQUlBRVFFQUN5QUJSUVJBSUFBZ0JpZ0NEQkVBQUVVRVFFRUFJUUVNRHdzZ0JpZ0NBQ0VESUFZb0FnUWhBUXNnQXkwQUFDRUZJQUZCQVdzaUFnUi9JQU5CQVdvRklBQWdCaWdDREJFQUFFVUVRRUVBSVFFTUR3c2dCaWdDQkNFQ0lBWW9BZ0FMSWdRdEFBQWhBU0FDUVFGcklnTUVmeUFFUVFGcUJTQUFJQVlvQWd3UkFBQkZCRUJCQUNFQkRBOExJQVlvQWdRaEF5QUdLQUlBQ3lFRUlBQW9BZ0FpQWlBRUxRQUFJZ3MyQWhnZ0FrSHBBRFlDRkVFQklRSWdBRUVCSUFBb0FnQW9BZ1FSQWdBQ1FBSkFBa0FnQzBFQmRFRUdhaUFGUVFoMElBRnlSeUFMUVFSTGNnMEFJQXNFUUNBQUlBczJBdFFDSUFSQkFXb2hDaUFEUVFGcklRVU1BZ3NnQUNnQzRBRkZEUUFnQUNBTE5nTFVBaUFFUVFGcUlRb2dBMEVCYXlFRkRBSUxJQUFvQWdBaUFVRU1OZ0lVSUFBZ0FTZ0NBQkVCQUNBQUlBczJBdFFDSUFSQkFXb2hDaUFEUVFGcklRVWdDMFVOQVF0QkFDRUVBMEFnQlVVRVFDQUFJQVlvQWd3UkFBQkZCRUJCQUNFQkRCRUxJQVlvQWdBaENpQUdLQUlFSVFVTElBb3RBQUFoQXdKQUlBUkZEUUFnQkVFQ2F5RUNJQVJCQVdzaENFRUFJUUVEUUNBRElBQWdBVUVDZEdvb0F0Z0NLQUlBUndSQUlBUWdBVUVCYWlJQlJ3MEJEQUlMQ3lBQUtBTFlBaWdDQUNFQkFrQWdCRUVDU1EwQVFRRWhBeUFDUVFOUEJFQWdDRUY4Y1NFTVFRQWhCd05BSUFBZ0EwRUNkR29pQWlnQzVBSW9BZ0FpRFNBQ0tBTGdBaWdDQUNJT0lBSW9BdHdDS0FJQUlnOGdBaWdDMkFJb0FnQWlBaUFCSUFFZ0FrZ2JJZ0lnQWlBUFNCc2lBaUFDSUE1SUd5SUNJQUlnRFVnYklRRWdBMEVFYWlFRElBZEJCR29pQnlBTVJ3MEFDd3RCQUNFQ0lBaEJBM0VpQ0VVTkFBTkFJQUFnQTBFQ2RHb29BdGdDS0FJQUlnY2dBU0FCSUFkSUd5RUJJQU5CQVdvaEF5QUNRUUZxSWdJZ0NFY05BQXNMSUFGQkFXb2hBd3NnQlVFQmF5RUlJQUFvQXRnQklRRUNRQ0FBS0FJa0lnZEJBRW9FUUNBQklBZEIyQUJzYWlFRlFRQWhBZ05BSUFNZ0FTZ0NBRVlOQWlBQlFkZ0FhaUVCSUFKQkFXb2lBaUFIUncwQUN5QUZJUUVMSUFBb0FnQWlBaUFETmdJWUlBSkJCRFlDRkNBQUlBQW9BZ0FvQWdBUkFRQUxJQUFnQkVFQ2RHb2dBVFlDMkFJZ0NBUi9JQXBCQVdvRklBQWdCaWdDREJFQUFFVUVRRUVBSVFFTUVRc2dCaWdDQkNFSUlBWW9BZ0FMSVFVZ0FTQUZMUUFBSWdKQkQzRTJBaGdnQVNBQ1FRUjJOZ0lVSUFBb0FnQWlBaUFCS0FJQU5nSVlJQUlnQVNnQ0ZEWUNIQ0FCS0FJWUlRRWdBa0hxQURZQ0ZDQUNJQUUyQWlBZ0FFRUJJQUlvQWdRUkFnQWdCVUVCYWlFS0lBaEJBV3NoQlNBRVFRRnFJZ1FnQzBjTkFBdEJBQ0VDQ3lBRlJRUkFJQUFnQmlnQ0RCRUFBRVVFUUVFQUlRRU1Ed3NnQmlnQ0FDRUtJQVlvQWdRaEJRc2dBQ0FLTFFBQU5nS2NBeUFBSUFWQkFXc2lBd1IvSUFwQkFXb0ZJQUFnQmlnQ0RCRUFBRVVFUUVFQUlRRU1Ed3NnQmlnQ0JDRURJQVlvQWdBTElnUXRBQUEyQXFBRElBQWdBMEVCYXlJSEJIOGdCRUVCYWdVZ0FDQUdLQUlNRVFBQVJRUkFRUUFoQVF3UEN5QUdLQUlFSVFjZ0JpZ0NBQXNpQlMwQUFDSUVRUTl4TmdLb0F5QUFJQVJCQkhZMkFxUURJQUFvQWdBaUJDQUFLQUtjQXpZQ0dDQUVJQUFvQXFBRE5nSWNJQVFnQUNnQ3BBTTJBaUFnQkNBQUtBS29BellDSkNBRVFlc0FOZ0lVUVFFaEFTQUFRUUVnQkNnQ0JCRUNBQ0FBS0FMUUEwRUFOZ0lVSUFKRkJFQWdBQ0FBS0FLUUFVRUJhallDa0FFTElBWWdCMEVCYXpZQ0JDQUdJQVZCQVdvMkFnQWdBRUVBTmdLNEF3d05DeUFBS0FJQUlnSkIxd0EyQWhRZ0FFRUJJQUlvQWdRUkFnQWdBRUVBTmdLNEEwRUNJUUVNREFzZ0FDZ0NHQ0lGS0FJRUlnRkZCRUFnQUNBRktBSU1FUUFBUlFSQVFRQWhBUXdOQ3lBRktBSUVJUUVMSUFVb0FnQWlBaTBBQUNFRUlBRkJBV3NpQXdSL0lBSkJBV29GSUFBZ0JTZ0NEQkVBQUVVRVFFRUFJUUVNRFFzZ0JTZ0NCQ0VESUFVb0FnQUxJZ0ZCQVdvaEFpQURRUUZySVFNZ0FTMEFBQ0FFUVFoMGNpSUVRUUpySVFFZ0JFRURUd1JBQTBBZ0FTRUVJQU5GQkVBZ0FDQUZLQUlNRVFBQVJRUkFRUUFoQVF3UEN5QUZLQUlFSVFNZ0JTZ0NBQ0VDQ3lBQ0xRQUFJUUVnQTBFQmF5SUlCSDhnQWtFQmFnVWdBQ0FGS0FJTUVRQUFSUVJBUVFBaEFRd1BDeUFGS0FJRUlRZ2dCU2dDQUFzaUF5MEFBQ0VDSUFBb0FnQWlCaUFCTmdJWUlBWkIwUUEyQWhRZ0FDZ0NBQ0FDTmdJY0lBQkJBU0FBS0FJQUtBSUVFUUlBQWtBQ1FBSkFJQUZCSUU4RVFDQUFLQUlBSWdZZ0FUWUNHQ0FHUVIwMkFoUWdBQ0FBS0FJQUtBSUFFUUVBREFFTElBRkJFRWtOQVFzZ0FDQUJhaUFDT2dENEFRd0JDeUFBSUFGcUlnRWdBa0VFZGlJR09nRDRBU0FCSUFKQkQzRWlBVG9BNkFFZ0FTQUdUUTBBSUFBb0FnQWlBU0FDTmdJWUlBRkJIallDRkNBQUlBQW9BZ0FvQWdBUkFRQUxJQU5CQVdvaEFpQUlRUUZySVFNZ0JFRUNheUVCSUFSQkFrb05BQXNMSUFFRVFDQUFLQUlBSWdSQkREWUNGQ0FBSUFRb0FnQVJBUUFMSUFVZ0F6WUNCQ0FGSUFJMkFnQU1EQXNnQUNnQ0dDSUdLQUlFSWdGRkJFQWdBQ0FHS0FJTUVRQUFSUTBLSUFZb0FnUWhBUXNnQmlnQ0FDSUNMUUFBSVFRZ0FVRUJheUlCQkg4Z0FrRUJhZ1VnQUNBR0tBSU1FUUFBUlEwS0lBWW9BZ1FoQVNBR0tBSUFDeUlDUVFGcUlRTWdBVUVCYXlFQklBSXRBQUFnQkVFSWRISWlBa0VDYXlFRklBSkJFMDhFUUFOQUlBRkZCRUFnQUNBR0tBSU1FUUFBUlEwTUlBWW9BZ0FoQXlBR0tBSUVJUUVMSUFBb0FnQWlBaUFETFFBQUlnYzJBaGdnQWtIU0FEWUNGRUVCSVFJZ0FFRUJJQUFvQWdBb0FnUVJBZ0JCQUNFRUlBbEJBRG9BZ0FJZ0EwRUJhaUVESUFGQkFXc2hBUU5BSUFGRkJFQWdBQ0FHS0FJTUVRQUFSUTBOSUFZb0FnQWhBeUFHS0FJRUlRRUxJQWxCZ0FKcUlBSnFJQU10QUFBaUNEb0FBQ0FEUVFGcUlRTWdBVUVCYXlFQklBUWdDR29oQkNBQ1FRRnFJZ0pCRVVjTkFBc2dBQ2dDQUNJQ0lBa3RBSUVDTmdJWUlBSWdDUzBBZ2dJMkFod2dBaUFKTFFDREFqWUNJQ0FDSUFrdEFJUUNOZ0lrSUFJZ0NTMEFoUUkyQWlnZ0FpQUpMUUNHQWpZQ0xDQUNJQWt0QUljQ05nSXdJQWt0QUlnQ0lRZ2dBa0hZQURZQ0ZDQUNJQWcyQWpRZ0FFRUNJQUlvQWdRUkFnQWdBQ2dDQUNJQ0lBa3RBSWtDTmdJWUlBSWdDUzBBaWdJMkFod2dBaUFKTFFDTEFqWUNJQ0FDSUFrdEFJd0NOZ0lrSUFJZ0NTMEFqUUkyQWlnZ0FpQUpMUUNPQWpZQ0xDQUNJQWt0QUk4Q05nSXdJQWt0QUpBQ0lRZ2dBa0hZQURZQ0ZDQUNJQWcyQWpRZ0FFRUNJQUlvQWdRUkFnQWdCRUdBQWswZ0JVRVJheUlGSUFST2NVVUVRQ0FBS0FJQUlnSkJDVFlDRkNBQUlBSW9BZ0FSQVFBTFFRQWhBaUFKUVFCQmdBSVFPaUVJSUFRRVFBTkFJQUZGQkVBZ0FDQUdLQUlNRVFBQVJRME9JQVlvQWdBaEF5QUdLQUlFSVFFTElBSWdDR29nQXkwQUFEb0FBQ0FEUVFGcUlRTWdBVUVCYXlFQklBSkJBV29pQWlBRVJ3MEFDd3NnQUNBSFFSQnJJZ0pCQW5ScVFjUUJhaUFBSUFkQkFuUnFRYlFCYWlBSFFSQnhJZ3NiSVFvZ0FpQUhJQXNiSWdKQkJFOEVRQ0FBS0FJQUlnY2dBallDR0NBSFFSODJBaFFnQUNBQUtBSUFLQUlBRVFFQUN5QUZJQVJySVFVZ0NpZ0NBQ0lDUlFSQUlBQkJBRUdZQWlBQUtBSUVLQUlBRVFRQUlnSkJBRFlDbEFJZ0NpQUNOZ0lBQ3lBQ0lBZ3BBNEFDTndJQUlBSWdDQ2tEaUFJM0FnZ2dBaUFJTFFDUUFqb0FFQ0FLS0FJQVFSRnFJQWhCZ0FJUVB4b2dCVUVRU2cwQUN3c2dCUVJBSUFBb0FnQWlBa0VNTmdJVUlBQWdBaWdDQUJFQkFBc2dCaUFCTmdJRUlBWWdBellDQUF3TEN5QUFLQUlZSWdZb0FnUWlBVVVFUUNBQUlBWW9BZ3dSQUFCRkJFQkJBQ0VCREFzTElBWW9BZ1FoQVFzZ0JpZ0NBQ0lDTFFBQUlRVWdBVUVCYXlJREJIOGdBa0VCYWdVZ0FDQUdLQUlNRVFBQVJRUkFRUUFoQVF3TEN5QUdLQUlFSVFNZ0JpZ0NBQXNpQVVFQmFpRUNJQU5CQVdzaEJDQUJMUUFBSUFWQkNIUnlJZ0ZCQW1zaENDQUJRUU5QQkVBRFFDQUVSUVJBSUFBZ0JpZ0NEQkVBQUVVRVFFRUFJUUVNRFFzZ0JpZ0NCQ0VFSUFZb0FnQWhBZ3NnQWkwQUFDRUZJQUFvQWdBaUFVSFRBRFlDRkNBQklBVkJEM0VpQVRZQ0dDQUFLQUlBSUFWQkJIWTJBaHdnQUVFQklBQW9BZ0FvQWdRUkFnQWdBVUVFVHdSQUlBQW9BZ0FpQXlBQk5nSVlJQU5CSURZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMSUFBZ0FVRUNkR29pQXlnQ3BBRWlBVVVFUUNBQVFRQkJoQUVnQUNnQ0JDZ0NBQkVFQUNJQlFRQTJBb0FCSUFNZ0FUWUNwQUVMSUFoQkFXc2hDZ0pBQWtBQ1FBSkFBbjhnQlVFUVNTSUxSUVJBUVFBaEJ5QUlRWUFCU3cwQ0EwQWdBU0FIUVFGMElnVnFRUUU3QVFBZ0FTQUZRUUp5YWtFQk93RUFJQUVnQlVFRWNtcEJBVHNCQUNBQklBVkJCbkpxUVFFN0FRQWdBU0FGUVFoeWFrRUJPd0VBSUFFZ0JVRUtjbXBCQVRzQkFDQUJJQVZCREhKcVFRRTdBUUFnQVNBRlFRNXlha0VCT3dFQUlBZEJDR29pQjBIQUFFY05BQXNnQ2tFQmRRd0JDMEVBSVFjZ0NFSEFBRXNOQVFOQUlBRWdCMEVCZENJRmFrRUJPd0VBSUFFZ0JVRUNjbXBCQVRzQkFDQUJJQVZCQkhKcVFRRTdBUUFnQVNBRlFRWnlha0VCT3dFQUlBRWdCVUVJY21wQkFUc0JBQ0FCSUFWQkNuSnFRUUU3QVFBZ0FTQUZRUXh5YWtFQk93RUFJQUVnQlVFT2NtcEJBVHNCQUNBSFFRaHFJZ2RCd0FCSERRQUxJQW9MSVFWQmdNd0NJUWdDUUFKQUFrQUNRQUpBQWtBZ0JVRUVhdzR1QlFjSEJ3Y0FCd2NIQndjSEFRY0hCd2NIQndjSEFnY0hCd2NIQndjSEJ3Y0RCd2NIQndjSEJ3Y0hCd2NIQkFjTFFaRExBaUVJREFRTFFaREtBaUVJREFNTFFlRElBaUVJREFJTFFaREhBaUVJREFFTFFZREZBaUVJQ3lBQ1FRRnFJUUlnQkVFQmF5RUVEQUlMSUFKQkFXb2hBaUFFUVFGcklRUkJ3QUFoQlVIQXdnSWhDQXdCQ3lBQ1FRRnFJUUlnQkVFQmF5RUVRY0RDQWlFSUlBVkJBRXdOQVF0QkFDRURBMEFDZnlBTFJRUkFJQVJGQkVBZ0FDQUdLQUlNRVFBQVJRUkFRUUFoQVF3UkN5QUdLQUlFSVFRZ0JpZ0NBQ0VDQ3lBQ0xRQUFJUWNnQkVFQmF5SUVCSDhnQWtFQmFnVWdBQ0FHS0FJTUVRQUFSUVJBUVFBaEFRd1JDeUFHS0FJRUlRUWdCaWdDQUFzaUFpMEFBQ0FIUVFoMGNnd0JDeUFFUlFSQUlBQWdCaWdDREJFQUFFVUVRRUVBSVFFTUVBc2dCaWdDQkNFRUlBWW9BZ0FoQWdzZ0FpMEFBQXNoQnlBQklBZ2dBMEVDZEdvb0FnQkJBWFJxSUFjN0FRQWdBa0VCYWlFQ0lBUkJBV3NoQkNBRFFRRnFJZ01nQlVjTkFBc0xRUUFoQ0FKQUlBQW9BZ0FpQXlnQ2FFRUNTQTBBQTBBZ0F5QUJJQWhCQVhRaUIyb3ZBUUEyQWhnZ0F5QUJJQWRCQW5KcUx3RUFOZ0ljSUFNZ0FTQUhRUVJ5YWk4QkFEWUNJQ0FESUFFZ0IwRUdjbW92QVFBMkFpUWdBeUFCSUFkQkNISnFMd0VBTmdJb0lBTWdBU0FIUVFweWFpOEJBRFlDTENBRElBRWdCMEVNY21vdkFRQTJBakFnQVNBSFFRNXlhaThCQUNFSElBTkIzd0EyQWhRZ0F5QUhOZ0kwSUFCQkFpQURLQUlFRVFJQUlBaEJOMHNOQVNBSVFRaHFJUWdnQUNnQ0FDRUREQUFMQUFzZ0NpQUZRUUFnQlNBTEcycHJJZ2hCQUVvTkFBc0xJQWdFUUNBQUtBSUFJZ0ZCRERZQ0ZDQUFJQUVvQWdBUkFRQUxJQVlnQkRZQ0JDQUdJQUkyQWdBTUNnc2dBQ2dDR0NJQ0tBSUVJZ05GQkVBZ0FDQUNLQUlNRVFBQVJRUkFRUUFoQVF3S0N5QUNLQUlFSVFNTElBSW9BZ0FpQkMwQUFDRUJJQU5CQVdzaUF3Ui9JQVJCQVdvRklBQWdBaWdDREJFQUFFVUVRRUVBSVFFTUNnc2dBaWdDQkNFRElBSW9BZ0FMSVFRZ0EwRUJheUVESUFRdEFBQWdBVUVJZEhKQkJFY0VRQ0FBS0FJQUlnRkJERFlDRkNBQUlBRW9BZ0FSQVFBTElBTUVmeUFFUVFGcUJTQUFJQUlvQWd3UkFBQkZCRUJCQUNFQkRBb0xJQUlvQWdRaEF5QUNLQUlBQ3lJQkxRQUFJUVVnQTBFQmF5SUVCSDhnQVVFQmFnVWdBQ0FDS0FJTUVRQUFSUVJBUVFBaEFRd0tDeUFDS0FJRUlRUWdBaWdDQUFzaUFTMEFBQ0VESUFBb0FnQWlCa0hVQURZQ0ZDQUdJQU1nQlVFSWRISWlCVFlDR0NBQVFRRWdBQ2dDQUNnQ0JCRUNBQ0FBSUFVMkFwZ0NJQUlnQkVFQmF6WUNCQ0FDSUFGQkFXbzJBZ0FNQ1FzZ0FDZ0NHQ0lCS0FJRUlRTWdBU2dDQUNFQ0lBQW9BdEFES0FJUVJRUkFJQUFvQWdBaUJFRThOZ0lVSUFSQkdHcEJ5YklDUWRBQUVEOGFJQUFnQUNnQ0FDZ0NBQkVCQUFzQ1FBSkFJQUFvQWlSQkEwZ05BQ0FEUlFSQUlBQWdBU2dDREJFQUFFVUVRRUVBSVFFTUN3c2dBU2dDQkNFRElBRW9BZ0FoQWdzZ0FpMEFBQ0VFSUFOQkFXc2lBd1IvSUFKQkFXb0ZJQUFnQVNnQ0RCRUFBRVVFUUVFQUlRRU1Dd3NnQVNnQ0JDRURJQUVvQWdBTElRSWdBMEVCYXlFRElBSXRBQUFnQkVFSWRISkJHRWNFUUNBQUtBSUFJZ1JCRERZQ0ZDQUFJQVFvQWdBUkFRQUxJQU1FZnlBQ1FRRnFCU0FBSUFFb0Fnd1JBQUJGQkVCQkFDRUJEQXNMSUFFb0FnUWhBeUFCS0FJQUN5RUNJQU5CQVdzaEF5QUNMUUFBUVExSEJFQWdBQ2dDQUNJRVFjWUFOZ0lVSUFRZ0FDZ0N1QU0yQWhnZ0FDQUFLQUlBS0FJQUVRRUFDeUFEQkg4Z0FrRUJhZ1VnQUNBQktBSU1FUUFBUlFSQVFRQWhBUXdMQ3lBQktBSUVJUU1nQVNnQ0FBc2lBaTBBQUNFRUlBTkJBV3NpQXdSL0lBSkJBV29GSUFBZ0FTZ0NEQkVBQUVVRVFFRUFJUUVNQ3dzZ0FTZ0NCQ0VESUFFb0FnQUxJZ1ZCQVdvaEFpQURRUUZySVFNZ0JTMEFBQ0FFUVFoMGNrSC9BVWNOQUNBRFJRUkFJQUFnQVNnQ0RCRUFBRVVFUUVFQUlRRU1Dd3NnQVNnQ0JDRURJQUVvQWdBaEFnc2dBa0VCYWlFRUlBTkJBV3NoQXlBQ0xRQUFRUU5IQkVBZ0JDRUNEQUVMSUFORkJFQWdBQ0FCS0FJTUVRQUFSUVJBUVFBaEFRd0xDeUFCS0FJRUlRTWdBU2dDQUNFRUN5QUVRUUZxSVFJZ0EwRUJheUVESUFBb0F0Z0JJZ2NvQWxnZ0JDMEFBRWNOQUNBRFJRUkFJQUFnQVNnQ0RCRUFBRVVFUUVFQUlRRU1Dd3NnQUNnQzJBRWhCeUFCS0FJRUlRTWdBU2dDQUNFQ0N5QUNRUUZxSVFRZ0EwRUJheUVESUFjb0FnQWdBaTBBQUVjRVFDQUVJUUlNQVFzZ0EwVUVRQ0FBSUFFb0Fnd1JBQUJGQkVCQkFDRUJEQXNMSUFBb0F0Z0JJUWNnQVNnQ0JDRURJQUVvQWdBaEJBc2dCRUVCYWlFQ0lBTkJBV3NoQXlBSEtBS3dBU0FFTFFBQVJ3MEFJQU5GQkVBZ0FDQUJLQUlNRVFBQVJRUkFRUUFoQVF3TEN5QUJLQUlFSVFNZ0FTZ0NBQ0VDQ3lBQ1FRRnFJUVFnQTBFQmF5RURJQUl0QUFCQmdBRkhCRUFnQkNFQ0RBRUxJQU5GQkVBZ0FDQUJLQUlNRVFBQVJRUkFRUUFoQVF3TEN5QUJLQUlFSVFNZ0FTZ0NBQ0VFQ3lBRUxRQUFJUVVnQTBFQmF5SURCSDhnQkVFQmFnVWdBQ0FCS0FJTUVRQUFSUVJBUVFBaEFRd0xDeUFCS0FJRUlRTWdBU2dDQUFzaUJFRUJhaUVDSUFOQkFXc2hBeUFFTFFBQUlBVkJDSFJ5RFFBZ0EwVUVRQ0FBSUFFb0Fnd1JBQUJGQkVCQkFDRUJEQXNMSUFFb0FnUWhBeUFCS0FJQUlRSUxJQUl0QUFBaEJDQURRUUZySWdNRWZ5QUNRUUZxQlNBQUlBRW9BZ3dSQUFCRkJFQkJBQ0VCREFzTElBRW9BZ1FoQXlBQktBSUFDeUlGUVFGcUlRSWdBMEVCYXlFRElBVXRBQUFnQkVFSWRISU5BQ0FEUlFSQUlBQWdBU2dDREJFQUFFVUVRRUVBSVFFTUN3c2dBU2dDQkNFRElBRW9BZ0FoQWdzZ0FrRUJhaUVFSUFOQkFXc2hBeUFDTFFBQUJFQWdCQ0VDREFFTElBTkZCRUFnQUNBQktBSU1FUUFBUlFSQVFRQWhBUXdMQ3lBQktBSUVJUU1nQVNnQ0FDRUVDeUFFTFFBQUlRVWdBMEVCYXlJREJIOGdCRUVCYWdVZ0FDQUJLQUlNRVFBQVJRUkFRUUFoQVF3TEN5QUJLQUlFSVFNZ0FTZ0NBQXNpQkVFQmFpRUNJQU5CQVdzaEF5QUVMUUFBSUFWQkNIUnlRUUZIRFFBZ0EwVUVRQ0FBSUFFb0Fnd1JBQUJGQkVCQkFDRUJEQXNMSUFFb0FnUWhBeUFCS0FJQUlRSUxJQUl0QUFBaEJDQURRUUZySWdNRWZ5QUNRUUZxQlNBQUlBRW9BZ3dSQUFCRkJFQkJBQ0VCREFzTElBRW9BZ1FoQXlBQktBSUFDeUlGUVFGcUlRSWdBMEVCYXlFRElBVXRBQUFnQkVFSWRISU5BQ0FEUlFSQUlBQWdBU2dDREJFQUFFVUVRRUVBSVFFTUN3c2dBU2dDQkNFRElBRW9BZ0FoQWdzZ0FrRUJhaUVFSUFOQkFXc2hBeUFDTFFBQUJFQWdCQ0VDREFFTElBTkZCRUFnQUNBQktBSU1FUUFBUlFSQVFRQWhBUXdMQ3lBQktBSUVJUU1nQVNnQ0FDRUVDeUFFTFFBQUlRVWdBMEVCYXlJREJIOGdCRUVCYWdVZ0FDQUJLQUlNRVFBQVJRUkFRUUFoQVF3TEN5QUJLQUlFSVFNZ0FTZ0NBQXNpQkVFQmFpRUNJQU5CQVdzaEF5QUVMUUFBSUFWQkNIUnlRUUZIRFFBZ0EwVUVRQ0FBSUFFb0Fnd1JBQUJGQkVCQkFDRUJEQXNMSUFFb0FnUWhBeUFCS0FJQUlRSUxJQUl0QUFBaEJDQURRUUZySWdNRWZ5QUNRUUZxQlNBQUlBRW9BZ3dSQUFCRkJFQkJBQ0VCREFzTElBRW9BZ1FoQXlBQktBSUFDeUlGUVFGcUlRSWdBMEVCYXlFRElBVXRBQUFnQkVFSWRISkZEUUVMSUFBb0FnQWlCRUVjTmdJVUlBQWdCQ2dDQUJFQkFBc2dBRUVCTmdLd0FpQUJJQU0yQWdRZ0FTQUNOZ0lBREFnTElBQWdBQ2dDMEFNZ0FVRUNkR3BCNEFacktBSUFFUUFBRFFkQkFDRUJEQVlMSUFBZ0FDZ0MwQU1vQWh3UkFBQU5Ca0VBSVFFTUJRc2dBQ2dDQUNJQ0lBRTJBaGdnQWtIZUFEWUNGQ0FBUVFFZ0FDZ0NBQ2dDQkJFQ0FBd0ZDeUFBS0FJWUlnUW9BZ1FpQTBVRVFDQUFJQVFvQWd3UkFBQkZCRUJCQUNFQkRBVUxJQVFvQWdRaEF3c2dCQ2dDQUNJQkxRQUFJUVVnQTBFQmF5SUNCSDhnQVVFQmFnVWdBQ0FFS0FJTUVRQUFSUVJBUVFBaEFRd0ZDeUFFS0FJRUlRSWdCQ2dDQUFzaUFTMEFBQ0VESUFBb0FnQWlCa0hkQURZQ0ZDQUdJQUFvQXJnRE5nSVlJQUFvQWdBZ0F5QUZRUWgwY2lJRlFRSnJJZ00yQWh3Z0FFRUJJQUFvQWdBb0FnUVJBZ0FnQkNBQ1FRRnJOZ0lFSUFRZ0FVRUJhallDQUNBRlFRTkpEUVFnQUNBRElBQW9BaGdvQWhBUkFnQU1CQXNnQUNnQ0FDSUNJQUUyQWhnZ0FrSEdBRFlDRkNBQUlBQW9BZ0FvQWdBUkFRQU1Bd3RCQUNFQklBQkJBVUVBUVFBUXp3SU5BZ3dCQzBFQUlRRUxJQWxCb0FKcUpBQWdBUThMUVFBaEFTQUFRUUEyQXJnRERBQUxBQXVTQVFFQ2Z3SkFBa0FnQUNnQ3VBTWlBUVIvSUFFRklBQVEzd05GRFFFZ0FDZ0N1QU1MSUFBb0F0QURLQUlVSWdGQjBBRnFSZ1JBSUFBb0FnQWlBaUFCTmdJWUlBSkI1QUEyQWhRZ0FFRURJQUFvQWdBb0FnUVJBZ0FnQUVFQU5nSzRBd3dDQ3lBQUlBRWdBQ2dDR0NnQ0ZCRURBQTBCQzBFQUR3c2dBQ2dDMEFNaUFDQUFLQUlVUVFGcVFRZHhOZ0lVUVFFTDF3RUJCbjhnQUNnQ0dDSUJLQUlFSWdKRkJFQWdBQ0FCS0FJTUVRQUFSUVJBUVFBUEN5QUJLQUlFSVFJTElBRW9BZ0FpQXkwQUFDRUVJQUpCQVdzaUJRUi9JQU5CQVdvRklBQWdBU2dDREJFQUFFVUVRRUVBRHdzZ0FTZ0NCQ0VGSUFFb0FnQUxJZ0l0QUFBaEF5QUFLQUlBSWdaQjNRQTJBaFFnQmlBQUtBSzRBellDR0NBQUtBSUFJQU1nQkVFSWRISWlBMEVDYXlJRU5nSWNJQUJCQVNBQUtBSUFLQUlFRVFJQUlBRWdCVUVCYXpZQ0JDQUJJQUpCQVdvMkFnQWdBMEVEVHdSQUlBQWdCQ0FBS0FJWUtBSVFFUUlBQzBFQkM4OENBUVYvSUFBb0FnQWlBeUFBS0FLNEF5SUNOZ0lZSUFOQi9BQTJBaFFnQUNnQ0FDQUJOZ0ljSUFCQmZ5QUFLQUlBS0FJRUVRSUFJQUZCQm1wQkIzRkIwQUZ5SVFNZ0FVRUJhMEVIY1VIUUFYSWhCQ0FCUVFKcVFRZHhRZEFCY2lFRklBRkJBV3BCQjNGQjBBRnlJUUVEUUFKQUFrQWdBa0hBQVVnTkFDQUJJQUpHSUFKQjJBRnJRWGhKY2lBQ0lBVkdjZzBCSUFJZ0JFWWdBaUFEUm5JTkFDQUFLQUlBSWdFZ0FqWUNHQ0FCUWVNQU5nSVVJQUFvQWdCQkFUWUNIQ0FBUVFRZ0FDZ0NBQ2dDQkJFQ0FDQUFRUUEyQXJnRFFRRVBDeUFBS0FJQUlnWWdBallDR0NBR1FlTUFOZ0lVSUFBb0FnQkJBallDSENBQVFRUWdBQ2dDQUNnQ0JCRUNBQ0FBRU44REJFQWdBQ2dDdUFNaEFnd0NCVUVBRHdzQUN3c2dBQ2dDQUNJQklBSTJBaGdnQVVIakFEWUNGQ0FBS0FJQVFRTTJBaHdnQUVFRUlBQW9BZ0FvQWdRUkFnQkJBUXUyRFFFSWYwRUNJUUlDUUNBQUtBTE1BeUlGS0FJVURRQURRQUpBSUFBQ2Z3SkFBa0FnQUNBQUtBTFFBeWdDQkJFQUFDSUNRUUZIQkVBZ0FrRUNSdzBHSUFWQkFUWUNGQ0FGS0FJWVJRMEJRUUloQWlBQUtBTFFBeWdDRUVVTkJpQUFLQUlBSWdGQlBqWUNGQ0FBSUFFb0FnQVJBUUJCQWc4TEFrQUNRQUpBSUFVb0FoZ09BZ0lCQUFzZ0FDZ0MxQUloQWd3RkN3SkFJQUFvQWlCQjNQOERUQVJBSUFBb0FoeEIzZjhEU0EwQkN5QUFLQUlBUXFxQWdJREErejgzQWhRZ0FDQUFLQUlBS0FJQUVRRUFDeUFBS0FMVUFTSUJRUTFyUVhwTkJFQWdBQ2dDQUNJQ0lBRTJBaGdnQWtFUU5nSVVJQUFnQUNnQ0FDZ0NBQkVCQUFzZ0FDZ0NKQ0lEUVF0T0JFQWdBQ2dDQUNJQklBTTJBaGdnQVVFYk5nSVVJQUFvQWdCQkNqWUNIQ0FBSUFBb0FnQW9BZ0FSQVFBZ0FDZ0NKQ0VEQ3lBQVFvR0FnSUFRTndLOEFpQURRUUJLQkVBZ0FDZ0MyQUVoQWtFQUlRaEJBU0VCUVFFaEJBTkFBa0FnQWlnQ0NDSUdRUVZyUVh4UEJFQWdBaWdDRENJSFFRVnJRWHRMRFFFTElBQW9BZ0FpQVVFVE5nSVVJQUFnQVNnQ0FCRUJBQ0FBS0FJa0lRTWdBaWdDRENFSElBQW9Bc0FDSVFFZ0FpZ0NDQ0VHSUFBb0Fyd0NJUVFMSUFBZ0FTQUhJQUVnQjBvYklnRTJBc0FDSUFBZ0JDQUdJQVFnQmtvYklnUTJBcndDSUFKQjJBQnFJUUlnQ0VFQmFpSUlJQU5JRFFBTEN5QUFLQUxjQVEwQ0lBQW9BdUFCQkVBZ0FDZ0MxQUlOQXdzQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBQW9BcUFESWdGQjl3Qk1CRUFnQVE1a0FRNE9BZzRPRGc0RERnNE9EZzRPQkE0T0RnNE9EZzRPQlE0T0RnNE9EZzRPRGc0R0RnNE9EZzRPRGc0T0RnNE9CdzRPRGc0T0RnNE9EZzRPRGc0T0VRNE9EZzRPRGc0T0RnNE9EZzRPRGc0SURnNE9EZzRPRGc0T0RnNE9EZzRPRGc0T0NRNExJQUZCd2dGTUJFQWdBVUg0QUVZTkNpQUJRWThCUmcwTElBRkJxQUZIRFE0Z0FFRS9OZ0swQXlBQVFjRENBallDc0FNZ0FFRU5OZ0tzQTBFTkRCSUxJQUZCd3dGR0RRc2dBVUhnQVVZTkRDQUJRZjhCUncwTklBQkJQellDdEFNZ0FFSEF3Z0kyQXJBRElBQkJFRFlDckFOQkVBd1JDeUFBUVFBMkFyUURJQUJCd01JQ05nS3dBeUFBUVFFMkFxd0RRUUVNRUFzZ0FFRUROZ0swQXlBQVFZRE1BallDc0FNZ0FFRUNOZ0tzQTBFQ0RBOExJQUJCQ0RZQ3RBTWdBRUdReXdJMkFyQURJQUJCQXpZQ3JBTkJBd3dPQ3lBQVFRODJBclFESUFCQmtNb0NOZ0t3QXlBQVFRUTJBcXdEUVFRTURRc2dBRUVZTmdLMEF5QUFRZURJQWpZQ3NBTWdBRUVGTmdLc0EwRUZEQXdMSUFCQkl6WUN0QU1nQUVHUXh3STJBckFESUFCQkJqWUNyQU5CQmd3TEN5QUFRVEEyQXJRRElBQkJnTVVDTmdLd0F5QUFRUWMyQXF3RFFRY01DZ3NnQUVFL05nSzBBeUFBUWNEQ0FqWUNzQU1nQUVFSk5nS3NBMEVKREFrTElBQkJQellDdEFNZ0FFSEF3Z0kyQXJBRElBQkJDallDckFOQkNnd0lDeUFBUVQ4MkFyUURJQUJCd01JQ05nS3dBeUFBUVFzMkFxd0RRUXNNQndzZ0FFRS9OZ0swQXlBQVFjRENBallDc0FNZ0FFRU1OZ0tzQTBFTURBWUxJQUJCUHpZQ3RBTWdBRUhBd2dJMkFyQURJQUJCRGpZQ3JBTkJEZ3dGQ3lBQVFUODJBclFESUFCQndNSUNOZ0t3QXlBQVFRODJBcXdEUVE4TUJBc2dBQ2dDQUNJQlFSRTJBaFFnQVNBQUtBS2NBellDR0NBQUtBSUFJQUFvQXFBRE5nSWNJQUFvQWdBZ0FDZ0NwQU0yQWlBZ0FDZ0NBQ0FBS0FLb0F6WUNKQ0FBSUFBb0FnQW9BZ0FSQVFBZ0FDZ0NKQ0VESUFBb0Fxd0REQU1MSUFVb0FoQkZCRUFnQUNnQ0FDSUJRU1EyQWhRZ0FDQUJLQUlBRVFFQUN5QUFLQUxVQWtVTkJDQUFFTEVGUVFFUEMwRUNJUUlnQUNnQ2tBRWlBU0FBS0FLWUFVNE5CQ0FBSUFFMkFwZ0JEQVFMSUFCQlB6WUN0QU1nQUVIQXdnSTJBckFESUFCQkNEWUNyQU5CQ0FzaUFUWUN5QUlnQUNBQk5nTEVBaUFEUVFCS0JFQWdBQ2dDMkFFaEFrRUFJUVFEUUNBQ0lBRTJBaWdnQWlBQk5nSWtJQUlnQWlnQ0NDQUFLQUljYkNBQUtBSzhBaUFCYkJCc05nSWNJQUlnQWlnQ0RDQUFLQUlnYkNBQUtBS3NBeUFBS0FMQUFtd1FiRFlDSUNBQ0lBSW9BZ2dnQUNnQ0hHd2dBQ2dDdkFJUWJEWUNMQ0FDS0FJTUlBQW9BaUJzSUFBb0FzQUNFR3doQVNBQ1FRQTJBbEFnQWtFQk5nSTBJQUlnQVRZQ01DQUVRUUZxSWdRZ0FDZ0NKRTVGQkVBZ0FrSFlBR29oQWlBQUtBS3NBeUVCREFFTEN5QUFLQUtzQXlFQkN5QUFJQUFvQWlBZ0FTQUFLQUxBQW13UWJEWUN6QUpCQVNFQklBQW9Bc3dESUFBb0F0UUNJZ0lnQUNnQ0pFNEVmeUFBS0FMZ0FVRUFSd1ZCQVFzMkFoQUxJQUpGQkVBZ0JVRUNOZ0lZREFFTEN5QUZRUUEyQWhoQkFROExJQUlMUXdFQmZ5QUFLQUxNQXlJQlFRRTJBaGdnQVVJQU53SVFJQUZCL3dBMkFnQWdBQ0FBS0FJQUtBSVFFUUVBSUFBZ0FDZ0MwQU1vQWdBUkFRQWdBRUVBTmdLZ0FRc2NBQ0FBSUFBb0F0UURLQUlJRVFFQUlBQW9Bc3dEUWY4QU5nSUFDd3dBSUFBb0FoaEJBVFlDSkF1TEFRRUNmeUFBS0FJWUlnRW9BaUJCQVVHQUlDQUJLQUljRUdBaUFrVUVRQ0FCS0FJa0JFQWdBQ2dDQUNJQ1FTczJBaFFnQUNBQ0tBSUFFUUVBQ3lBQUtBSUFJZ0pCK3dBMkFoUWdBRUYvSUFJb0FnUVJBZ0FnQVNnQ0lFSC9BVG9BQUNBQktBSWdRZGtCT2dBQlFRSWhBZ3NnQVVFQU5nSWtJQUVnQWpZQ0JDQUJJQUVvQWlBMkFnQkJBUXRVQVFKL0lBRkJBRW9FUUNBQklBQW9BaGdpQWlnQ0JDSURTZ1JBQTBBZ0FDQUNLQUlNRVFBQUdpQUJJQU5ySWdFZ0FpZ0NCQ0lEU2cwQUN3c2dBaUFESUFGck5nSUVJQUlnQWlnQ0FDQUJhallDQUFzTGV3RUJmeUFBS0FJWUlnSkZCRUFnQUNBQVFRQkJLQ0FBS0FJRUtBSUFFUVFBSWdJMkFoZ2dBaUFBUVFCQmdDQWdBQ2dDQkNnQ0FCRUVBRFlDSUNBQUtBSVlJUUlMSUFJZ0FUWUNIQ0FDUWZjQU5nSVlJQUpCK0FBMkFoUWdBa0g1QURZQ0VDQUNRZm9BTmdJTUlBSkIrd0EyQWdnZ0FrSUFOd0lBQzgwQkFRUi9Jd0JCRUdzaUJDUUFJQUFvQWhRaUEwSE5BVWNFUUNBQUtBSUFJZ1VnQXpZQ0dDQUZRUlUyQWhRZ0FDQUFLQUlBS0FJQUVRRUFDd0pBSUFBb0Fvd0JJZ1VnQUNnQ2RDSUdUd1JBSUFBb0FnQWlBVUgrQURZQ0ZDQUFRWDhnQVNnQ0JCRUNBRUVBSVFFTUFRc2dBQ2dDQ0NJREJFQWdBeUFHTmdJSUlBTWdCVFlDQkNBQUlBTW9BZ0FSQVFBTElBUkJBRFlDRENBQUlBRWdCRUVNYWlBQ0lBQW9Bc0FES0FJRUVRY0FJQUFnQkNnQ0RDSUJJQUFvQW93QmFqWUNqQUVMSUFSQkVHb2tBQ0FCQy9rL0FSUi9Ba0FDUUFKQUFrQUNRQ0FBS0FJVUlnRkJ5Z0ZyRGdNQUFRTUNDeUFBSUFCQkFVRWNJQUFvQWdRb0FnQVJCQUFpRERZQ3ZBTWdERUVBTmdJSUlBeEJ6QUUyQWdRZ0RFSE5BVFlDQUNBQUtBTFVBU0lCUVFoSEJFQWdBQ2dDQUNJQ0lBRTJBaGdnQWtFUU5nSVVJQUFnQUNnQ0FDZ0NBQkVCQUFzZ0FDZ0NGQ0lCUWNvQlJ3UkFJQUFvQWdBaUFpQUJOZ0lZSUFKQkZUWUNGQ0FBSUFBb0FnQW9BZ0FSQVFBTEFuOGdBQ2dDckFNaUFpQUFLQUl3YkNJRElBQW9BalFpQkUwRVFDQUFJQUFvQWh3Z0FoQnNOZ0p3UVFFaEFTQUFLQUlnREFFTElBUkJBWFFnQTA4RVFDQUFJQUFvQWh4QkFYUWdBaEJzTmdKd1FRSWhBU0FBS0FJZ1FRRjBEQUVMUVFNaEFTQUVRUU5zSUFOUEJFQWdBQ0FBS0FJY1FRTnNJQUlRYkRZQ2NDQUFLQUlnUVFOc0RBRUxJQVJCQW5RZ0EwOEVRQ0FBSUFBb0FoeEJBblFnQWhCc05nSndRUVFoQVNBQUtBSWdRUUowREFFTFFRVWhBU0FFUVFWc0lBTlBCRUFnQUNBQUtBSWNRUVZzSUFJUWJEWUNjQ0FBS0FJZ1FRVnNEQUVMUVFZaEFTQUVRUVpzSUFOUEJFQWdBQ0FBS0FJY1FRWnNJQUlRYkRZQ2NDQUFLQUlnUVFac0RBRUxRUWNoQVNBRVFRZHNJQU5QQkVBZ0FDQUFLQUljUVFkc0lBSVFiRFlDY0NBQUtBSWdRUWRzREFFTElBUkJBM1FnQTA4RVFDQUFJQUFvQWh4QkEzUWdBaEJzTmdKd1FRZ2hBU0FBS0FJZ1FRTjBEQUVMUVFraEFTQUVRUWxzSUFOUEJFQWdBQ0FBS0FJY1FRbHNJQUlRYkRZQ2NDQUFLQUlnUVFsc0RBRUxRUW9oQVNBRVFRcHNJQU5QQkVBZ0FDQUFLQUljUVFwc0lBSVFiRFlDY0NBQUtBSWdRUXBzREFFTFFRc2hBU0FFUVF0c0lBTlBCRUFnQUNBQUtBSWNRUXRzSUFJUWJEWUNjQ0FBS0FJZ1FRdHNEQUVMUVF3aEFTQUVRUXhzSUFOUEJFQWdBQ0FBS0FJY1FReHNJQUlRYkRZQ2NDQUFLQUlnUVF4c0RBRUxRUTBoQVNBRVFRMXNJQU5QQkVBZ0FDQUFLQUljUVExc0lBSVFiRFlDY0NBQUtBSWdRUTFzREFFTFFRNGhBU0FFUVE1c0lBTlBCRUFnQUNBQUtBSWNRUTVzSUFJUWJEWUNjQ0FBS0FJZ1FRNXNEQUVMUVE4aEFTQUFLQUljSVFZZ0JFRVBiQ0FEVHdSQUlBQWdCa0VQYkNBQ0VHdzJBbkFnQUNnQ0lFRVBiQXdCQ3lBQUlBWkJCSFFnQWhCc05nSndRUkFoQVNBQUtBSWdRUVIwQ3lBQUtBS3NBeEJzSVFJZ0FDQUJOZ0xJQWlBQUlBRTJBc1FDSUFBZ0FqWUNkQUpBSUFBb0FpUWlCRUVBVEEwQUlBQW9BdGdCSVFJZ0JFRUJhMEVIVHdSQUlBUkJlSEVoQmtFQUlRTURRQ0FDSUFFMkFpZ2dBaUFCTmdJa0lBSWdBVFlDa0FVZ0FpQUJOZ0tNQlNBQ0lBRTJBcmdFSUFJZ0FUWUN0QVFnQWlBQk5nTGdBeUFDSUFFMkF0d0RJQUlnQVRZQ2lBTWdBaUFCTmdLRUF5QUNJQUUyQXJBQ0lBSWdBVFlDckFJZ0FpQUJOZ0xZQVNBQ0lBRTJBdFFCSUFJZ0FUWUNnQUVnQWlBQk5nSjhJQUpCd0FWcUlRSWdBMEVJYWlJRElBWkhEUUFMQ3lBRVFRZHhJZ1JGRFFCQkFDRURBMEFnQWlBQk5nSW9JQUlnQVRZQ0pDQUNRZGdBYWlFQ0lBTkJBV29pQXlBRVJ3MEFDd3NDUUNBQUtBSWtJZ2xCQUV3TkFFRUlRUVFnQUNnQ1RCc2hDaUFBS0FMSUFpRURJQUFvQXNRQ0lRUWdBQ2dDMkFFaUJ5RUlBMEFDUUNBS0lBUWlBVWdOQUNBQUtBSzhBaUlDSUFnb0FnZ2lEVUVCZEc4TkFFRUNJUVlEUUNBRUlBWnNJZ0VnQ2tvTkFTQUNJQVpCQVhRaUJpQU5iRzlGRFFBTEN5QUlJQUUyQWlRQ1FDQUtJQU1pQWtnTkFDQUFLQUxBQWlJTklBZ29BZ3dpRGtFQmRHOE5BRUVDSVFZRFFDQURJQVpzSWdJZ0Nrb05BU0FOSUFaQkFYUWlCaUFPYkc5RkRRQUxDeUFJSUFJMkFpZ0NRQ0FDUVFGMElnWWdBVWdFUUNBSUlBWTJBaVFNQVFzZ0FpQUJRUUYwSWdGTURRQWdDQ0FCTmdJb0N5QUlRZGdBYWlFSUlBdEJBV29pQ3lBSlJ3MEFDeUFKUVFCTURRQkJBQ0VHQTBBZ0J5QUhLQUlrSUFjb0FnZ2dBQ2dDSEd4c0lBQW9BcXdESUFBb0Fyd0NiQkJzTmdJc0lBY2dCeWdDS0NBSEtBSU1JQUFvQWlCc2JDQUFLQUtzQXlBQUtBTEFBbXdRYkRZQ01DQUhRZGdBYWlFSElBWkJBV29pQmlBQUtBSWtJZ2xJRFFBTEN5QUFLQUlzUVFGcklnRkJCazBFUUNBQlFRSjBRWUM4QW1vb0FnQWhDUXNnQUNBSk5nSjRJQUJCQVNBSklBQW9BbFFiTmdKOElBQWdBQkN0QlFSL0lBQW9Bc0FDQlVFQkN6WUNnQUVnQUNBQVFRRkJnQW9nQUNnQ0JDZ0NBQkVFQUVFQVFZQUVFRG9pQWtHQUJHb2lBVFlDMEFJRFFDQUJJQVZxSUFVNkFBQWdBU0FGUVFGeUlnTnFJQU02QUFBZ0FTQUZRUUp5SWdOcUlBTTZBQUFnQVNBRlFRTnlJZ05xSUFNNkFBQWdBU0FGUVFSeUlnTnFJQU02QUFBZ0FTQUZRUVZ5SWdOcUlBTTZBQUFnQVNBRlFRWnlJZ05xSUFNNkFBQWdBU0FGUVFkeUlnTnFJQU02QUFBZ0JVRUlhaUlGUVlBQ1J3MEFDeUFDUVlBR2FrSC9BVUdBQkJBNkdnSkFBa0FnQUNnQ2RFVU5BQ0FBS0FKd1JRMEFJQUFvQW5oQkFFb05BUXNnQUNnQ0FDSUJRU0UyQWhRZ0FDQUJLQUlBRVFFQUN5QU1RUUEyQWd3Z0FCQ3RCU0VCSUF4Q0FEY0NGQ0FNSUFFMkFoQUNRQ0FBS0FKVVJRUkFJQUJCQURZQ2JDQUFRZ0EzQW1RTUFRc2dBQ2dDUUVVRVFDQUFRUUEyQW13Z0FFSUFOd0prQ3lBQUtBSkVCRUFnQUNnQ0FDSUJRVEEyQWhRZ0FDQUJLQUlBRVFFQUN3SkFJQUFvQW5oQkEwY0VRQ0FBUVFBMkFvZ0JJQUJCQURZQ2JDQUFRZ0UzQW1RTUFRc2dBQ2dDaUFFRVFDQUFRUUUyQW1nTUFRc2dBQ2dDWEFSQUlBQkJBVFlDYkF3QkN5QUFRUUUyQW1RTElBQW9BbVFFUUNBQUlBQkJBVUhZQUNBQUtBSUVLQUlBRVFRQUlnRTJBdVFESUFGQkFEWUNSQ0FCUWU0Qk5nSU1JQUZCN3dFMkFnZ2dBVUh3QVRZQ0FDQUJRUUEyQWpRZ0FDZ0NlRUVGVGdSQUlBQW9BZ0JDdVlDQWdNQUFOd0lVSUFBZ0FDZ0NBQ2dDQUJFQkFBc2dBQ2dDWUNJSFFZRUNUZ1JBSUFBb0FnQkN1NENBZ0lBZ053SVVJQUFnQUNnQ0FDZ0NBQkVCQUNBQUtBSmdJUWNMSUFBb0FuZ2lDRUVCYXlJS1FYaHhJUVlnQ2tFSGNTRUVJQUFvQXVRRElRa2dDRUVDU0NFTElBaEJBbXRCQjBraERVRUJJUUlEUUNBQ0lnVkJBV29pQWlFREFrQWdDdzBBUVFBaEFTQUNJUU1nRFVVRVFBTkFJQUlnQTJ3Z0Ftd2dBbXdnQW13Z0Ftd2dBbXdnQW13Z0Ftd2hBeUFCUVFocUlnRWdCa2NOQUFzTFFRQWhBU0FFUlEwQUEwQWdBaUFEYkNFRElBRkJBV29pQVNBRVJ3MEFDd3NnQXlBSFRBMEFDMEVCSVFRZ0JVRUJUUVJBSUFBb0FnQWlBU0FETmdJWUlBRkJPallDRkNBQUlBQW9BZ0FvQWdBUkFRQUxBa0FnQ0VFQVRBMEFJQWxCSUdvaEFpQUlRUU54SVF0QkFDRUdBa0FnQ2tFRFNRUkFRUUFoQXd3QkN5QUlRWHh4SVExQkFDRURRUUFoQ2dOQUlBSWdBMEVDZENJQmFpQUZOZ0lBSUFJZ0FVRUVjbW9nQlRZQ0FDQUNJQUZCQ0hKcUlBVTJBZ0FnQWlBQlFReHlhaUFGTmdJQUlBTkJCR29oQXlBRUlBVnNJQVZzSUFWc0lBVnNJUVFnQ2tFRWFpSUtJQTFIRFFBTEN5QUxCRUFEUUNBQ0lBTkJBblJxSUFVMkFnQWdBMEVCYWlFRElBUWdCV3doQkNBR1FRRnFJZ1lnQzBjTkFBc0xJQWhCQUV3TkFFRUFJUU1nQUNnQ0xFRUNSeUVGUVFFaEJnTkFJQWNnQkNBQ0lBVUVmeUFEQlNBRFFRSjBRYkRDQW1vb0FnQUxRUUowYWlJS0tBSUFJZ0Z0SUFGQkFXb2lDMndpQVU0RVFDQUtJQXMyQWdCQkFDRUdJQUVoQkNBRFFRRnFJZ01nQ0VjTkFRc2dCa0VCY1NFQlFRRWhCa0VBSVFNZ0FVVU5BQXNMSUFBb0FuZ2hBaUFBS0FJQUlnRWdCRFlDR0NBQkFuOGdBa0VEUmdSQUlBRWdDU2dDSURZQ0hDQUJJQWtvQWlRMkFpQWdBU0FKS0FJb05nSWtRZUFBREFFTElBQW9BZ0FoQVVIaEFBczJBaFFnQUVFQklBRW9BZ1FSQWdBZ0FFRUJJQVFnQUNnQ2VDQUFLQUlFS0FJSUVRZ0FJUTRnQUNnQ2VDSUNRUUJLQkVCQkFDRUhJQVFoQVFOQUlBRWdDU0FIUVFKMElnTnFLQUlnSWcxdElRVWdEVUVBU2dSQUlBVkJmSEVoRVNBRlFRTnhJUThnQlVFQmF5RVNJQU1nRG1vaENDQU5RUUZySWhOQkFYWWhGRUVBSVFZRFFDQUVJQVVnQm13aUEwb0VRQ0FHUWY4QmJDQVVhaUFUYlNFTEEwQUNRQ0FGUVFCTURRQkJBQ0VLUVFBaEFrRUFJUkFnRWtFRFR3UkFBMEFnQ0NnQ0FDQUNJQU5xYWlBTE9nQUFJQWdvQWdBZ0FrRUJjaUFEYW1vZ0N6b0FBQ0FJS0FJQUlBSkJBbklnQTJwcUlBczZBQUFnQ0NnQ0FDQUNRUU55SUFOcWFpQUxPZ0FBSUFKQkJHb2hBaUFRUVFScUloQWdFVWNOQUFzTElBOUZEUUFEUUNBSUtBSUFJQUlnQTJwcUlBczZBQUFnQWtFQmFpRUNJQXBCQVdvaUNpQVBSdzBBQ3dzZ0FTQURhaUlESUFSSURRQUxDeUFHUVFGcUlnWWdEVWNOQUFzZ0FDZ0NlQ0VDQ3lBRklRRWdCMEVCYWlJSElBSklEUUFMQ3lBSklBUTJBaFFnQ1NBT05nSVFJQUFRcEFVQ1FDQUFLQUpZUVFKSERRQWdBQ2dDZUVFQVRBMEFJQUFvQW5CQkFYUkJCR29oQVNBQUtBTGtBeUVEUVFBaEFnTkFJQU1nQWtFQ2RHb2dBRUVCSUFFZ0FDZ0NCQ2dDQkJFRUFEWUNSQ0FDUVFGcUlnSWdBQ2dDZUVnTkFBc0xJQXdnQUNnQzVBTTJBaFFMSUFBb0FteEZCRUFnQUNnQ2FFVU5BUXRCQUNFQ0lBQWdBRUVCUVN3Z0FDZ0NCQ2dDQUJFRUFDSUJOZ0xrQXlBQlFRQTJBaWdnQVVFQU5nSWdJQUZCOWdFMkFnd2dBVUgzQVRZQ0FDQUFLQUo0UVFOSEJFQWdBQ2dDQUNJRFFUQTJBaFFnQUNBREtBSUFFUUVBQ3lBQklBQkJBVUdBQVNBQUtBSUVLQUlBRVFRQU5nSVlBMEFnQUVFQlFZQWdJQUFvQWdRb0FnUVJCQUFoQXlBQ1FRSjBJZ1FnQVNnQ0dHb2dBellDQUNBQVFRRkJnQ0FnQUNnQ0JDZ0NCQkVFQUNFRElBRW9BaGdnQkVFRWNtb2dBellDQUNBQ1FRSnFJZ0pCSUVjTkFBc2dBVUVCTmdJY0FrQWdBQ2dDYkFSQVFRZ2hBMEU2SVFRQ1FDQUFLQUpnSWdKQkNFNEVRQ0FDUVlFQ1NRMEJRVHNoQkVHQUFpRURDeUFBS0FJQUlnVWdBellDR0NBRklBUTJBaFFnQUNBQUtBSUFLQUlBRVFFQUN5QUFRUUVnQWtFRElBQW9BZ1FvQWdnUkNBQWhBeUFCSUFJMkFoUWdBU0FETmdJUURBRUxJQUZCQURZQ0VBc2dBQ2dDV0FSQUlBQkJBallDV0NBQklBQkJBU0FBS0FKd1FRWnNRUXhxSUFBb0FnUW9BZ1FSQkFBMkFpQWdBQkNqQlFzZ0RDQUFLQUxrQXpZQ0dBc2dBQ2dDUkVVRVFBSkFJQXdvQWhBRVFFRUFJUUlnQUNBQVFRRkJNQ0FBS0FJRUtBSUFFUVFBSWdFMkF0d0RJQUZCQURZQ0NDQUJRYzRCTmdJQUlBRWdBQ2dDZUNBQUtBSndiQ0lETmdJb0FrQWdBQ2dDd0FKQkFrWUVRQ0FCUWM4Qk5nSU1JQUZCMEFFMkFnUWdBRUVCSUFNZ0FDZ0NCQ2dDQkJFRUFDRUNEQUVMSUFGQjBRRTJBZ3dnQVVIU0FUWUNCQXNnQVNBQ05nSWdJQUFvQWlnaEF5QUFLQUxjQXlJQklBQkJBVUdBQ0NBQUtBSUVLQUlBRVFRQU5nSVFJQUVnQUVFQlFZQUlJQUFvQWdRb0FnQVJCQUEyQWhRZ0FTQUFRUUZCZ0FnZ0FDZ0NCQ2dDQUJFRUFEWUNHQ0FCSUFCQkFVR0FDQ0FBS0FJRUtBSUFFUVFBSWdRMkFod2dBU2dDR0NFRklBRW9BaFFoQmlBQktBSVFJUWRCQUNFQ1FZQi9JUUVDUUNBRFFRZEdCRUFEUUNBSElBSkJBblFpQTJvZ0FVSFRtd3RzUVlDQUFtcEJFSFUyQWdBZ0F5QUdhaUFCUWNTV0RteEJnSUFDYWtFUWRUWUNBQ0FESUFWcUlBRkIzYVI2YkRZQ0FDQURJQVJxSUFGQnpaOTliRUdBZ0FKcU5nSUFJQUZCQVdvaEFTQUNRUUZxSWdKQmdBSkhEUUFNQWdzQUN3TkFJQWNnQWtFQ2RDSURhaUFCUWVuTkJXeEJnSUFDYWtFUWRUWUNBQ0FESUFacUlBRkJvb3NIYkVHQWdBSnFRUkIxTmdJQUlBTWdCV29nQVVHdWtuMXNOZ0lBSUFNZ0JHb2dBVUhuejM1c1FZQ0FBbW8yQWdBZ0FVRUJhaUVCSUFKQkFXb2lBa0dBQWtjTkFBc0xEQUVMSUFBZ0FFRUJRUndnQUNnQ0JDZ0NBQkVFQUNJQk5nTGdBeUFCUVlVQk5nSUFBa0FDUUFKQUlBQW9BaWdpQWtFSFN3MEFBa0JCQVNBQ2RFSE1BWEZGQkVCQkFTQUNkRUV3Y1EwQklBSkJBVWNOQWlBQUtBSWtRUUZIRFFNTUJBc2dBQ2dDSkVFRFJ3MENEQU1MSUFBb0FpUkJCRWNOQVF3Q0N5QUFLQUlrUVFCS0RRRUxJQUFvQWdBaUFrRUxOZ0lVSUFBZ0FpZ0NBQkVCQUFzQ1FDQUFLQUt3QWtVTkFBSkFJQUFvQWloQkFtc09CUUVBQUFBQkFBc2dBQ2dDQUNJQ1FSdzJBaFFnQUNBQ0tBSUFFUUVBQ3dKQUFrQUNRQUpBQWtBQ1FDQUFLQUlzSWdKQkFXc09CZ0FCQkFNRUFnUUxJQUJCQVRZQ2VBSkFBa0FDUUNBQUtBSW9RUUZyRGdjQUFRQUNBZ0lBQWdzZ0FVR0dBVFlDQkNBQUtBSWtJZ0ZCQWtnTkJpQUJRUUZySWdWQkIzRWhBeUFBS0FMWUFTRUVRUUVoQWlBQlFRSnJRUWRQQkVBZ0JVRjRjU0VHUVFBaEJRTkFJQVFnQWtIWUFHeHFJZ0ZCQURZQ05DQUJRUUEyQW93QklBRkJBRFlDNUFFZ0FVRUFOZ0s4QWlBQlFRQTJBcFFESUFGQkFEWUM3QU1nQVVFQU5nTEVCQ0FCUVFBMkFwd0ZJQUpCQ0dvaEFpQUZRUWhxSWdVZ0JrY05BQXNMSUFORkRRWkJBQ0VCQTBBZ0JDQUNRZGdBYkdwQkFEWUNOQ0FDUVFGcUlRSWdBVUVCYWlJQklBTkhEUUFMREFZTEFrQUNRQUpBQWtBZ0FDZ0NzQUlPQWdBQkFnc2dBVUdIQVRZQ0JBd0NDeUFCUVlnQk5nSUVEQUVMSUFBb0FnQWlBVUVjTmdJVUlBQWdBU2dDQUJFQkFBc2dBQ2dDNEFNZ0FFRUJRWUFZSUFBb0FnUW9BZ0FSQkFBaUJEWUNHRUVBSVFFRFFDQUVJQUZCQW5ScUlnSWdBVUdMbVFGc05nSUFJQUpCZ0JCcUlBRkJyenBzUVlDQUFtbzJBZ0FnQWtHQUNHb2dBVUhHckFKc05nSUFJQVFnQVVFQmNpSURRUUowYWlBRFFZdVpBV3cyQWdBZ0FrR0VFR29nQTBHdk9teEJnSUFDYWpZQ0FDQUNRWVFJYWlBRFFjYXNBbXcyQWdBZ0FVRUNhaUlCUVlBQ1J3MEFDd3dGQ3lBQUtBSUFJZ0ZCSERZQ0ZDQUFJQUVvQWdBUkFRQU1CQXNnQUVFRE5nSjRBa0FDUUFKQUFrQUNRQ0FBS0FJb1FRRnJEZ2NBQXdFRUJBUUNCQXNnQVVHSkFUWUNCQXdIQ3lBQlFZb0JOZ0lFSUFBUXNBVU1CZ3NnQVVHS0FUWUNCQ0FBS0FMZ0F5SUJJQUJCQVVHQUNDQUFLQUlFS0FJQUVRUUFOZ0lJSUFFZ0FFRUJRWUFJSUFBb0FnUW9BZ0FSQkFBMkFnd2dBU0FBUVFGQmdBZ2dBQ2dDQkNnQ0FCRUVBRFlDRUNBQklBQkJBVUdBQ0NBQUtBSUVLQUlBRVFRQUlnUTJBaFFnQVNnQ0VDRUZJQUVvQWd3aEJpQUJLQUlJSVFkQkFDRUNRWUIvSVFFRFFDQUhJQUpCQW5RaUEyb2dBVUhUbXd0c1FZQ0FBbXBCRUhVMkFnQWdBeUFHYWlBQlFjU1dEbXhCZ0lBQ2FrRVFkVFlDQUNBRElBVnFJQUZCM2FSNmJEWUNBQ0FESUFScUlBRkJ6Wjk5YkVHQWdBSnFOZ0lBSUFGQkFXb2hBU0FDUVFGcUlnSkJnQUpIRFFBTERBVUxBa0FDUUFKQUlBQW9BckFDRGdJQUFRSUxJQUZCaXdFMkFnUU1CZ3NnQVVHTUFUWUNCQXdGQ3lBQUtBSUFJZ0ZCSERZQ0ZDQUFJQUVvQWdBUkFRQU1CQXNnQUNnQ0FDSUJRUncyQWhRZ0FDQUJLQUlBRVFFQURBTUxJQUJCQXpZQ2VDQUFLQUlvUVFaR0JFQUNRQUpBQWtBZ0FDZ0NzQUlPQWdBQkFnc2dBVUdMQVRZQ0JBd0ZDeUFCUVl3Qk5nSUVEQVFMSUFBb0FnQWlBVUVjTmdJVUlBQWdBU2dDQUJFQkFBd0RDeUFBS0FJQUlnRkJIRFlDRkNBQUlBRW9BZ0FSQVFBTUFnc2dBRUVFTmdKNEFrQUNRQUpBSUFBb0FpaEJCR3NPQWdFQUFnc2dBVUdOQVRZQ0JDQUFFTEFGREFNTElBRkJqZ0UyQWdRTUFnc2dBQ2dDQUNJQlFSdzJBaFFnQUNBQktBSUFFUUVBREFFTElBQW9BaWdnQWtZRVFDQUFJQUFvQWlRMkFuZ2dBVUdPQVRZQ0JBd0JDeUFBS0FJQUlnRkJIRFlDRkNBQUlBRW9BZ0FSQVFBTElBQWdBQ2dDVkFSL1FRRUZJQUFvQW5nTE5nSjhRUUFoQmlBQUlBQkJBVUdnQVNBQUtBSUVLQUlBRVFRQUlnTTJBdHdESUFOQkFEWUNDQ0FEUWRjQk5nSUVJQU5CMkFFMkFnQWdBQ2dDdEFJRVFDQUFLQUlBSWdGQkdqWUNGQ0FBSUFFb0FnQVJBUUFMSUFBb0FpUkJBRW9FUUNBQUtBTFlBU0VCQTBBZ0FDZ0N3QUloQkNBQUtBSzhBaUVISUFBb0FzUUNJUWdnQVNnQ0pDRUpJQUVvQWdnaENpQURJQVpCQW5ScUlnSWdBU2dDS0NBQktBSU1iQ0FBS0FMSUFtMGlCVFlDWkNBSklBcHNJQWh0SVFnQ1FDQUJLQUkwUlFSQUlBSkIyUUUyQWpRTUFRc2dCeUFJUnlBRUlBVkhja1VFUUNBQ1Fkb0JOZ0kwREFFTEFrQWdDRUVCZENBSFJ5SUpJQVFnQlVkeVJRUkFJQUpCMndFMkFqUU1BUXNnQ1NBRlFRRjBJQVJIY2tVRVFDQUNRZHdCTmdJMERBRUxBa0FnQnlBSElBaHRJZ2NnQ0d4ckRRQWdCQ0FFSUFWdElnUWdCV3hyRFFBZ0FrSGRBVFlDTkNBRElBWnFJZ1VnQkRvQWxnRWdCU0FIT2dDTUFRd0JDeUFBS0FJQUlnUkJKellDRkNBQUlBUW9BZ0FSQVFBTElBQW9BZ1FvQWdnaEJDQUNJQUJCQVNBQUtBSndJQUFvQXJ3Q0VJb0RJQUFvQXNBQ0lBUVJDQUEyQWd3TElBRkIyQUJxSVFFZ0JrRUJhaUlHSUFBb0FpUklEUUFMQ3dzZ0FDZ0NiQ0VFSUFBZ0FFRUJRUndnQUNnQ0JDZ0NBQkVFQUNJQk5nTElBeUFCUWdBM0FnZ2dBVUhUQVRZQ0FDQUFLQUpVQkVBQ1FDQUJJQUFvQXNBQ0lnSTJBaEFnQUNnQ0JDRURJQVFFUUNBREtBSVFJUU1nQVNBQVFRRkJBQ0FBS0FKNElBQW9BbkJzSUFBb0FuUWdBaENLQXlBQktBSVFJQU1SQ1FBMkFnZ01BUXNnQVNBQVFRRWdBQ2dDZUNBQUtBSndiQ0FDSUFNb0FnZ1JDQUEyQWd3TEN3dEJBQ0VCSUFBZ0FFRUJRZFFBSUFBb0FnUW9BZ0FSQkFBaUF6WUMyQU1nQTBHUEFUWUNBQ0FBS0FJa1FRQktCRUFnQUNnQzJBRWhBZ05BSUFJZ0FFRUJRWUFDSUFBb0FnUW9BZ0FSQkFBaUJEWUNWQ0FFUVFCQmdBSVFPaG9nQXlBQlFRSjBha0YvTmdJc0lBSkIyQUJxSVFJZ0FVRUJhaUlCSUFBb0FpUklEUUFMQ3dKQUlBQW9BdVFCQkVCQkFDRUNJQUFnQUVFQlFjQUJJQUFvQWdRb0FnQVJCQUFpQVRZQzFBTWdBVUd5QVRZQ0NDQUJRYk1CTmdJQUlBRkJQR3BCQUVHQUFSQTZHaUFCUWZFQU9nQzhBUUpBSUFBb0F1QUJSUTBBSUFBZ0FFRUJJQUFvQWlSQkNIUWdBQ2dDQkNnQ0FCRUVBQ0lCTmdLZ0FTQUFLQUlrUVFCTURRQURRQ0FCUWY4QlFZQUNFRHBCZ0FKcUlRRWdBa0VCYWlJQ0lBQW9BaVJJRFFBTEN3d0JDMEVBSVFJZ0FDQUFRUUZCM0FFZ0FDZ0NCQ2dDQUJFRUFDSUJOZ0xVQXlBQlFia0JOZ0lJSUFGQnVnRTJBZ0FDUUNBQUtBTGdBVVVFUUNBQlFnQTNBbHdnQVVJQU53SlVJQUZDQURjQ1RDQUJRZ0EzQWtRTUFRc2dBQ0FBUVFFZ0FDZ0NKRUVJZENBQUtBSUVLQUlBRVFRQUlnTTJBcUFCSUFBb0FpUkJBRW9FUUFOQUlBTkIvd0ZCZ0FJUU9rR0FBbW9oQXlBQ1FRRnFJZ0lnQUNnQ0pFZ05BQXNMSUFGQ0FEY0NPQ0FCUWdBM0FqQUxDeUFBS0FMTUF5Z0NFQVIvUVFFRklBQW9Ba0JCQUVjTElRSkJBQ0VESUFBZ0FFRUJRZlFBSUFBb0FnUW9BZ0FSQkFBaUFUWUN4QU1nQVVFQU5nSndJQUZCd1FFMkFnZ2dBVUhDQVRZQ0FBSkFJQUlFUUNBQUtBSWtRUUJLQkVBZ0FDZ0MyQUVoQWdOQUlBSW9BZ3doQkNBQUtBTGdBU0VGSUFBb0FnUW9BaFFoQmlBQklBTkJBblJxSUFCQkFVRUJJQUlvQWh3Z0FpZ0NDQkNLQXlBQ0tBSWdJQUlvQWd3UWlnTWdCRUVEYkNBRUlBVWJJQVlSQ1FBMkFrZ2dBa0hZQUdvaEFpQURRUUZxSWdNZ0FDZ0NKRWdOQUFzTElBRkJ3d0UyQWd3Z0FVSEVBVFlDQkNBQklBRkJ5QUJxTmdJUURBRUxJQUVnQUVFQlFZQUtJQUFvQWdRb0FnUVJCQUFpQWpZQ0lDQUJJQUpCZ0FscU5nSkVJQUZCUUdzZ0FrR0FDR28yQWdBZ0FTQUNRWUFIYWpZQ1BDQUJJQUpCZ0FacU5nSTRJQUVnQWtHQUJXbzJBalFnQVNBQ1FZQUVhallDTUNBQklBSkJnQU5xTmdJc0lBRWdBa0dBQW1vMkFpZ2dBU0FDUVlBQmFqWUNKQ0FBS0FLMEEwVUVRQ0FDUVFCQmdBb1FPaG9MSUFGQnhRRTJBZ3dnQVVIR0FUWUNCQ0FCUVFBMkFoQUxJQUFvQWtSRkJFQkJBQ0VESUFBZ0FFRUJRZEFBSUFBb0FnUW9BZ0FSQkFBaUJUWUN3QU1nQlVISUFUWUNBQ0FBS0FMSUFpRUNBbjhnQUNnQzNBTW9BZ2dFUUNBQ1FRRk1CRUFnQUNnQ0FDSUJRVEEyQWhRZ0FDQUJLQUlBRVFFQUlBQW9Bc2dDSVFJTElBQW9Bc0FESWdZZ0FFRUJJQUFvQWlSQkEzUWdBQ2dDQkNnQ0FCRUVBQ0lCTmdJOElBWkJRR3NnQVNBQUtBSWtJZ1JCQW5ScU5nSUFJQVJCQUVvRVFDQUNRUVJxSVFJZ0FDZ0MyQUVoQVFOQUlBQkJBU0FCS0FJb0lBRW9BZ3hzSUFBb0FzZ0NiU0lFSUFKc0lnZEJBM1FnQUNnQ0JDZ0NBQkVFQUNFSUlBTkJBblFpQ1NBR0tBSThhaUFJSUFSQkFuUnFJZ1EyQWdBZ0JpZ0NRQ0FKYWlBRUlBZEJBblJxTmdJQUlBRkIyQUJxSVFFZ0EwRUJhaUlESUFBb0FpUWlCRWdOQUFzTElBQW9Bc2dDSWdKQkFtb01BUXNnQlNBQ05nSTBJQUFvQWlRaEJDQUNDeUVHQWtBZ0JFRUFUQTBBSUFBb0F0Z0JJUUZCQUNFREEwQWdCU0FEUVFKMGFpQUFRUUVnQVNnQ0pDQUJLQUljYkNBQktBSW9JQUVvQWd4c0lBSnRJQVpzSUFBb0FnUW9BZ2dSQ0FBMkFnZ2dBMEVCYWlJRElBQW9BaVJPRFFFZ0FVSFlBR29oQVNBQUtBTElBaUVDREFBTEFBc0xJQUFnQUNnQ0JDZ0NHQkVCQUNBQUlBQW9Bc3dES0FJSUVRRUFBa0FnQUNnQ0NDSUJSUTBBSUFBb0FrQU5BQ0FBS0FMTUF5Z0NFRVVOQUNBQUtBTGdBU0VESUFBb0FpUWhBaUFCUVFBMkFnUWdBQ2dDekFJaEJDQUJRUUEyQWd3Z0FTQUVJQUpCQTJ4QkFtb2dBaUFERzJ3MkFnZ2dBVUVEUVFJZ0FDZ0NiQnMyQWhBZ0RDQU1LQUlNUVFGcU5nSU1DeUFBS0FKQUJFQWdBRUhQQVRZQ0ZFRUJEd3NnQUVITEFUWUNGQXNDUUNBQUtBTE1BeWdDRUVVTkFDQUFLQUlJSVFVRFFDQUZCRUFnQUNBRktBSUFFUUVBQ3dKQUlBQWdBQ2dDekFNb0FnQVJBQUFpQVE0REJRQUNBQXNnQUNnQ0NDSUZSU0FCUVgxeFFRRkhjZzBBSUFVZ0JTZ0NCRUVCYWlJQk5nSUVJQUVnQlNnQ0NDSUNTQTBBSUFVZ0FDZ0N6QUlnQW1vMkFnZ01BQXNBQ3lBQUlBQW9BcEFCTmdLWUFRd0JDeUFBS0FJQUlnSWdBVFlDR0NBQ1FSVTJBaFFnQUNBQUtBSUFLQUlBRVFFQUN5QUFLQUlVUWN3QlJ3UkFJQUFnQUNnQ3ZBTW9BZ0FSQVFBZ0FFSE1BVFlDRkNBQVFRQTJBb3dCQ3dKQUlBQW9BcndES0FJSUJFQWdBRUdNQVdvaEFpQUFLQUtNQVNFRkEwQWdBQ2dDZENJRElBVkxCRUFnQUNnQ0NDSUJCRUFnQVNBRE5nSUlJQUVnQlRZQ0JDQUFJQUVvQWdBUkFRQWdBQ2dDakFFaEJRdEJBQ0VCSUFCQkFDQUNRUUFnQUNnQ3dBTW9BZ1FSQndBZ0JTQUFLQUtNQVNJRlJ3MEJEQU1MSUFBZ0FDZ0N2QU1vQWdRUkFRQWdBQ0FBS0FLOEF5Z0NBQkVCQUVFQUlRVWdBRUVBTmdLTUFTQUFLQUs4QXlnQ0NBMEFDd3NnQUVIT0FVSE5BU0FBS0FKRUd6WUNGRUVCSVFFTEN5QUJDOUlCQVFKL0FrQUNRQ0FBS0FJVUlnRkJ6UUZyUVFGTERRQWdBQ2dDUUEwQUlBQW9Bb3dCSUFBb0FuUkpCRUFnQUNnQ0FDSUJRY1VBTmdJVUlBQWdBU2dDQUJFQkFBc2dBQ0FBS0FLOEF5Z0NCQkVCQUNBQVFkSUJOZ0lVREFFTEFrQUNRQ0FCUWM4QmF3NEVBQUVCQWdFTElBQkIwZ0UyQWhRTUFRc2dBQ2dDQUNJQ0lBRTJBaGdnQWtFVk5nSVVJQUFnQUNnQ0FDZ0NBQkVCQUFzQ1FBTkFJQUFvQXN3RElnRW9BaFFOQVNBQUlBRW9BZ0FSQUFBTkFBdEJBQThMSUFBZ0FDZ0NHQ2dDR0JFQkFDQUFFTFVGUVFFTG5BWUJCWDhnQUNnQ0ZDSURRWDV4UWNnQlJ3UkFJQUFvQWdBaUFpQUROZ0lZSUFKQkZUWUNGQ0FBSUFBb0FnQW9BZ0FSQVFBTEFuOUJBU0VDQWtBQ1FBSkFBa0FDUUNBQUtBSVVJZ05CeUFGckRnc0FBUVFDQWdJQ0FnSURBZ01MSUFBZ0FDZ0N6QU1vQWdRUkFRQWdBQ0FBS0FJWUtBSUlFUUVBSUFCQnlRRTJBaFFMSUFBZ0FDZ0N6QU1vQWdBUkFBQWlBa0VCUncwQ0lBQW9BaVFpQWlFRkFrQUNRQUpBQWtBZ0FrRUJhdzRFQXdJQUFRSUxJQUFvQXRnQklnTW9BckFCSVFSQkFpRUZJQU1vQWdBaUJrRUJSeUlDSUFNb0FsZ2lBMEVDUjNJZ0JFRURSM0pGQkVCQkF5RUNEQU1MSUFJZ0EwRWlSM0pGQkVCQkJ5RUNJQVJCSTBZTkF3c2dCa0hTQUVjZ0EwSEhBRWR5SUFSQndnQkhja1VFUUVFQ0lRSU1Bd3NnQmtIeUFFY2dBMEhuQUVkeVJRUkFRUVloQWlBRVFlSUFSZzBEQ3lBQUtBS2NBZ1JBUVFNaEFnd0RDeUFBS0FLb0FnUkFRUUloQWdKQUFrQWdBQzBBckFJaUF3NENCUUFCQzBFRElRSU1CQXNnQUNnQ0FDSUNJQU0yQWhnZ0FrSDBBRFlDRkNBQVFYOGdBQ2dDQUNnQ0JCRUNBRUVESVFJTUF3c2dBQ2dDQUNJQ0lBWTJBaGdnQWtIeEFEWUNGQ0FDSUFRMkFpQWdBaUFETmdJY0lBQkJBU0FDS0FJRUVRSUFRUU1oQWd3Q0MwRUVJUVVnQUNnQ3FBSkZCRUJCQkNFQ0RBSUxRUVFoQWdKQUFrQWdBQzBBckFJaUF3NERBd0VBQVF0QkJTRUNEQUlMSUFBb0FnQWlBaUFETmdJWUlBSkI5QUEyQWhRZ0FFRi9JQUFvQWdBb0FnUVJBZ0JCQlNFQ0RBRUxRUUFoQWtFQUlRVUxJQUFnQlRZQ0xDQUFJQUkyQWlnZ0FFRUFOZ0tJQVNBQVFZQUNOZ0pnSUFCQ2dvQ0FnQkEzQTFnZ0FFSUJOd05RSUFCQ2dJQ0FnQkEzQTBnZ0FFSUFOd05BSUFCQ2dJQ0FnSUNBZ1BnL053TTRJQUJCQURZQ2JDQUFRZ0EzQW1RZ0FFSEtBVFlDRkNBQUlBQW9BcXdESWdJMkFqUWdBQ0FDTmdJd1FRRU1Bd3NnQUNBQUtBTE1BeWdDQUJFQUFBd0NDeUFBS0FJQUlnSWdBellDR0NBQ1FSVTJBaFFnQUNBQUtBSUFLQUlBRVFFQVFRQWhBZ3NnQWdzaUFrRUNSZ1JBSUFFRVFDQUFLQUlBSWdGQk5UWUNGQ0FBSUFFb0FnQVJBUUFMSUFBUXRRVUxJQUlMQndBZ0FCQzBCUXVpQndFQmZ5QUFRUUEyQWdRZ0FVSGFBRWNFUUNBQUtBSUFRbzJBZ0lDZ0N6Y0NGQ0FBS0FJQUlBRTJBaHdnQUNBQUtBSUFLQUlBRVFFQUN5QUNRZWdEUndSQUlBQW9BZ0JDbG9DQWdJQTlOd0lVSUFBb0FnQWdBallDSENBQUlBQW9BZ0FvQWdBUkFRQUxJQUFvQWdBaEFTQUFLQUlNSVFJZ0FFRUVha0VBUWVRREVEb2FJQUJCQVRZQ0VDQUFJQUkyQWd3Z0FDQUJOZ0lBSXdCQkVHc2lBaVFBSUFCQkFEWUNCQ0FDUVFBMkFneEIxQUFRT1NJQlJRUkFJQUFvQWdCQ09EY0NGQ0FBSUFBb0FnQW9BZ0FSQVFBTElBRkJnSlRyM0FNMkFqQWdBVUhqQVRZQ0tDQUJRZVFCTmdJa0lBRkI1UUUyQWlBZ0FVSG1BVFlDSENBQlFlY0JOZ0lZSUFGQjZBRTJBaFFnQVVIcEFUWUNFQ0FCUWVvQk5nSU1JQUZCNndFMkFnZ2dBVUhzQVRZQ0JDQUJRZTBCTmdJQUlBRkNBRGNDTkNBQlFRQTJBaXdnQVVIVUFEWUNUQ0FCUWdBM0Fqd2dBVUlBTndKRUlBQWdBVFlDQkFKQVFhNlFBaENGQXlJRFJRMEFJQUpCK0FBNkFBc2dBaUFDUVF4cU5nSUFJQUlnQWtFTGFqWUNCQ0FEUWRLTEFpQUNFT3NCUVFCTURRQWdBaWdDRENFRElBSXRBQXRCM3dGeFFjMEFSZ1JBSUFJZ0EwSG9CMndpQXpZQ0RBc2dBU0FEUWVnSGJEWUNMQXNnQWtFUWFpUUFJQUJCQURZQ3VBSWdBRUVBTmdJWUlBQkJBRFlDQ0NBQVFnQTNBcVFCSUFCQ0FEY0NyQUVnQUVJQU53SzBBU0FBUWdBM0Fyd0JJQUJDQURjQ3hBRWdBRUlBTndMTUFTQUFJQUJCQUVHc0FTQUFLQUlFS0FJQUVRUUFJZ0UyQXRBRElBRkNBRGNDWUNBQlFZQUJOZ0ljSUFGQmdRRTJBZ2dnQVVHQ0FUWUNCQ0FCUVlNQk5nSUFJQUZCQURZQ2FDQUJRWUFCTmdJa0lBRkJnQUUyQWlnZ0FVSUFOd0pzSUFGQmdBRTJBaXdnQVVHQUFUWUNNQ0FCUWdBM0FuUWdBVUdBQVRZQ05DQUJRWUFCTmdJNElBRkNBRGNDZkNBQlFZQUJOZ0k4SUFGQkFEWUNoQUVnQVVGQWEwR0FBVFlDQUNBQlFnQTNBb2dCSUFGQmdBRTJBa1FnQVVHQUFUWUNTQ0FCUVlBQk5nSk1JQUZCZ0FFMkFsQWdBVUlBTndLUUFTQUJRWUFCTmdKVUlBRkNBRGNDbUFFZ0FVRUFOZ0tnQVNBQlFZQUJOZ0pjSUFGQmhBRTJBaUFnQVVHRUFUWUNXQ0FBUVFBMkFyZ0RJQUJCQURZQ2tBRWdBRUVBTmdMWUFTQUFLQUxRQXlJQlFRQTJBcVFCSUFGQkFEWUNHQ0FCUWdBM0Fnd2dBQ0FBUVFCQkhDQUFLQUlFS0FJQUVRUUFJZ0UyQXN3RElBRkJBVFlDR0NBQlFnQTNBaEFnQVVIOEFEWUNEQ0FCUWYwQU5nSUlJQUZCL2dBMkFnUWdBVUgvQURZQ0FDQUFRY2dCTmdJVUN5SUJBWDFCZnlBQUtnSUFJQUVxQWdDVElnSkRBQUFBQUY0Z0FrTUFBQUFBWFJzTEVBQWdBU0FDSUFNZ0FDZ0NBQkVFQUFzNUFRRi9JQUFvQWdRaUJFRUJkU0FCYWlFQklBQW9BZ0FoQUNBQklBSWdBeUFFUVFGeEJIOGdBU2dDQUNBQWFpZ0NBQVVnQUFzUkJRQUxOd0VCZnlBQUtBSUVJZ05CQVhVZ0FXb2hBU0FBS0FJQUlRQWdBU0FDSUFOQkFYRUVmeUFCS0FJQUlBQnFLQUlBQlNBQUN4RUNBQXMwQVFGL0l3QkJFR3NpQkNRQUlBQW9BZ0FoQUNBRUlBTTJBZ3dnQVNBQ0lBUkJER29nQUJFRUFDRUFJQVJCRUdva0FDQUFDMVFCQW44akFFRVFheUlFSkFBZ0FDZ0NCQ0lGUVFGMUlBRnFJUUVnQUNnQ0FDRUFJQVZCQVhFRVFDQUJLQUlBSUFCcUtBSUFJUUFMSUFRZ0F6WUNEQ0FCSUFJZ0JFRU1haUFBRVFVQUlBUkJFR29rQUF0U0FRSi9Jd0JCRUdzaUF5UUFJQUFvQWdRaUJFRUJkU0FCYWlFQklBQW9BZ0FoQUNBRVFRRnhCRUFnQVNnQ0FDQUFhaWdDQUNFQUN5QURJQUkyQWd3Z0FTQURRUXhxSUFBUkFnQWdBMEVRYWlRQUN6WUJBWDhqQUVFUWF5SUVKQUFnQUNnQ0FDRUFJQVFnQXhDTkF5QUJJQUlnQkNBQUVRUUFJUUFnQkJBNEdpQUVRUkJxSkFBZ0FBdFdBUUovSXdCQkVHc2lCQ1FBSUFBb0FnUWlCVUVCZFNBQmFpRUJJQUFvQWdBaEFDQUZRUUZ4QkVBZ0FTZ0NBQ0FBYWlnQ0FDRUFDeUFFSUFNUWpRTWdBU0FDSUFRZ0FCRUZBQ0FFRURnYUlBUkJFR29rQUF0VUFRSi9Jd0JCRUdzaUF5UUFJQUFvQWdRaUJFRUJkU0FCYWlFQklBQW9BZ0FoQUNBRVFRRnhCRUFnQVNnQ0FDQUFhaWdDQUNFQUN5QURJQUlRalFNZ0FTQURJQUFSQWdBZ0F4QTRHaUFEUVJCcUpBQUxDd0FnQVNBQ0lBQVJBZ0FMS3dJQmZ3RjhJd0JCRUdzaUFpUUFJQUlnQVNBQUVSMEFPUU1JSUFJckF3Z2hBeUFDUVJCcUpBQWdBd3NMQUNBQklBSWdBQkVVQUFzbkFRRi9Jd0JCRUdzaUFTUUFJQUVnQUJFUEFEWUNEQ0FCS0FJTUlRQWdBVUVRYWlRQUlBQUxDUUFnQVNBQUVRRUFDdzhBSUFFZ0FDZ0NBR29nQWpZQ0FBc05BQ0FCSUFBb0FnQnFLQUlBQ3lJQkFYOUJFQkJPSWdEOURBQUFBQUFBQUFBQUFBQUFBQUFBQUFEOUN3TUFJQUFMS0FFQmZ5TUFRUkJySWdNa0FDQURJQUVnQWlBQUVRVUFJQU1RdHdVaEFDQURRUkJxSkFBZ0FBc3JBUUYvSXdCQkVHc2lBeVFBSUFNZ0FTQUNJQUFSQXdBMkFnd2dBeWdDRENFQUlBTkJFR29rQUNBQUN6VUJBWDhqQUVFUWF5SUNKQUFnQWlBQkVJMERJQUlnQWlBQUVRQUFOZ0lNSUFJb0Fnd2hBQ0FDRURnYUlBSkJFR29rQUNBQUN6QUJBWDhqQUVFUWF5SURKQUFnQXlBQklBSWdBQkVGQUVFTUVFNGdBeENQQkNFQUlBTVFkQ0FEUVJCcUpBQWdBQXNwQVFGL0l3QkJFR3NpQWlRQUlBSWdBU0FBRVFBQU5nSU1JQUlvQWd3aEFDQUNRUkJxSkFBZ0FBc3RBUUYvSXdCQkVHc2lCQ1FBSUFRZ0FTQUNJQU1nQUJFRUFEWUNEQ0FFS0FJTUlRQWdCRUVRYWlRQUlBQUxGUUFnQUNBQkVMa0ZJQUw5QUFJQS9Rc0NBRUVCQzJRQkFuOGdBUkM0QVNBQ1N3UkFJQUVnQWhDNUJTRURJd0JCRUdzaUFpUUFJd0JCRUdzaUFTUUFJQUVnQWtFSWFpSUVOZ0lNSUFGQkRHb2dBeEMzQlJEZ0F5QUJRUkJxSkFBZ0FFSFlyQUlnQkJBT05nSUFJQUpCRUdva0FBOExJQUFRNUFNTGdBTUJCSDhnQVNBQUVMZ0JJZ05MQkVBakFFRWdheUlHSkFBQ1FDQUJJQU5ySWdRZ0FCQTBLQUlBSUFBb0FnUnJRUVIxVFFSQUl3QkJFR3NpQlNRQUlBVWdBQ0FFRU1RRklnTW9BZ1FoQVNBREtBSUlJUVFEUUNBQklBUkdCRUFnQXhCdUlBVkJFR29rQUFVZ0FCQTBJQUVnQWhDUEF5QURJQUZCRUdvaUFUWUNCQXdCQ3dzTUFRc2dBQkEwSVFFZ0JrRUlhaUFBSUFBUXVBRWdCR29Rd3dVZ0FCQzRBU0FCRU1JRklRTWpBRUVRYXlJQkpBQWdBU0FES0FJSU5nSUFJQU1vQWdnaEJTQUJJQU5CQ0dvMkFnZ2dBU0FGSUFSQkJIUnFOZ0lFSUFFb0FnQWhCQU5BSUFFb0FnUWdCRWNFUUNBREtBSVFJQUVvQWdBZ0FoQ1BBeUFCSUFFb0FnQkJFR29pQkRZQ0FBd0JDd3NnQVJDcUFTQUJRUkJxSkFBZ0FDQURFTUVGSUFNUXdBVUxJQVpCSUdva0FBOExJQUVnQTBrRVFDQUFLQUlBSUFGQkJIUnFJUUVnQUJDNEFSb2dBQ0FCRU1vRklBQW9BZ0FhSUFBb0FnQWdBQkNMQWtFRWRHb2FJQUFvQWdBYUlBQW9BZ0FnQUJDNEFVRUVkR29hQ3dzUUFDQUFCRUFnQUJEWkJRc2dBQkF6Q3dZQVFhQ3JBZ3NXQUNBQ0tBSUFJUUlnQUNBQkVEc2dBallDQUVFQkMySUJBbjhnQVJCRElBSkxCRUFnQVNBQ0VEc2hBeU1BUVJCcklnSWtBQ01BUVJCcklnRWtBQ0FCSUFKQkNHb2lCRFlDRENBQlFReHFJQU1vQWdBUTRBTWdBVUVRYWlRQUlBQkJvT2tESUFRUURqWUNBQ0FDUVJCcUpBQVBDeUFBRU9RREN3OEFJQUFFUUNBQUVIUUxJQUFRTXdzR0FFSEFxQUlMcWdJQkFuOENRQ0FDSUFBZ0FSQ1dBU0lBUndSL0lBQVFoZ0ZGQkVBZ0FoQ0dBVVVFUUNBQUlBSW9BZ2cyQWdnZ0FDQUNLUUlBTndJQURBTUxJQUlRUGlFRElBSVFOeUVCSXdCQkVHc2lBaVFBQWtBZ0FVRUtUUVJBSUFBZ0FSQ1BBU0FBSUFNZ0FSQzNBU0FDUVFBNkFBOGdBQ0FCYWlBQ1FROXFFSVVCREFFTElBQkJDaUFCUVFwcklBQXRBQXNpQUVFQUlBQWdBU0FERUxNREN5QUNRUkJxSkFBTUFnc2dBaEErSVFNZ0FoQTNJUUVqQUVFUWF5SUNKQUFDUUNBQklBQVE2Z0VpQkVrRVFDQUFLQUlBSVFRZ0FDQUJFSWtCSUFRZ0F5QUJFTGNCSUFKQkFEb0FEeUFCSUFScUlBSkJEMm9RaFFFTUFRc2dBQ0FFUVFGcklBRWdCR3RCQVdvZ0FDZ0NCQ0lBUVFBZ0FDQUJJQU1Rc3dNTElBSkJFR29rQUVFQUJTQUFDeG9MUVFFTGhRRUJBbjhnQVJCV0lBSkxCRUFnQVNBQ0VKWUJJUUVqQUVFUWF5SUNKQUFnQUFKL0l3QkJFR3NpQUNRQUlBQWdBa0VJYWlJRU5nSU1JQUVRTjBFRWFoQTVJZ01nQVJBM05nSUFJQU5CQkdvZ0FSQStJQUVRTnhBL0dpQUFRUXhxSUFNUTRBTWdBRUVRYWlRQVFiaW1BaUFFRUE0TE5nSUFJQUpCRUdva0FBOExJQUFRNUFNTHZnSUJCSDhnQVNBQUVGWWlBMHNFUUNNQVFTQnJJZ1lrQUFKQUlBRWdBMnNpQVNBQUVEUW9BZ0FnQUNnQ0JHdEJERzFOQkVBakFFRVFheUlFSkFBZ0JDQUFJQUVRNmdJaUF5Z0NCQ0VCSUFNb0FnZ2hCUU5BSUFFZ0JVWUVRQ0FERUc0Z0JFRVFhaVFBQlNBQUVEUWdBU0FDRUk0RElBTWdBVUVNYWlJQk5nSUVEQUVMQ3d3QkN5QUFFRFFoQXlBR1FRaHFJQUFnQUJCV0lBRnFFTGdDSUFBUVZpQURFTDRGSVFNakFFRVFheUlFSkFBZ0JDQURRUWhxSUFFUXhRWWlBU2dDQUNFRkEwQWdBU2dDQkNBRlJ3UkFJQU1vQWhBZ0FTZ0NBQ0FDRUk0RElBRWdBU2dDQUVFTWFpSUZOZ0lBREFFTEN5QUJFS29CSUFSQkVHb2tBQ0FBSUFNUXZRVWdBeEM4QlFzZ0JrRWdhaVFBRHdzZ0FTQURTUVJBSUFBb0FnQWdBVUVNYkdvaEFTQUFFRlloQWlBQUlBRVF1Z1VnQUNBQ0VPQUNDd3VpQVFFQ2Z5QUFLQUlFSUFBUU5DZ0NBRWNFUUNNQVFSQnJJZ01rQUNBRElBQkJBUkRxQWlFQ0lBQVFOQ0FDS0FJRUlBRVFqZ01nQWlBQ0tBSUVRUXhxTmdJRUlBSVFiaUFEUVJCcUpBQVBDeU1BUVNCcklnTWtBQ0FBRURRaUFpQURRUWhxSUFBZ0FCQldRUUZxRUxnQ0lBQVFWaUFDRUw0RklnSW9BZ2dnQVJDT0F5QUNJQUlvQWdoQkRHbzJBZ2dnQUNBQ0VMMEZJQUlRdkFVZ0EwRWdhaVFBQ3pvQkFYOGdBQVJBSUFBUWhnSWdBQ2dDQUFSQUlBQWdBQ2dDQUJDNkJTQUFFRFFhSUFBb0FnQWhBU0FBRUx3QkdpQUJFRE1MQ3lBQUVETUxCZ0JCeUtNQ0Mrc2dBZ3g4RFg4akFFRXdheUlXSkFCQmlKWUVRWWlXQkNnQ0FDSVNRUUZxTmdJQUlCWWdFallDTENBV1FTeHFFSHdoRkNBV0tBSXNJUThnRkNBQk5nTFVBU0FVSUFBMkF0QUJJQlFnRHpZQ0FDQVVJQUFnQVd3aUFFRUNkQ0lCTmdMSUFTQVVJQUVRT1RZQ3hBRWdGQ0FBRURrMkFzd0JJd0JCTUdzaUVpUUFJQklnQWpZQ0tDQVNJQTgyQWl3Z0VrSGNsUVFnRWtFc2FoQnpOZ0lRSUJJUWF6WUNJQUpBQWtBQ1FDQVNRUkJxSUJKQklHb1FlQTBBSUJKQkxHb1FmQ0VUSUJKQjhKVUVJQkpCS0dvUWN6WUNFQ0FTRUdzMkFpQWdFa0VRYWlBU1FTQnFFSGdOQUNBVFFRaHFJQkpCS0dvUTJBVkJ1QUVRUHlFQUlCTW9BZ3doQVFKQUlCTW9BZ2dpQWlBVEtBTFFBVVlFUUNBQklCTW9BdFFCUmcwQkN5QVNJQUUyQWdRZ0VpQUNOZ0lBUVFCQkFrSHpvQUlnRWhBOElCTW9BdEFCSVFFZ0FDZ0NBQ0VDSUFBb0FnUWhFQ0FBSUJNb0F0UUJJaEUyQWdRZ0FDQUJOZ0lBSUFCQkNHb2hEeUFSdHlBUXQ2TWhBeUFCdHlBQ3Q2TWhCRUVBSVFFRFFDQUJRUVJIQkVBZ0R5QUJRUU4wSWdKcUlBUWdBaUFQYWlzREFLSTVBd0FnQUNBQ2FpSUNJQU1nQWlzREtLSTVBeWdnQWlBQ0t3TklPUU5JSUFGQkFXb2hBUXdCQ3dzQ1FBSkFBa0FDUUFKQUFrQWdBQ2dDc0FFaUFVRUJhdzRFQXdJQkFBVUxJQUFnQUNzRGFEa0RhQ0FBSUFBckEzQTVBM0FnQUNBQUt3TjRPUU40SUFBZ0FDc0RnQUU1QTRBQklBQWdCQ0FBS3dPSUFhSTVBNGdCSUFBZ0F5QUFLd09RQWFJNUE1QUJJQUFnQkNBQUt3T1lBYUk1QTVnQklBQWdBeUFBS3dPZ0FhSTVBNkFCSUFBZ0FDc0RxQUU1QTZnQkRBTUxJQUFnQkNBQUt3Tm9vamtEYUNBQUlBTWdBQ3NEY0tJNUEzQWdBQ0FBS3dONE9RTjRJQUFnQUNzRGdBRTVBNEFCSUFBZ0FDc0RpQUVnQkNBRG9xTTVBNGdCSUFBZ0FDc0RrQUVnQXlBRUlBU2lJQU9pb3FNNUE1QUJEQUlMSUFBZ0JDQUFLd05vb2prRGFDQUFJQU1nQUNzRGNLSTVBM0FnQUNBQUt3TjRPUU40SUFBZ0FDc0RnQUVnQkNBRG9xTTVBNEFCSUFBZ0FDc0RpQUVnQXlBRUlBU2lJQU9pb3FNNUE0Z0JEQUVMSUFBZ0JDQUFLd05vb2prRGFDQUFJQU1nQUNzRGNLSTVBM0FnQUNBQUt3TjRPUU40SUFBZ0FDc0RnQUVnQkNBRG9xTTVBNEFCQ3lBQUlBRTJBckFCQ3dzZ0V4RGJCU0FUQW44akFFRWdheUlQSkFCQjBBRVFPU0lCQkVBQ1FDQUJJQUJCdUFFUVB5SVFJQUFvQWdCQkhtb2lBVFlDd0FFZ0FDZ0NCQ0VDSUJCQkR6WUN6QUVnRUVFUE5nTElBU0FRSUFKQkhtb2lGVFlDeEFFZ0VDQUJJQlZzUVFOMEloRVFPU0lDTmdLNEFTQUNSUTBBSUJBZ0VSQTVJaEUyQXJ3QklCRkZEUUFnRlVFQUlCVkJBRW9iSVJvZ0FVRUFJQUZCQUVvYklSZ2dBRUhvQUdvaEFTQUFLQUt3QVNFWkEwQWdGeUFhUndSQUlCZEJEMnV5dXlFR1FRQWhGUU5BSUJVZ0dFY0VRQ0FWUVE5cnNyc2lDU0VEQWtBZ0R3SjhBa0FDUUFKQUFrQWdHVUVCYXc0RUF3SUJBQVVMSUE4Z0FTc0RHQ0lISUFNZ0FTc0RNQ0lLb1NBQkt3TkFJZ1NpSUFFckF5QWlDNk1pQXlBRG9DQURvaUFESUFPaUlBWWdBU3NET0NJTW9TQUVvaUFCS3dNb0lnMmpJZ1FnQktLZ0lnV2dvaUFESUFFckF3Z2dCYUlnQmFJZ0FTc0RBQ0FGb2tRQUFBQUFBQUR3UDZDZ0lnNmlJQVFnQVNzREVDSUlJQWlnSUFPaW9xQ2dJQXVpSUFxZ09RTUlJQXdnRFNBSElBZWdJQU9pSUFTaUlBUWdEcUlnQ0NBRUlBU2dJQVNpSUFXZ29xQ2dvcUFNQXdzZ0FTc0RFQ0lISUFZZ0FTc0RDS0dpSVFRZ0F5QUJLd01BSWdXaElBZWlJZ05FQUFBQUFBQUFBQUJpSUFSRUFBQUFBQUFBQUFCaWNrVUVRQ0FQSUFVNUF3Z2dBU3NEQ0F3REN5QVBJQU1nQXlBRG9pQUVJQVNpb0NJRElBRXJBeWhFQUFBQUFJVFhsMEdqUkFBQUFBQUFhdmpBbzZJZ0E2SWdBU3NESUVRQUFBQUFoTmVYd2FNZ0E2SkVBQUFBQUFBQThEK2dvQ0lEb2lBQkt3TVlvaUFGb0RrRENDQUVJQU9pSUFFckF3aWdEQUlMSUFFckF4QWlCeUFHSUFFckF3aWhvaUVFSUFNZ0FTc0RBQ0lGb1NBSG9pSURSQUFBQUFBQUFBQUFZaUFFUkFBQUFBQUFBQUFBWW5KRkJFQWdEeUFGT1FNSUlBRXJBd2dNQWdzZ0R5QURJQU1nQTZJZ0JDQUVvcUFpQXlBQkt3TWdSQUFBQUFDRTE1ZEJvMFFBQUFBQUFHcjR3S09pSUFPaUlBRXJBeGhFQUFBQUFJVFhsOEdqSUFPaVJBQUFBQUFBQVBBL29LQWlBNklnQmFBNUF3Z2dCQ0FEb2lBQkt3TUlvQXdCQ3lBQkt3TVFJZ2NnQmlBQkt3TUlvYUloQkNBRElBRXJBd0FpQmFFZ0I2SWlBMFFBQUFBQUFBQUFBR0lnQkVRQUFBQUFBQUFBQUdKeVJRUkFJQThnQlRrRENDQUJLd01JREFFTElBOGdBeUFCS3dNWVJBQUFBQUNFMTVmQm95QURJQU9pSUFRZ0JLS2dva1FBQUFBQUFBRHdQNkFpQTZJZ0JhQTVBd2dnQkNBRG9pQUJLd01Jb0FzNUF3QUxJQUlnRHlzRENMWTRBZ0FnQWlBUEt3TUF0amdDQkNBQklBa2dCaUFQUVJocUlBOUJFR29nR1JDMkJpQVJJQThyQXhpMk9BSUFJQkVnRHlzREVMWTRBZ1FnRlVFQmFpRVZJQkZCQ0dvaEVTQUNRUWhxSVFJTUFRc0xJQmRCQVdvaEZ3d0JDd3NnRDBFZ2FpUUFJQkFNQWdzTERBSUxJZ0kyQXNBQklBSkZCRUFnRWtFUWFrR2FuUUlRU3lJQUVQQUJJQUFRT0JvTUFRc2dFd0ovUWFDSHJ3TVFPU0lCQkVBQ1FDQUJRUUEyQW9pSHJ3TWdBVUtBZ0lDQWNEY0RBQ0FCUVFNMkFwaUhyd01nQVVLQWdJQ0FnSUNBOEQ4M0E1Q0hyd01nQVVLQWdJQ0FJRGNER0NBQlF1UUFOd01RSUFGQ2dJQ0FnQkEzQXdnZ0FTQUNOZ0lnSUFGQjVJYW5BbXBCQURZQ0FDQUJJQUlvQWdBaUR6WUNKQ0FDS0FJRUlRSWdBVUhvaHFjQ2FrRUFOZ0lBSUFGQkFEWUNzSGdnQVVFQU5nSXNJQUVnQWpZQ0tDQUJRUUEyQXZpS3BnSWdBU0FDSUE5c1FRRjBFRGtpQWpZQzRJYW5BaUFDUlEwQUlBRkJBRFlDOElhdkF5QUJRUUFReUFjZ0FVRi9OZ0wwaHE4RElBRkJBQkRhQmhvZ0FRUkFJQUZCQURZQy9JYXZBeUFCUVFjMkF2aUdyd01MSUFFTUFnc0xEQUlMSWdFMkF0Z0JJQUZGQkVBZ0VrRVFha0hGblFJUVN5SUFFUEFCSUFBUU9Cb01BUXNnRXlnQ29BUWhBaU1BUVJCcklnOGtBQUpBSUFGRkRRQWdBU2dDQkNBQ1JnMEFJQUpCRGswRVFBSkFBa0JCQVNBQ2RFSGZIM0VFUUNBQklBSTJBZ1FnQVNBQ0VPSUdOZ0lJSUFFb0FoaEJBV3NPQkFFRUJBSUVDeUFCSUFJMkFnUWdBU0FDRU9JR05nSUlBa0FDUUNBQktBSVlEZ1FBQlFVQkJRc2dBVUVCTmdJWURBUUxJQUZCQkRZQ0dBd0RDeUFCUVFRMkFoZ01BZ3NnQVVFRE5nSVlEQUVMSUE4Z0FqWUNBRUVBUVFOQjJjQUFJQThRUEFzZ0QwRVFhaVFBSUJNQ2Z5QUFRUWhxSVFGQkJCQTVJZ0FFUUNBQUlBRVE3d01pQVRZQ0FDQUJCSDhnQUFVZ0FCQXpRUUFMREFFTERBSUxJZ0EyQXR3QklBQkZCRUFnRWtFUWFrRzIvQUVRU3lJQUVQQUJJQUFRT0JvTUFRc2dFeWdDd0FFaEFTQVRLd09JQXlFRUlCTXJBNUFESVFNZ0UwR2dBMm9oRjBFQUlSQkJBQ0VDSXdCQmtBTnJJZ0FrQUNBQktBSUVJUmtnQVNnQ0FDRWFJQUJCc0FKcUlROGpBRUhnQUdzaUVTUUFBa0FnQVVFSWFpSVZLd05ZUkFBQUFBQUFBQUFBWmtVRVFBTkFRUUFoQVNBUVFRTkdEUUlEUUNBQlFRUkhCRUFnQVVFRGRDSVlJQkVnRUVFRmRDSWJhbW9nRlNBYmFpQVlhaXNEQUpvNUF3QWdBVUVCYWlFQkRBRUxDeUFRUVFGcUlSQU1BQXNBQ3dOQVFRQWhBU0FRUVFOR0RRRURRQ0FCUVFSSEJFQWdBVUVEZENJWUlCRWdFRUVGZENJYmFtb2dGU0FiYWlBWWFpc0RBRGtEQUNBQlFRRnFJUUVNQVFzTElCQkJBV29oRUF3QUN3QUxRUUFoRUFKQUEzOUJBQ0VCSUJCQkEwWUVmeUFQSUJFckEwQWlCaUFSS3dOSUlnVWdFU3NEVUNJSEVJd0VJZ2c1QTFBZ0FDQUdJQWlqSWdZNUE1QUNJQUFnQlNBUEt3TlFveUlGT1FPWUFpQUFJQWNnRHlzRFVLTWlCemtEb0FJZ0FDQVJLd05ZSUE4ckExQ2pPUU9vQWlBUElBWWdCU0FISUJFckF5QWlCU0FSS3dNb0lnY2dFU3NETUNJSUVJa0VJZ1k1QXpBZ0R5QUZJQVlnQUNzRGtBS2lvU0lGSUFjZ0JpQUFLd09ZQXFLaElnY2dDQ0FHSUFBckE2QUNvcUVpQmhDTUJDSUlPUU1vSUFBZ0JTQUlvemtEOEFFZ0FDQUhJQThyQXlpak9RUDRBU0FBSUFZZ0R5c0RLS001QTRBQ0lBOGdBQ3NEa0FJZ0FDc0RtQUlnQUNzRG9BSWdFU3NEQUNJSElCRXJBd2dpQ0NBUkt3TVFJZ2tRaVFRaUJqa0RFQ0FQSUFBckEvQUJJQUFyQS9nQklBQXJBNEFDSUFjZ0NDQUpFSWtFSWdVNUF3Z2dEeUFISUFVZ0FDc0Q4QUdpb1NBR0lBQXJBNUFDb3FFaUJ5QUlJQVVnQUNzRCtBR2lvU0FHSUFBckE1Z0NvcUVpQ0NBSklBVWdBQ3NEZ0FLaW9TQUdJQUFyQTZBQ29xRWlCaENNQkNJRk9RTUFJQUFnQnlBRm96a0QwQUVnQUNBSUlBOHJBd0NqT1FQWUFTQUFJQVlnRHlzREFLTTVBK0FCSUFBZ0VTc0RPQ0FQS3dNd0lBQXJBNmdDSWdhaW9TQVBLd01vb3lJRk9RT0lBaUFBSUJFckF4Z2dEeXNEQ0NBRm9xRWdCaUFQS3dNUW9xRWdEeXNEQUtNNUErZ0JRUUFoRUFOL1FRQWhBU0FRUVFOR0JIOGdFVUhnQUdva0FFRUFCUU5BSUFGQkEwY0VRQ0FQSUJCQkJYUnFJQUZCQTNScUloVWdGU3NEQUNBUEt3TlFvemtEQUNBQlFRRnFJUUVNQVFzTElCQkJBV29oRUF3QkN3c0ZBMEFnQVVFRVJ3UkFJQThnRUVFRmRHb2dBVUVEZEdwQ0FEY0RBQ0FCUVFGcUlRRU1BUXNMSUJCQkFXb2hFQXdCQ3d0QkFFNEVRQ0FaUVFGcnR5RUdBMEFnQWtFRVJnUkFJQUFyQTRBRElRVkJBQ0VCQTBCQkFDRUNJQUZCQTBjRVFBTkFJQUpCQTBjRVFDQUNRUU4wSWc4Z0FFR0FBV29nQVVFWWJHcHFJQUJCc0FKcUlBRkJCWFJxSUE5cUt3TUFJQVdqT1FNQUlBSkJBV29oQWd3QkN3c2dBVUVCYWlFQkRBRUxDeUFBUWdBM0F5QWdBRUlBTndNNElBQkJRR3RDQURjREFDQUFRZ0EzQTBnZ0FFSUFOd05vSUFBZ0JDQURvQ0FFSUFPaElnV2pPUU5RSUFBZ0F5QURvQ0FFb2lBRm96a0RXQ0FBSUFBckE2QUJSQUFBQUFBQUFBREFvaUFHb3prREtDQUFJQUFyQTZnQklnTWdBNkFnQnFORUFBQUFBQUFBOEwrZ21qa0RNQ0FBUWdBM0F4Z2dBRUlBTndOZ0lBQWdBQ3NEZ0FFaUF5QURvQ0FhUVFGcnR5SURvemtEQUNBQUlBQXJBNGdCSWdRZ0JLQWdBNk01QXdnZ0FDQUFLd09RQVNJRUlBU2dJQU9qUkFBQUFBQUFBUEMvb0pvNUF4QWdBRUlBTndONElBQkNnSUNBZ0lDQWdQaS9memNEY0NBQUt3T29BaUVGSUFBckE0Z0NJUWRCQUNFQklBQXJBK2dCSVFnRFFDQUJRUVJHRFFRZ0FDQUJRUVYwYWlJUEt3TVFJUU1nRHlzRENDRUVJQThyQXdBaEJrRUFJUUlEUUNBQ1FRTkhCRUFnRnlBQ1FRSjBJQUZxUVFOMGFpQURJQUJCMEFGcUlBSkJBM1JxSWhCQlFHc3JBd0NpSUFZZ0VDc0RBS0lnQkNBUUt3TWdvcUNnT1FNQUlBSkJBV29oQWd3QkN3c2dBVUVEZENBWGFpQURJQVdpSUFZZ0NLSWdCQ0FIb3FDZ0lBOHJBeGlnT1FOZ0lBRkJBV29oQVF3QUN3QUZJQUJCc0FKcUlBSkJBM1JxSWdFZ0JpQUJRVUJyS3dNQW9pQUJLd01nb1RrRElDQUNRUUZxSVFJTUFRc0FDd0FMUVFCQkEwR05EVUVBRUR3TElBQkJrQU5xSkFBZ0V5QVRLQUxBQVJDekJUWUM0QUVMSUJKQk1Hb2tBQXdCQzBFQVFRTkJwQTVCQUJBOFFRRVFBd0FMSUJaQklHcEJxNGtDRUVzaUFDQVVLQUxJQVJESEFTQUFFRGdhSUJRb0FnQWhBQ0FVS0FMRUFTRUJJQlFvQXNnQklRSWdGaUFVS0FMTUFUWUNGQ0FXUVpDV0JEWUNFQ0FXSUJSQm9BTnFOZ0lNSUJZZ0FqWUNDQ0FXSUFFMkFnUWdGaUFBTmdJQVFZV1RCRUhFb1FJZ0ZoQUlHaUFVS0FJQUlRQWdGa0V3YWlRQUlBQUw5eHdERDM4RGZBZDlJd0JCTUdzaUNpUUFJQW9nQURZQ0xDQUtRZHlWQkNBS1FTeHFFSE0yQWdBZ0NoQnJOZ0lvQW44Z0NpQUtRU2hxRUhnRVFFRzA3UU1vQWdBTUFRc2dDa0VzYWhCOElRQWdDa0VBUVNnUU9pRUVJQUFvQXNRQklRSWdCRUVCTmdJUUlBUWdBallDQUNBRUlBQW9Bc3dCTmdJTUlBQW9BdGdCSVFFakFFSFFBR3NpQnlRQUFrQUNRQUpBQWtBZ0FVVWdCRVZ5RFFBZ0FVRUFOZ0lzSUFGQkxHb2hDUUpBQWtBZ0FTZ0M5SWF2QXlJQ1FRUkdCRUFnQVNnQy9JYXZBeUlBUVFCS0JFQWdBU0FBUVFGck5nTDhocThEREFJTElBY2dBU2dDRUNJRklBRW9Bb0NIcndOcUlnQkIvd0VnQUVIL0FVZ2JJZ1kyQWtRZ0FTZ0NoSWV2QXlFQUlBY2dCVFlDVENBSElBVWdBR3NpQUVFQUlBQkJBRW9iSWdnMkFrZ2dBVUV3YWlFTElBRkJzUGdBYWlFTUlBRkJ1UGdBYWlFQUlBRkI0SWFuQW1vaEEwRUFJUUlEUUNBQ1FRTkhCRUFnQkNnQ0RDQUJLQUlrSUFFb0FpZ2dBU2dDQUNBQktBSU1JQUpCQW5RaURTQUhRY1FBYW1vb0FnQWdBU2dDRkNBRFFRQVF5Z05CQUVnTkJTQUJLQUlrSUFFb0FpZ2dBeUFCS0FJVUlBQWdEQkN0QmtFQVNBMEZJQVFvQWdBZ0FTZ0NKQ0FCS0FJb0lBRW9BZ1FnQUNBQktBS3dlQ0FCS0FMd2hxOERJQUVvQWhRZ0FTZ0NHQ0FCS0FJZ1FiZ0JhaUFCS3dPUWg2OERJQXNnQ1NBQktBS1loNjhERUxJRlFRQklEUVVnQjBFNGFpQU5haUFKS0FJQU5nSUFJQUpCQVdvaEFnd0JDd3NDUUNBQktBSUFRUUZIQkVBZ0J5Z0NQQ0VESUFjb0FrQWhBaUFIS0FJNElRQU1BUXNnQnlBR05nSXdJQWNnQnlnQ09DSUFOZ0kwSUFjZ0NEWUNJQ0FISUFjb0Fqd2lBellDSkNBSElBVTJBaWdnQnlBSEtBSkFJZ0kyQWl4QkFFRURRYmpMQUNBSFFTQnFFRHdMSUFJZ0EwZ2dBQ0FDU25KRkJFQUNRQ0FCQW44Z0FTZ0NnSWV2QXlJRUlBRW9Bb1NIcndNaUFFZ0VRQ0FFUVFGcURBRUxJQUFnQkVnRVFDQUJJQUJCQVdvMkFvU0hyd01NQWdzZ0FTQUFRUUZxTmdLRWg2OERJQVJCQVdvTElnUTJBb0NIcndNTElBUWdCV3BCL3dGT0JIOGdBVUVCTmdLQWg2OERRUUVGSUFRTElBVk9CRUFnQVVFQk5nS0VoNjhEQ3lBQklBRW9BdmlHcndNMkF2eUdyd01NQmdzZ0FTQUlJQVlnQUNBRFNCc2lBallDRUVFQklRQUNRQ0FDSUFWcklnTkJBRW9FUUNBQklBTTJBb0NIcndNTUFRc2dBVUVCTmdLQWg2OERRUUFnQTJzaEFBc2dBU0FBTmdLRWg2OERJQUVvQWdCQkFVWUVRQ0FISUFJMkFoQkJBRUVEUVkzUkFDQUhRUkJxRUR3TElBRWdBU2dDK0lhdkF6WUMvSWF2QXlBQktBTDBocThESVFJTEFrQUNRQ0FDUVFGckRnTUJBUUFDQzBFQUlRWkJmeUVBQWtBZ0FTZ0NpSWV2QXlJRElBUW9BZ3dpRGhEWEEwRUFTQTBBSUFNb0FnQkZCRUFnQXlBREtBSUlJQU1vQWdSc0VEa2lBallDQUNBQ1JRMEJDd05BQWtCQkFDRUFJQVlnQXlnQ0NDSUZUZzBBQTBBQ1FFRUFJUWhCQUNFTFFYd2hCU0FBSUFNb0FnUWlERTROQUFOQUlBVkJCVWNFUUFKQUlBVWdCbW9pQWtFQVNBMEFJQUlnQXlnQ0NFNE5BQ0FDSUF4c0lROUJmQ0VDQTBBZ0FrRUZSZzBCSUFBZ0Ftb2lEVUVBU0NBTUlBMU1ja1VFUUNBTFFRRnFJUXNnQ0NBT0lBMGdEMnBxTFFBQWFpRUlDeUFDUVFGcUlRSU1BQXNBQ3lBRlFRRnFJUVVNQVFzTElBTW9BZ0FnQmlBTWJDQUFhbW9nQ0NBTGJUb0FBQ0FBUVFGcUlRQU1BUXNMSUFaQkFXb2hCZ3dCQ3d0QkFDRUNBMEFnQWlBRklBTW9BZ1JzVGcwQklBTW9BZ0FnQW1vaUJTQUZMUUFBUVFkck9nQUFJQUpCQVdvaEFpQURLQUlJSVFVTUFBc0FDeUFBSWdWQkFFZ05CaUFFS0FJTUlBRW9Bb2lIcndNaUFDZ0NCQ0FBS0FJSUlBRW9BZ0FnQVNnQ0RFRUFRUUFnQVVIZ2hxY0NhaUFBS0FJQUVNb0RJZ1ZCQUU0TkFnd0dDeUFCS0FMOGhxOERJZ0JCQUVvRVFDQUJJQUJCQVdzMkF2eUdyd01NQVFzZ0JDZ0NEQ0VJSUFFb0FvaUhyd01oQXdKL0lBSkJBVVlFUUVFQUlRQkJBQ0VGUVFBaEJrRUFJUUlnQXlBSUVOY0RRUUJJQkg5QmZ3VURRQ0FESUFWQkFuUnFJZ2hCakFocUlBZ29BZ3dnQUdvaUFEWUNBQ0FGUVFGcUlRVWdCa0gvQVhGQkFXb2lCa0gvQVhFZ0JrWU5BQXRCQUFzaUFFRUFUZ1IvQW44Z0F5Z0NDQ0FES0FJRWJMSkRBQUFBUDVRaUUwTUFBSUJQWFNBVFF3QUFBQUJnY1FSQUlCT3BEQUVMUVFBTElRVURRQ0FDSWdCQkFXb2hBaUFESUFCQi93RnhJZ2hCQW5ScVFZd0lhaWdDQUNJR0lBVkpEUUFMQTBBZ0JTQUdSZ1JBSUFNZ0FFRUJhaUlBUWY4QmNVRUNkR3BCakFocUtBSUFJUVlNQVFzTElBY2dBRUgvQVhFZ0NHcEJBWFk2QUVSQkFBVWdBQXNNQVFzQ2YwRUFJUVZCZnlBRElBZ1Exd05CQUVnTkFCcEJBU0VDUVFFaEFBTkFJQlVnQXlBQ1FRSjBhaWdDRENBQ2JMT1NJUlVnQWtFQmFpRUNJQUJCL3dGeFFRRnFJZ0JCL3dGeElBQkdEUUFMSUFNb0FnZ2dBeWdDQkd5eUlSaEJBQ0VDUVFBaEFBTkFBa0FnRXlBRElBSkJBblJxS0FJTUlnYXpraUlUUXdBQUFBQmNCRUFnR0NBVGt5SVVRd0FBQUFCYkRRRWdGaUFDSUFac3M1SWlGaUFUbFNBVklCYVRJQlNWa3lJWklCa2dFeUFVbEpTVUloUWdGeUFVSUJkZUlnWWJJUmNnQWlBRklBWWJJUVVMSUFKQkFXb2hBaUFBUWY4QmNVRUJhaUlBUWY4QmNTQUFSZzBCQ3dzZ0J5QUZPZ0JFUVFBTEN5SUZRUUJJRFFVQ1FDQUJLQUlBUVFGSERRQWdCeTBBUkNJQUlBRW9BaEJHRFFBZ0FTZ0M5SWF2QXlFQ0lBY2dBRFlDQkNBSFFkTFdBRUhLMmdBZ0FrRUJSaHMyQWdCQkFFRURRYzNWQUNBSEVEd0xJQUVnQnkwQVJEWUNFQ0FCSUFFb0F2aUdyd00yQXZ5R3J3TUxJQVFvQWd3Z0FTZ0NKQ0FCS0FJb0lBRW9BZ0FnQVNnQ0RDQUJLQUlRSUFFb0FoUWdBVUhnaHFjQ2FrRUFFTW9EUVFCSURRRUxJQUVvQWlRZ0FTZ0NLQ0FCUWVDR3B3SnFJQUVvQWhRZ0FVRzQrQUJxSWdBZ0FVR3crQUJxRUswR1FRQk9EUUVMUVg4aEJRd0NDMEYvSVFVZ0JDZ0NBQ0FCS0FJa0lBRW9BaWdnQVNnQ0JDQUFJQUVvQXJCNElBRW9BdkNHcndNZ0FTZ0NGQ0FCS0FJWUlBRW9BaUJCdUFGcUlBRXJBNUNIcndNZ0FVRXdhaUFKSUFFb0FwaUhyd01Rc2dWQkFFZ05BUXNnQVNnQ0hFRUJSd1JBSUFFb0F2aUtwZ0lpQUVFQUlBQkJBRW9iSVFoQkFDRUdBMEFnQmlBSVJ3UkFRUUFoQkNBQktBSXNJZ0JCQUNBQVFRQktHeUVGSUFFZ0JrR0lBbXhxUVlDTHBnSnFJUUpCZnlFRFJBQUFBQUFBQU9BL0lSRURRQ0FFSUFWSEJFQUNRQ0FDS0FJQXR5QUJJQVJCQ0hScUlnQW9BakMzSWhDakloSkVabVptWm1abTVqOWpJQkpFNFhvVXJrZmg5ajlrY2cwQUlBQXJBMmdnQWlzRE9LRWlFaUFTb2lBQUt3TndJQUlyQTBDaEloSWdFcUtnSUJDakloQWdFV05GRFFBZ0VDRVJJQVFoQXdzZ0JFRUJhaUVFREFFTEN3SkFJQU5CQUVnTkFFRi9JUVVDUUFKQUlBRW9BaGdpQ3c0RkFBQUFBUUVHQ3lBQ0t3TWdJaElnQVNBRFFRaDBhaUlGSWdBckExQmtSUTBCSUFBZ0Vqa0RVQ0FGSUFJb0FnUWlDVFlDTkVFQUlRTkJmeUVBUkFBQUFBQ0UxNWRCSVJFRFFFUUFBQUFBQUFBQUFDRVFRUUFoQkNBRFFRUkhCRUFEUUNBRVFRUkhCRUFnRUNBQ0lBUkJCSFJxSWd3ckE2Z0JJQVVnQXlBRWFrRURjVUVFZEdvaURTc0QyQUdoSWhBZ0VLSWdEQ3NEc0FFZ0RTc0Q0QUdoSWhBZ0VLS2dvQ0VRSUFSQkFXb2hCQXdCQ3dzZ0VDQVJZd1JBSUJBaEVTQUNLQUlRSUFOclFRUnFRUVJ2SVFBTElBTkJBV29oQXd3QkN3c2dCVUZBYXlBQU5nSUFJQXRCQVUwRVFDQUZJQkk1QTFnZ0JTQUpOZ0k0SUFVZ0FEWUNSQXdDQ3lBRklCSTVBMkFnQlNBSk5nSThJQVVnQURZQ1NBd0JDd0pBSUFJckF5Z2lFQ0FCSUFOQkNIUnFJZ1VpQUNzRFdHUUVRQ0FDS3dNd0lSRU1BUXNnQWlzRE1DSVJJQVVyQTJCa1JRMEJDeUFBSUJBNUExZ2dBaWdDQ0NFQUlBVWdFVGtEWUNBRklBQTJBamdnQlNBQ0tBSU1OZ0k4UVFBaEEwRi9JUUJFQUFBQUFJVFhsMEVoRVFOQVJBQUFBQUFBQUFBQUlSQkJBQ0VFSUFOQkJFY0VRQU5BSUFSQkJFY0VRQ0FRSUFJZ0JFRUVkR29pQ1NzRHFBRWdCU0FESUFScVFRTnhRUVIwYWlJTEt3UFlBYUVpRUNBUW9pQUpLd093QVNBTEt3UGdBYUVpRUNBUW9xQ2dJUkFnQkVFQmFpRUVEQUVMQ3lBRElBQWdFQ0FSWXlJRUd5RUFJQkFnRVNBRUd5RVJJQU5CQVdvaEF3d0JDd3NnQlVFRUlBQnJJZ0FnQWlnQ0ZHcEJCRzgyQWtRZ0JTQUFJQUlvQWhocVFRUnZOZ0pJQ3lBR1FRRnFJUVlNQVFzTElBRVExUVZCQUNFRVFRQWhBd05BSUFFb0F2aUtwZ0lnQkVvRVFDQUJJQVJCaUFKc2FpSUFRWUNOcGdKcUlnSWdBaWdDQUNJQ1FRRnFOZ0lBSUFKQkFrd0VRQ0FESUFSSEJFQWdBU0FEUVlnQ2JHcEJnSXVtQW1vZ0FFR0FpNllDYWtHSUFoQS9HZ3NnQTBFQmFpRURDeUFFUVFGcUlRUU1BUXNMSUFFZ0F6WUMrSXFtQWlBQktBSXNJZ0JCQUNBQVFRQktHeUVGUVFBaEFBTkFBa0FDUUNBQUlBVkdEUUFnQVNBQVFRaDBhaUlFS0FJMElnWkJBRWdOQVNBRVFUQnFJUWxCQUNFRUlBTkJBQ0FEUVFCS0d5RUNBMEFDUUNBQ0lBUkhCRUFnQVNBRVFZZ0NiR3BCaEl1bUFtb29BZ0FnQmtjTkFTQUVJUUlMSUFJZ0EwWUVRQ0FEUVR4R0RRTWdBU0FEUVFGcUlnTTJBdmlLcGdJTElBRWdBa0dJQW14cUlnUkJnSXVtQW1vZ0NVR0FBaEEvR2lBRVFZQ05wZ0pxUVFFMkFnQU1Bd3NnQkVFQmFpRUVEQUFMQUF0QkFDRUZJQUVvQWh4QkFrWU5BMEVBSVFBRFFDQUFJQU5PRFFSQkFDRUVJQUVvQWl3aUJrRUFJQVpCQUVvYklRa2dBU0FBUVlnQ2JHcEJnSXVtQW1vaEFnTkFBa0FnQkNBSlJ3Ui9JQUlvQWdDM0lBRWdCRUVJZEdvaUNDZ0NNTGNpRWFNaUVFUm1abVptWm1ibVAyTWdFRVRoZWhTdVIrSDJQMlJ5RFFFZ0NDc0RhQ0FDS3dNNG9TSVFJQkNpSUFnckEzQWdBaXNEUUtFaUVDQVFvcUFnRWFORUFBQUFBQUFBNEQ5alJRMEJJQVFGSUFrTElBWkdCRUFnQVNBR1FRaDBha0V3YWlBQ1FZQUNFRDhhSUFFZ0FTZ0NMRUVCYWpZQ0xDQUJLQUw0aXFZQ0lRTUxJQUJCQVdvaEFBd0NDeUFFUVFGcUlRUU1BQXNBQ3dBTElBQkJBV29oQUF3QUN3QUxJQUVRMVFWQkFDRUZDeUFIUWRBQWFpUUFJQVVMSVFBZ0NrRXdhaVFBSUFBTGNnRUJmeU1BUVJCcklnRWtBQ0FCSUFBMkFnd2dBVUhjbFFRZ0FVRU1haEJ6TmdJSUlBRVFhellDQUVGL0lRQWdBVUVJYWlBQkVIaEZCRUFnQVVFTWFoQjhLQUxZQVNJQUJIOGdBU0FBS0FJVU5nSUlRUUFGUVg4TElRQkJmeUFCS0FJSUlBQWJJUUFMSUFGQkVHb2tBQ0FBQzM4QkFYOGpBRUVnYXlJQ0pBQWdBaUFBTmdJY0lBSkIzSlVFSUFKQkhHb1FjellDQ0NBQ0VHczJBaGdDUUNBQ1FRaHFJQUpCR0dvUWVBMEFJQUpCSEdvUWZDZ0MyQUVpQUVVZ0FVRUJTM0lFZjBGL0JTQUFJQUUyQWhSQkFBc05BQ0FDUVFocVFhaWVBaEJMSWdBZ0FSREhBU0FBRURnYUN5QUNRU0JxSkFBTGRnRUNmeU1BUVJCcklnRWtBQ0FCSUFBMkFnd2dBVUhjbFFRZ0FVRU1haEJ6TmdJSUlBRVFhellDQUVFQUlRQWdBVUVJYWlBQkVIaEZCRUFnQVVFTWFoQjhLQUxZQVNJQVJTQUJRUWhxSWdKRmNnUi9RWDhGSUFJZ0FDZ0NBRFlDQUVFQUN4b2dBU2dDQ0NFQUN5QUJRUkJxSkFBZ0FBdGJBUUYvSXdCQkVHc2lBU1FBSUFFZ0FEWUNEQ0FCUWR5VkJDQUJRUXhxRUhNMkFnZ2dBUkJyTmdJQVFRQWhBQ0FCUVFocUlBRVFlRVVFUUNBQlFReHFFSHdvQXRnQlFlU0dwd0pxS0FJQUlRQUxJQUZCRUdva0FDQUFDMzhCQVg4akFFRWdheUlDSkFBZ0FpQUFOZ0ljSUFKQjNKVUVJQUpCSEdvUWN6WUNDQ0FDRUdzMkFoaEJBQ0VBSUFKQkNHb2dBa0VZYWhCNFJRUkFJQUpCSEdvUWZDZ0MyQUVnQVVFQVJ4RElCeUFDUVFocVFaWHhBUkJMSWdCQjg1d0NRZmVjQWlBQkd4Q1JBeUFBRURnYUlBRWhBQXNnQWtFZ2FpUUFJQUFMZndFQ2Z5TUFRUkJySWdFa0FDQUJJQUEyQWd3Z0FVSGNsUVFnQVVFTWFoQnpOZ0lJSUFFUWF6WUNBRUYvSVFBZ0FVRUlhaUFCRUhoRkJFQWdBVUVNYWhCOEtBTFlBU0lBUlNBQlFRaHFJZ0pGY2dSL1FYOEZJQUlnQUNnQzlJYXZBellDQUVFQUN5RUFRWDhnQVNnQ0NDQUFHeUVBQ3lBQlFSQnFKQUFnQUF0c0FRRi9Jd0JCSUdzaUFpUUFJQUlnQURZQ0hDQUNRZHlWQkNBQ1FSeHFFSE0yQWdnZ0FoQnJOZ0lZQWtBZ0FrRUlhaUFDUVJocUVIZ05BQ0FDUVJ4cUVId29BdGdCSUFFUTJnWU5BQ0FDUVFocVFjbUhBaEJMSWdBZ0FSREhBU0FBRURnYUN5QUNRU0JxSkFBTGZBRUNmeU1BUVJCcklnRWtBQ0FCSUFBMkFnd2dBVUhjbFFRZ0FVRU1haEJ6TmdJSUlBRVFhellDQUVGL0lRQWdBVUVJYWlBQkVIaEZCRUFnQVVFTWFoQjhLQUxZQVNJQVJTQUJRUWhxSWdKRmNnUi9RWDhGSUFJZ0FDZ0NFRFlDQUVFQUN5RUFRWDhnQVNnQ0NDQUFHeUVBQ3lBQlFSQnFKQUFnQUF1TUFRRUJmeU1BUVNCcklnSWtBQ0FDSUFBMkFod2dBa0hjbFFRZ0FrRWNhaEJ6TmdJSUlBSVFhellDR0FKQUlBSkJDR29nQWtFWWFoQjREUUFnQWtFY2FoQjhJUUFnQVVIL0FVc05BQ0FBS0FMWUFTSUFSU0FCUWY4QlMzSUVmMEYvQlNBQUlBRTJBaEJCQUFzTkFDQUNRUWhxUWVLSEFoQkxJZ0FnQVJESEFTQUFFRGdhQ3lBQ1FTQnFKQUFMV3dJQmZ3RjhJd0JCRUdzaUFTUUFJQUVnQURZQ0RDQUJRZHlWQkNBQlFReHFFSE0yQWdnZ0FSQnJOZ0lBUkFBQUFBQUFBUEMvSVFJZ0FVRUlhaUFCRUhoRkJFQWdBVUVNYWhCOEt3T1FBeUVDQ3lBQlFSQnFKQUFnQWd0TUFRRi9Jd0JCRUdzaUFpUUFJQUlnQURZQ0RDQUNRZHlWQkNBQ1FReHFFSE0yQWdnZ0FoQnJOZ0lBSUFKQkNHb2dBaEI0UlFSQUlBSkJER29RZkNBQk9RT1FBd3NnQWtFUWFpUUFDMXNDQVg4QmZDTUFRUkJySWdFa0FDQUJJQUEyQWd3Z0FVSGNsUVFnQVVFTWFoQnpOZ0lJSUFFUWF6WUNBRVFBQUFBQUFBRHd2eUVDSUFGQkNHb2dBUkI0UlFSQUlBRkJER29RZkNzRGlBTWhBZ3NnQVVFUWFpUUFJQUlMVEFFQmZ5TUFRUkJySWdJa0FDQUNJQUEyQWd3Z0FrSGNsUVFnQWtFTWFoQnpOZ0lJSUFJUWF6WUNBQ0FDUVFocUlBSVFlRVVFUUNBQ1FReHFFSHdnQVRrRGlBTUxJQUpCRUdva0FBdnlhUUloZndKOUl3QkJNR3NpRUNRQUlCQWdBVFlDTENBUVFkeVZCQ0FRUVN4cUVITTJBaGdnRUJCck5nSUlBa0FDUUFKQUFrQUNRQ0FRUVJocUlCQkJDR29RZUFSQUlBQVFTQm9NQVFzZ0VFRXNhaEI4SWlFb0F1QUJJUmNnRUVFQU5nSW9JQUlRVmtFVVR3MEJJQ0ZCL0FKcUlTSWdJVUhzQW1vaERDQVFRUmhxRUVnaEl3SkFBMEFDUUNBUUlCSTJBaFFnQWhCV0lCSk5EUUFnRUVFSWFpSURRZW4zQVJCTElnRWdBaEJXRU1jQklBRVFPQm9nQTBIZW53SVFTeUlCSUFJZ0VDZ0NGQkNXQVJBK0VKRURJQUVRT0JvZ0FpQVFLQUlVRUpZQkVENGhGU0FRS0FJVUlRc2dJeUFRUVJScUVLb0NJQU5Cdlp3Q0VFc2lBU0FWRUpFRElBRVFPQm9DUUFKQUFuOGpBRUVRYXlJR0pBQWdCa0hvcVFFdEFBQTZBQTRnQmtIbXFRRXZBQUE3QVF3Q1FBSi9Ba0FnRlVFQUlCQkJCR29iUlFSQVFRQkJBMEhOM1FCQkFCQThEQUVMQW44Z0JrRU1haUVCSXdCQkVHc2lCQ1FBQWtBQ1FDQVZSUVJBUVFBaEJ3d0JDeUFWRUtBQlFjaWNBaENnQVdwQkFtb1FPU0lEUlEwQklBUkJ5SndDTmdJRUlBUWdGVFlDQUNBRFFhd1BJQVFRcFFJZ0F5QUJFTWdDSVFjZ0F4QXpDeUFFUVJCcUpBQWdCd3dCQ3d3TkN5SUVSUVJBSUFZZ0ZUWUNBQ0FHUWNpY0FqWUNDQ0FHUWViTkFEWUNCRUVBUVFOQmorNEFJQVlRUEF3QkN3SkFRUUZCRUJEOEFpSU9CRUFnRGtFRWFrRUVRUUVnQkJCZ1FRRkhEUUVnRGlnQ0JDSUpRUUJNRFFFZ0RpQUpRWVFCYkJBNUlnRTJBZ0FnQVVVTkJFRUFJUWNEUUNBSElBbElCRUFnQjBHRUFXd2lBU0FPS0FJQWFrRUlRUUVnQkJCZ1FRRkhEUU1nRGlnQ0FDQUJha0VJYWtFSVFRRWdCQkJnUVFGSERRTWdEaWdDQUNBQmFrRVFha0hzQUVFQklBUVFZRUVCUncwRElBNG9BZ0FnQVdwQi9BQnFRUVJCQVNBRUVHQkJBVWNOQXlBT0tBSUFJQUZxUVlBQmFrRUVRUUVnQkJCZ1FRRkhEUU1nQjBFQmFpRUhJQTRvQWdRaENRd0JDd3NnRGtFTWFrRUVRUUVnQkJCZ1FRRkhEUUZCQUNFSklBNG9BZ3dpQjBFQVRBUkFJQTVCQURZQ0NBd0NDeUFPSUFkQkRHd1FPU0lCTmdJSUlBRkZEUVFEUUNBSElBbEtCRUFnQ1VFTWJDSUJJQTRvQWdocVFRaHFRUVJCQVNBRUVHQkJBVWNOQXlBT0tBSUlJQUZxUVFScVFRUkJBU0FFRUdCQkFVY05BeUFPS0FJSUlBRnFJZ0VnQVNnQ0JDSURRUXhzRURraUFUWUNBQ0FCUlEwR0lBRkJEQ0FESUFRUVlDQURSdzBESUFsQkFXb2hDU0FPS0FJTUlRY01BUXNMSUJBZ0RqWUNCQ0FFRUxBQlFRQU1Bd3NNQXd0QkFFRURRYXJ4QUVFQUVEd2dEaWdDQ0JBeklBNG9BZ0FRTXlBT0VETWdCQkN3QVF0QmZ3c2hBU0FHUVJCcUpBQWdBUXdCQ3d3SUMwRUFTQVJBSUJCQkNHcEJtSndDRUVzaUFTQVZFT2tEREFFTElCQkJDR3BCeEo0Q0VFc2lBU0FMRU1jQklBRVFPQnBCQUNFU0FrQWdFQ2dDQkNJR0JFQWdCaWdDQkNJQlFRQWdBVUVBU2hzaEJBTkFJQVFnRWtZRVFFRUFJUWtnQmlnQ0RDSUJRUUFnQVVFQVNoc2hCRUVBSVJJRFFDQUVJQkpHRFFSQkFDQUdLQUlJSUJKQkRHeHFJZ01vQWdnaUFVRi9SeUFCUVFCT0cwVUVRQ0FESUFzMkFnZ0xJQkpCQVdvaEVnd0FDd0FGUVFBZ0JpZ0NBQ0FTUVlRQmJHb2lBeWdDZkNJQlFYOUhJQUZCQUU0YlJRUkFJQU1nQ3pZQ2ZBc2dFa0VCYWlFU0RBRUxBQXNBQzBFQVFRTkJuL1VBUVFBUVBFRi9JUWtMSUFsQkFFZ0VRQ0FRUVFocVFZbnNBUkJMSWdFUThBRU1BUXNDZjBFQUlRRWdFRUVvYWtFQUlCQkJCR29pRFJ0RkJFQkJBRUVEUWRrNlFRQVFQRUYvREFFTEFrQWdFQ2dDS0NJU1JRUkFJQkJCRUJBNUloSTJBaWdnRWtVTkFTQVNRZ0EzQWdBZ0VrSUFOd0lJQ3dKQUlBMG9BZ0FpQ1VVTkFDQUpLQUlFSWdZZ0VpZ0NCQ0lPYWlJTFFZUUJiQkE1SWdjRVFDQU9RUUFnRGtFQVNoc2hCQU5BSUFFZ0JFWUVRRUVBSVFFZ0JrRUFJQVpCQUVvYklRTURRQ0FCSUFOSEJFQWdCeUFCSUE1cVFZUUJiR29nQ1NnQ0FDQUJRWVFCYkdwQmhBRVFQeG9nQVVFQmFpRUJEQUVMQ3lBU0tBSUFFRE1nRUNnQ0tDQUhOZ0lBSUJBb0FpZ2lCaUFMTmdJRVFRQWhFaUFHS0FJTUloNUJBQ0FlUVFCS0d5RUZJQTBvQWdBaUJDZ0NEQ0lMUVFBZ0MwRUFTaHNoRVVFQUlROERRRUVBSVFFZ0R5QVJSd1JBQWtBRFFDQUJJQVZHRFFFZ0FVRU1iQ0VESUFGQkFXb2hBU0FFS0FJSUlBOUJER3hxS0FJSUlBTWdCaWdDQ0dvb0FnaEhEUUFMSUJKQkFXb2hFZ3NnRDBFQmFpRVBEQUVMQ3lBTElCNXFJQkpySWdsQkRHd1FPU0lJQkVCQkFDRVVBMEFnQlNBVVJnUkFRUUFoRWtFQUlSZ0NRQU5BSUJFZ0VrY0VRQ0FTUVF4c0lnWWdEU2dDQUNnQ0NHb2lCQ2dDQ0NFTFFRQWhBUUpBQWtBRFFDQUJJQVZHRFFFZ0FVRU1iQ0VESUFGQkFXb2hBU0FMSUFNZ0VDZ0NLQ2dDQ0dvb0FnaEhEUUFMSUJoQkFXb2hHQXdCQ3lBSUlCSWdIbW9nR0d0QkRHeHFJZzRnQ3pZQ0NDQU9JQVFvQWdRaUIwRU1iQkE1SWdFMkFnQWdBVVVOQTBFQUlRRWdCMEVBSUFkQkFFb2JJUXNEUUNBQklBdEhCRUFnQVVFTWJDSURJQTRvQWdCcUlnUWdEU2dDQUNnQ0NDQUdhaWdDQUNBRGFpSURLUUlBTndJQUlBUWdBeWdDQ0RZQ0NDQUJRUUZxSVFFTUFRc0xJQTRnQnpZQ0JBc2dFa0VCYWlFU0RBRUxDeUFRS0FJb0loZ29BZ2dFZjBFQUlRRURRQ0FZS0FJSUlRTWdHQ2dDRENBQlNnUkFJQU1nQVVFTWJHb29BZ0FRTXlBQlFRRnFJUUVnRUNnQ0tDRVlEQUVMQ3lBREVETWdFQ2dDS0FVZ0dBc2dDRFlDQ0NBUUtBSW9JQWsyQWd3Z0RSQ3BCUXdIQ3d3SEN5QUlJQlJCREd3aUIyb2lEaUFRS0FJb0tBSUlJQWRxSWdRb0FnZzJBZ2hCQUNFQklBUW9BZ1FpQmlFU0EwQWdBU0FSUndSQUlBMG9BZ0FvQWdnZ0FVRU1iR29pQXlnQ0NDQUVLQUlJUmdSQUlBTW9BZ1FnRW1vaEVnc2dBVUVCYWlFQkRBRUxDeUFPSUJKQkRHd1FPU0lCTmdJQUlBRUVRRUVBSVJnZ0JrRUFJQVpCQUVvYklRdEJBQ0VCQTBBZ0FTQUxSd1JBSUFGQkRHd2lBeUFPS0FJQWFpSUVJQkFvQWlnb0FnZ2dCMm9vQWdBZ0Eyb2lBeWtDQURjQ0FDQUVJQU1vQWdnMkFnZ2dBVUVCYWlFQkRBRUxDd0pBQTBBZ0VTQVlSZzBCSUEwb0FnQW9BZ2dpRHlBWVFReHNJZ3RxS0FJSUlCQW9BaWdvQWdnZ0Iyb29BZ2hIQkVBZ0dFRUJhaUVZREFFTEMwRUFJUUVEUUNBQklBc2dEMm9pQXlnQ0JFNE5BU0FPS0FJQUlBRWdCbXBCREd4cUlnUWdBeWdDQUNBQlFReHNhaUlES1FJQU53SUFJQVFnQXlnQ0NEWUNDQ0FCUVFGcUlRRWdEU2dDQUNnQ0NDRVBEQUFMQUFzZ0RpQVNOZ0lFSUJSQkFXb2hGQXdCQ3dzTUJRc01CQVVnQnlBQlFZUUJiQ0lEYWlBU0tBSUFJQU5xUVlRQkVEOGFJQUZCQVdvaEFRd0JDd0FMQUFzTUFRdEJBQXdCQ3d3SUMwRUFTQVJBSUJCQkNHcEJyT3dCRUVzaUFSRHdBUXdCQ3lBUVFRaHFJZ05CdjUwQ0VFc2lBUkRxQXlBQkVEZ2FJQU5CM2VzQkVFc2lBU0FWRUpFRElBRVFPQm9DZjBFQUlSdEJBQ0VUSXdCQjBBZHJJZ29rQUFKQUFrQUNRQUovQWtCQjZPc0JMUUFBQkVCQjZPc0JRWUFJRUtNQ0RRRUxJQXBCMEFWcUlCVkIvd0VRMVFOQkFEb0Evd0ZCQVF3QkN5QUtJQlUyQXJBQklBcEI2T3NCTmdLMEFTQUtRY0FCYWlJQlFhd1BJQXBCc0FGcUVLVUNJQUZCMHhvUXlBSWlFMFVFUUNBS0lCVTJBcUFCUVFCQkEwSGlJQ0FLUWFBQmFoQThJQXBCOEpZRUtBSUFFUDhDTmdLVUFTQUtRWU12TmdLUUFVRUFRUU5CK1NVZ0NrR1FBV29RUEF3Q0MwRUFDeUVOQWtBQ1FFSDBDQkE1SWhzRVFFRUJJUUVDUUNBTkRRQWdDa0hBQVdvZ0V4RFRBa1VOQWlBS0lBcEJ6QVZxTmdLQUFTQUtRY0FCYWtHck5pQUtRWUFCYWhEckFVRUJSdzBDSUFvb0Fzd0ZJZ0ZCQUVvTkFBd0NDeUFiUVFBMkFwZ0JJQnNnQVRZQ0JDQWJJQUZCOEFCc0VEa2lBellDQUNBREJFQkJBQ0VEQWtBRFFDQUtJQU0yQXN3RklBRWdBMHdOQVNBS0lBTkJBV28yQW5CQkFFRUJRYUxCQUNBS1FmQUFhaEE4SUExRkJFQWdDa0hBQVdvZ0V4RFRBa1VOQWlBS0lBcEIwQVZxTmdKZ0lBcEJ3QUZxUVpYQ0FDQUtRZUFBYWhEckFVRUJSdzBDSUFwQjBBVnFJUXRCQUNFQlFYOGhBd05BQWtBQ1FDQUJJQXRxTFFBQUlnUkJMa2NFUUNBRURRRWdBMEYvUndSQUlBTWdDMnBCQURvQUFBc01BZ3NnQVNFREN5QUJRUUZxSVFFTUFRc0xDMEVBUVFGQitNa0FRUUFRUEFKL0l3QkI0QUJySWhva0FDQWFRZVNwQVM4QUFEc0JXQ0FhUWVDcEFTZ0FBRFlDVkFKQUFuOENRQ0FLUWRBRmFpSUlFS0FCSUJwQjFBQnFFS0FCYWtFQmFoQTVJZ0VFUUNBYUlBZzJBa0FnR2lBYVFkUUFhallDUkNBQlFhY1BJQnBCUUdzUXBRSWdBVUhrR3hESUFpRWdJQUVRTXlBZ1JRUkFJQm9nQ0RZQ0FDQWFJQnBCMUFCcU5nSUVRUUJCQTBISklpQWFFRHhCQUF3REMwRUlFRGtpSEVVTkF3SkFBa0FnSEVFRWFrRUVRUUVnSUJCZ1FRRkdCRUFnSENnQ0JDSVlRUUJLRFFFTFFRQkJBMEhrSmtFQUVEd01BUXNnR2lBWU5nSXdRUUJCQVVIUkxTQWFRVEJxRUR3Z0hDQVlRUUowRURraUZqWUNBQ0FXUlEwRUlCWkJFQkE1SWdFMkFnQWdBVVVOQkFKL1FSUVFPU0llQkVBZ0hrRUlhaUVPSUI1QkRHb2hCeUFlUVFScUlRWWdIa0VRYWlFRkl3QkJvQVpySWc4a0FFRW9FRGtpRVVFQU5nSUFJQTlCdUFKcVFRQkI2QU1RT2hwQmdLVUVRUUEyQWdBZ0QwRVlhaENxQlNFRVFZQ2xCQ2dDQUNFRFFZQ2xCRUVBTmdJQVFYOGhBVUVFSVJRQ1FBSkFBa0FDUUNBRFJRMEFRWVNsQkNnQ0FDSUpSUTBBSUFNb0FnQWdFVUVFRUtnQklnRkZEUUVnQ1JBQ0N4QUVJUU1nQVVFQlJ3UkFJQTlCQXpZQ0dDQVBJQVEyQXJnQ0lBOUJuQUZxUVFFZ0VVRUVFUFFFSVJFUUJDRVVRUUFoQXdzRFFDQURCRUJCZ0tVRVFRQTJBZ0JCQkNBUFFiZ0NhaEFMUVlDbEJDZ0NBQ0VEUVlDbEJFRUFOZ0lBUVg4aEFRSkFJQU5GRFFCQmhLVUVLQUlBSWdsRkRRQWdBeWdDQUNBUklCUVFxQUVpQVVVTkF5QUpFQUlMRUFRaEF5QUJRUUZHRFFGQmdLVUVRUUEyQWdCQkJVRUFRUU5CalRSQkFCQU1RWUNsQkNnQ0FDRURRWUNsQkVFQU5nSUFRWDhoQVFKQUlBTkZEUUJCaEtVRUtBSUFJZ2xGRFFBZ0F5Z0NBQ0FSSUJRUXFBRWlBVVVOQXlBSkVBSUxFQVFoQXlBQlFRRkdEUUVNQXd0QmdLVUVRUUEyQWdCQkJpQVBRYmdDYWtIYUFFSG9BeEFjUVlDbEJDZ0NBQ0VEUVlDbEJFRUFOZ0lBUVg4aEFRSkFJQU5GRFFCQmhLVUVLQUlBSWdsRkRRQWdBeWdDQUNBUklCUVFxQUVpQVVVTkFpQUpFQUlMRUFRaEF5QUJRUUZHRFFCQmdLVUVRUUEyQWdCQkJ5QVBRYmdDYWlBZ0VCdEJnS1VFS0FJQUlRTkJnS1VFUVFBMkFnQkJmeUVCQWtBZ0EwVU5BRUdFcFFRb0FnQWlDVVVOQUNBREtBSUFJQkVnRkJDb0FTSUJSUTBDSUFrUUFnc1FCQ0VESUFGQkFVWU5BRUdBcFFSQkFEWUNBRUVJSUE5QnVBSnFRUUVRR2lFRVFZQ2xCQ2dDQUNFRFFZQ2xCRUVBTmdJQVFYOGhBUUpBSUFORkRRQkJoS1VFS0FJQUlnbEZEUUFnQXlnQ0FDQVJJQlFRcUFFaUFVVU5BaUFKRUFJTEVBUWhBeUFCUVFGR0RRQWdCRUVCUndSQVFZQ2xCRUVBTmdJQVFRVkJBRUVEUWVnNVFRQVFERUdBcFFRb0FnQWhBMEdBcFFSQkFEWUNBRUYvSVFFQ1FDQURSUTBBUVlTbEJDZ0NBQ0lKUlEwQUlBTW9BZ0FnRVNBVUVLZ0JJZ0ZGRFFNZ0NSQUNDeEFFSVFNZ0FVRUJSZzBCUVlDbEJFRUFOZ0lBUVFRZ0QwRzRBbW9RQzBHQXBRUW9BZ0FoQTBHQXBRUkJBRFlDQUVGL0lRRUNRQ0FEUlEwQVFZU2xCQ2dDQUNJSlJRMEFJQU1vQWdBZ0VTQVVFS2dCSWdGRkRRTWdDUkFDQ3hBRUlRTWdBVUVCUmcwQkRBTUxRWUNsQkVFQU5nSUFRUWtnRDBHNEFtb1FHQnBCZ0tVRUtBSUFJUU5CZ0tVRVFRQTJBZ0JCZnlFQkFrQWdBMFVOQUVHRXBRUW9BZ0FpQ1VVTkFDQURLQUlBSUJFZ0ZCQ29BU0lCUlEwQ0lBa1FBZ3NRQkNFRElBRkJBVVlOQUNBUEtBTFVBaUFQS0FMY0Ftd2lDeUFQS0FMWUFtd1FPU0laQkVCQkFDRUJBa0FDUUFKQUEwQUNRRUVBSVFNZ0R5Z0N4QU1nRHlnQ3JBTlBCRUJCZ0tVRVFRQTJBZ0JCQ2lBUFFiZ0NhaEFZR2tHQXBRUW9BZ0FoQTBHQXBRUkJBRFlDQUVGL0lRRUNRQ0FEUlEwQVFZU2xCQ2dDQUNJSlJRMEFJQU1vQWdBZ0VTQVVFS2dCSWdGRkRRa2dDUkFDQ3hBRUlRTWdBVUVCUmcwSFFZQ2xCRUVBTmdJQVFRUWdEMEc0QW1vUUMwR0FwUVFvQWdBaEEwR0FwUVJCQURZQ0FFRi9JUUVDUUNBRFJRMEFRWVNsQkNnQ0FDSUpSUTBBSUFNb0FnQWdFU0FVRUtnQklnRkZEUWtnQ1JBQ0N4QUVJUU1nQVVFQlJnMEhJQTRFUUNBT0lBOG9BdFFDTmdJQUN5QUhCRUFnQnlBUEtBTFlBallDQUFzZ0JnUkFJQVlnRHlnQzNBSTJBZ0FMSUFWRkRRb2dEeTBBMmdRaUJFRUJhdzRDQVFNRUN3TkFJQU5CQlVjRVFDQVBJQU5CQW5ScUlCa2dBU0FEYWlBTGJHbzJBZ0FnQTBFQmFpRUREQUVMQzBHQXBRUkJBRFlDQUVFTElBOUJ1QUpxSUE5QkJSQVpJUVJCZ0tVRUtBSUFJUU5CZ0tVRVFRQTJBZ0JCZnlFZkFrQWdBMFVOQUVHRXBRUW9BZ0FpQ1VVTkFDQURLQUlBSUJFZ0ZCQ29BU0lmUlEwSUlBa1FBZ3NRQkNFRElCOUJBVVlOQmlBQklBUnFJUUVNQVFzTElBOHZBZHdFSWdFZ0R5OEIzZ1FpQTBjTkFpQUZJQUd6T0FJQURBY0xJQTh2QWR3RUlnRWdEeThCM2dRaUEwY05BU0FGSUFHelExeVBJa0NVT0FJQURBWUxJQTh2QWQ0RUlRTWdEeThCM0FRaEFRc2dBeUFCUWYvL0EzRWdCRUVEU1hKeVJRUkFJQVVnQkxNNEFnQU1CUXNnQlVFQU5nSUFEQVFMUVlDbEJFRUFOZ0lBUVFWQkFFRURRYVFPUVFBUURFR0FwUVFvQWdBaEEwR0FwUVJCQURZQ0FFRi9JUUVDUUNBRFJRMEFRWVNsQkNnQ0FDSUpSUTBBSUFNb0FnQWdFU0FVRUtnQklnRkZEUUlnQ1JBQ0N4QUVJUU1nQVVFQlJnMEFRWUNsQkVFQU5nSUFRUVFnRDBHNEFtb1FDMEdBcFFRb0FnQWhBMEdBcFFSQkFEWUNBRUYvSVFFQ1FDQURSUTBBUVlTbEJDZ0NBQ0lKUlEwQUlBTW9BZ0FnRVNBVUVLZ0JJZ0ZGRFFJZ0NSQUNDeEFFSVFNZ0FVRUJSZzBBQ3d3QkN5QVJFRE1nQXlBSkVQTUVBQXRCQUNFWkN5QVJFRE1nRDBHZ0Jtb2tBQ0FlSUJrMkFnQWdHUVIvSUI0RklCNFFNMEVBQ3d3QkN3d0ZDeUlEUlEwQ0lBTW9BZ1JCQVVjRVFDQWFJQWcyQWlBZ0dpQWFRZFFBYWpZQ0pFRUFRUUpCc0RNZ0drRWdhaEE4SUJZb0FnQVFNeUFXRURNZ0hCQXpJQU1RTXlBZ0VMQUJRUUFNQkFzZ0ZpZ0NBQ0lCSUFNb0FnZzJBZ1FnQVNBREtBSU1OZ0lJSUFFZ0F5b0NFRGdDRENBQklBTW9BZ0EyQWdBZ0F4QXpJQ0JCQkNBWVFRSjBhMEVDRUpjRlFRRWhFZ0pBQTBBZ0VpQVlSd1JBSUJwQjNBQnFRUVJCQVNBZ0VHQkJBVWNFUUVFQUlRRURRQ0FCSUJKR0RRUWdGaUFCUVFKMGFpSURLQUlBS0FJQUVETWdBeWdDQUJBeklBRkJBV29oQVF3QUN3QUxJQllnRWtFQ2RHb0NmeUFhS2dKY0lTVWdGaWdDQUNJZEtBSUVJUU1nSFNvQ0RDRWtJQjBvQWdnaEFVRVFFRGtoRkNBQnNpQWxsQ0FrbFJDbUFpRUVJQU95SUNXVUlDU1ZFS1lDSVFNZ0ZBUkFBa0FnRkNBbE9BSU1JQlFnQkRZQ0NDQVVJQU0yQWdRZ0ZDQURJQVJzRURraUdUWUNBQ0FaUlEwQVFRQWhBU0FFUVFBZ0JFRUFTaHNoQlNBRFFRQWdBMEVBU2hzaENBTkFJQUVnQlVjRVFDQWRLQUlJSVFzZ0hTb0NEQ0lrSUFGQkFXb2lCTEtVSUNXVkVLWUNJUU1nSkNBQnNwUWdKWlVRcGdJaUJpQURJQXNnQXlBTFNCc2lBU0FCSUFaSUd5RU9RUUFoQVFOQUlBRWdDRVlFUUNBRUlRRU1Bd1VnSFNnQ0JDRVBJQjBxQWd3aUpDQUJRUUZxSWdPeWxDQWxsUkNtQWlFTElDUWdBYktVSUNXVkVLWUNJaEVnQ3lBUElBc2dEMGdiSWdFZ0FTQVJTQnNnRVdzaEIwRUFJUUVnQmlFSlFRQWhIZ05BSUFrZ0RrY0VRQ0FCSUFkcUlRc2dIU2dDQUNBSklBOXNJQkZxYWlFZkEwQWdBU0FMUndSQUlBRkJBV29oQVNBZUlCOHRBQUJxSVI0Z0gwRUJhaUVmREFFTEN5QUpRUUZxSVFrZ0N5RUJEQUVMQ3lBWklCNGdBVzA2QUFBZ0dVRUJhaUVaSUFNaEFRd0JDd0FMQUFzTElCUU1BZ3NMREFnTElnRTJBZ0FnQVFSQUlCSkJBV29oRWd3Q0JVRUFJUUVEUUNBQklCSkdEUVFnRmlBQlFRSjBhaUlES0FJQUtBSUFFRE1nQXlnQ0FCQXpJQUZCQVdvaEFRd0FDd0FMQUFzTElDQVFzQUVnSEF3RUN5QVdFRE1MSUJ3UU15QWdFTEFCUVFBTUFnc01BZ3NnR2lBSU5nSVFJQm9nR2tIVUFHbzJBaFJCQUVFQ1FiQXpJQnBCRUdvUVBDQVdLQUlBRURNZ0ZoQXpJQndRTXlBZ0VJc0ZBbjlCQUNFQkFrQUNRQUpBUVFnUU9TSVJCRUFDUUNBUlFRUnFRUVJCQVNBZ0VHQkJBVVlFUUNBUktBSUVJZ1JCQUVvTkFRdEJBRUVEUWVRbVFRQVFQQXdDQ3lBUklBUkJBblFRT1NJR05nSUFJQVlFUUFOQUlBRWdCRVlFUUVFQUlRRWdCRUVBSUFSQkFFb2JJUXNDUUFOQUlBRWdDMFlOQnlBR0lBRkJBblJxSWdRb0FnQkJCR3BCQkVFQklDQVFZRUVCUndSQVFRQWhBd05BSUFFZ0EwWUVRRUVBSVFFRFFDQUJJQXRHRFFVZ0JpQUJRUUowYWlnQ0FCQXpJQUZCQVdvaEFRd0FDd0FGSUFZZ0EwRUNkR29vQWdBb0FnQVFNeUFEUVFGcUlRTU1BUXNBQ3dBTElBUW9BZ0JCQ0dwQkJFRUJJQ0FRWUVFQlJ3UkFRUUFoQXdOQUlBRWdBMFlFUUVFQUlRRURRQ0FCSUF0R0RRVWdCaUFCUVFKMGFpZ0NBQkF6SUFGQkFXb2hBUXdBQ3dBRklBWWdBMEVDZEdvb0FnQW9BZ0FRTXlBRFFRRnFJUU1NQVFzQUN3QUxJQVFvQWdCQkRHcEJCRUVCSUNBUVlFRUJSd1JBUVFBaEF3TkFJQUVnQTBZRVFFRUFJUUVEUUNBQklBdEdEUVVnQmlBQlFRSjBhaWdDQUJBeklBRkJBV29oQVF3QUN3QUZJQVlnQTBFQ2RHb29BZ0FvQWdBUU15QURRUUZxSVFNTUFRc0FDd0FMSUFRb0FnQWlBeUFES0FJSUlBTW9BZ1JzRURraUF6WUNBQ0FEUlEwSUlBRkJBV29oQVNBRUtBSUFJZ01vQWdCQkFTQURLQUlJSUFNb0FnUnNJQ0FRWUNBRUtBSUFJZ01vQWdnZ0F5Z0NCR3hHRFFBTFFRQWhBd05BSUFFZ0EwWUVRRUVBSVFFRFFDQUJJQXRHRFFNZ0JpQUJRUUowYWlnQ0FCQXpJQUZCQVdvaEFRd0FDd0FGSUFZZ0EwRUNkR29vQWdBb0FnQVFNeUFEUVFGcUlRTU1BUXNBQ3dBTElBWVFNd3dFQ3lBR0lBRkJBblJxUVJBUU9TSUROZ0lBSUFGQkFXb2hBU0FERFFBTERBUUxEQU1MREFJTElCRVFNMEVBSVJFTElDQVFzQUVnRVF3QkN3d0NDd3NoQVNBYVFlQUFhaVFBSUFFTUFRc01Fd3NoQVNBYktBSUFJQW9vQXN3RlFmQUFiR29nQVRZQ0FDQUJSUVJBSUFvZ0NrSFFCV28yQWdCQkFFRURRY0hSQUNBS0VEd2dHeWdDQUJBeklCc1FNeUFUUlEwR0lCTVFzQUVNQmd0QkFFRUJRY1BWQUVFQUVEeEJBRUVCUWFEWkFFRUFFRHdDZjBFQUlRVkJBQ0VKSXdCQm9BUnJJZ2NrQUNBSElBcEIwQVZxSWdNMkFoQWdCMEdBQ0RZQ0ZDQUhRU0JxSWdGQml3Z2dCMEVRYWhDbEFnSkFBa0FnQVVHY0Z4RElBaUlJUlFSQUlBY2dBellDQUVFQVFRTkJ6QndnQnhBOERBRUxRUWdRT1NJRlJRMEJBa0FDUUNBRlFRUnFRUVJCQVNBSUVHQkJBVWNFUUVFQVFRTkJuQ2hCQUJBOERBRUxJQVVnQlNnQ0JDSUJRUlJzRURraUJqWUNBQ0FHUlEwRElBRkJBQ0FCUVFCS0d5RURBMEFnQXlBSlJnMENBa0FnQmlBSlFSUnNhaUlPUVFocVFRUkJBU0FJRUdCQkFVY05BQ0FPUVF4cVFRUkJBU0FJRUdCQkFVY05BQ0FPUVJCcVFRUkJBU0FJRUdCQkFVY05BQ0FPUVFScVFRUkJBU0FJRUdCQkFVY05BQ0FPSUE0b0FnUWlCRUVVYkJBNUlnRTJBZ0JCQUNFTElBRkZEUVVEUUNBRUlBdEtCRUFnQzBFVWJDSUJJQTRvQWdCcVFRUkJBU0FJRUdCQkFVY05BaUFPS0FJQUlBRnFRUVJxUVFSQkFTQUlFR0JCQVVjTkFpQU9LQUlBSUFGcVFRaHFRUVJCQVNBSUVHQkJBVWNOQWlBT0tBSUFJQUZxUVF4cVFRUkJBU0FJRUdCQkFVY05BaUFPS0FJQUlBRnFRUkJxUVFSQkFTQUlFR0JCQVVjTkFpQUxRUUZxSVFzZ0RpZ0NCQ0VFREFFTEN5QUpRUUZxSVFrTUFRc0xRUUFoQTBFQVFRTkJuQ2hCQUJBOEEwQWdBeUFKUndSQUlBWWdBMEVVYkdvb0FnQVFNeUFEUVFGcUlRTU1BUXNMSUFZUU13c2dCUkF6UVFBaEJRc2dDQkN3QVFzZ0IwR2dCR29rQUNBRkRBRUxRUUJCQTBINUlrRUFFRHdNRkFzaEFTQWJLQUlBSUFvb0Fzd0ZRZkFBYkdvZ0FUWUNCQ0FCUlFSQUlBb2dDa0hRQldvMkFoQkJBRUVEUWF6ZUFDQUtRUkJxRUR4QkFDRURBa0FnR3lnQ0FDQUtLQUxNQlVId0FHeHFJZ3RGRFFBZ0N5Z0NBQ0lGUlEwQUEwQWdCU2dDQUNFRUlBVW9BZ1FnQTBvRVFDQUVJQU5CQW5RaUFXb29BZ0FvQWdBUU15QUxLQUlBS0FJQUlBRnFLQUlBRURNZ0EwRUJhaUVESUFzb0FnQWhCUXdCQ3dzZ0JCQXpJQXNvQWdBUU15QUxRUUEyQWdBTElCc29BZ0FRTXlBYkVETWdFMFVOQmlBVEVMQUJEQVlMUVFCQkFVSEQxUUJCQUJBOElCc29BZ0FnQ2lnQ3pBVkI4QUJzYWtFQU5nSUlBa0FDUUNBTkJFQWdHeWdDQUNFRlFRQWhBU0FLS0FMTUJTRVJBMEJCQUNFRElBRkJBMFlOQWdOQUlBTkJCRWNFUUNBRklCRkI4QUJzYWlBQlFRUjBhaUFEUVFKMGFrTUFBSUEvUXdBQUFBQWdBU0FEUmhzNEFnd2dBMEVCYWlFRERBRUxDeUFCUVFGcUlRRU1BQXNBQ3lBS1FjQUJhaUFURU5NQ1JRMERJQW9nR3lnQ0FDQUtLQUxNQlVId0FHeHFJZ0ZCREdvMkFrQWdDaUFCUVJCcU5nSkVJQW9nQVVFVWFqWUNTQ0FLSUFGQkdHbzJBa3dnQ2tIQUFXcEI4L1lBSUFwQlFHc1E2d0ZCQkVjTkNTQUtRY0FCYWlBVEVOTUNSUTBESUFvZ0d5Z0NBQ0FLS0FMTUJVSHdBR3hxSWdGQkhHbzJBakFnQ2lBQlFTQnFOZ0kwSUFvZ0FVRWthallDT0NBS0lBRkJLR28yQWp3Z0NrSEFBV3BCOC9ZQUlBcEJNR29RNndGQkJFY05DU0FLUWNBQmFpQVRFTk1DUlEwRElBb2dHeWdDQUNBS0tBTE1CVUh3QUd4cUlnRkJMR28yQWlBZ0NpQUJRVEJxTmdJa0lBb2dBVUUwYWpZQ0tDQUtJQUZCT0dvMkFpd2dDa0hBQVdwQjgvWUFJQXBCSUdvUTZ3RkJCRWNOQVNBYktBSUFJUVVnQ2lnQ3pBVWhFUXNnQlNBUlFmQUFiR29pQVVFTWFpRUxJQUZCUEdvaEJrRUFJUUZCQkVFRUVMb0JJZ2tvQWdBaEJ3TkFJQUZCQTBjRVFDQUJRUUowSVFSQkFDRURBMEFnQTBFRVJ3UkFJQWNnQXlBRWFrRURkR29nQ3lBQlFRUjBhaUFEUVFKMGFpb0NBTHM1QXdBZ0EwRUJhaUVEREFFTEN5QUJRUUZxSVFFTUFRc0xJQWRDQURjRFlDQUhRb0NBZ0lDQWdJRDRQemNEZUNBSFFnQTNBM0FnQjBJQU53Tm9JQWtRb1FNYUlBa29BZ0FoQzBFQUlRRURRQ0FCUVFOSEJFQWdBVUVDZENFRVFRQWhBd05BSUFOQkJFY0VRQ0FHSUFGQkJIUnFJQU5CQW5ScUlBc2dBeUFFYWtFRGRHb3JBd0MyT0FJQUlBTkJBV29oQXd3QkN3c2dBVUVCYWlFQkRBRUxDeUFKRUVVZ0NrSFFCV29oQmtFQUlRTkJBQ0VCQWtBQ1FBTkFBa0FDUUNBQklBWnFJZ3N0QUFBaUJFRXVSd1JBSUFRTkFVRy8vUUFRb0FFaEJDQUREUUlnQVNBRWFrRUNha0dBQWtvTkJTQUxRUzQ2QUFBZ0FTRUREQVFMSUFFaEF3c2dBVUVCYWlFQkRBRUxDeUFESUFScVFRSnFRWUFDU2cwQkN5QURJQVpxUVFBNkFBRkJ2LzBBSVFFQ1FBSkFJQVlRb0FFZ0Jtb2lCVUcvL1FCelFRTnhCRUJCdi8wQUxRQUFJUU1NQVFzRFFDQUZJQUV0QUFBaUF6b0FBQ0FEUlEwQ0lBVkJBV29oQlNBQlFRRnFJZ0ZCQTNFTkFBc2dBU2dDQUNJRFFYOXpJQU5CZ1lLRUNHdHhRWUNCZ29SNGNRMEFBMEFnQlNBRE5nSUFJQUVvQWdRaEF5QUZRUVJxSVFVZ0FVRUVhaUVCSUFOQmdZS0VDR3NnQTBGL2MzRkJnSUdDaEhoeFJRMEFDd3NnQlNBRE9nQUFJQU5CL3dGeFJRMEFBMEFnQlNBQkxRQUJJZ002QUFFZ0JVRUJhaUVGSUFGQkFXb2hBU0FERFFBTEN3dEJnQUlRT1NFRElCc29BZ0FnQ2lnQ3pBVWlBVUh3QUd4cUlBTTJBbXdnQTBVTkNTQURJQXBCMEFWcVFZQUNFTlVER2lBQlFRRnFJUU1nR3lnQ0JDRUJEQUVMQ3d3R0N5QVRCRUFnRXhDd0FRc2dDaWdDekFVZ0d5Z0NCRTROQkVFQUVBTUFDd3dGQ3d3RUN5QVRFTEFCSUJzUU13dEJBQ0ViQ3lBS1FkQUhhaVFBSUJzTUFndEJBRUVEUWZiN0FFRUFFRHdnRXhDd0FVRUFFQU1BQzBFQVFRTkJtelZCQUJBOERBb0xJUUVnSVNBUUtBSVVRUUowYWlBQk5nS0lBaUFCRFFFZ0VFRUlha0c5NndFUVN5SUJJQlVRNlFNTElBRVFPQm9nQUJCSUdnd0RDeUFCS0FJQUtBSUFJZ0VvQWdRaEF5QWhJQUVvQWdBb0FnQWlBU2dDQkRZQzhBSWdJU0FCS0FJSU5nTDBBaUFoQW44Z0FTb0NEQ0lraTBNQUFBQlBYUVJBSUNTb0RBRUxRWUNBZ0lCNEN6WUMrQUlnRUVFSWFpSUVRYWozQVJCTElnRWdBeERIQVNBQkVEZ2FJQVJCMVBjQkVFc2lBU0FoS0FMd0FoREhBU0FCRURnYUlBUkJrdmNCRUVzaUFTQWhLQUwwQWhESEFTQUJFRGdhSUFSQndmY0JFRXNpQVNBaEtBTDRBaERIQVNBQkVEZ2FJQ0VnRUNnQ0ZEWUM3QUlnSWlBTUVOY0ZJQVJCdjUwQ0VFc2lBUkRxQXlBQkVEZ2FJQkFvQWhSQkFXb2hFZ3dCQ3dzQ2Z5QVFLQUlvSVF0QkFDRUhRUUFoRFVFQUlSNUJBQ0VpUVFBaERpTUFRZUFBYXlJZkpBQUNRQUpBQWtCQkFFRURJQmRGSUF0RmNnUi9RYzgvQlNBTEtBSUVEUUZCdXNVQUMwRUFFRHhCZnlFT0RBRUxJQmNvQWh3UU13SkFJQXNvQWdRaUV3UkFJQmNnRTBHRUFXd1FPU0lCTmdJY0lBRkZEUU1EUUNBTklCTk9EUUlnRFVHRUFXd2lBU0FYS0FJY2FpQUxLQUlBSUFGcVFZUUJFRDhhSUExQkFXb2hEU0FMS0FJRUlSTU1BQXNBQzBFQUlSTWdGMEVBTmdJY0N5QVhJQk0yQWlBZ0Z5Z0NKQVJBUVFBaERRTkFJQmNvQWlRaEFTQVhLQUlvSUExS0JFQWdBU0FOUVF4c2FpZ0NBQkF6SUExQkFXb2hEUXdCQ3dzZ0FSQXpDd0pBSUFzb0Fnd2lEUVJBSUJjZ0RVRU1iQkE1SWdFMkFpUWdBVVVOQXdOQUlBY2dEVTROQWlBSFFReHNJZ1FnRnlnQ0pHb2lBU0FMS0FJSUloTWdCR29pQXlnQ0NEWUNDQ0FCSUFNb0FnUTJBZ1FDUUFKQUlBTW9BZ1FpQWdSQUlBRWdBa0VNYkJBNUlnRTJBZ0JCQUNFTklBRkZEUWNEUUNBQ0lBMU1EUUlnRFVFTWJDSUJJQmNvQWlRZ0JHb29BZ0JxSWdJZ0JDQVRhaWdDQUNBQmFpSUJLUUlBTndJQUlBSWdBU2dDQ0RZQ0NDQU5RUUZxSVEwZ0N5Z0NDQ0lUSUFScUtBSUVJUUlNQUFzQUN5QURRUUEyQWdBTUFRc2dDeWdDRENFTkN5QUhRUUZxSVFjTUFBc0FDMEVBSVEwZ0YwRUFOZ0lrQ3lBWElBMDJBaWdnRnlnQ05DSUJCRUFnQVJBeklCZENBRGNDTkFzQ1FBSkFJQXNvQWd3aUFrRUFUQTBBSUJjZ0FqWUNPQ0FYSUFKQnhBQnNFRGtpQVRZQ05DQUJSUTBCUVFBaERRTkFJQUlnRFVZTkFTQUJJQTFCeEFCc2FrRUFOZ0pBSUExQkFXb2hEUXdBQ3dBTElCY29BaUFpQVVVTkFTQUJRUUFnQVVFQVNoc2hDd05BUVFBaEVTQWVJQmNvQWloT0RRSURRQ0FlUVF4c0lnY2dGeWdDSkdvb0FnUWdFVXdFUUNBZVFRRnFJUjRNQWdzZ0gwSFFBR29RU0NFY0lCOUJRR3NRU0NFVlFRQWhFeUFmUVRCcUVFZ2hIUU5BSUFzZ0UwWUVRQ0FmSUJ3UWdBRTJBZ2dnSHlBUk5nSUVJQjhnSGpZQ0FFRUFRUUZCb3RBQUlCOFFQQ0FYSUNKQkFuUnFJQmNvQWlRZ0Iyb2lBU2dDQ0RZQ1BDQVhLQUlBSVFrZ0FTZ0NBQ0FSUVF4c2FpSUJLQUlBSVFJZ0FTZ0NCQ0VCSXdCQklHc2lEeVFBSUE4Z0lqWUNIQ0FQUVJCcVFaUUJFRTRRc0FZUXJ3WWlGQ2dDQUNBQ0VKa0JJQlFvQWdBZ0FSQ0pBU0FVS0FJQUVEUkI0QUFRbVFFZ0ZDZ0NBQkEwRUZrZ0hCQ0FBUkN1QmlBY0lCUW9BZ0FRTkJCWklneEhCRUFnSENnQ0FDRUlJQndvQWdRaEFpTUFRUkJySWdVa0FBSkFJQXdRM0FFZ0FpQUlhMEVVYlNJSFR3UkFJQVVnQWpZQ0RDQU1FSUFCSUFkUElnTUVmeUFDQlNBRklBZzJBZ3dnREJDQUFTRUJJQVVnQlNnQ0RDQUJRUlJzYWpZQ0RDQUZLQUlNQ3lFQklBd29BZ0FoQmlBQklBaHJJUVFnQVNBSVJ3UkFJQVlnQ0NBRUVNb0NDeUFEUlFSQUlBd2dCU2dDRENBQ0lBY2dEQkNBQVdzUW5BWU1BZ3NnRENBR0lBUkJGRzFCRkd4cUVLa0dEQUVMSUF3b0FnQUVRQ0FNRUlBQklRRWdEQkNvQlNBTUlBRVFvd1lnREJBMEdpQU1LQUlBSVFFZ0RCRGNBUm9nQVJBeklBd1FORUVBTmdJQUlBeENBRGNDQUFzZ0RDQU1JQWNRdFFRUW13WWdEQ0FJSUFJZ0J4Q2NCZ3NnQlVFUWFpUUFDeUFVS0FJQUVEUVFTaUVHSUIwUWtnRWhBZ0pBSUFJZ0JoQ1NBU0lCU3dSQUl3QkJJR3NpQXlRQUFrQWdBaUFCYXlJRUlBWVFOQ2dDQUNBR0tBSUVhMDBFUUNNQVFSQnJJZ0lrQUNBQ0lBWWdCQkN0QXlJRUtBSUVJUTBnQkNnQ0NDRUJBMEFnQVNBTlJnUkFJQVFRYmlBQ1FSQnFKQUFGSUFZUU5Cb2dEUkNMQmlBRUlBMUJBV29pRFRZQ0JBd0JDd3NNQVFzZ0JoQTBJUUVnQTBFSWFpQUdJQVlRa2dFZ0JHb1Fxd01nQmhDU0FTQUJFS1VFSVFJakFFRVFheUlCSkFBZ0FTQUNRUWhxSUFRUWpBWWlCQ2dDQUNFVEEwQWdCQ2dDQkNBVFJ3UkFJQUlvQWhBYUlBUW9BZ0FRaXdZZ0JDQUVLQUlBUVFGcUloTTJBZ0FNQVFzTElBUVFxZ0VnQVVFUWFpUUFJQVlnQWhDa0JDQUNFS01FQ3lBRFFTQnFKQUFNQVFzZ0FTQUNTd1JBSUFZZ0JpZ0NBQ0FDYWhDR0JBc0xJQjBnRkNnQ0FCQTBFRW9pQ0VjRVFDQWRLQUlBSVFRZ0hTZ0NCQ0VHSXdCQkVHc2lCeVFBQWtBZ0JDQUdFSVFFSWdNZ0NCRGJBVTBFUUNBSElBWTJBZ3dnQkNBSUVKSUJJQU5QSWdJRWZ5QUdCU0FISUFRMkFnd2dCeUFJRUpJQklBY29BZ3hxTmdJTUlBY29BZ3dMSUFnb0FnQVFud1loQVNBQ1JRUkFJQWdnQnlnQ0RDQUdJQU1nQ0JDU0FXc1FvUVlNQWdzZ0NDQUJFSVlFREFFTElBZ29BZ0FFUUNBSUVKSUJJUUVnQ0JDWUJTQUlJQUVRblFZZ0NCQTBHaUFJS0FJQUlRRWdDQkRiQVJvZ0FSQXpJQWdRTkVFQU5nSUFJQWhDQURjQ0FBc2dDQ0FERUtzRElRSWdDQkRuQmlBQ1NRUkFFSm9CQUFzZ0NCQTBHaUFJSUFJUVRpSUJOZ0lBSUFnZ0FUWUNCQ0FJRURRZ0FTQUNhallDQUNBSVFRQVE1Z1lnQ0NBRUlBWWdBeENoQmdzZ0IwRVFhaVFBQ3lBVUtBSUFJZ0ZCSkdvaUJVRU1ha0dBQVJDU0JpQUZRUXhxRUpNR0lBVkJDRFlDYUNBRlFSQTJBbXdnQVVFSWFpSUJFRXBCQUJDdkJTRUVJQUVRZ1FFaENFRUFJUWNqQUVFUWF5SUdKQUFnQmhCSUlRd2dDQVJBSUF3UWtnUWdDRWtFUUJDYUFRQUxJQXdnREJBMElBZ1EvQU1pQVRZQ0FDQU1JQUUyQWdRZ0RCQTBJQUVnQ0VFQ2RHbzJBZ0FnREVFQUVMUUNJQXdnQ0JDbUF3c0RRQ0FNRUVNZ0IwMEVRQ0FNUVFBUU95RURJQXdRUXlFQ1FZQUJFRTRoQnlBRkVJb0dJUUVnQjBFQk9nQmtJQWNnQVRZQ0FDQUhRZWdBYWhCSUdpQUhRZlFBYWhCSUdpQUhRUVJxUWVBQUVJY0dJQVZCQ0dvZ0J4Q09CaUFGS0FJSVFRQVFtZ01nQlNBRktBSUlJQVFnQ0NBRElBSVFpQVlnREJCMElBWkJFR29rQUFVZ0RDQUhFRHNnQnpZQ0FDQUhRUUZxSVFjTUFRc0xJQWtvQWdBb0FnQWhBU0FQSUE5QkNHb2dGQkNIQkNrQ0FEY0RBQ01BUVNCckloZ2tBQ0FZSUNJMkFod2dHQ0FCUWNnQWFpSVpJQmhCSEdvUWN6WUNHQ0FZRUdzMkFnZ2dHRUVZYWlBWVFRaHFFSUlCQkVCQkVCQUtJQmhCQ0dwQmxROFFTeERkQWtHVTFRRkJEaEFKQUFzakFFRWdheUlGSkFBZ0JTQVlRUnhxSWdFUTJ3STJBaEFnQlVFWWFpRUVRUUFoRENNQVFTQnJJaFlrQUNBWkVEMGFJQUVvQWdBaENDQVpFSTBCSVEwZ0ZrRUFPZ0FmQWtBQ1FDQU5SUTBBSUJrZ0NDQU5FRnNpREJBN0tBSUFJaE5GRFFBRFFDQVRLQUlBSWhORkRRRWdDQ0FUS0FJRVJ3UkFJQk1vQWdRZ0RSQmJJQXhIRFFJTElCa1FXU0FUUVFocUlBRVEwQUZGRFFBTERBRUxJd0JCRUdzaUF5UUFJQmtRTkNFQklCWkJFR3BCRkJCT0lBTkJDR29nQVVFQUVLNENFSzBDSWdjb0FnQkJDR29oQWlBRktBSVFJUUVqQUVFUWF5SUdKQUFnQmlBQk5nSUlJQUlnQmlnQ0NDZ0NBRFlDQUNBQ1FRUnFFTElDR2lBR1FSQnFKQUFnQnhCS1FRRTZBQVFnQnlnQ0FDQUlOZ0lFSUFjb0FnQkJBRFlDQUNBRFFSQnFKQUFnR1JBOUtBSUFJUUlnR1JCWklRRUNRQ0FOQkVBZ0FrRUJhck1nQVNvQ0FDQU5zNVJlUlEwQkN5QVdJQTBRNFFGQkFYTWdEVUVCZEhJMkFnd2dGZ0ovSUJrUVBTZ0NBRUVCYXJNZ0dSQlpLZ0lBbFkwaUpFTUFBSUJQWFNBa1F3QUFBQUJnY1FSQUlDU3BEQUVMUVFBTE5nSUlJQmtnRmtFTWFpQVdRUWhxRUhrb0FnQVEvZ01nQ0NBWkVJMEJJZzBRV3lFTUN3SkFJQmtnREJBN0tBSUFJZ0ZGQkVBZ0ZpZ0NFQ0FaUVFocUlnRW9BZ0EyQWdBZ0dTQVdLQUlRTmdJSUlCa2dEQkE3SUFFMkFnQWdGaWdDRUNnQ0FFVU5BU0FXS0FJUUlRRWdHU0FXS0FJUUtBSUFLQUlFSUEwUVd4QTdJQUUyQWdBTUFRc2dGaWdDRUNBQktBSUFOZ0lBSUFFZ0ZpZ0NFRFlDQUFzZ0ZrRVFhaUlDRUxrQklSTWdHUkE5SWdFZ0FTZ0NBRUVCYWpZQ0FDQVdRUUU2QUI4Z0FpZ0NBQ0VESUFKQkFEWUNBQ0FEQkVBZ0FoQktJZ0V0QUFRRVFDQUJLQUlBSUFOQkNHb1FwZ1lMSUFNRVFDQUJLQUlBR2lBREVETUxDd3NnQkNBV1FSQnFJQk1RZlNBV1FSOXFFSzhDSUJaQklHb2tBQ0FFRUc4aEFTQUZRU0JxSkFBZ0FVRUVhaUFQRUtnR0lBOFEwUUVnR0VFZ2FpUUFJQlVnQ1NnQ0FFRUVhaUFQUVJ4cUVLc0dJZ1ZIQkVBZ0ZTZ0NBQ0VISUJVb0FnUWhBaU1BUVJCcklnZ2tBQUpBSUFjZ0FoRHpBeUlKSUFVUXZBRk5CRUFnQ0NBQ05nSU1JQVVRVmlBSlR5SURCSDhnQWdVZ0NDQUhOZ0lNSUFVUVZpRUJJQWdnQ0NnQ0RDQUJRUXhzYWpZQ0RDQUlLQUlNQ3lFQklBVW9BZ0FoQmlBQklBZHJJUVFnQVNBSFJ3UkFJQVlnQnlBRUVNb0NDeUFEUlFSQUlBVWdDQ2dDRENBQ0lBa2dCUkJXYXhEOUJRd0NDeUFGRUZZaEFTQUZJQVlnQkVFTWJVRU1iR29Rb2djZ0JTQUJFT0FDREFFTElBVW9BZ0FFUUNBRkVGWWhBU0FGRUtzSElBVWdBUkRnQWlBRkVEUWFJQVVvQWdBaEFTQUZFTHdCR2lBQkVETWdCUkEwUVFBMkFnQWdCVUlBTndJQUN5QUZJQWtRdUFJaEF5QUZFT2tHSUFOSkJFQVFtZ0VBQ3lBRklBVVFOQ0FERU9nR0lnRTJBZ0FnQlNBQk5nSUVJQVVRTkNBQklBTkJER3hxTmdJQUlBVkJBQkN2QXlBRklBY2dBaUFKRVAwRkN5QUlRUkJxSkFBTElCUVEwUUVnRDBFZ2FpUUFJQjBRcmdVZ0ZSRCtCQ0FjRU40RElDSkJBV29oSWlBUlFRRnFJUkVNQWdzQ1FDQVRRWVFCYkNJSklCY29BaHhxSWdJb0FvQUJJQmNvQWlRZ0Iyb2lBU2dDQUNBUlFReHNhaWdDQ0VjTkFDQUNLQUo4SUFFb0FnaEhEUUJCQUNFTklCOUJHR29pQlNBQ0tnSUFJQUlxQWdRZ0Fpb0NjQ0FDS2dKMElBSW9BbmhCQUVjUStRUWhBd0pBSUJ3b0FnUWdIQkEwS0FJQVNRUkFJd0JCRUdzaUFTUUFJQUVnSEVFQkVMY0VJUUlnSEJBMElBSW9BZ1FnQXhDMUF5QUNJQUlvQWdSQkZHbzJBZ1FnQWhCdUlBRkJFR29rQUF3QkN5TUFRU0JySWdJa0FDQWNFRFFpQVNBQ1FRaHFJQndnSEJDQUFVRUJhaEMxQkNBY0VJQUJJQUVRandjaUFTZ0NDQ0FERUxVRElBRWdBU2dDQ0VFVWFqWUNDQ0FjSUFFUWpRY2dBUkNLQnlBQ1FTQnFKQUFMSUJjb0Fod2dDV29pQVNvQ0NDRWxJQUVxQWd3aEpDQUZRd0FBQUFBNEFnZ2dCU0FrT0FJRUlBVWdKVGdDQUFKQUlCVW9BZ1FnRlJBMEtBSUFTUVJBSXdCQkVHc2lBU1FBSUFFZ0ZVRUJFT29DSVFJZ0ZSQTBJQUlvQWdRZ0JSRHFCaUFDSUFJb0FnUkJER28yQWdRZ0FoQnVJQUZCRUdva0FBd0JDMEVBSVFnakFFRWdheUlHSkFBZ0ZSQTBJZ0lDZnlBVklCVVFWa0VCYWhDNEFpRUVJQlVRVmlFQkl3QkJFR3NpQXlRQUlBTkJBRFlDRENBR1FRaHFJZ3hCREdvZ0FoQzdBU0FFQkVBZ0RDZ0NFQ0FFRU9nR0lRZ0xJQXdnQ0RZQ0FDQU1JQWdnQVVFTWJHb2lBVFlDQ0NBTUlBRTJBZ1FnREJBOUlBZ2dCRUVNYkdvMkFnQWdBMEVRYWlRQUlBd29BZ2dMSUFVUTZnWWdEQ0FNS0FJSVFReHFOZ0lJSUJVUWhnSWdGUkEwR2lBTVFRUnFJZ01pQVNBQktBSUFJQlVvQWdRZ0ZTZ0NBQ0lDYXlJRVFYUnRRUXhzYWlJQk5nSUFJQVJCQUVvRVFDQUJJQUlnQkJBL0dnc2dGU0FERUVZZ0ZVRUVhaUFNUVFocUVFWWdGUkEwSUF3UVBSQkdJQXdnRENnQ0JEWUNBQ0FWSUJVUVZoQ3ZBeUFNS0FJRUlRRURRQ0FCSUF3b0FnaEhCRUFnRENnQ0VCb2dEQ0FNS0FJSVFReHJOZ0lJREFFTEN5QU1LQUlBQkVBZ0RDZ0NFQm9nRENnQ0FDRUJJQXdRcmdNYUlBRVFNd3NnQmtFZ2FpUUFDd05BSUExQjRBQkdEUUVnRnlnQ0hDQUphaUFOYWtFUWFpRURBa0FnSFNnQ0JDQWRFRFFvQWdCSEJFQWpBRUVRYXlJQkpBQWdBU0FkUVFFUXJRTWhBaUFkRURRZ0FpZ0NCQ0FERUt3RElBSWdBaWdDQkVFQmFqWUNCQ0FDRUc0Z0FVRVFhaVFBREFFTEl3QkJJR3NpQWlRQUlCMFFOQ0lCSUFKQkNHb2dIU0FkRUpJQlFRRnFFS3NESUIwUWtnRWdBUkNsQkNJQktBSUlJQU1RckFNZ0FTQUJLQUlJUVFGcU5nSUlJQjBnQVJDa0JDQUJFS01FSUFKQklHb2tBQXNnRFVFQmFpRU5EQUFMQUFzZ0UwRUJhaUVUREFBTEFBc0FDd0FMREFFTElCOUI0QUJxSkFBZ0Rnd0JDMEVBUVFOQmhNd0FRUUFRUEVFQkVBTUFDMEVBU0FSQUlCQkJDR3BCOGVzQkVFc2lBUkR3QVNBQkVEZ2FJQUFRU0JvTUFRc2dFRUVvYWhDcEJTQVFRUWhxUWZ5Y0FoQkxJZ0VRNmdNZ0FSQTRHaUFoSUNNUVF5QWhLQUtFQW1vMkFvUUNJQUFnSXhDUEJCb0xJQ01RZEFzZ0VFRXdhaVFBRHdzZ0VFRVlha0hYbkFJUVN5SUFFUEFCSUFBUU9CcEJmeEFEQUF0QkFFRURRWUVmUVFBUVBBd0JDMEVBUVFOQnBBNUJBQkE4QzBFQkVBTUFDNFlHQWdsL0FYd2pBRUhRQVdzaUJTUUFRWDhoQ1NBQUVENGhBeU1BUWFBQ2F5SUJKQUJCZnlFRUFrQWdCVUVZYWlJR1JTQURSWElOQUNBRFFkNGtFTWdDSWdKRkJFQkI4SllFS0FJQUlRSWdBU0FETmdJVUlBRWdBallDRUVFQVFRTkJuUzRnQVVFUWFoQThJQUZCOEpZRUtBSUFFUDhDTmdJRUlBRkJpU00yQWdCQkFFRURRY1ljSUFFUVBBd0JDMEVBSVFRZ0FrRUFRUUlRbHdVQ2Z3SkFBbjhnQWlnQ1RFRUFTQVJBSUFJb0FnQU1BUXNnQWlnQ0FBdEJCWFpCQVhFRVFDQUJRZkNXQkNnQ0FEWUNVRUVBUVFOQjJEQWdBVUhRQUdvUVBDQUJRZkNXQkNnQ0FCRC9BallDUkNBQlFZa2pOZ0pBUVFCQkEwSEdIQ0FCUVVCckVEd01BUXNnQWhEdkJ5RUhJQUlRaXdVQ1FBTkFJQVFpQTBFRVJnMEJJQU5CQVdvaEJDQUhJQU5CQTNSQnNLa0JhaWdDQkc4TkFBc2dBVUhnQUdvZ0EwRURkRUd3cVFGcUtBSUVRUUVnQWhCZ1FRRkhCRUFnQVVId2xnUW9BZ0EyQWpCQkFFRURRZWM5SUFGQk1Hb1FQQ0FCUWZDV0JDZ0NBQkQvQWpZQ0pDQUJRWWtqTmdJZ1FRQkJBMEhHSENBQlFTQnFFRHdNQWdzZ0FTQUVOZ0tRQWlBQlFlQUFhaEN5QmlBRFJRUkFJQUVyQStBQklRb2dBU0FCS3dQWUFUa0Q0QUVnQVNBS09RUFlBUXNnQmlBQlFlQUFha0c0QVJBL0lRY2dBVUVBTmdLY0FrRUJJUVlEUUVFQUlBWkJBVVlOQXhvZ0FTQUJLQUtjQWlJSVFRUnFOZ0tjQWlBSUtBSUFJZ2dnQnlnQ3NBRTJBckFCSUFGQjRBQnFJQWNvQXJBQlFRTjBRYXlwQVdvb0FnQkJBU0FDRUdCQkFVY05BaUFCSUFRMkFwQUNJQUZCNEFCcUVMSUdJQU5GQkVBZ0FTc0Q0QUVoQ2lBQklBRXJBOWdCT1FQZ0FTQUJJQW81QTlnQkN5QUlJQUZCNEFCcVFiZ0JFRDhhSUFaQkFXb2hCZ3dBQ3dBTFFRQkJBMEdKT2tFQUVEd0xRWDhMSVFRZ0FoQ3dBUXNnQVVHZ0Ftb2tBQUpBSUFSQkFFZ0VRQ0FGUVFocVFkcWVBaEJMSWdRZ0FCQStFT2tESUFRUU9Cb01BUXRCaEpZRVFZU1dCQ2dDQUNJQVFRRnFOZ0lBSUFVZ0FEWUNDQ0FGUVFocUVOZ0ZJQVZCR0dwQnVBRVFQeG9nQlNnQ0NDRUpDeUFGUWRBQmFpUUFJQWtMMVFNQkMzOGpBRUVRYXlJQkpBQWdBU0FBTmdJTUlBRkIzSlVFSUFGQkRHb1FjellDQ0NBQkVHczJBZ0JCZnlFQUlBRkJDR29nQVJCNFJRUkFJQUZCREdvUWZDSUhLQUxFQVNJQUJFQWdBQkF6SUFkQ0FEY0N4QUVMSUFjUTJ3VWpBRUVnYXlJREpBQWdBMEhjbFFRZ0FVRU1haENYQmpZQ0dDQURFSUlFTmdJUUlBTkJHR29nQTBFUWFoQ3lBVVVFUUNBRFFRaHFJQU5CR0dvUW9nRW9BZ0FoQUNNQVFTQnJJZ2drQUNBSVFSaHFJQUFRZlNJTEVQOEZJQWhCQ0dvaENTTUFRUkJySWdva0FFSGNsUVFRalFFaEJVSGNsUVFnQUNnQ0JDQUZFRnNpQmhBN0tBSUFJUUlEUUNBQ0lnUW9BZ0FpQWlBQVJ3MEFDd0pBSUFSQjVKVUVSd1JBSUFRb0FnUWdCUkJiSUFaR0RRRUxJQUFvQWdBaUFnUkFJQUlvQWdRZ0JSQmJJQVpHRFFFTFFkeVZCQ0FHRUR0QkFEWUNBQXNDUUNBQUtBSUFJZ0pGRFFBZ0FpZ0NCQ0FGRUZzaUFpQUdSZzBBUWR5VkJDQUNFRHNnQkRZQ0FBc2dCQ0FBS0FJQU5nSUFJQUJCQURZQ0FFSGNsUVFRUFNJRUlBUW9BZ0JCQVdzMkFnQWdDU0FBSUFwQkNHcEIzSlVFRURSQkFSQ3VBaEN0QWhvZ0NrRVFhaVFBSUFrUXh3VWdDeWdDQUJvZ0NFRWdhaVFBQ3lBRFFTQnFKQUFnQnhEYUJSQXpRUUFoQUFzZ0FVRVFhaVFBSUFBTENRQkJvTzBES0FJQUN3c0FRYUR0QXlBQU5nSUFDNDBCQVFGL0l3QkJFR3NpQXlRQUlBTWdBVFlDRENBRFFkeVZCQ0FEUVF4cUVITTJBZ2dnQXhCck5nSUFBa0FnQTBFSWFpQURFSGdFUUNBQS9Rd0FBQUFBQUFBQUFBQUFBQUFBQUFBQS9Rc0NBQXdCQ3lBQUFuc2dBMEVNYWhCOElnQkIvQUpxRUxnQklBSk5CRUFRVlFBTElBQW9BdndDSUFKQkJIUnEvUUFDQUF2OUN3SUFDeUFEUVJCcUpBQUxyZ1FCQm44akFFRWdheUlDSkFBZ0FpQUFOZ0ljSUFKQjNKVUVJQUpCSEdvUWN6WUNDQ0FDRUdzMkFoaEJmeUVBSUFKQkNHb2dBa0VZYWhCNFJRUkFJQUpCSEdvUWZDSUJBbjhDZnlBQktBS2dCQ0VHSUFFb0FzQUJJZ01vQWdBaEJDQURLQUlFSVFWQnBPc0FFRGtpQUFSQUFrQWdBRUVCTmdMZ1p5QUFRcHF6NXZpRGdJQ0F3QUEzQWlnZ0FQME1HUUFBQUFzQUFBQUxBQUFBQ2dBQUFQMExBaGdnQUNBRk5nSUlJQUFnQkRZQ0JDQUFJQVkyQWhRZ0FFSDA1d0JxSUFRZ0JXd1FPU0lFTmdJQUlBUkZEUUFnQUVINDV3QnFRUUEyQWdBZ0FBd0NDd3RCQUVFRFFhS2hBa0VBRUR4QkFSQURBQXNpQUNBRE5nSU1JQUJCQVRZQ0FDQUFJQU5CQ0dvUTd3TWlBellDRUNBRFJBQUFBQUFBQUFBQUVOWUNJQUFMTmdMa0FTQUFSUVJBSUFKQkNHcEI2WjBDRUVzaUFCRHdBU0FBRURnYUlBRW9BdUFCSWdBRVFDQUFLQUlBSWdBRVFDQUFRUUFRc3dZTElBQVFNeUFCS0FMZ0FTZ0NIQkF6SUFFb0F1QUJLQUlrRURNZ0FTZ0M0QUVvQWpRUU15QUJLQUxnQVNnQ0xCQXpJQUVvQXVBQkVETWdBVUVBTmdMZ0FRc2dBU2dDNUFFaEFBc2dBQVJBSUFCREFBQ2dRRGdDTEFzZ0FTZ0M1QUVpQUFSQUlBQkRBQUFBUHpnQ0tBc2dBU2dDNUFFaUFBUkFJQUJCRURZQ0pBc2dBU2dDNUFFaUFBUkFJQUJCQmpZQ0dBc2dBU2dDNUFFaUFBUkFJQUJCQmpZQ0hBc2dBU2dDNUFFaUFBUkFJQUJCQmpZQ0lBc2dBU0FCS0FMQUFSQ3pCVFlDNEFGQkFDRUFDeUFDUVNCcUpBQWdBQXZhQkFJSmZ3SjhJd0JCUUdvaUFTUUFJQUVnQURZQ1BDQUJRZHlWQkNBQlFUeHFFSE0yQWdBZ0FSQnJOZ0k0UVg4aEFBSkFJQUVnQVVFNGFoQjREUUFnQVVFOGFoQjhJUUlnQVVFQU5nSTRJQUZCZnpZQ05DQUNLQUtBQWtGK1J3MEFBa0FDUUFKQUlBSW9BdUFCSUFJb0Fzd0JFT2NIQ3dzTElBSW9BdUFCSWdBRVFDQUJJQUFvQWpRMkFqZ2dBU0FBS0FJNE5nSTBDeUFDQW44Z0Fpc0QrQUVoQ2lBQ0t3UHdBU0VMUWNBQUVEa2lBQVJBSUFCQ0FEY0RDQ0FBUWdBM0F5Z2dBRUlBTndNWUlBQkNBRGNERUNBQVFvQ0FnSUNBZ0lENFB6Y0RJQ0FBUWdBM0F6QWdBRUlBTndNNElBQWdBQVIvSUFwRUFBQUFBQUFBQUFCaElBdEVBQUFBQUFBQUFBQmhjZ1IvUVg0RklBQkVBQUFBQUFBQThEOGdDcU1pQ2lBS1JBQUFBQUFBQVBBL0lBdWpvS001QXdCQkFBc0ZRWDhMUVFCT0RRRWFJQUFRTXd0QkFBczJBdWdCQTBBZ0JTQUJLQUkwSWdCT0RRRWdBU2dDT0NBRlFjUUFiR29pQkNnQ1BFVUVRQ0FDSUFRb0FqQWlCallDZ0FKQkFDRURBMEFnQTBFRFJ3UkFJQVFnQTBFRWRDSUhhaUVJUVFBaEFBTkFJQUJCQkVZRVFDQURRUUZxSVFNTUF3VWdBRUVDZENJSklBRWdCMnBxSUFnZ0NXb3FBZ0E0QWdBZ0FFRUJhaUVBREFFTEFBc0FDd3RCQUNFQUlBSWdCa0VDZEdvb0FvZ0NJZ1FFUUNBRVFRRTJBcGdCQTBCQkFDRURJQUJCQTBjRVFBTkFJQU5CQkVjRVFDQURRUUowSWdZZ0JDQUFRUVIwSWdkcWFpQUJJQWRxSUFacUtnSUFPQUlJSUFOQkFXb2hBd3dCQ3dzZ0FFRUJhaUVBREFFTEN5QUVRWDgyQXFnQkN3c2dCVUVCYWlFRkRBQUxBQXNnQVVGQWF5UUFJQUFMejB3RVBIOEdmUTE4QVg0akFFR2dBMnNpQkNRQUlBUWdBRFlDbkFNZ0JFSGNsUVFnQkVHY0Eyb1FjellDZ0FJZ0JCQnJOZ0tnQVFKQUFuOGdCRUdBQW1vZ0JFR2dBV29RZUFSQVFiVHRBeWdDQUF3QkN5QUJJQVJCbkFOcUVId2lIaWdDaEFKT0JFQkJ1TzBES0FJQURBRUxJQVJCb0FGcVFRQkI0QUFRT2hvZ0JFR0FnSUQ4ZXpZQ25BRUNRQ0FlS0FLQUFpSUFJQUZIRFFBZ0hpZ0M1QUVoQnlBZUlBRkJBblJxS0FLSUFpRVBJQjRvQXNRQklUTkJBQ0VBSXdCQk1Hc2lJaVFBUVg4aENnSkFJQWRGSUE5RmNpQXpSU0FFUWVBQ2FpSVVSWEp5SUFSQjVINUdjZzBBSUE4b0FwZ0JRUUJNQkVCQmZpRUtEQUVMSUFSQkFEWUNuQUVnRDBIb0FHb2hDeUFQUVRocUlSRWdEMEVJYWlFdUEwQWdEeWdDQkNBQVNnUkFJQzRnQUVId0FHd2lBeUFQS0FJQWFrRU1haUFISUFCQk1HeHFJZ1ZCTUdvUW9nUUNRQ0FQS0FLWUFVRUNTQTBBSUJFZ0R5Z0NBQ0FEYWtFTWFpQUZRWkFFYWhDaUJDQVBLQUtZQVVFRFNBMEFJQXNnRHlnQ0FDQURha0VNYWlBRlFmQUhhaENpQkFzZ0FFRUJhaUVBREFFTEN3SkFJQWNvQWdCQkFVWUVRQ0FIS0FJTUlRVWdCMEV3YWlFTUlBZEI4QlJxSVFzZ0IwSElPbW9oRVVFQUlRTWpBRUhRQUdzaUFDUUFJQVVvQWdTeUlVSWdCU2dDQUxJaFF3Si9BMEFDUUVFQUlRZ2dFaUFQS0FJRVRnMEFBMEJCQUNFS0lBaEJBMFlFUUNBU1FmQUFiQ0lRSUE4b0FnQnFLQUlFSVFKQkFDRUlBMEFnQWlnQ0JDQUlTZ1JBUVFBaENnTkFJQWhCRkd3aUNTQUNLQUlBYWlJWUtBSUVJQXBLQkVBQ1FDQUZJQUJCSUdvZ0NrRVViQ0lDSUJnb0FnQnFJaGdxQWdnZ0dDb0NEQ0FBUVJ4cUlBQkJHR29RdndWQkFFZ05BQ0FBS2dJY0lqNURBQUFBQUYwZ1BpQkRZSElOQUNBQUtnSVlJajVEQUFBQUFGMGdQaUJDWUhJTkFDQUFLZ0pNSUFBcUFrQWdEeWdDQUNBUWFpZ0NCQ2dDQUNBSmFpZ0NBQ0FDYWlJQ0tnSUlJajZVSUFJcUFnd2lQeUFBS2dKRWxKS1NJa0FnUUNCQWxDQUFLZ0lzSUFBcUFpQWdQcFFnQUNvQ0pDQS9sSktTSWtBZ1FKUWdBQ29DUENBQUtnSXdJRDZVSUQ4Z0FDb0NOSlNTa2lJL0lEK1VrcEtSSWtHVklBQXFBa2lVSUVBZ1FaVWdBQ29DS0pRZ0FDb0NPQ0EvSUVHVmxKS1NRODNNekwxZURRQWdBQ0ErT0FJUUlBQWdBaW9DRERnQ0ZDQUZJQUJCSUdvZ0FFRVFhaUFBUVFocUVOWUZBa0FnQUNvQ0RDSStJQThvQWdBZ0VHb29BZ1FvQWdBZ0NXb2lBaW9DRENJL1gwVU5BQ0ErSUFJcUFoQmdSUTBBSUFaQnlBRkdCRUJCQUVFRFFhV2dBa0VBRUR3Z0MwSE1KV29NQ3dzZ0N5QUdRUmhzYWlJQ0lBbzJBZ2dnQWlBSU5nSUVJQUlnRWpZQ0FDQUNJQUFxQWh3NEFoQWdBQ29DR0NFK0lBSkJBRFlDRENBQ0lENDRBaFFnQmtFQmFpRUdEQUVMSUQ0Z1B5QS9rbDlGRFFBZ1BpQUNLZ0lRUXdBQUFEK1VZRVVOQUNBRFFjZ0JSZ1JBSUJGQmZ6WUN6Q1ZCeUFFaEF3d0JDeUFSSUFOQkdHeHFJZ0lnQ2pZQ0NDQUNJQWcyQWdRZ0FpQVNOZ0lBSUFJZ0FDb0NIRGdDRUNBQUtnSVlJVDRnQWtFQU5nSU1JQUlnUGpnQ0ZDQURRUUZxSVFNTElBcEJBV29oQ2lBUEtBSUFJQkJxS0FJRUlRSU1BUXNMSUFoQkFXb2hDQXdCQ3dzZ0VrRUJhaUVTREFNRkEwQWdDa0VFUndSQUlBcEJBblFpQWlBSVFRUjBJaEFnQUVFZ2FtcHFJQXdnRWtFd2JHb2dFR29nQW1vcUFnQTRBZ0FnQ2tFQmFpRUtEQUVMQ3lBSVFRRnFJUWdNQVFzQUN3QUxDeUFMSUFaQkdHeHFRWDgyQWd3Z0VTQURRUmhzYWtFTWFndEJmellDQUF3QkN5QUhLQUlFSVFZZ0J5Z0NDQ0VGSUFkQk1Hb2hDU0FIUWZBVWFpRUxJQWRCeURwcUlSRkJBQ0VESXdCQjBBQnJJZ0FrQUNBRnNpRkFJQWF5SVVFQ2Z3TkFBa0JCQUNFS0lCSWdEeWdDQkU0TkFBTkFRUUFoQ0NBS1FRTkdCRUFnRWtId0FHd2lFQ0FQS0FJQWFpZ0NCQ0VLUVFBaEJnTkFJQW9vQWdRZ0Jrb0VRRUVBSVFnRFFDQUdRUlJzSWdVZ0NpZ0NBR29pRENnQ0JDQUlTZ1JBQWtCQkFDQUFRU0JxSUFoQkZHd2lHQ0FNS0FJQWFpSU1LZ0lJSUF3cUFnd2dBRUVjYWlBQVFSaHFFTDhGUVFCSURRQWdBQ29DSENJK1F3QUFBQUJkSUQ0Z1FXQnlEUUFnQUNvQ0dDSStRd0FBQUFCZElENGdRR0J5RFFBZ0FDQVBLQUlBSUJCcUtBSUVLQUlBSUFWcUtBSUFJQmhxSWd3cUFnZzRBaEFnQUNBTUtnSU1PQUlVUVFBZ0FFRWdhaUFBUVJCcUlBQkJDR29RMWdVQ1FDQUFLZ0lNSWo0Z0R5Z0NBQ0FRYWlnQ0JDZ0NBQ0FGYWlJRktnSU1JajlmUlEwQUlENGdCU29DRUdCRkRRQWdBa0hJQVVZRVFFRUFRUU5CcGFBQ1FRQVFQQ0FMUWN3bGFnd0xDeUFMSUFKQkdHeHFJZ1VnQ0RZQ0NDQUZJQVkyQWdRZ0JTQVNOZ0lBSUFVZ0FDb0NIRGdDRUNBQUtnSVlJVDRnQlVFQU5nSU1JQVVnUGpnQ0ZDQUNRUUZxSVFJTUFRc2dQaUEvSUQrU1gwVU5BQ0ErSUFVcUFoQkRBQUFBUDVSZ1JRMEFJQU5CeUFGR0JFQWdFVUYvTmdMTUpVSElBU0VEREFFTElCRWdBMEVZYkdvaUJTQUlOZ0lJSUFVZ0JqWUNCQ0FGSUJJMkFnQWdCU0FBS2dJY09BSVFJQUFxQWhnaFBpQUZRUUEyQWd3Z0JTQStPQUlVSUFOQkFXb2hBd3NnQ0VFQmFpRUlJQThvQWdBZ0VHb29BZ1FoQ2d3QkN3c2dCa0VCYWlFR0RBRUxDeUFTUVFGcUlSSU1Bd1VEUUNBSVFRUkhCRUFnQ0VFQ2RDSUdJQXBCQkhRaUJTQUFRU0JxYW1vZ0NTQVNRVEJzYWlBRmFpQUdhaW9DQURnQ0FDQUlRUUZxSVFnTUFRc0xJQXBCQVdvaENnd0JDd0FMQUFzTElBc2dBa0VZYkdwQmZ6WUNEQ0FSSUFOQkdHeHFRUXhxQzBGL05nSUFDeUFBUWRBQWFpUUFJQWRCMEF0cUlUUWdEMEdjQVdvaE5TQUhRY2c2YWlFMklBZEI4QlJxSWpjaEVrRUFJUWdEUUFKQUlBZ2hBRUVBSVJzZ0x5QUhLQUlrVGcwQUEwQUNRQUpBSUJzZ0J5Z0M0R2RPRFFBZ0x5QUhLQUlrUmcwQUlCSWdOU0FBSURRZ0J5Z0NCQ0FIS0FJSUVOQUZJZ3BCQUU0TkFTQVNJRGRIRFFBZ05pSVNJRFVnQUNBMElBY29BZ1FnQnlnQ0NCRFFCU0lLUVFCT0RRRUxRUUFoQ2lBYlJRMENBMEFnQ2lBYlJnMEVJQWNnQ2tFMGJHb2lHVUdVNkFCcUFuOGdHVUhrNXdCcUtBSUFJUU1nR1VIbzV3QnFLQUlBSVNNZ0dVSHM1d0JxS0FJQUlRQWdHVUh3NXdCcUtBSUFJU29nR1VIMDV3QnFLQUlBSVJFZ0dVSDg1d0JxSVJoQkFDRUxRUUFoRUVFQUlSVWpBRUV3YXlJY0pBQWdBQ2dDQ0NFa0lBQW9BZ1FoSmlBQUtBSUFJU0FnR1VINDV3QnFJaFlvQWdBaUFrVUVRQ0FXQW44Z0F5Z0NIQ0VDSUFNb0FpQWhCa0VvRURraUFBUkFBa0FnQUNBR05nSVVJQUFnQWpZQ0NDQUFJQUkyQWhBZ0FDQUdOZ0lNSUFBZ0FpQUdha0VCYWlJQ05nSUVJQUFnQWpZQ0FDQUFJQUlnQW14QkFYUVFPU0lDTmdJWUlBSkZEUUFnQUF3Q0N3c01Dd3NpQWpZQ0FBdEJmeUVySUFNb0Fnd2hCU0FESUNCQk1HeHFRVEJxSVE0Z0l5Z0NBQ0FnUWZBQWJHb2lBQ2dDQUNFWElBQW9BZ1FvQWdBZ0prRVViR29oRXlNQVFkQUFheUlBSkFBQ1FBSkFBa0FnQlFSQUlBVkJDR29nRGlBQVFSQnFJZ2tRc0FNZ0FDQVRLQUlBSUNSQkZHeHFJZ1lxQWdnaVBqZ0NUQ0FBSUFZcUFnd2lQemdDU0VGL0lRWkJBQ0FKSUQ0Z1B5QUFRY3dBYWlBQVFjZ0FhaERTQWtFQVNBMERJQVZCdUFGcUlpRWdBQ29DVENBQUtnSklJQUJCeEFCcUlBQkJRR3NRY2tFQVNBMERJQUlvQWhBaEJnSi9JQUFxQWtCREFBQUFQNUlpUG90REFBQUFUMTBFUUNBK3FBd0JDMEdBZ0lDQWVBc2hCU0FHUVFGMElRa0NmeUFBS2dKRVF3QUFBRCtTSWo2TFF3QUFBRTlkQkVBZ1BxZ01BUXRCZ0lDQWdIZ0xJUjhnQlNBSmF5RUpRUUFnQm1zaERDQUNLQUlZSVFVRFFDQU1JQUlvQWhSS0RRSkJBQ0FDS0FJSUlnWnJJUTBnSHlBR1FRRjBheUVHSUFteUlUNERRQUpBQWtBZ0FpZ0NEQ0FOVGdSQUlDRWdCcklnUGlBQVFjUUFhaUFBUVVCckVPSUJRUUJJRFFFZ0FFRVFhaUFYS0FJQUlCTW9BZ2hCQW5ScUtBSUFJQUFxQWtRZ0FDb0NRQ0FBUVE5cUVMZ0ZRUUJJRFFFZ0JTQUFMUUFQSWhvN0FRQWdFRUVCYWlFUUlBc2dHbW9oQ3lBYUlCcHNJQlZxSVJVTUFnc2dDVUVDYWlFSklBeEJBV29oREF3REN5QUZRWUFnT3dFQUN5QUdRUUpxSVFZZ0RVRUJhaUVOSUFWQkFtb2hCUXdBQ3dBTEFBdEJBQ0FPSUJNb0FnQWdKRUVVYkdvaUJpb0NDQ0FHS2dJTUlBQkJ4QUJxSUFCQlFHc1EwZ0pCQUVnTkFTQUNLQUlRSVFZQ2Z5QUFLZ0pBUXdBQUFEK1NJajZMUXdBQUFFOWRCRUFnUHFnTUFRdEJnSUNBZ0hnTElRVWdCa0VCZENFSkFuOGdBQ29DUkVNQUFBQS9raUkraTBNQUFBQlBYUVJBSUQ2b0RBRUxRWUNBZ0lCNEN5RWhJQVVnQ1dzaENVRUFJQVpySVF3Z0FpZ0NHQ0VGQTBBZ0RDQUNLQUlVU2cwQlFRQWdBaWdDQ0NJR2F5RU5JQ0VnQmtFQmRHc2hCaUFKc2lFK0EwQWdBaWdDRENBTlRnUkFBa0FnRGlBWEtBSUFJQk1vQWdoQkFuUnFLQUlBSUFheUlENGdBRUVQYWhDNEJVRUFTQVJBSUFWQmdDQTdBUUFNQVFzZ0JTQUFMUUFQSWhvN0FRQWdFRUVCYWlFUUlBc2dHbW9oQ3lBYUlCcHNJQlZxSVJVTElBWkJBbW9oQmlBTlFRRnFJUTBnQlVFQ2FpRUZEQUVMQ3lBSlFRSnFJUWtnREVFQmFpRU1EQUFMQUFzZ0VFVU5BQ0FDSUJBMkFpUWdBaUFMTmdJZ0lBSUNmeUFWSUFzZ0Myd2dFRzFyc3BFaVBvdERBQUFBVDEwRVFDQStxQXdCQzBHQWdJQ0FlQXMyQWh4QkFDRUdEQUVMUVg4aEJnc2dBRUhRQUdva0FBSkFJQVpCQUVnTkFDQVdLQUlBSWdBb0FoQWdBQ2dDRkdwQkFXb2dBQ2dDQ0NBQUtBSU1ha0VCYW15eVF3QUFvRUNVUXdBQW9FQ1VJQUFvQWh3aUFDQUFiTEplRFFBQ1FBSkFBa0FDUUNBaktBS1lBVUVCYXc0Q0FBRUNDeUFES0FJTUlBNUJBRUVBSUNNb0FnQWdJRUh3QUd4cUtBSUVLQUlBSUNaQkZHeHFLQUlBSUNSQkZHeHFJQnhCRUdvUTVRTU1BZ3NnQXlnQ0RDQU9JQU1nSUVFd2JHcEJrQVJxUVFBZ0l5Z0NBQ0FnUWZBQWJHb29BZ1FvQWdBZ0prRVViR29vQWdBZ0pFRVViR29nSEVFUWFoRGxBd3dCQ3lBREtBSU1JQTRnQXlBZ1FUQnNhaUlBUVpBRWFpQUFRZkFIYWlBaktBSUFJQ0JCOEFCc2FpZ0NCQ2dDQUNBbVFSUnNhaWdDQUNBa1FSUnNhaUFjUVJCcUVPVURDMEVBSVNzQ2Z5QURLQUlFSVJVZ0F5Z0NDQ0VhSUFNb0FoUWhJU0FXS0FJQUlRMGdBeWdDR0NFTElCeEJFR29oSDBFQUlRd2pBRUZBYWlJT0pBQWdHa0VCYXlFRklCVkJBV3NoRUNBTktBSVVJUWtnRFNnQ0VDRVRBMEFDUUNBTVFRTkdEUUFnSHlBTVFRTjBhaUlBS0FJQUlnSkJBRWdOQUNBQ1FYeHhRUUp5SWdJZ0Myb2lBeUFRSUFNZ0ZVZ2JJUllnQWlBTGF5SUNRUUFnQWtFQVNoc2hCaUFBS0FJRVFRUnRRUUowUVFKeUlnQWdDMm9pQWlBRklBSWdHa2diSVJjZ0FDQUxheUlBUVFBZ0FFRUFTaHNoQUFOQUlBQWdGMHdFUUNBUklBQWdGV3dnQm1wcUlRTWdCaUVDQTBBZ0FpQVdUQVJBSUFOQkFEb0FBQ0FDUVFGcUlRSWdBMEVCYWlFRERBRUxDeUFBUVFGcUlRQU1BUXNMSUF4QkFXb2hEQXdCQ3dzZ0RrRUFOZ0k4SUFsQkFYUWhMRUVBSUJOQkFYUnJJUjFCQUNFRFFRRWhCZ05BQWtBQ1FBSkFJQU5CQTBjRVFDQWZJQU5CQTNScUlnQW9BZ0FpQWtFQVRnMENRWDhoSHlBR0RRRUxJQTBvQWdCQkEzUkJJR29nRFNnQ0JFRUJkRUVJYW13aUFCQTVJaEVFUUNBQUVEa2lFQVJBUVg4aEh5QWhRUTVMSVRCQkFDRVhRUUFoQUFOQUFrQWdEaWdDUENBWFNnUkFBa0FDUUVFQklDRjBRYURnQVhGRklBMG9BaVFnRFNnQ0JDSUNJQTBvQWdBaUJteEhJREJ5Y2cwQUlCZEJBblFpQXlBT1FTUnFhaUl4S0FJQUlnVWdEU2dDRUVFQmRHdEJBMnNpSjBFQVNBMEFJQVVnRFNnQ0ZFRUJkR3BCQTJvZ0drNE5BQ0FPUVRCcUlBTnFJamdvQWdBaUF5QU5LQUlJUVFGMGEwRURheUlzUVFCSURRQWdBeUFOS0FJTVFRRjBha0VEYWlBVlNBMEJDeUFYUVFKMElnSWdEa0VrYW1vb0FnQWlBMEVEYWlFRklBTkJBMnNoQXlBT1FUQnFJQUpxSVFzRFFDQURJQVZLRFFNQ1FDQURJQTBvQWhCQkFYUnJRUUJJRFFBZ0RTZ0NGRUVCZENBRGFpQWFUZzBFSUFzb0FnQWlBa0VEYWlFSklBSkJBMnNoQWdOQUlBSWdDVW9OQVFKQUlBSWdEU2dDQ0VFQmRHdEJBRWdOQUNBTktBSU1RUUYwSUFKcUlCVk9EUUlnS2lBVklDRWdEU0FDSUFNZ0RrRVVhaERNQlNBT0tBSVVJZ1lnQUV3TkFDQWNJQUkyQWd3Z0hDQUROZ0lJSUJnZ0JySkRBRUFjUnBVNEFnQkJBQ0VmSUFZaEFBc2dBa0VCYWlFQ0RBQUxBQXNnQTBFQmFpRUREQUFMQUF0QkFDRUpJQVpCQW5SQkVHb2lBMEVBSUFOQkFFb2JJUXNnQWtFQmRFRUdhaUVGSUJFaEFpQVFJUU1EUUNBSklBdEhCRUFnQWtFQU5nSUFJQU5CQURZQ0FDQUpRUUZxSVFrZ0EwRUVhaUVESUFKQkJHb2hBZ3dCQ3d0QkFDRVdJQVpCQVhSQkJtb2lCa0VBSUFaQkFFb2JJU1VnQlVFQUlBVkJBRW9iSVRJZ0tpQXNJQlVnSjJ4cWFpRU1RUUFoRXlBUklRVWdFQ0VMQTBCQkFDRUpJQk1nTWtjRVFBTkFJQWxCQWtjRVFDQUNRUUEyQWdBZ0EwRUFOZ0lBSUFsQkFuUWlCaUFPUVFScWFrRUFOZ0lBSUE1QkRHb2dCbXBCQURZQ0FDQUpRUUZxSVFrZ0EwRUVhaUVESUFKQkJHb2hBZ3dCQ3dzZ0MwRUlhaUVMSUFWQkNHb2hCVUVBSVFrZ0RDRUdBMEFnQ1NBbFJ3UkFJQWxCQW5SQkJIRWlLQ0FPUVF4cWFpSXBJQVl0QUFBaUhTQXBLQUlBYWlJcE5nSUFJQTVCQkdvZ0tHb2lLQ0FvS0FJQUlCMGdIV3hxSWgwMkFnQWdBaUFGS0FJQUlDbHFOZ0lBSUFNZ0N5Z0NBQ0FkYWpZQ0FDQUpRUUZxSVFrZ0EwRUVhaUVESUF0QkJHb2hDeUFDUVFScUlRSWdCVUVFYWlFRklBWkJBV29oQmd3QkN3c2dFMEVCYWlFVElBd2dGV29oREF3QkN3c0RRQ0FXUVFkR0RRSWdGa0VEYXlFeUlCWkJBbW9oS0NBV0lDZHFJU2xCQUNFQ0EwQWdBa0VIUndSQUlBSkJBbW9oT1VFQUlRWkJBQ0VUSUEwb0FnUWlIVUVBSUIxQkFFb2JJVG9nRlVFQmRDRTdJQ29nQWlBc2FpQVZJQ2xzYW1vaEJTQU5LQUlBSWlWQkFDQWxRUUJLR3lJOFFRRjBJVDBnRFNnQ0dDRUxBMEFnQmlBNlJ3UkFJQVVoQXlBTElRbEJBQ0VNQTBBZ0RDQThSd1JBSUF4QkFXb2hEQ0FKTHdFQUlBTXRBQUJzSUJOcUlSTWdBMEVDYWlFRElBbEJBbW9oQ1F3QkN3c2dCa0VCYWlFR0lBVWdPMm9oQlNBTElEMXFJUXNNQVFzTElBNGdFQ0FsUVFGMElnWkJDR29pQlNBb1FRSnJJZ3RzSWdrZ09VRUNheUlEYWtFQ2RDSU1haWdDQUNBUUlBVWdDeUFkUVFGMGFtd2lCU0FESUFacUlnWnFRUUowSWd0cUtBSUFhaUlkSUJBZ0JpQUpha0VDZENJR2FpZ0NBQ0FRSUFNZ0JXcEJBblFpQTJvb0FnQnFJQXdnRVdvb0FnQWdDeUFSYWlnQ0FHb2dBeUFSYWlnQ0FDQUdJQkZxS0FJQWFtc2lBeUFEYkNBTktBSWtJZ1p0YWlJRlJ3Ui9JQk1nRFNnQ0lDQURiQ0FHYld0QjVBQnNJQTBvQWh4dFFlUUFiQUovSUIwZ0JXdXlrU0kraTBNQUFBQlBYUVJBSUQ2b0RBRUxRWUNBZ0lCNEMyMEZRUUFMTmdJVUlBQWdEaWdDRkNJRFNBUkFJQndnQWlBNEtBSUFha0VEYXpZQ0RDQWNJRElnTVNnQ0FHbzJBZ2dnR0NBRHNrTUFRQnhHbFRnQ0FFRUFJUjhnQXlFQUN5QUNRUUZxSVFJTUFRc0xJQlpCQVdvaEZnd0FDd0FMSUJFUU15QVFFRE1NQkFzZ0YwRUJhaUVYREFBTEFBc01Bd3NNQWdzZ0RrRkFheVFBSUI4TUF3c2dBa0Y4Y1VFQ2NpSUNJQXRxSVNVZ0FpQUxheUVRSUFBb0FnUkJCRzFCQW5SQkFuSWlBQ0FMYWlFd0lBQWdDMnNoQ1FOQUFrQWdDU0F3U2cwQUFrQWdDU0FkYWtFQVNBMEFJQWtnTEdvZ0drNE5BU0FKSUJWc0lURWdFQ0VDQTBBZ0FpQWxTZzBCQWtBZ0FpQU5LQUlJUVFGMGEwRUFTQTBBSUEwb0FneEJBWFFnQW1vZ0ZVNE5BaUFSSUFJZ01XcHFJZ0F0QUFBTkFDQUFRUUU2QUFBZ0tpQVZJQ0VnRFNBQ0lBa2dEa0VVYWhETUJTQU9LQUlVSVJjZ0RrRXdhaUVUSUE1QkpHb2hGaUFPUVJocUlReEJBQ0VBQWtBZ0RpZ0NQQ0lGQkVBZ0JVRUFJQVZCQUVvYklRWURRQUpBSUFBZ0JrY0VRQ0FNSUFCQkFuUnFLQUlBSUJkT0RRRWdBQ0VHQ3lBRklBWkdCRUFnQlVFQ1N3MEVJQk1nQlVFQ2RDSUFhaUFDTmdJQUlBQWdGbW9nQ1RZQ0FDQUFJQXhxSUJjMkFnQWdEaUFPS0FJOFFRRnFOZ0k4REFRTFFRSWhBQ0FGUVFOSEJFQWdEaUFGUVFGcU5nSThJQVVoQUFzRFFDQUFJQVpLQkVBZ0V5QUFRUUowSWdWcUlCTWdBRUVCYXlJQVFRSjBJaWRxS0FJQU5nSUFJQVVnRm1vZ0ZpQW5haWdDQURZQ0FDQUZJQXhxSUF3Z0oyb29BZ0EyQWdBTUFRc0xJQk1nQUVFQ2RDSUFhaUFDTmdJQUlBQWdGbW9nQ1RZQ0FDQUFJQXhxSUJjMkFnQU1Bd3NnQUVFQmFpRUFEQUFMQUFzZ0V5QUNOZ0lBSUJZZ0NUWUNBQ0FNSUJjMkFnQWdEa0VCTmdJOEMwRUFJUVlMSUFKQkJHb2hBZ3dBQ3dBTElBbEJCR29oQ1F3QkN3c2dBMEVCYWlFRERBRUxDd3dMQzBFQVNBUkFRWDhoS3d3QkN5QVlJQndvQWd5eU9BSUVJQmdnSENnQ0NMSTRBZ2dnR0NBaktBSUFJQ0JCOEFCc2FpSUFLZ0lZSUFBcUFnd2dBQ2dDQkNnQ0FDQW1RUlJzYWlnQ0FDQWtRUlJzYWlJQ0tnSUlsQ0FBS2dJUUlBSXFBZ3lVa3BJNEFnd2dHQ0FBS2dJb0lBQXFBaHdnQWlvQ0NKUWdBQ29DSUNBQ0tnSU1sSktTT0FJUUlCZ2dBQ29DT0NBQUtnSXNJQUlxQWdpVUlBQXFBakFnQWlvQ0RKU1NramdDRkFzZ0hFRXdhaVFBSUNzTE5nSUFBa0FnS3cwQUlCZ3FBZ0FnQnlvQ0tGNUZEUUFnQnlBSVFRTjBhaUlDUWRRT2FnSjlJQWNvQWdCQkFVWUVRQ0FIS0FJTUlnQkI2QUJxSUJsQmdPZ0FhaW9DQUxzZ0dVR0U2QUJxS2dJQXV5QWlRUWhxSUNJZ0FDZ0NzQUVRdGdZZ0J5QUlRUU4wYWtIUURtb2dJaXNEQ0xZNEFnQWdJaXNEQUxZTUFRc2dCeUFJUVFOMGFrSFFEbW9nR1VHQTZBQnFLZ0lBT0FJQUlCbEJoT2dBYWlvQ0FBczRBZ0FnQnlBSVFReHNhaUlBUVpBUmFpQVpRWWpvQUdvcUFnQTRBZ0FnQUVHVUVXb2dHVUdNNkFCcUtnSUFPQUlBSUFCQm1CRnFJQmxCa09nQWFpb0NBRGdDQUNBQ1FkQUxhaUFpUVJCcUlBcEJBblJxS0FJQUlnQXFBaEE0QWdBZ0FrSFVDMm9nQUNvQ0ZEZ0NBQ0FISUFoQkdHeHFJZ0pCb09BQWFpQUFLQUlBTmdJQUlBSkJwT0FBYWlBQUtBSUVOZ0lBSUFBb0FnZ2hBQ0FDUWF6Z0FHcEJBRFlDQUNBQ1FhamdBR29nQURZQ0FDQUlRUUZxSVFnTElBcEJBV29oQ2d3QUN3QUxJQ0pCRUdvZ0cwRUNkR29nRWlBS1FSaHNhaUlDTmdJQUlBY2dBRUVEZEdvaUEwSFFDMm9nQWlvQ0VEZ0NBQ0FEUWRRTGFpQUNLZ0lVT0FJQUlBY2dHMEUwYkdvaUEwSHc1d0JxSURNMkFnQWdBMEhzNXdCcUlBSTJBZ0FnQTBIbzV3QnFJQTgyQWdBZ0EwSGs1d0JxSUFjMkFnQWdDQ0FBUVFGcUlnQWdBRUVGUmhzaEFDQWJRUUZxSVJzZ0wwRUJhaUV2REFBTEFBc0xRUUFoQUNBSVFRQWdDRUVBU2hzaEFnTkFJQUFnQWtjRVFDQVBJQUJCR0d3aUEyb2lCaUFESUFkcUlnTkJzT0FBYWlrQ0FEY0NyQUVnQmlBRFFhRGdBR3I5QUFJQS9Rc0NuQUVnQUVFQmFpRUFEQUVMQ3lBUElBaEJHR3hxUVg4MkFxZ0JBa0FDUUNBSEtBSUFRUUZHQkVCQmZTRUtJQWhCQTBnTkFpQUVJQWNvQWhBZ0xpQUhRZEFPYWlJQUlBZEJrQkZxSWdJZ0NDQVVRUUFRMFFJaVBqZ0NuQUVnUGlBSEtnSXNYa1VOQVNBSEtBSVFSQUFBQUtDWm1lay9FTllDSUFRZ0J5Z0NFQ0FVSUFBZ0FpQUlJQlJCQVJEUkFpSStPQUtjQVNBK0lBY3FBaXhlUlEwQklBY29BaEJFQUFBQVFETXo0ejhRMWdJZ0JDQUhLQUlRSUJRZ0FDQUNJQWdnRkVFQkVORUNJajQ0QXB3QklENGdCeW9DTEY1RkRRRWdCeWdDRUVRQUFBQ2dtWm5aUHhEV0FpQUVJQWNvQWhBZ0ZDQUFJQUlnQ0NBVVFRRVEwUUlpUGpnQ25BRWdQaUFIS2dJc1hrVU5BU0FIS0FJUVJBQUFBQUFBQUFBQUVOWUNJQVFnQnlnQ0VDQVVJQUFnQWlBSUlCUkJBUkRSQWlJK09BS2NBVUY4SVFvZ1BpQUhLZ0lzWGtVTkFRd0NDMEY5SVFvZ0NFRURTQTBCSUFRZ0xpQUhRZEFPYWlJQUlBZEJrQkZxSWdJZ0NDQVVRUUJEQUFDQVB4RFFBaUkrT0FLY0FTQStJQWNxQWl4ZVJRMEFJQVFnRkNBQUlBSWdDQ0FVUVFGRHpjeE1QeERRQWlJK09BS2NBU0ErSUFjcUFpeGVSUTBBSUFRZ0ZDQUFJQUlnQ0NBVVFRRkRtcGtaUHhEUUFpSStPQUtjQVNBK0lBY3FBaXhlUlEwQUlBUWdGQ0FBSUFJZ0NDQVVRUUZEemN6TVBoRFFBaUkrT0FLY0FTQStJQWNxQWl4ZVJRMEFJQVFnRkNBQUlBSWdDQ0FVUVFGREFBQUFBQkRRQWlJK09BS2NBVUY4SVFvZ1BpQUhLZ0lzWGcwQkN5QVBJQThvQXBnQlFRRnFOZ0tZQVVFQUlRcEJBQ0ViQTBCQkFDRUFJQnRCQTBZRVFBTkFRUUFoQUNBS1FRTkdCRUFEUUVFQUlRb2dBRUVEUmcwR0EwQWdDa0VFUndSQUlBcEJBblFpQWlBUElBQkJCSFFpQTJwcUlBTWdGR29nQW1vcUFnQTRBZ2dnQ2tFQmFpRUtEQUVMQ3lBQVFRRnFJUUFNQUFzQUJRTkFJQUJCQkVjRVFDQVBJQXBCQkhScUlBQkJBblJxSWdJZ0Fpb0NDRGdDT0NBQVFRRnFJUUFNQVFzTElBcEJBV29oQ2d3QkN3QUxBQVVEUUNBQVFRUkhCRUFnRHlBYlFRUjBhaUFBUVFKMGFpSUNJQUlxQWpnNEFtZ2dBRUVCYWlFQURBRUxDeUFiUVFGcUlSc01BUXNBQ3dBTElBOUJBRFlDbUFFTElDSkJNR29rQUFOQUFrQkJBQ0VBSUMxQkEwWUVRQ0FlS0FMb0FTRUNJQXBCSDNZaEF5TUFRVUJxSWdBa0FDQUNCSDhnQUFKOElBUXJBNEFDSWtRZ0JDc0RxQUlpUmFBZ0JDc0QwQUlpUnFCRUFBQUFBQUFBOEQrZ0lrZEVMVU1jNitJMkdqOWtCRUFnQUNBRUt3T3dBaUFFS3dQSUFxRWdSNThpUkNCRW9DSkVvemtESUNBQUlBUXJBOEFDSUFRckE1QUNvU0JFb3prREtDQUFJQVFyQTRnQ0lBUXJBNkFDb1NCRW96a0RNQ0JFUkFBQUFBQUFBTkEvb2d3QkN5QkVJRVZrUlNCRUlFWmtSWEpGQkVBZ0FDQkVSQUFBQUFBQUFQQS9vQ0JGb1NCR29aOGlSQ0JFb0NKRVJBQUFBQUFBQU5BL29qa0RJQ0FBSUFRckE0Z0NJQVFyQTZBQ29DQkVvemtES0NBQUlBUXJBOEFDSUFRckE1QUNvQ0JFb3prRE1DQUVLd093QWlBRUt3UElBcUVnUktNTUFRc2dSU0JHWkFSQUlBUXJBNkFDSVVjZ0JDc0RpQUloU0NBQUlFVkVBQUFBQUFBQThEK2dJRVNoSUVhaG55SkVJRVNnSWtSRUFBQUFBQUFBMEQraU9RTW9JQUFnU0NCSG9DQkVvemtESUNBQUlBUXJBN0FDSUFRckE4Z0NvQ0JFb3prRE1DQUVLd1BBQWlBRUt3T1FBcUVnUktNTUFRc2dBQ0FFS3dQQUFpQUVLd09RQXFBZ1JrUUFBQUFBQUFEd1A2QWdSS0VnUmFHZklrUWdSS0FpUktNNUF5QWdCQ3NEeUFJaFJTQUVLd093QWlGR0lBQWdSRVFBQUFBQUFBRFFQNkk1QXpBZ0FDQkdJRVdnSUVTak9RTW9JQVFyQTRnQ0lBUXJBNkFDb1NCRW93czVBemdnQUNBRUt3T1lBamtEQUNBQUlBUXJBN2dDT1FNSUlBQWdCQ3NEMkFJNUF4QWdBRUVnYWhEa0JnSkFJQU1FUUNBQ0lBQXJBeUE1QXdnZ0FpQUFLd01vT1FNUUlBSWdBQ3NETURrREdDQUNJQUFyQXpnNUF5QWdBaUFBS3dNQU9RTW9JQUlnQUNzRENEa0RNQ0FDSUFBckF4QTVBemdNQVF0RUFBQUFBQUFBOEQ4Z0Fpc0RBQ0pFb1NKSUlVY2dSQ0ZGSUFBckF6Z2lTeUFDS3dNZ0lrMmlJQUFyQXpBaVNTQUNLd01ZSWs2aUlBQXJBeUFpU2lBQ0t3TUlJaytpSUFBckF5Z2lUQ0FDS3dNUUlsQ2lvS0NnSWtaRUFBQUFBQUFBQUFCakJFQWdBQ0JMbWlKTE9RTTRJQUFnU1pvaVNUa0RNQ0FBSUV5YUlrdzVBeWdnQUNCS21pSktPUU1nSUVhYUlVWUxJRVpFbGtPTGJPZjc3ejlrUlFSQUlFUUNmQ0JHdlNKUlFpQ0lwMEgvLy8vL0IzRWlBMEdBZ01EL0EwOEVRRVFBQUFBQUFBQUFBRVFZTFVSVSt5RUpRQ0JSUWdCWkd5QlJweUFEUVlDQXdQOERhM0pGRFFFYVJBQUFBQUFBQUFBQUlFWWdScUdqREFFTEFud2dBMEgvLy8vK0EwMEVRRVFZTFVSVSt5SDVQeUFEUVlHQWdPTURTUTBCR2tRSFhCUXpKcWFSUENCR0lFWWdScUlRMndPaW9TQkdvVVFZTFVSVSt5SDVQNkFNQWdzZ1VVSUFVd1JBUkJndFJGVDdJZmsvSUVaRUFBQUFBQUFBOEQrZ1JBQUFBQUFBQU9BL29pSkZueUpHSUVZZ1JSRGJBNkpFQjF3VU15YW1rYnlnb0tFaVJTQkZvQXdDQzBRQUFBQUFBQUR3UHlCR29VUUFBQUFBQUFEZ1A2SWlSWjhpUmlCRkVOc0RvaUJGSUVhOVFvQ0FnSUJ3Zzc4aVJTQkZvcUVnUmlCRm9LT2dJRVdnSWtVZ1JhQUxDeUpHb2hDQkF5QkdFSUVESWtlaklVVWdTQ0JHb2hDQkF5QkhveUZIQ3lBQ0lFc2dSYUlnVFNCSG9xQTVBeUFnQWlCSklFV2lJRTRnUjZLZ09RTVlJQUlnVENCRm9pQlFJRWVpb0RrREVDQUNJRW9nUmFJZ1R5QkhvcUE1QXdnZ0FrRUlhaERrQmlBQ0lBQXJBd0FnUktJZ1NDQUNLd01vb3FBNUF5Z2dBaUFBS3dNSUlFU2lJRWdnQWlzRE1LS2dPUU13SUFJZ0FDc0RFQ0JFb2lCSUlBSXJBemlpb0RrRE9Bc2dCQ0FDS3dNSUlrUWdBaXNERUNKRklFV2dJa2VpSWtrZ0Fpc0RJQ0pJSUFJckF4Z2lTeUJMb0NKR29pSktvVGtEb0FJZ0JDQkVJRWFpSWt3Z1J5QklvaUpOb0RrRHdBSWdCQ0JKSUVxZ09RT0lBaUFFSUVVZ1JxSWlTU0JJSUVRZ1JLQWlTS0lpU3FFNUE4Z0NJQVFnVENCTm9Ua0RrQUlnQkNCSklFcWdPUU93QWlBRVJBQUFBQUFBQVBBL0lFUWdTS0lpUkNCRklFZWlJa1dnb1RrRDBBSWdCRVFBQUFBQUFBRHdQeUJFSUVzZ1JxSWlSS0NoT1FPb0FpQUVSQUFBQUFBQUFQQS9JRVVnUktDaE9RT0FBaUFFSUFJckF5ZzVBNWdDSUFRZ0Fpc0RNRGtEdUFJZ0JDQUNLd000T1FQWUFrRUFCVUYvQ3lFQ0lBQkJRR3NrQUNBQ1FRQklCRUFnQkVHUUFXcEJnWjRDRUVzaEFpTUFRUkJySWdBa0FDQUFJQUlRUGpZQ0FDQUFJQUUyQWd3Z0FFR3M3UU1vQWdBMkFnUWdBRUd3N1FNb0FnQTJBZ2hCeWY4RFFjTGZBU0FBRUFnYUlBQkJFR29rQUNBQ0VEZ2FDeUFFUVlBQ2FpRUNJQVJCb0FGcUlRTkJBQ0VBQTBBQ1FFRUFJUWdnQUVFRFJnMEFBMEFnQ0VFRVJnUkFJQUJCQVdvaEFBd0RCU0FJUVFOMElnWWdBeUFBUVFWMElnVnFhaUlMSUFzckF3QWlSQ0FDSUFWcUlBWnFLd01BSUVTaFJBQUFBR0JtWnU0L282QTVBd0FnQ0VFQmFpRUlEQUVMQUFzQUN3c2dDa0VBVGcwQklBUkJrQUZxUVllTEFoQkxJZ0FnQ2hESEFTQUFFRGdhUVg0aEFDQWVRWDQyQW9BQ0RBTUZBMEFnQUVFRVJ3UkFJQVJCZ0FKcUlDMUJCWFJxSUFCQkEzUnFJQVJCNEFKcUlDMUJCSFJxSUFCQkFuUnFLZ0lBdXprREFDQUFRUUZxSVFBTUFRc0xJQzFCQVdvaExRd0NDd0FMQ3lBZUlCNG9Bb0FDUVFKMGFpZ0NpQUloQUNBRUlCNG9Bb1FDUVFGck5nS0VBU0FFSUFBMkFvQUJRUUJCQVVIWW9BSWdCRUdBQVdvUVBDQWVLQUtBQWlFQUN3SkFJQUFnQVVZRVFDQUVJQVQ5QUFTZ0FmMExCQkFnQkNBRS9RQUVzQUg5Q3dRZ0lBUWdCUDBBQk1BQi9Rc0VNQ0FFSUFUOUFBVGdBZjBMQkZBZ0JFRkFheUFFL1FBRTBBSDlDd1FBSUFRZ0JQMEFCUEFCL1FzRVlDQUVJQUUyQWdBZ0JDQUVLZ0tjQWJzNUF3aEJ6b2dFUWJPaEFpQUVFQWdhREFFTElBUWdBVFlDY0VHUWpnUkJ3cUVDSUFSQjhBQnFFQWdhQzBFQUN5RUFJQVJCb0FOcUpBQWdBQThMUVFCQkEwR2tEa0VBRUR4QkFSQURBQXMwQVFGL1FmaVZCQ2dDQUNFQVFmQ1ZCQkEwR2dOQUlBQUVRQ0FBS0FJQUlRRWdBQkF6SUFFaEFBd0JDd3RCOEpVRUVMQUNDejhCQW45QjVKVUVLQUlBSVFCQjNKVUVFRFFoQVFOQUlBQUVRQ0FBS0FJQUlRSWdBU0FBUVFocUVNa0ZJQUFRTXlBQ0lRQU1BUXNMUWR5VkJCQ3dBZ3NSQUNBQUtBSUFRWVFCYWtFQkVQTUVBQXNVQUNBQVFReHFRUUFnQVNnQ0JFSGMzZ0ZHR3dzTUFDQUFRUXhxS0FJQUVETUxGQUFnQUVFTWFrRUFJQUVvQWdSQnROMEJSaHNMQ3dBZ0FFRU1haWdDQUJvTEtnRUJmRUYvSUFBckF3QWdBU3NEQUtFaUFrUUFBQUFBQUFBQUFHUWdBa1FBQUFBQUFBQUFBR01iQ3hRQUlBQkJER3BCQUNBQktBSUVRYURYQVVZYkN4RUFJQUJCREdvaUFDQUFLQUlBRUpBR0Myb0JBWDlCekpVRUVPTUNRY3lWQkNnQ0FBUkFRY3lWQkNnQ0FDRUJRZENWQkNnQ0FDRUFBMEFnQUNBQlJ3UkFRY3lWQkJBMEdpQUFRUWhySWdBUTBRRU1BUXNMUWRDVkJDQUJOZ0lBUWN5VkJCQTBHa0hNbFFRb0FnQWhBRUhNbFFRUTFBRWFJQUFRTXdzTENRQWdBRUVFYWhBK0N3a0FJQUFRdUFZUU13c0pBQ0FBRUlvRUVETUxEQUFnQUJDTEJCb2dBQkF6QzNrQkEzOGdBQ0FBS0FJQVFReHJLQUlBYWtFS0VMa0hJUU1qQUVFUWF5SUJKQUFnQVVFSWFpSUNJQUFROXdJYUFrQWdBaTBBQUVVTkFDQUJJQUFRd2dNaUFpQURFTWNESUFJUXd3SkZEUUFnQUNBQUtBSUFRUXhyS0FJQWFrRUJFTUlDQ3lBQlFRaHFFTVVDSUFGQkVHb2tBQ0FBRVBrQ0lBQUxCd0FnQUNnQ0NBc0hBQ0FBS0FJRUN5VUFJQUVnQWlBRElBUWdCU0FHclNBSHJVSWdob1FnQ0swZ0NhMUNJSWFFSUFBUkhnQUxJd0FnQVNBQ0lBTWdCQ0FGclNBR3JVSWdob1FnQjYwZ0NLMUNJSWFFSUFBUkh3QUxHUUFnQVNBQ0lBTWdCQ0FGclNBR3JVSWdob1FnQUJFV0FBc1pBQ0FCSUFJZ0E2MGdCSzFDSUlhRUlBVWdCaUFBRVMwQUN5SUJBWDRnQVNBQ3JTQURyVUlnaG9RZ0JDQUFFUk1BSWdWQ0lJaW5FQUlnQmFjTEJnQWdBQ1FBQ3dRQUl3QUxCZ0JCeVBRQkN4c0FJQUJGQkVCQkFBOExJQUJCNE9VRFFmRG1BeENyQVVFQVJ3c2JBQ0FBSUFFb0FnZ2dCUkIrQkVBZ0FTQUNJQU1nQkJDc0JBc0xPQUFnQUNBQktBSUlJQVVRZmdSQUlBRWdBaUFESUFRUXJBUVBDeUFBS0FJSUlnQWdBU0FDSUFNZ0JDQUZJQUFvQWdBb0FoUVJDd0FMbGdJQkIzOGdBQ0FCS0FJSUlBVVFmZ1JBSUFFZ0FpQURJQVFRckFRUEN5QUJMUUExSVFjZ0FDZ0NEQ0VHSUFGQkFEb0FOU0FCTFFBMElRZ2dBVUVBT2dBMElBQkJFR29pQ1NBQklBSWdBeUFFSUFVUXFnUWdCeUFCTFFBMUlncHlJUWNnQ0NBQkxRQTBJZ3R5SVFnQ1FDQUdRUUpJRFFBZ0NTQUdRUU4wYWlFTUlBbEJDR29oQmdOQUlBRXRBRFlOQVFKQUlBc0VRQ0FCS0FJWVFRRkdEUU1nQUMwQUNFRUNjUTBCREFNTElBcEZEUUFnQUMwQUNFRUJjVVVOQWdzZ0FVRUFPd0UwSUFZZ0FTQUNJQU1nQkNBRkVLb0VJQUV0QURVaUNpQUhjaUVISUFFdEFEUWlDeUFJY2lFSUlBWkJDR29pQmlBTVNRMEFDd3NnQVNBSFFmOEJjVUVBUnpvQU5TQUJJQWhCL3dGeFFRQkhPZ0EwQzVJQkFDQUFJQUVvQWdnZ0JCQitCRUFnQVNBQ0lBTVFxd1FQQ3dKQUlBQWdBU2dDQUNBRUVINUZEUUFDUUNBQ0lBRW9BaEJIQkVBZ0FTZ0NGQ0FDUncwQkN5QURRUUZIRFFFZ0FVRUJOZ0lnRHdzZ0FTQUNOZ0lVSUFFZ0F6WUNJQ0FCSUFFb0FpaEJBV28yQWlnQ1FDQUJLQUlrUVFGSERRQWdBU2dDR0VFQ1J3MEFJQUZCQVRvQU5nc2dBVUVFTmdJc0N3dnpBUUFnQUNBQktBSUlJQVFRZmdSQUlBRWdBaUFERUtzRUR3c0NRQ0FBSUFFb0FnQWdCQkIrQkVBQ1FDQUNJQUVvQWhCSEJFQWdBU2dDRkNBQ1J3MEJDeUFEUVFGSERRSWdBVUVCTmdJZ0R3c2dBU0FETmdJZ0FrQWdBU2dDTEVFRVJnMEFJQUZCQURzQk5DQUFLQUlJSWdBZ0FTQUNJQUpCQVNBRUlBQW9BZ0FvQWhRUkN3QWdBUzBBTlFSQUlBRkJBellDTENBQkxRQTBSUTBCREFNTElBRkJCRFlDTEFzZ0FTQUNOZ0lVSUFFZ0FTZ0NLRUVCYWpZQ0tDQUJLQUlrUVFGSERRRWdBU2dDR0VFQ1J3MEJJQUZCQVRvQU5nOExJQUFvQWdnaUFDQUJJQUlnQXlBRUlBQW9BZ0FvQWhnUkJnQUxDNTBFQVFOL0lBQWdBU2dDQ0NBRUVINEVRQ0FCSUFJZ0F4Q3JCQThMQWtBZ0FDQUJLQUlBSUFRUWZnUkFBa0FnQWlBQktBSVFSd1JBSUFFb0FoUWdBa2NOQVFzZ0EwRUJSdzBDSUFGQkFUWUNJQThMSUFFZ0F6WUNJQ0FCS0FJc1FRUkhCRUFnQUVFUWFpSUZJQUFvQWd4QkEzUnFJUWRCQUNFRElBRUNmd0pBQTBBQ1FDQUZJQWRQRFFBZ0FVRUFPd0UwSUFVZ0FTQUNJQUpCQVNBRUVLb0VJQUV0QURZTkFBSkFJQUV0QURWRkRRQWdBUzBBTkFSQVFRRWhBeUFCS0FJWVFRRkdEUVJCQVNFR0lBQXRBQWhCQW5FTkFRd0VDMEVCSVFZZ0FDMEFDRUVCY1VVTkF3c2dCVUVJYWlFRkRBRUxDMEVFSUFaRkRRRWFDMEVEQ3pZQ0xDQURRUUZ4RFFJTElBRWdBallDRkNBQklBRW9BaWhCQVdvMkFpZ2dBU2dDSkVFQlJ3MEJJQUVvQWhoQkFrY05BU0FCUVFFNkFEWVBDeUFBS0FJTUlRVWdBRUVRYWlJR0lBRWdBaUFESUFRUXNnTWdCVUVDU0EwQUlBWWdCVUVEZEdvaEJpQUFRUmhxSVFVQ1FDQUFLQUlJSWdCQkFuRkZCRUFnQVNnQ0pFRUJSdzBCQ3dOQUlBRXRBRFlOQWlBRklBRWdBaUFESUFRUXNnTWdCVUVJYWlJRklBWkpEUUFMREFFTElBQkJBWEZGQkVBRFFDQUJMUUEyRFFJZ0FTZ0NKRUVCUmcwQ0lBVWdBU0FDSUFNZ0JCQ3lBeUFGUVFocUlnVWdCa2tOQUF3Q0N3QUxBMEFnQVMwQU5nMEJJQUVvQWlSQkFVWUVRQ0FCS0FJWVFRRkdEUUlMSUFVZ0FTQUNJQU1nQkJDeUF5QUZRUWhxSWdVZ0Jra05BQXNMQzdrRkFRUi9Jd0JCUUdvaUJpUUFBa0FnQVVITTZBTkJBQkIrQkVBZ0FrRUFOZ0lBUVFFaEJBd0JDd0pBSUFBZ0FTQUFMUUFJUVJoeEJIOUJBUVVnQVVVTkFTQUJRZURsQTBIQTVnTVFxd0VpQTBVTkFTQURMUUFJUVJoeFFRQkhDeEIrSVFVTElBVUVRRUVCSVFRZ0FpZ0NBQ0lBUlEwQklBSWdBQ2dDQURZQ0FBd0JDd0pBSUFGRkRRQWdBVUhnNVFOQjhPWURFS3NCSWdWRkRRRWdBaWdDQUNJQkJFQWdBaUFCS0FJQU5nSUFDeUFGS0FJSUlnTWdBQ2dDQ0NJQlFYOXpjVUVIY1NBRFFYOXpJQUZ4UWVBQWNYSU5BVUVCSVFRZ0FDZ0NEQ0FGS0FJTVFRQVFmZzBCSUFBb0FneEJ3T2dEUVFBUWZnUkFJQVVvQWd3aUFFVU5BaUFBUWVEbEEwR2s1d01RcXdGRklRUU1BZ3NnQUNnQ0RDSURSUTBBUVFBaEJDQURRZURsQTBIdzVnTVFxd0VpQVFSQUlBQXRBQWhCQVhGRkRRSUNmeUFGS0FJTUlRQkJBQ0VDQWtBRFFFRUFJQUJGRFFJYUlBQkI0T1VEUWZEbUF4Q3JBU0lEUlEwQklBTW9BZ2dnQVNnQ0NFRi9jM0VOQVVFQklBRW9BZ3dnQXlnQ0RFRUFFSDROQWhvZ0FTMEFDRUVCY1VVTkFTQUJLQUlNSWdCRkRRRWdBRUhnNVFOQjhPWURFS3NCSWdFRVFDQURLQUlNSVFBTUFRc0xJQUJCNE9VRFFlRG5BeENyQVNJQVJRMEFJQUFnQXlnQ0RCRDRCaUVDQ3lBQ0N5RUVEQUlMSUFOQjRPVURRZURuQXhDckFTSUJCRUFnQUMwQUNFRUJjVVVOQWlBQklBVW9BZ3dRK0FZaEJBd0NDeUFEUWVEbEEwR1E1Z01RcXdFaUFVVU5BU0FGS0FJTUlnQkZEUUVnQUVIZzVRTkJrT1lERUtzQklnTkZEUUVnQmtFSWFpSUFRUVJ5UVFCQk5CQTZHaUFHUVFFMkFqZ2dCa0YvTmdJVUlBWWdBVFlDRUNBR0lBTTJBZ2dnQXlBQUlBSW9BZ0JCQVNBREtBSUFLQUljRVFjQUFrQWdCaWdDSUNJQVFRRkhEUUFnQWlnQ0FFVU5BQ0FDSUFZb0FoZzJBZ0FMSUFCQkFVWWhCQXdCQzBFQUlRUUxJQVpCUUdza0FDQUVDMjhCQVg4Z0FDQUJLQUlJUVFBUWZnUkFJQUVnQWlBREVLNEVEd3NnQUNnQ0RDRUVJQUJCRUdvaUFDQUJJQUlnQXhENkJnSkFJQVJCQWtnTkFDQUFJQVJCQTNScUlRUWdBRUVJYWlFQUEwQWdBQ0FCSUFJZ0F4RDZCaUFCTFFBMkRRRWdBRUVJYWlJQUlBUkpEUUFMQ3dzeUFDQUFJQUVvQWdoQkFCQitCRUFnQVNBQ0lBTVFyZ1FQQ3lBQUtBSUlJZ0FnQVNBQ0lBTWdBQ2dDQUNnQ0hCRUhBQXNaQUNBQUlBRW9BZ2hCQUJCK0JFQWdBU0FDSUFNUXJnUUxDNlFCQVFKL0l3QkJRR29pQXlRQUFuOUJBU0FBSUFGQkFCQitEUUFhUVFBZ0FVVU5BQnBCQUNBQlFlRGxBMEdRNWdNUXF3RWlBVVVOQUJvZ0EwRUlhaUlFUVFSeVFRQkJOQkE2R2lBRFFRRTJBamdnQTBGL05nSVVJQU1nQURZQ0VDQURJQUUyQWdnZ0FTQUVJQUlvQWdCQkFTQUJLQUlBS0FJY0VRY0FJQU1vQWlBaUFFRUJSZ1JBSUFJZ0F5Z0NHRFlDQUFzZ0FFRUJSZ3NoQUNBRFFVQnJKQUFnQUFzS0FDQUFJQUZCQUJCK0N3a0FRWXk1QkJBNEdnc2xBRUdZdVFRdEFBQkZCRUJCakxrRVFjQzlBeEM2QWtHWXVRUkJBVG9BQUF0QmpMa0VDd2tBUWZ5NEJCQTRHZ3NsQUVHSXVRUXRBQUJGQkVCQi9MZ0VRYXYwQVJCTEdrR0l1UVJCQVRvQUFBdEIvTGdFQ3drQVFleTRCQkE0R2dzbEFFSDR1QVF0QUFCRkJFQkI3TGdFUWV5OEF4QzZBa0g0dUFSQkFUb0FBQXRCN0xnRUN3a0FRZHk0QkJBNEdnc2xBRUhvdUFRdEFBQkZCRUJCM0xnRVFkNk1BaEJMR2tIb3VBUkJBVG9BQUF0QjNMZ0VDd2tBUWN5NEJCQTRHZ3NsQUVIWXVBUXRBQUJGQkVCQnpMZ0VRY2k4QXhDNkFrSFl1QVJCQVRvQUFBdEJ6TGdFQ3drQVFieTRCQkE0R2dzbEFFSEl1QVF0QUFCRkJFQkJ2TGdFUWRlT0FoQkxHa0hJdUFSQkFUb0FBQXRCdkxnRUN3a0FRYXk0QkJBNEdnc2xBRUc0dUFRdEFBQkZCRUJCckxnRVFhUzhBeEM2QWtHNHVBUkJBVG9BQUF0QnJMZ0VDd2tBUVp5NEJCQTRHZ3NsQUVHb3VBUXRBQUJGQkVCQm5MZ0VRY1RnQVJCTEdrR291QVJCQVRvQUFBdEJuTGdFQ3hzQVFaakJCQ0VBQTBBZ0FFRU1heEE0SWdCQmdNRUVSdzBBQ3d0dEFFR1l1QVF0QUFBRVFFR1V1QVFvQWdBUEMwR1l3UVF0QUFCRkJFQkJnTUVFSVFBRFFDQUFFRVJCREdvaUFFR1l3UVJIRFFBTFFaakJCRUVCT2dBQUMwR0F3UVJCME9NREVGTkJqTUVFUWR6akF4QlRRWmk0QkVFQk9nQUFRWlM0QkVHQXdRUTJBZ0JCZ01FRUN4c0FRZmpBQkNFQUEwQWdBRUVNYXhBNElnQkI0TUFFUncwQUN3dHRBRUdRdUFRdEFBQUVRRUdNdUFRb0FnQVBDMEg0d0FRdEFBQkZCRUJCNE1BRUlRQURRQ0FBRUVSQkRHb2lBRUg0d0FSSERRQUxRZmpBQkVFQk9nQUFDMEhnd0FSQnRwQUNFRlJCN01BRVFhdVFBaEJVUVpDNEJFRUJPZ0FBUVl5NEJFSGd3QVEyQWdCQjRNQUVDeHNBUWREQUJDRUFBMEFnQUVFTWF4QTRJZ0JCc0w0RVJ3MEFDd3ZKQWdCQmlMZ0VMUUFBQkVCQmhMZ0VLQUlBRHd0QjBNQUVMUUFBUlFSQVFiQytCQ0VBQTBBZ0FCQkVRUXhxSWdCQjBNQUVSdzBBQzBIUXdBUkJBVG9BQUF0QnNMNEVRY2pmQXhCVFFieStCRUhvM3dNUVUwSEl2Z1JCak9BREVGTkIxTDRFUWFUZ0F4QlRRZUMrQkVHODRBTVFVMEhzdmdSQnpPQURFRk5CK0w0RVFlRGdBeEJUUVlTL0JFSDA0QU1RVTBHUXZ3UkJrT0VERUZOQm5MOEVRYmpoQXhCVFFhaS9CRUhZNFFNUVUwRzB2d1JCL09FREVGTkJ3TDhFUWFEaUF4QlRRY3kvQkVHdzRnTVFVMEhZdndSQndPSURFRk5CNUw4RVFkRGlBeEJUUWZDL0JFRzg0QU1RVTBIOHZ3UkI0T0lERUZOQmlNQUVRZkRpQXhCVFFaVEFCRUdBNHdNUVUwR2d3QVJCa09NREVGTkJyTUFFUWFEakF4QlRRYmpBQkVHdzR3TVFVMEhFd0FSQndPTURFRk5CaUxnRVFRRTZBQUJCaExnRVFiQytCRFlDQUVHd3ZnUUxHd0JCb0w0RUlRQURRQ0FBUVF4ckVEZ2lBRUdBdkFSSERRQUxDOGtDQUVHQXVBUXRBQUFFUUVIOHR3UW9BZ0FQQzBHZ3ZnUXRBQUJGQkVCQmdMd0VJUUFEUUNBQUVFUkJER29pQUVHZ3ZnUkhEUUFMUWFDK0JFRUJPZ0FBQzBHQXZBUkIrdDhCRUZSQmpMd0VRZkhmQVJCVVFaaThCRUdkK0FFUVZFR2t2QVJCMHZZQkVGUkJzTHdFUWNEZ0FSQlVRYnk4QkVHbCtnRVFWRUhJdkFSQmd1QUJFRlJCMUx3RVFiVHBBUkJVUWVDOEJFR1Y4d0VRVkVIc3ZBUkJoUE1CRUZSQitMd0VRWXp6QVJCVVFZUzlCRUdmOHdFUVZFR1F2UVJCbXZZQkVGUkJuTDBFUVppTUFoQlVRYWk5QkVIRzh3RVFWRUcwdlFSQi8vRUJFRlJCd0wwRVFjRGdBUkJVUWN5OUJFSEU5QUVRVkVIWXZRUkJudllCRUZSQjVMMEVRYVA0QVJCVVFmQzlCRUduOUFFUVZFSDh2UVJCeHV3QkVGUkJpTDRFUVlma0FSQlVRWlMrQkVIT2l3SVFWRUdBdUFSQkFUb0FBRUg4dHdSQmdMd0VOZ0lBUVlDOEJBc2JBRUg0dXdRaEFBTkFJQUJCREdzUU9DSUFRZEM2QkVjTkFBc0w1UUVBUWZpM0JDMEFBQVJBUWZTM0JDZ0NBQThMUWZpN0JDMEFBRVVFUUVIUXVnUWhBQU5BSUFBUVJFRU1haUlBUWZpN0JFY05BQXRCK0xzRVFRRTZBQUFMUWRDNkJFSDAzQU1RVTBIY3VnUkJrTjBERUZOQjZMb0VRYXpkQXhCVFFmUzZCRUhNM1FNUVUwR0F1d1JCOU4wREVGTkJqTHNFUVpqZUF4QlRRWmk3QkVHMDNnTVFVMEdrdXdSQjJONERFRk5Cc0xzRVFlamVBeEJUUWJ5N0JFSDQzZ01RVTBISXV3UkJpTjhERUZOQjFMc0VRWmpmQXhCVFFlQzdCRUdvM3dNUVUwSHN1d1JCdU44REVGTkIrTGNFUVFFNkFBQkI5TGNFUWRDNkJEWUNBRUhRdWdRTEd3QkJ5TG9FSVFBRFFDQUFRUXhyRURnaUFFR2d1UVJIRFFBTEMrVUJBRUh3dHdRdEFBQUVRRUhzdHdRb0FnQVBDMEhJdWdRdEFBQkZCRUJCb0xrRUlRQURRQ0FBRUVSQkRHb2lBRUhJdWdSSERRQUxRY2k2QkVFQk9nQUFDMEdndVFSQnErQUJFRlJCckxrRVFiTGdBUkJVUWJpNUJFR1E0QUVRVkVIRXVRUkJtT0FCRUZSQjBMa0VRWWZnQVJCVVFkeTVCRUc1NEFFUVZFSG91UVJCb3VBQkVGUkI5TGtFUWNEMEFSQlVRWUM2QkVIQjlRRVFWRUdNdWdSQi8va0JFRlJCbUxvRVFiZUNBaEJVUWFTNkJFR0w1QUVRVkVHd3VnUkJpdmNCRUZSQnZMb0VRZERzQVJCVVFmQzNCRUVCT2dBQVFleTNCRUdndVFRMkFnQkJvTGtFQ3dzQUlBQkJqTHdERUxvQ0N3c0FJQUJCZy9vQkVFc2FDd3NBSUFCQitMc0RFTG9DQ3dzQUlBQkIrdmtCRUVzYUN3d0FJQUFnQVVFUWFoRGNBZ3NNQUNBQUlBRkJER29RM0FJTEJ3QWdBQ3dBQ1FzSEFDQUFMQUFJQ3d3QUlBQVFpQWNhSUFBUU13c01BQ0FBRUlrSEdpQUFFRE1MN1FNQkJYOENRQ0FESUFJaUFHdEJBMGdOQUFzRFFBSkFJQVFnQ0UwZ0FDQURUM0lOQUNBQUxBQUFJZ1pCL3dGeElRRUNRQ0FHUVFCT0JFQkJBU0VHSUFGQi8vL0RBRTBOQVF3Q0N5QUdRVUpKRFFFZ0JrRmZUUVJBSUFNZ0FHdEJBa2dOQWlBQUxRQUJJZ1ZCd0FGeFFZQUJSdzBDUVFJaEJpQUZRVDl4SUFGQkJuUkJ3QTl4Y2tILy84TUFUUTBCREFJTEFrQUNRQ0FHUVc5TkJFQWdBeUFBYTBFRFNBMEVJQUF0QUFJaEJ5QUFMUUFCSVFVZ0FVSHRBVVlOQVNBQlFlQUJSZ1JBSUFWQjRBRnhRYUFCUmcwRERBVUxJQVZCd0FGeFFZQUJSdzBFREFJTElBTWdBR3RCQkVnZ0JrRjBTM0lOQXlBQUxRQURJUWNnQUMwQUFpRUpJQUF0QUFFaEJRSkFBa0FDUUFKQUlBRkI4QUZyRGdVQUFnSUNBUUlMSUFWQjhBQnFRZjhCY1VFd1NRMENEQVlMSUFWQjhBRnhRWUFCUmcwQkRBVUxJQVZCd0FGeFFZQUJSdzBFQ3lBSlFjQUJjVUdBQVVjZ0IwSEFBWEZCZ0FGSGNnMERRUVFoQmlBSFFUOXhJQWxCQm5SQndCOXhJQUZCRW5SQmdJRHdBSEVnQlVFL2NVRU1kSEp5Y2tILy84TUFTdzBEREFJTElBVkI0QUZ4UVlBQlJ3MENDeUFIUWNBQmNVR0FBVWNOQVVFRElRWWdCMEUvY1NBQlFReDBRWURnQTNFZ0JVRS9jVUVHZEhKeVFmLy93d0JMRFFFTElBaEJBV29oQ0NBQUlBWnFJUUFNQVFzTElBQWdBbXNMM2dRQkJYOGpBRUVRYXlJQUpBQWdBQ0FDTmdJTUlBQWdCVFlDQ0FKL0lBQWdBallDRENBQUlBVTJBZ2dDUUFKQUEwQUNRQ0FBS0FJTUlnRWdBMDhOQUNBQUtBSUlJZ3dnQms4TkFDQUJMQUFBSWdWQi93RnhJUUlDUUNBRlFRQk9CRUFnQWtILy84TUFUUVJBUVFFaEJRd0NDMEVDREFZTFFRSWhDaUFGUVVKSkRRTWdCVUZmVFFSQUlBTWdBV3RCQWtnTkJTQUJMUUFCSWdoQndBRnhRWUFCUncwRVFRSWhCU0FJUVQ5eElBSkJCblJCd0E5eGNpSUNRZi8vd3dCTkRRRU1CQXNnQlVGdlRRUkFJQU1nQVd0QkEwZ05CU0FCTFFBQ0lRa2dBUzBBQVNFSUFrQUNRQ0FDUWUwQlJ3UkFJQUpCNEFGSERRRWdDRUhnQVhGQm9BRkdEUUlNQndzZ0NFSGdBWEZCZ0FGR0RRRU1CZ3NnQ0VIQUFYRkJnQUZIRFFVTElBbEJ3QUZ4UVlBQlJ3MEVRUU1oQlNBSlFUOXhJQUpCREhSQmdPQURjU0FJUVQ5eFFRWjBjbklpQWtILy84TUFUUTBCREFRTElBVkJkRXNOQXlBRElBRnJRUVJJRFFRZ0FTMEFBeUVKSUFFdEFBSWhDeUFCTFFBQklRZ0NRQUpBQWtBQ1FDQUNRZkFCYXc0RkFBSUNBZ0VDQ3lBSVFmQUFha0gvQVhGQk1Fa05BZ3dHQ3lBSVFmQUJjVUdBQVVZTkFRd0ZDeUFJUWNBQmNVR0FBVWNOQkFzZ0MwSEFBWEZCZ0FGSElBbEJ3QUZ4UVlBQlIzSU5BMEVFSVFVZ0NVRS9jU0FMUVFaMFFjQWZjU0FDUVJKMFFZQ0E4QUJ4SUFoQlAzRkJESFJ5Y25JaUFrSC8vOE1BU3cwREN5QU1JQUkyQWdBZ0FDQUJJQVZxTmdJTUlBQWdBQ2dDQ0VFRWFqWUNDQXdCQ3dzZ0FTQURTU0VLQ3lBS0RBRUxRUUVMSVFFZ0JDQUFLQUlNTmdJQUlBY2dBQ2dDQ0RZQ0FDQUFRUkJxSkFBZ0FRdU9CQUFqQUVFUWF5SUFKQUFnQUNBQ05nSU1JQUFnQlRZQ0NBSi9JQUFnQWpZQ0RDQUFJQVUyQWdnZ0FDZ0NEQ0VCQWtBRFFDQUJJQU5QQkVCQkFDRUNEQUlMUVFJaEFpQUJLQUlBSWdGQi8vL0RBRXNnQVVHQWNIRkJnTEFEUm5JTkFRSkFBa0FnQVVIL0FFMEVRRUVCSVFJZ0JpQUFLQUlJSWdWclFRQk1EUVFnQUNBRlFRRnFOZ0lJSUFVZ0FUb0FBQXdCQ3lBQlFmOFBUUVJBSUFZZ0FDZ0NDQ0lDYTBFQ1NBMENJQUFnQWtFQmFqWUNDQ0FDSUFGQkJuWkJ3QUZ5T2dBQUlBQWdBQ2dDQ0NJQ1FRRnFOZ0lJSUFJZ0FVRS9jVUdBQVhJNkFBQU1BUXNnQmlBQUtBSUlJZ0pySVFVZ0FVSC8vd05OQkVBZ0JVRURTQTBDSUFBZ0FrRUJhallDQ0NBQ0lBRkJESFpCNEFGeU9nQUFJQUFnQUNnQ0NDSUNRUUZxTmdJSUlBSWdBVUVHZGtFL2NVR0FBWEk2QUFBZ0FDQUFLQUlJSWdKQkFXbzJBZ2dnQWlBQlFUOXhRWUFCY2pvQUFBd0JDeUFGUVFSSURRRWdBQ0FDUVFGcU5nSUlJQUlnQVVFU2RrSHdBWEk2QUFBZ0FDQUFLQUlJSWdKQkFXbzJBZ2dnQWlBQlFReDJRVDl4UVlBQmNqb0FBQ0FBSUFBb0FnZ2lBa0VCYWpZQ0NDQUNJQUZCQm5aQlAzRkJnQUZ5T2dBQUlBQWdBQ2dDQ0NJQ1FRRnFOZ0lJSUFJZ0FVRS9jVUdBQVhJNkFBQUxJQUFnQUNnQ0RFRUVhaUlCTmdJTURBRUxDMEVCREFFTElBSUxJUUVnQkNBQUtBSU1OZ0lBSUFjZ0FDZ0NDRFlDQUNBQVFSQnFKQUFnQVF2NUF3RUVmd0pBSUFNZ0FpSUFhMEVEU0EwQUN3TkFBa0FnQkNBR1RTQUFJQU5QY2cwQUlBQXRBQUFpQVVILy84TUFTdzBBQW44Z0FFRUJhaUFCUVJoMFFSaDFRUUJPRFFBYUlBRkJ3Z0ZKRFFFZ0FVSGZBVTBFUUNBRElBQnJRUUpJRFFJZ0FDMEFBU0lGUWNBQmNVR0FBVWNnQlVFL2NTQUJRUVowUWNBUGNYSkIvLy9EQUV0eURRSWdBRUVDYWd3QkN3SkFBa0FnQVVIdkFVMEVRQ0FESUFCclFRTklEUVFnQUMwQUFpRUhJQUF0QUFFaEJTQUJRZTBCUmcwQklBRkI0QUZHQkVBZ0JVSGdBWEZCb0FGR0RRTU1CUXNnQlVIQUFYRkJnQUZIRFFRTUFnc2dBeUFBYTBFRVNDQUJRZlFCUzNJZ0JDQUdhMEVDU1hJTkF5QUFMUUFESVFjZ0FDMEFBaUVJSUFBdEFBRWhCUUpBQWtBQ1FBSkFJQUZCOEFGckRnVUFBZ0lDQVFJTElBVkI4QUJxUWY4QmNVRXdTUTBDREFZTElBVkI4QUZ4UVlBQlJnMEJEQVVMSUFWQndBRnhRWUFCUncwRUN5QUlRY0FCY1VHQUFVY2dCMEhBQVhGQmdBRkhjaUFIUVQ5eElBaEJCblJCd0I5eElBRkJFblJCZ0lEd0FIRWdCVUUvY1VFTWRISnlja0gvLzhNQVMzSU5BeUFHUVFGcUlRWWdBRUVFYWd3Q0N5QUZRZUFCY1VHQUFVY05BZ3NnQjBIQUFYRkJnQUZISUFkQlAzRWdBVUVNZEVHQTRBTnhJQVZCUDNGQkJuUnlja0gvLzhNQVMzSU5BU0FBUVFOcUN5RUFJQVpCQVdvaEJnd0JDd3NnQUNBQ2F3dlRCUUVFZnlNQVFSQnJJZ0FrQUNBQUlBSTJBZ3dnQUNBRk5nSUlBbjhnQUNBQ05nSU1JQUFnQlRZQ0NBSkFBa0FDUUFOQUFrQWdBQ2dDRENJQklBTlBEUUFnQUNnQ0NDSUZJQVpQRFFCQkFpRUtJQUV0QUFBaUFrSC8vOE1BU3cwRUlBQUNmeUFDUVJoMFFSaDFRUUJPQkVBZ0JTQUNPd0VBSUFGQkFXb01BUXNnQWtIQ0FVa05CU0FDUWQ4QlRRUkFJQU1nQVd0QkFrZ05CU0FCTFFBQklnaEJ3QUZ4UVlBQlJ3MEVJQWhCUDNFZ0FrRUdkRUhBRDNGeUlnSkIvLy9EQUVzTkJDQUZJQUk3QVFBZ0FVRUNhZ3dCQ3lBQ1FlOEJUUVJBSUFNZ0FXdEJBMGdOQlNBQkxRQUNJUWtnQVMwQUFTRUlBa0FDUUNBQ1FlMEJSd1JBSUFKQjRBRkhEUUVnQ0VIZ0FYRkJvQUZHRFFJTUJ3c2dDRUhnQVhGQmdBRkdEUUVNQmdzZ0NFSEFBWEZCZ0FGSERRVUxJQWxCd0FGeFFZQUJSdzBFSUFsQlAzRWdDRUUvY1VFR2RDQUNRUXgwY25JaUFrSC8vd054UWYvL3d3QkxEUVFnQlNBQ093RUFJQUZCQTJvTUFRc2dBa0gwQVVzTkJVRUJJUW9nQXlBQmEwRUVTQTBESUFFdEFBTWhDU0FCTFFBQ0lRZ2dBUzBBQVNFQkFrQUNRQUpBQWtBZ0FrSHdBV3NPQlFBQ0FnSUJBZ3NnQVVId0FHcEIvd0Z4UVRCUERRZ01BZ3NnQVVId0FYRkJnQUZIRFFjTUFRc2dBVUhBQVhGQmdBRkhEUVlMSUFoQndBRnhRWUFCUnlBSlFjQUJjVUdBQVVkeURRVWdCaUFGYTBFRVNBMERRUUloQ2lBSlFUOXhJZ2tnQ0VFR2RDSUxRY0FmY1NBQlFReDBRWURnRDNFZ0FrRUhjU0lDUVJKMGNuSnlRZi8vd3dCTERRTWdCU0FJUVFSMlFRTnhJQUZCQW5RaUFVSEFBWEVnQWtFSWRISWdBVUU4Y1hKeVFjRC9BR3BCZ0xBRGNqc0JBQ0FBSUFWQkFtbzJBZ2dnQlNBTFFjQUhjU0FKY2tHQXVBTnlPd0VDSUFBb0FneEJCR29MTmdJTUlBQWdBQ2dDQ0VFQ2FqWUNDQXdCQ3dzZ0FTQURTU0VLQ3lBS0RBSUxRUUVNQVF0QkFnc2hBU0FFSUFBb0FndzJBZ0FnQnlBQUtBSUlOZ0lBSUFCQkVHb2tBQ0FCQy9vRkFRRi9Jd0JCRUdzaUFDUUFJQUFnQWpZQ0RDQUFJQVUyQWdnQ2Z5QUFJQUkyQWd3Z0FDQUZOZ0lJSUFBb0Fnd2hBZ0pBQWtBRFFDQUNJQU5QQkVCQkFDRUZEQU1MUVFJaEJTQUNMd0VBSWdGQi8vL0RBRXNOQWdKQUFrQWdBVUgvQUUwRVFFRUJJUVVnQmlBQUtBSUlJZ0pyUVFCTURRVWdBQ0FDUVFGcU5nSUlJQUlnQVRvQUFBd0JDeUFCUWY4UFRRUkFJQVlnQUNnQ0NDSUNhMEVDU0EwRUlBQWdBa0VCYWpZQ0NDQUNJQUZCQm5aQndBRnlPZ0FBSUFBZ0FDZ0NDQ0lDUVFGcU5nSUlJQUlnQVVFL2NVR0FBWEk2QUFBTUFRc2dBVUgvcndOTkJFQWdCaUFBS0FJSUlnSnJRUU5JRFFRZ0FDQUNRUUZxTmdJSUlBSWdBVUVNZGtIZ0FYSTZBQUFnQUNBQUtBSUlJZ0pCQVdvMkFnZ2dBaUFCUVFaMlFUOXhRWUFCY2pvQUFDQUFJQUFvQWdnaUFrRUJhallDQ0NBQ0lBRkJQM0ZCZ0FGeU9nQUFEQUVMSUFGQi83Y0RUUVJBUVFFaEJTQURJQUpyUVFSSURRVWdBaThCQWlJSVFZRDRBM0ZCZ0xnRFJ3MENJQVlnQUNnQ0NHdEJCRWdOQlNBSVFmOEhjU0FCUVFwMFFZRDRBM0VnQVVIQUIzRWlCVUVLZEhKeVFZQ0FCR3BCLy8vREFFc05BaUFBSUFKQkFtbzJBZ3dnQUNBQUtBSUlJZ0pCQVdvMkFnZ2dBaUFGUVFaMlFRRnFJZ0pCQW5aQjhBRnlPZ0FBSUFBZ0FDZ0NDQ0lGUVFGcU5nSUlJQVVnQWtFRWRFRXdjU0FCUVFKMlFROXhja0dBQVhJNkFBQWdBQ0FBS0FJSUlnSkJBV28yQWdnZ0FpQUlRUVoyUVE5eElBRkJCSFJCTUhGeVFZQUJjam9BQUNBQUlBQW9BZ2dpQVVFQmFqWUNDQ0FCSUFoQlAzRkJnQUZ5T2dBQURBRUxJQUZCZ01BRFNRMEVJQVlnQUNnQ0NDSUNhMEVEU0EwRElBQWdBa0VCYWpZQ0NDQUNJQUZCREhaQjRBRnlPZ0FBSUFBZ0FDZ0NDQ0lDUVFGcU5nSUlJQUlnQVVFR2RrRS9jVUdBQVhJNkFBQWdBQ0FBS0FJSUlnSkJBV28yQWdnZ0FpQUJRVDl4UVlBQmNqb0FBQXNnQUNBQUtBSU1RUUpxSWdJMkFnd01BUXNMUVFJTUFndEJBUXdCQ3lBRkN5RUJJQVFnQUNnQ0REWUNBQ0FISUFBb0FnZzJBZ0FnQUVFUWFpUUFJQUVMRlFBZ0FDZ0NDQ0lBUlFSQVFRRVBDeUFBRUlzSEM1SUJBUVovQTBBQ1FDQUNJQU5HSUFRZ0NFMXlEUUJCQVNFSElBQW9BZ2doQlNNQVFSQnJJZ1lrQUNBR0lBVTJBZ3dnQmtFSWFpQUdRUXhxRU1vQklRcEJBQ0FDSUFNZ0Ftc2dBVUhrdFFRZ0FSc1EvZ0loQlNBS0VNa0JJQVpCRUdva0FBSkFBa0FnQlVFQ2FnNERBZ0lCQUFzZ0JTRUhDeUFJUVFGcUlRZ2dCeUFKYWlFSklBSWdCMm9oQWd3QkN3c2dDUXRjQVFOL0lBQW9BZ2doQWlNQVFSQnJJZ0VrQUNBQklBSTJBZ3dnQVVFSWFpQUJRUXhxRU1vQklRSWpBRUVRYXlJREpBQWdBMEVRYWlRQUlBSVF5UUVnQVVFUWFpUUFJQUFvQWdnaUFFVUVRRUVCRHdzZ0FCQ0xCMEVCUmd1U0FRRUJmeU1BUVJCcklnVWtBQ0FFSUFJMkFnQUNmMEVDSUFWQkRHcEJBQ0FBS0FJSUVMTUVJZ0JCQVdwQkFra05BQnBCQVNBQVFRRnJJZ0VnQXlBRUtBSUFhMHNOQUJvZ0JVRU1haUVDQTM4Z0FRUi9JQUl0QUFBaEFDQUVJQVFvQWdBaUEwRUJhallDQUNBRElBQTZBQUFnQVVFQmF5RUJJQUpCQVdvaEFnd0JCVUVBQ3dzTElRSWdCVUVRYWlRQUlBSUx6UVlCREg4akFFRVFheUlSSkFBZ0FpRUlBMEFDUUNBRElBaEdCRUFnQXlFSURBRUxJQWd0QUFCRkRRQWdDRUVCYWlFSURBRUxDeUFISUFVMkFnQWdCQ0FDTmdJQUEwQUNRQUovQWtBZ0FpQURSaUFGSUFaR2NnMEFJQkVnQVNrQ0FEY0RDQ0FBS0FJSUlRa2pBRUVRYXlJUUpBQWdFQ0FKTmdJTUlCQkJDR29nRUVFTWFoREtBU0VUSUFnZ0Ftc2hEVUVBSVFvakFFR1FDR3NpQ3lRQUlBc2dCQ2dDQUNJT05nSU1JQVVnQzBFUWFpQUZHeUVQQWtBQ1FBSkFJQTVGSUFZZ0JXdEJBblZCZ0FJZ0JSc2lERVZ5RFFBRFFDQU5RUUoySWdrZ0RFa2dEVUdEQVUxeERRSWdEeUFMUVF4cUlBa2dEQ0FKSUF4Skd5QUJFTVFFSWhKQmYwWUVRRUYvSVFwQkFDRU1JQXNvQWd3aERnd0NDeUFNUVFBZ0VpQVBJQXRCRUdwR0d5SUpheUVNSUE4Z0NVRUNkR29oRHlBTklBNXFJQXNvQWd3aURtdEJBQ0FPR3lFTklBb2dFbW9oQ2lBT1JRMEJJQXdOQUFzTElBNUZEUUVMSUF4RklBMUZjZzBBSUFvaENRTkFBa0FDUUNBUElBNGdEU0FCRVA0Q0lncEJBbXBCQWswRVFBSkFBa0FnQ2tFQmFnNENCZ0FCQ3lBTFFRQTJBZ3dNQWdzZ0FVRUFOZ0lBREFFTElBc2dDeWdDRENBS2FpSU9OZ0lNSUFsQkFXb2hDU0FNUVFGcklnd05BUXNnQ1NFS0RBSUxJQTlCQkdvaER5QU5JQXBySVEwZ0NTRUtJQTBOQUFzTElBVUVRQ0FFSUFzb0FndzJBZ0FMSUF0QmtBaHFKQUFnQ2lFSklCTVF5UUVnRUVFUWFpUUFBa0FDUUFKQUFrQWdDVUYvUmdSQUEwQUNRQ0FISUFVMkFnQWdBaUFFS0FJQVJnMEFRUUVoQmdKQUFrQUNRQ0FGSUFJZ0NDQUNheUFSUVFocUlBQW9BZ2dRakFjaUFVRUNhZzREQ0FBQ0FRc2dCQ0FDTmdJQURBVUxJQUVoQmdzZ0FpQUdhaUVDSUFjb0FnQkJCR29oQlF3QkN3c2dCQ0FDTmdJQURBVUxJQWNnQnlnQ0FDQUpRUUowYWlJRk5nSUFJQVVnQmtZTkF5QUVLQUlBSVFJZ0F5QUlSZ1JBSUFNaENBd0lDeUFGSUFKQkFTQUJJQUFvQWdnUWpBZEZEUUVMUVFJTUJBc2dCeUFIS0FJQVFRUnFOZ0lBSUFRZ0JDZ0NBRUVCYWlJQ05nSUFJQUloQ0FOQUlBTWdDRVlFUUNBRElRZ01CZ3NnQ0MwQUFFVU5CU0FJUVFGcUlRZ01BQXNBQ3lBRUlBSTJBZ0JCQVF3Q0N5QUVLQUlBSVFJTElBSWdBMGNMSVFBZ0VVRVFhaVFBSUFBUEN5QUhLQUlBSVFVTUFBc0FDN1VGQVF4L0l3QkJFR3NpRFNRQUlBSWhDQU5BQWtBZ0F5QUlSZ1JBSUFNaENBd0JDeUFJS0FJQVJRMEFJQWhCQkdvaENBd0JDd3NnQnlBRk5nSUFJQVFnQWpZQ0FBTkFBa0FDUUNBQ0lBTkdJQVVnQmtaeUJIOGdBZ1VnRFNBQktRSUFOd01JUVFFaEVDQUFLQUlJSVFrakFFRVFheUlPSkFBZ0RpQUpOZ0lNSUE1QkNHb2dEa0VNYWhES0FTRVRJQVlnQlNJSmF5RUtRUUFoRHlNQVFSQnJJaEVrQUFKQUlBUW9BZ0FpQzBVZ0NDQUNhMEVDZFNJU1JYSU5BQ0FLUVFBZ0NSc2hDZ05BSUJGQkRHb2dDU0FLUVFSSkd5QUxLQUlBRU5RRElneEJmMFlFUUVGL0lROE1BZ3NnQ1FSL0lBcEJBMDBFUUNBS0lBeEpEUU1nQ1NBUlFReHFJQXdRUHhvTElBb2dER3NoQ2lBSklBeHFCVUVBQ3lFSklBc29BZ0JGQkVCQkFDRUxEQUlMSUF3Z0Qyb2hEeUFMUVFScUlRc2dFa0VCYXlJU0RRQUxDeUFKQkVBZ0JDQUxOZ0lBQ3lBUlFSQnFKQUFnRHlFSklCTVF5UUVnRGtFUWFpUUFBa0FDUUFKQUFrQUNRQ0FKUVFGcURnSUFCZ0VMSUFjZ0JUWUNBQU5BQWtBZ0FpQUVLQUlBUmcwQUlBVWdBaWdDQUNBQUtBSUlFTE1FSWdGQmYwWU5BQ0FISUFjb0FnQWdBV29pQlRZQ0FDQUNRUVJxSVFJTUFRc0xJQVFnQWpZQ0FBd0JDeUFISUFjb0FnQWdDV29pQlRZQ0FDQUZJQVpHRFFJZ0F5QUlSZ1JBSUFRb0FnQWhBaUFESVFnTUJ3c2dEVUVFYWtFQUlBQW9BZ2dRc3dRaUNFRi9SdzBCQzBFQ0lSQU1Bd3NnRFVFRWFpRUNJQVlnQnlnQ0FHc2dDRWtOQWdOQUlBZ0VRQ0FDTFFBQUlRVWdCeUFIS0FJQUlnbEJBV28yQWdBZ0NTQUZPZ0FBSUFoQkFXc2hDQ0FDUVFGcUlRSU1BUXNMSUFRZ0JDZ0NBRUVFYWlJQ05nSUFJQUloQ0FOQUlBTWdDRVlFUUNBRElRZ01CUXNnQ0NnQ0FFVU5CQ0FJUVFScUlRZ01BQXNBQ3lBRUtBSUFDeUFEUnlFUUN5QU5RUkJxSkFBZ0VBOExJQWNvQWdBaEJRd0FDd0FMREFBZ0FCQ1ZCeG9nQUJBekN6Y0FJd0JCRUdzaUFDUUFJQUFnQkRZQ0RDQUFJQU1nQW1zMkFnZ2dBRUVNYWlBQVFRaHFFUHdCS0FJQUlRRWdBRUVRYWlRQUlBRUxOQUFEUUNBQklBSkdSUVJBSUFRZ0F5QUJMQUFBSWdBZ0FFRUFTQnM2QUFBZ0JFRUJhaUVFSUFGQkFXb2hBUXdCQ3dzZ0Fnc01BQ0FDSUFFZ0FVRUFTQnNMS2dBRFFDQUJJQUpHUlFSQUlBTWdBUzBBQURvQUFDQURRUUZxSVFNZ0FVRUJhaUVCREFFTEN5QUNDdzhBSUFBZ0FTQUNRYkNzQXhEc0Jnc25BQ0FCUVFCT0JIOUJzS3dES0FJQUlBRkIvd0Z4UVFKMGFpZ0NBQVVnQVF0QkdIUkJHSFVMRHdBZ0FDQUJJQUpCb0tBREVPd0dDeWNBSUFGQkFFNEVmMEdnb0FNb0FnQWdBVUgvQVhGQkFuUnFLQUlBQlNBQkMwRVlkRUVZZFFzTUFDQUFFSkFIR2lBQUVETUxOUUFEUUNBQklBSkdSUVJBSUFRZ0FTZ0NBQ0lBSUFNZ0FFR0FBVWtiT2dBQUlBUkJBV29oQkNBQlFRUnFJUUVNQVFzTElBSUxFd0FnQVNBQ0lBRkJnQUZKRzBFWWRFRVlkUXNxQUFOQUlBRWdBa1pGQkVBZ0F5QUJMQUFBTmdJQUlBTkJCR29oQXlBQlFRRnFJUUVNQVFzTElBSUxEd0FnQUNBQklBSkJzS3dERU8wR0N4NEFJQUZCL3dCTkJIOUJzS3dES0FJQUlBRkJBblJxS0FJQUJTQUJDd3NQQUNBQUlBRWdBa0dnb0FNUTdRWUxIZ0FnQVVIL0FFMEVmMEdnb0FNb0FnQWdBVUVDZEdvb0FnQUZJQUVMQzBVQUFrQURRQ0FDSUFOR0RRRUNRQ0FDS0FJQVFmOEFTdzBBUVppYUF5Z0NBQ0FDS0FJQVFRRjBhaThCQUNBQmNVVU5BQ0FDUVFScUlRSU1BUXNMSUFJaEF3c2dBd3RFQUFOQUFrQWdBaUFEUndSL0lBSW9BZ0JCL3dCTERRRkJtSm9ES0FJQUlBSW9BZ0JCQVhScUx3RUFJQUZ4UlEwQklBSUZJQU1MRHdzZ0FrRUVhaUVDREFBTEFBdEdBQU5BSUFFZ0FrY0VRQ0FESUFFb0FnQkIvd0JOQkg5Qm1Kb0RLQUlBSUFFb0FnQkJBWFJxTHdFQUJVRUFDenNCQUNBRFFRSnFJUU1nQVVFRWFpRUJEQUVMQ3lBQ0N5UUFJQUpCL3dCTkJIOUJtSm9ES0FJQUlBSkJBWFJxTHdFQUlBRnhRUUJIQlVFQUN3dEFBUUovSUFBb0FnQW9BZ0FpQUNnQ0FDQUFLQUlJSWdKQkFYVnFJUUVnQUNnQ0JDRUFJQUVnQWtFQmNRUi9JQUVvQWdBZ0FHb29BZ0FGSUFBTEVRRUFDdzhBSUFBZ0FDZ0NBQ2dDQkJFQkFBc2ZBQ0FBQW45QnFMY0VRYWkzQkNnQ0FFRUJhaUlBTmdJQUlBQUxOZ0lFQ3d3QUlBQVFrZ2NhSUFBUU13dWNBUUFqQUVFUWF5SURKQUFDUUNBRkVJWUJSUVJBSUFBZ0JTZ0NDRFlDQ0NBQUlBVXBBZ0EzQWdBTUFRc2dCU2dDQUNFRUFrQUNRQUpBSUFVb0FnUWlBa0VCVFFSQUlBQWlBU0FDRUk4QkRBRUxJQUpCNy8vLy93TkxEUUVnQUNBQUlBSVF1UUpCQVdvaUJSQ0tBaUlCRUprQklBQWdCUkMwQVNBQUlBSVFpUUVMSUFFZ0JDQUNRUUZxRU13QkRBRUxFRlVBQ3dzZ0EwRVFhaVFBQ3drQUlBQWdCUkRjQWd1S0F3RUlmeU1BUWZBRGF5SUFKQUFnQUVIb0Eyb2lCaUFERUU4Z0JoQ1ZBU0VLSUFVUU53UkFJQVZCQUJDOEF5Z0NBQ0FLUVMwUW5nRkdJUXNMSUFJZ0N5QUFRZWdEYWlBQVFlQURhaUFBUWR3RGFpQUFRZGdEYWlBQVFjZ0RhaEJFSWd3Z0FFRzRBMm9RUkNJR0lBQkJxQU5xRUVRaUJ5QUFRYVFEYWhDWUJ5QUFRYzhDTmdJUUlBQkJDR3BCQUNBQVFSQnFJZ0lRWnlFSUFrQUNmeUFGRURjZ0FDZ0NwQU5LQkVBZ0JSQTNJUWtnQUNnQ3BBTWhEU0FIRURjZ0NTQU5hMEVCZEdvZ0JoQTNhaUFBS0FLa0EycEJBV29NQVFzZ0J4QTNJQVlRTjJvZ0FDZ0NwQU5xUVFKcUN5SUpRZVVBU1EwQUlBZ2dDVUVDZEJBNUVIOGdDQ2dDQUNJQ0RRQVFWUUFMSUFJZ0FFRUVhaUFBSUFNb0FnUWdCUkErSUFVUVBpQUZFRGRCQW5ScUlBb2dDeUFBUWVBRGFpQUFLQUxjQXlBQUtBTFlBeUFNSUFZZ0J5QUFLQUtrQXhDWEJ5QUJJQUlnQUNnQ0JDQUFLQUlBSUFNZ0JCQ2FBaUVCSUFnUVppQUhFRGdhSUFZUU9Cb2dEQkE0R2lBQVFlZ0RhaEJISUFCQjhBTnFKQUFnQVF2S0JBRUxmeU1BUWJBSWF5SUFKQUFnQUNBRk53TVFJQUFnQmpjREdDQUFJQUJCd0FkcUlnYzJBcndISUFkQjVBQkJwZmtCSUFCQkVHb1ExZ01oQnlBQVFjOENOZ0tnQkNBQVFaZ0Vha0VBSUFCQm9BUnFJZ2tRWnlFT0lBQkJ6d0kyQXFBRUlBQkJrQVJxUVFBZ0NSQm5JUW9DUUNBSFFlUUFUd1JBRUZ3aEJ5QUFJQVUzQXdBZ0FDQUdOd01JSUFCQnZBZHFJQWRCcGZrQklBQVEyQUVpQjBGL1JnMEJJQTRnQUNnQ3ZBY1FmeUFLSUFkQkFuUVFPUkIvSUFvUXd3SU5BU0FLS0FJQUlRa0xJQUJCaUFScUlnZ2dBeEJQSUFnUWxRRWlFU0FBS0FLOEJ5SUlJQWNnQ0dvZ0NSRG9BU0FIUVFCS0JFQWdBQ2dDdkFjdEFBQkJMVVloRHdzZ0FpQVBJQUJCaUFScUlBQkJnQVJxSUFCQi9BTnFJQUJCK0FOcUlBQkI2QU5xRUVRaUVDQUFRZGdEYWhCRUlnZ2dBRUhJQTJvUVJDSUxJQUJCeEFOcUVKZ0hJQUJCendJMkFqQWdBRUVvYWtFQUlBQkJNR29pQWhCbklRd0NmeUFBS0FMRUF5SU5JQWRJQkVBZ0N4QTNJQWNnRFd0QkFYUnFJQWdRTjJvZ0FDZ0N4QU5xUVFGcURBRUxJQXNRTnlBSUVEZHFJQUFvQXNRRGFrRUNhZ3NpRFVIbEFFOEVRQ0FNSUExQkFuUVFPUkIvSUF3b0FnQWlBa1VOQVFzZ0FpQUFRU1JxSUFCQklHb2dBeWdDQkNBSklBa2dCMEVDZEdvZ0VTQVBJQUJCZ0FScUlBQW9BdndESUFBb0F2Z0RJQkFnQ0NBTElBQW9Bc1FERUpjSElBRWdBaUFBS0FJa0lBQW9BaUFnQXlBRUVKb0NJUUVnREJCbUlBc1FPQm9nQ0JBNEdpQVFFRGdhSUFCQmlBUnFFRWNnQ2hCbUlBNFFaaUFBUWJBSWFpUUFJQUVQQ3hCVkFBdUNBd0VJZnlNQVFjQUJheUlBSkFBZ0FFRzRBV29pQmlBREVFOGdCaENiQVNFS0lBVVFOd1JBSUFWQkFCQkFMUUFBSUFwQkxSQ0VBVUgvQVhGR0lRc0xJQUlnQ3lBQVFiZ0JhaUFBUWJBQmFpQUFRYThCYWlBQVFhNEJhaUFBUWFBQmFoQkVJZ3dnQUVHUUFXb1FSQ0lHSUFCQmdBRnFFRVFpQnlBQVFmd0FhaENhQnlBQVFjOENOZ0lRSUFCQkNHcEJBQ0FBUVJCcUlnSVFaeUVJQWtBQ2Z5QUZFRGNnQUNnQ2ZFb0VRQ0FGRURjaENTQUFLQUo4SVEwZ0J4QTNJQWtnRFd0QkFYUnFJQVlRTjJvZ0FDZ0NmR3BCQVdvTUFRc2dCeEEzSUFZUU4yb2dBQ2dDZkdwQkFtb0xJZ2xCNVFCSkRRQWdDQ0FKRURrUWZ5QUlLQUlBSWdJTkFCQlZBQXNnQWlBQVFRUnFJQUFnQXlnQ0JDQUZFRDRnQlJBK0lBVVFOMm9nQ2lBTElBQkJzQUZxSUFBc0FLOEJJQUFzQUs0QklBd2dCaUFISUFBb0Fud1FtUWNnQVNBQ0lBQW9BZ1FnQUNnQ0FDQURJQVFRNlFFaEFTQUlFR1lnQnhBNEdpQUdFRGdhSUF3UU9Cb2dBRUc0QVdvUVJ5QUFRY0FCYWlRQUlBRUx3UVFCQzM4akFFSFFBMnNpQUNRQUlBQWdCVGNERUNBQUlBWTNBeGdnQUNBQVFlQUNhaUlITmdMY0FpQUhRZVFBUWFYNUFTQUFRUkJxRU5ZRElRY2dBRUhQQWpZQzhBRWdBRUhvQVdwQkFDQUFRZkFCYWlJSkVHY2hEaUFBUWM4Q05nTHdBU0FBUWVBQmFrRUFJQWtRWnlFS0FrQWdCMEhrQUU4RVFCQmNJUWNnQUNBRk53TUFJQUFnQmpjRENDQUFRZHdDYWlBSFFhWDVBU0FBRU5nQklnZEJmMFlOQVNBT0lBQW9BdHdDRUg4Z0NpQUhFRGtRZnlBS0VNTUNEUUVnQ2lnQ0FDRUpDeUFBUWRnQmFpSUlJQU1RVHlBSUVKc0JJaEVnQUNnQzNBSWlDQ0FISUFocUlBa1Fnd0lnQjBFQVNnUkFJQUFvQXR3Q0xRQUFRUzFHSVE4TElBSWdEeUFBUWRnQmFpQUFRZEFCYWlBQVFjOEJhaUFBUWM0QmFpQUFRY0FCYWhCRUloQWdBRUd3QVdvUVJDSUlJQUJCb0FGcUVFUWlDeUFBUVp3QmFoQ2FCeUFBUWM4Q05nSXdJQUJCS0dwQkFDQUFRVEJxSWdJUVp5RU1BbjhnQUNnQ25BRWlEU0FIU0FSQUlBc1FOeUFISUExclFRRjBhaUFJRURkcUlBQW9BcHdCYWtFQmFnd0JDeUFMRURjZ0NCQTNhaUFBS0FLY0FXcEJBbW9MSWcxQjVRQlBCRUFnRENBTkVEa1FmeUFNS0FJQUlnSkZEUUVMSUFJZ0FFRWthaUFBUVNCcUlBTW9BZ1FnQ1NBSElBbHFJQkVnRHlBQVFkQUJhaUFBTEFEUEFTQUFMQURPQVNBUUlBZ2dDeUFBS0FLY0FSQ1pCeUFCSUFJZ0FDZ0NKQ0FBS0FJZ0lBTWdCQkRwQVNFQklBd1FaaUFMRURnYUlBZ1FPQm9nRUJBNEdpQUFRZGdCYWhCSElBb1FaaUFPRUdZZ0FFSFFBMm9rQUNBQkR3c1FWUUFMdGdVQkEzOGpBRUhBQTJzaUFDUUFJQUFnQWpZQ3NBTWdBQ0FCTmdLNEF5QUFRZEFDTmdJVUlBQkJHR29nQUVFZ2FpQUFRUlJxSWdjUVp5RUpJQUJCRUdvaUFTQUVFRThnQVJDVkFTRUlJQUJCQURvQUR5QUFRYmdEYWlBQ0lBTWdBU0FFS0FJRUlBVWdBRUVQYWlBSUlBa2dCeUFBUWJBRGFoQ2ZCd1JBSXdCQkVHc2lBU1FBQWtBZ0JoQ0dBUVJBSUFZb0FnQWhBaUFCUVFBMkFnd2dBaUFCUVF4cUVLd0JJQVpCQUJDSkFRd0JDeUFCUVFBMkFnZ2dCaUFCUVFocUVLd0JJQVpCQUJDUEFRc2dBVUVRYWlRQUlBQXRBQThFUUNBR0lBaEJMUkNlQVJDdkJBc2dDRUV3RUo0QklRRWdDU2dDQUNFRUlBQW9BaFFpQ0VFRWF5RUNBMEFDUUNBQ0lBUk5EUUFnQkNnQ0FDQUJSdzBBSUFSQkJHb2hCQXdCQ3dzakFFRVFheUlCSkFBZ0JoQTNJUU1nQmhDNEJDRUNBa0FnQkNBSUVORURJZ2RGRFFBZ0JoQStJQVJOQkg4Z0JoQStJQVlRTjBFQ2RHb2dCRThGUVFBTFJRUkFJQWNnQWlBRGEwc0VRQ0FHSUFJZ0F5QUhhaUFDYXlBRElBTVErd1lMSUFZUVBpQURRUUowYWlFQ0EwQWdCQ0FJUndSQUlBSWdCQkNzQVNBRVFRUnFJUVFnQWtFRWFpRUNEQUVMQ3lBQlFRQTJBZ0FnQWlBQkVLd0JJQVlnQXlBSGFoQ1pBZ3dCQ3lNQVFSQnJJZ0lrQUNBQklBUWdDQkRBQkNBQ1FSQnFKQUFnQVJBK0lRZ2dBUkEzSVFJakFFRVFheUlFSkFBQ1FDQUNJQVlRdUFRaUJ5QUdFRGNpQTJ0TkJFQWdBa1VOQVNBR0VENGlCeUFEUVFKMGFpQUlJQUlRekFFZ0JpQUNJQU5xSWdJUW1RSWdCRUVBTmdJTUlBY2dBa0VDZEdvZ0JFRU1haENzQVF3QkN5QUdJQWNnQWlBRGFpQUhheUFESUFOQkFDQUNJQWdRL0FZTElBUkJFR29rQUNBQkVEZ2FDeUFCUVJCcUpBQUxJQUJCdUFOcUlBQkJzQU5xRUhvRVFDQUZJQVVvQWdCQkFuSTJBZ0FMSUFBb0FyZ0RJUUVnQUVFUWFoQkhJQWtRWmlBQVFjQURhaVFBSUFFTDRRTUJBbjhqQUVId0JHc2lBQ1FBSUFBZ0FqWUM0QVFnQUNBQk5nTG9CQ0FBUWRBQ05nSVFJQUJCeUFGcUlBQkIwQUZxSUFCQkVHb1FaeUVCSUFCQndBRnFJZ2NnQkJCUElBY1FsUUVoQ0NBQVFRQTZBTDhCQWtBZ0FFSG9CR29nQWlBRElBY2dCQ2dDQkNBRklBQkJ2d0ZxSUFnZ0FTQUFRY1FCYWlBQVFlQUVhaENmQjBVTkFDQUFRZnliQWlnQUFEWUF0d0VnQUVIMW13SXBBQUEzQTdBQklBZ2dBRUd3QVdvZ0FFRzZBV29nQUVHQUFXb1E2QUVnQUVIUEFqWUNFQ0FBUVFocVFRQWdBRUVRYWlJQ0VHY2hBd0pBSUFBb0FzUUJJQUVvQWdCclFZa0RUZ1JBSUFNZ0FDZ0N4QUVnQVNnQ0FHdEJBblZCQW1vUU9SQi9JQU1vQWdCRkRRRWdBeWdDQUNFQ0N5QUFMUUMvQVFSQUlBSkJMVG9BQUNBQ1FRRnFJUUlMSUFFb0FnQWhCQU5BSUFBb0FzUUJJQVJOQkVBQ1FDQUNRUUE2QUFBZ0FDQUdOZ0lBSUFCQkVHcEJxL2tCSUFBUTZ3RkJBVWNOQUNBREVHWU1CQXNGSUFJZ0FFR3dBV29nQUVHQUFXb2lCeUFIUVNocUlBUVF1UVFnQjJ0QkFuVnFMUUFBT2dBQUlBSkJBV29oQWlBRVFRUnFJUVFNQVFzTEVGVUFDeEJWQUFzZ0FFSG9CR29nQUVIZ0JHb1FlZ1JBSUFVZ0JTZ0NBRUVDY2pZQ0FBc2dBQ2dDNkFRaEFpQUFRY0FCYWhCSElBRVFaaUFBUWZBRWFpUUFJQUlMdFFVQkJIOGpBRUdnQVdzaUFDUUFJQUFnQWpZQ2tBRWdBQ0FCTmdLWUFTQUFRZEFDTmdJVUlBQkJHR29nQUVFZ2FpQUFRUlJxSWdnUVp5RUtJQUJCRUdvaUFTQUVFRThnQVJDYkFTRUhJQUJCQURvQUR5QUFRWmdCYWlBQ0lBTWdBU0FFS0FJRUlBVWdBRUVQYWlBSElBb2dDQ0FBUVlRQmFoQ25Cd1JBSXdCQkVHc2lBU1FBQWtBZ0JoQ0dBUVJBSUFZb0FnQWhBaUFCUVFBNkFBOGdBaUFCUVE5cUVJVUJJQVpCQUJDSkFRd0JDeUFCUVFBNkFBNGdCaUFCUVE1cUVJVUJJQVpCQUJDUEFRc2dBVUVRYWlRQUlBQXRBQThFUUNBR0lBZEJMUkNFQVJDd0JBc2dCMEV3RUlRQklRRWdDaWdDQUNFRUlBQW9BaFFpQjBFQmF5RUNJQUZCL3dGeElRRURRQUpBSUFJZ0JFME5BQ0FFTFFBQUlBRkhEUUFnQkVFQmFpRUVEQUVMQ3lNQVFSQnJJZ01rQUNBR0VEY2hBU0FHRUZFaEFnSkFJQVFnQnhDRUJDSUlSUTBBSUFZUVBpQUVUUVIvSUFZUVBpQUdFRGRxSUFSUEJVRUFDMFVFUUNBSUlBSWdBV3RMQkVBZ0JpQUNJQUVnQ0dvZ0Ftc2dBU0FCRUxFRUN5QUdFRDRnQVdvaEFnTkFJQVFnQjBjRVFDQUNJQVFRaFFFZ0JFRUJhaUVFSUFKQkFXb2hBZ3dCQ3dzZ0EwRUFPZ0FQSUFJZ0EwRVBhaENGQVNBR0lBRWdDR29RbVFJTUFRc2pBRUVRYXlJQkpBQWdBeUFFSUFjUTJnUWdBVUVRYWlRQUlBTWlCeEErSVFnZ0J4QTNJUUVqQUVFUWF5SUVKQUFDUUNBQklBWVFVU0lKSUFZUU55SUNhMDBFUUNBQlJRMEJJQVlRUGlJSklBSnFJQWdnQVJDM0FTQUdJQUVnQW1vaUFSQ1pBaUFFUVFBNkFBOGdBU0FKYWlBRVFROXFFSVVCREFFTElBWWdDU0FCSUFKcUlBbHJJQUlnQWtFQUlBRWdDQkN6QXdzZ0JFRVFhaVFBSUFjUU9Cb0xJQU5CRUdva0FBc2dBRUdZQVdvZ0FFR1FBV29RZXdSQUlBVWdCU2dDQUVFQ2NqWUNBQXNnQUNnQ21BRWhBU0FBUVJCcUVFY2dDaEJtSUFCQm9BRnFKQUFnQVF2WEF3RUNmeU1BUWFBQ2F5SUFKQUFnQUNBQ05nS1FBaUFBSUFFMkFwZ0NJQUJCMEFJMkFoQWdBRUdZQVdvZ0FFR2dBV29nQUVFUWFoQm5JUUVnQUVHUUFXb2lCeUFFRUU4Z0J4Q2JBU0VJSUFCQkFEb0Fqd0VDUUNBQVFaZ0NhaUFDSUFNZ0J5QUVLQUlFSUFVZ0FFR1BBV29nQ0NBQklBQkJsQUZxSUFCQmhBSnFFS2NIUlEwQUlBQkIvSnNDS0FBQU5nQ0hBU0FBUWZXYkFpa0FBRGNEZ0FFZ0NDQUFRWUFCYWlBQVFZb0JhaUFBUWZZQWFoQ0RBaUFBUWM4Q05nSVFJQUJCQ0dwQkFDQUFRUkJxSWdJUVp5RURBa0FnQUNnQ2xBRWdBU2dDQUd0QjR3Qk9CRUFnQXlBQUtBS1VBU0FCS0FJQWEwRUNhaEE1RUg4Z0F5Z0NBRVVOQVNBREtBSUFJUUlMSUFBdEFJOEJCRUFnQWtFdE9nQUFJQUpCQVdvaEFnc2dBU2dDQUNFRUEwQWdBQ2dDbEFFZ0JFMEVRQUpBSUFKQkFEb0FBQ0FBSUFZMkFnQWdBRUVRYWtHcitRRWdBQkRyQVVFQlJ3MEFJQU1RWmd3RUN3VWdBaUFBUWZZQWFpSUhJQWRCQ21vZ0JCQzhCQ0FBYXlBQWFpMEFDam9BQUNBQ1FRRnFJUUlnQkVFQmFpRUVEQUVMQ3hCVkFBc1FWUUFMSUFCQm1BSnFJQUJCa0FKcUVIc0VRQ0FGSUFVb0FnQkJBbkkyQWdBTElBQW9BcGdDSVFJZ0FFR1FBV29RUnlBQkVHWWdBRUdnQW1va0FDQUNDNW9DQVFKL0l3QkJvQU5ySWdna0FDQUlJQWhCb0FOcUlnTTJBZ3dqQUVHUUFXc2lCeVFBSUFjZ0IwR0VBV28yQWh3Z0FFRUlhaUFIUVNCcUlnSWdCMEVjYWlBRUlBVWdCaENzQnlBSFFnQTNBeEFnQnlBQ05nSU1JQWhCRUdvaUFpQUlLQUlNRVBBRUlRVWdBQ2dDQ0NFQUl3QkJFR3NpQkNRQUlBUWdBRFlDRENBRVFRaHFJQVJCREdvUXlnRWhCaUFDSUFkQkRHb2dCU0FIUVJCcUVNUUVJUUFnQmhESkFTQUVRUkJxSkFBZ0FFRi9SZ1JBRUZVQUN5QUlJQUlnQUVFQ2RHbzJBZ3dnQjBHUUFXb2tBQ0FJS0FJTUlRUWpBRUVRYXlJQUpBQWdBQ0FCTmdJSUEwQWdBaUFFUndSQUlBQkJDR29nQWlnQ0FCRGJCQ0FDUVFScUlRSU1BUXNMSUFBb0FnZ2hBU0FBUVJCcUpBQWdBeVFBSUFFTGhRRUFJd0JCZ0FGcklnSWtBQ0FDSUFKQjlBQnFOZ0lNSUFCQkNHb2dBa0VRYWlJQUlBSkJER29nQkNBRklBWVFyQWNnQUNFRUlBSW9BZ3doQXlNQVFSQnJJZ0FrQUNBQUlBRTJBZ2dEUUNBRElBUkhCRUFnQUVFSWFpQUVMQUFBRU1jRElBUkJBV29oQkF3QkN3c2dBQ2dDQ0NFQklBQkJFR29rQUNBQ1FZQUJhaVFBSUFFTGlnMEFJd0JCUUdvaUJ5UUFJQWNnQVRZQ09DQUVRUUEyQWdBZ0J5QURFRThnQnhDVkFTRUJJQWNRUndKL0FrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUNBR1FjRUFhdzQ1QUFFWEJCY0ZGd1lIRnhjWENoY1hGeGNPRHhBWEZ4Y1RGUmNYRnhjWEZ4Y0FBUUlEQXhjWEFSY0lGeGNKQ3hjTUZ3MFhDeGNYRVJJVUZnc2dBQ0FGUVJocUlBZEJPR29nQWlBRUlBRVFyd2NNR0FzZ0FDQUZRUkJxSUFkQk9Hb2dBaUFFSUFFUXJnY01Gd3NnQUVFSWFpQUFLQUlJS0FJTUVRQUFJUUVnQnlBQUlBY29BamdnQWlBRElBUWdCU0FCRUQ0Z0FSQStJQUVRTjBFQ2RHb1E1Z0UyQWpnTUZnc2dCMEU0YWlBQ0lBUWdBVUVDRU5ZQklRQUNRQ0FFS0FJQUlnRkJCSEVnQUVFQmEwRWVTM0pGQkVBZ0JTQUFOZ0lNREFFTElBUWdBVUVFY2pZQ0FBc01GUXNnQjBHWXVRTXBBd0EzQXhnZ0IwR1F1UU1wQXdBM0F4QWdCMEdJdVFNcEF3QTNBd2dnQjBHQXVRTXBBd0EzQXdBZ0J5QUFJQWNvQWpnZ0FpQURJQVFnQlNBSElBZEJJR29RNWdFMkFqZ01GQXNnQjBHNHVRTXBBd0EzQXhnZ0IwR3d1UU1wQXdBM0F4QWdCMEdvdVFNcEF3QTNBd2dnQjBHZ3VRTXBBd0EzQXdBZ0J5QUFJQWNvQWpnZ0FpQURJQVFnQlNBSElBZEJJR29RNWdFMkFqZ01Fd3NnQjBFNGFpQUNJQVFnQVVFQ0VOWUJJUUFDUUNBRUtBSUFJZ0ZCQkhFZ0FFRVhTbkpGQkVBZ0JTQUFOZ0lJREFFTElBUWdBVUVFY2pZQ0FBc01FZ3NnQjBFNGFpQUNJQVFnQVVFQ0VOWUJJUUFDUUNBRUtBSUFJZ0ZCQkhFZ0FFRUJhMEVMUzNKRkJFQWdCU0FBTmdJSURBRUxJQVFnQVVFRWNqWUNBQXNNRVFzZ0IwRTRhaUFDSUFRZ0FVRURFTllCSVFBQ1FDQUVLQUlBSWdGQkJIRWdBRUh0QWtweVJRUkFJQVVnQURZQ0hBd0JDeUFFSUFGQkJISTJBZ0FMREJBTElBZEJPR29nQWlBRUlBRkJBaERXQVNFQUFrQWdCQ2dDQUNJQlFRUnhJQUJCREVweVJRUkFJQVVnQUVFQmF6WUNFQXdCQ3lBRUlBRkJCSEkyQWdBTERBOExJQWRCT0dvZ0FpQUVJQUZCQWhEV0FTRUFBa0FnQkNnQ0FDSUJRUVJ4SUFCQk8wcHlSUVJBSUFVZ0FEWUNCQXdCQ3lBRUlBRkJCSEkyQWdBTERBNExJQWRCT0dvaEFDTUFRUkJySWdNa0FDQURJQUkyQWdnRFFBSkFJQUFnQTBFSWFoQ1FBVVVOQUNBQlFZREFBQ0FBRUdnUXRRRkZEUUFnQUJCMUdnd0JDd3NnQUNBRFFRaHFFSG9FUUNBRUlBUW9BZ0JCQW5JMkFnQUxJQU5CRUdva0FBd05DeUFIUVRocUlRTUNRQ0FBUVFocUlBQW9BZ2dvQWdnUkFBQWlBQkEzUVFBZ0FFRU1haEEzYTBZRVFDQUVJQVFvQWdCQkJISTJBZ0FNQVFzZ0F5QUNJQUFnQUVFWWFpQUJJQVJCQUJDOUF5SUNJQUJISUFVb0FnZ2lBVUVNUjNKRkJFQWdCVUVBTmdJSURBRUxJQUlnQUd0QkRFY2dBVUVMU25KRkJFQWdCU0FCUVF4cU5nSUlDd3NNREFzZ0IwSEF1UU5CTEJBL0lnRWdBQ0FCS0FJNElBSWdBeUFFSUFVZ0FTQUJRU3hxRU9ZQk5nSTREQXNMSUFkQmdMb0RLQUlBTmdJUUlBZEIrTGtES1FNQU53TUlJQWRCOExrREtRTUFOd01BSUFjZ0FDQUhLQUk0SUFJZ0F5QUVJQVVnQnlBSFFSUnFFT1lCTmdJNERBb0xJQWRCT0dvZ0FpQUVJQUZCQWhEV0FTRUFBa0FnQkNnQ0FDSUJRUVJ4SUFCQlBFcHlSUVJBSUFVZ0FEWUNBQXdCQ3lBRUlBRkJCSEkyQWdBTERBa0xJQWRCcUxvREtRTUFOd01ZSUFkQm9Mb0RLUU1BTndNUUlBZEJtTG9ES1FNQU53TUlJQWRCa0xvREtRTUFOd01BSUFjZ0FDQUhLQUk0SUFJZ0F5QUVJQVVnQnlBSFFTQnFFT1lCTmdJNERBZ0xJQWRCT0dvZ0FpQUVJQUZCQVJEV0FTRUFBa0FnQkNnQ0FDSUJRUVJ4SUFCQkJrcHlSUVJBSUFVZ0FEWUNHQXdCQ3lBRUlBRkJCSEkyQWdBTERBY0xJQUFnQnlnQ09DQUNJQU1nQkNBRklBQW9BZ0FvQWhRUkNRQU1Cd3NnQUVFSWFpQUFLQUlJS0FJWUVRQUFJUUVnQnlBQUlBY29BamdnQWlBRElBUWdCU0FCRUQ0Z0FSQStJQUVRTjBFQ2RHb1E1Z0UyQWpnTUJRc2dCVUVVYWlBSFFUaHFJQUlnQkNBQkVLMEhEQVFMSUFkQk9Hb2dBaUFFSUFGQkJCRFdBU0VBSUFRdEFBQkJCSEZGQkVBZ0JTQUFRZXdPYXpZQ0ZBc01Bd3NnQmtFbFJnMEJDeUFFSUFRb0FnQkJCSEkyQWdBTUFRc2pBRUVRYXlJQUpBQWdBQ0FDTmdJSVFRWWhBZ0pBQWtBZ0IwRTRhaUlESUFCQkNHb1FlZzBBUVFRaEFpQUJJQU1RYUJDOEFrRWxSdzBBUVFJaEFpQURFSFVnQUVFSWFoQjZSUTBCQ3lBRUlBUW9BZ0FnQW5JMkFnQUxJQUJCRUdva0FBc2dCeWdDT0FzaEFDQUhRVUJySkFBZ0FBdElBUUYvSXdCQkVHc2lCaVFBSUFZZ0FUWUNDQ0FHSUFNUVR5QUdFSlVCSVFFZ0JoQkhJQVZCRkdvZ0JrRUlhaUFDSUFRZ0FSQ3RCeUFHS0FJSUlRQWdCa0VRYWlRQUlBQUxTZ0VCZnlNQVFSQnJJZ1lrQUNBR0lBRTJBZ2dnQmlBREVFOGdCaENWQVNFQklBWVFSeUFBSUFWQkVHb2dCa0VJYWlBQ0lBUWdBUkN1QnlBR0tBSUlJUUFnQmtFUWFpUUFJQUFMU2dFQmZ5TUFRUkJySWdZa0FDQUdJQUUyQWdnZ0JpQURFRThnQmhDVkFTRUJJQVlRUnlBQUlBVkJHR29nQmtFSWFpQUNJQVFnQVJDdkJ5QUdLQUlJSVFBZ0JrRVFhaVFBSUFBTE1RQWdBQ0FCSUFJZ0F5QUVJQVVnQUVFSWFpQUFLQUlJS0FJVUVRQUFJZ0FRUGlBQUVENGdBQkEzUVFKMGFoRG1BUXRkQVFGL0l3QkJJR3NpQmlRQUlBWkJxTG9ES1FNQU53TVlJQVpCb0xvREtRTUFOd01RSUFaQm1Mb0RLUU1BTndNSUlBWkJrTG9ES1FNQU53TUFJQUFnQVNBQ0lBTWdCQ0FGSUFZZ0JrRWdhaUlCRU9ZQklRQWdBU1FBSUFBTHZBd0JBWDhqQUVFZ2F5SUhKQUFnQnlBQk5nSVlJQVJCQURZQ0FDQUhRUWhxSWdnZ0F4QlBJQWdRbXdFaEFTQUlFRWNDZndKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FnQmtIQkFHc09PUUFCRndRWEJSY0dCeGNYRndvWEZ4Y1hEZzhRRnhjWEV4VVhGeGNYRnhjWEFBRUNBd01YRndFWENCY1hDUXNYREJjTkZ3c1hGeEVTRkJZTElBQWdCVUVZYWlBSFFSaHFJQUlnQkNBQkVMTUhEQmdMSUFBZ0JVRVFhaUFIUVJocUlBSWdCQ0FCRUxFSERCY0xJQUJCQ0dvZ0FDZ0NDQ2dDREJFQUFDRUJJQWNnQUNBSEtBSVlJQUlnQXlBRUlBVWdBUkErSUFFUVBpQUJFRGRxRU9jQk5nSVlEQllMSUFkQkdHb2dBaUFFSUFGQkFoRFhBU0VBQWtBZ0JDZ0NBQ0lCUVFSeElBQkJBV3RCSGt0eVJRUkFJQVVnQURZQ0RBd0JDeUFFSUFGQkJISTJBZ0FMREJVTElBZENwZHE5cWNMc3k1TDVBRGNEQ0NBSElBQWdCeWdDR0NBQ0lBTWdCQ0FGSUFkQkNHb2dCMEVRYWhEbkFUWUNHQXdVQ3lBSFFxV3l0YW5TcmN1UzVBQTNBd2dnQnlBQUlBY29BaGdnQWlBRElBUWdCU0FIUVFocUlBZEJFR29RNXdFMkFoZ01Fd3NnQjBFWWFpQUNJQVFnQVVFQ0VOY0JJUUFDUUNBRUtBSUFJZ0ZCQkhFZ0FFRVhTbkpGQkVBZ0JTQUFOZ0lJREFFTElBUWdBVUVFY2pZQ0FBc01FZ3NnQjBFWWFpQUNJQVFnQVVFQ0VOY0JJUUFDUUNBRUtBSUFJZ0ZCQkhFZ0FFRUJhMEVMUzNKRkJFQWdCU0FBTmdJSURBRUxJQVFnQVVFRWNqWUNBQXNNRVFzZ0IwRVlhaUFDSUFRZ0FVRURFTmNCSVFBQ1FDQUVLQUlBSWdGQkJIRWdBRUh0QWtweVJRUkFJQVVnQURZQ0hBd0JDeUFFSUFGQkJISTJBZ0FMREJBTElBZEJHR29nQWlBRUlBRkJBaERYQVNFQUFrQWdCQ2dDQUNJQlFRUnhJQUJCREVweVJRUkFJQVVnQUVFQmF6WUNFQXdCQ3lBRUlBRkJCSEkyQWdBTERBOExJQWRCR0dvZ0FpQUVJQUZCQWhEWEFTRUFBa0FnQkNnQ0FDSUJRUVJ4SUFCQk8wcHlSUVJBSUFVZ0FEWUNCQXdCQ3lBRUlBRkJCSEkyQWdBTERBNExJQWRCR0dvaEFDTUFRUkJySWdNa0FDQURJQUkyQWdnRFFBSkFJQUFnQTBFSWFoQ1JBVVVOQUNBQlFZREFBQ0FBRUdrUXRnRkZEUUFnQUJCMkdnd0JDd3NnQUNBRFFRaHFFSHNFUUNBRUlBUW9BZ0JCQW5JMkFnQUxJQU5CRUdva0FBd05DeUFIUVJocUlRTUNRQ0FBUVFocUlBQW9BZ2dvQWdnUkFBQWlBQkEzUVFBZ0FFRU1haEEzYTBZRVFDQUVJQVFvQWdCQkJISTJBZ0FNQVFzZ0F5QUNJQUFnQUVFWWFpQUJJQVJCQUJDL0F5SUNJQUJISUFVb0FnZ2lBVUVNUjNKRkJFQWdCVUVBTmdJSURBRUxJQUlnQUd0QkRFY2dBVUVMU25KRkJFQWdCU0FCUVF4cU5nSUlDd3NNREFzZ0IwSDB1QU1vQUFBMkFBOGdCMEh0dUFNcEFBQTNBd2dnQnlBQUlBY29BaGdnQWlBRElBUWdCU0FIUVFocUlBZEJFMm9RNXdFMkFoZ01Dd3NnQjBIOHVBTXRBQUE2QUF3Z0IwSDR1QU1vQUFBMkFnZ2dCeUFBSUFjb0FoZ2dBaUFESUFRZ0JTQUhRUWhxSUFkQkRXb1E1d0UyQWhnTUNnc2dCMEVZYWlBQ0lBUWdBVUVDRU5jQklRQUNRQ0FFS0FJQUlnRkJCSEVnQUVFOFNuSkZCRUFnQlNBQU5nSUFEQUVMSUFRZ0FVRUVjallDQUFzTUNRc2dCMEtsa09tcDBzbk9rdE1BTndNSUlBY2dBQ0FIS0FJWUlBSWdBeUFFSUFVZ0IwRUlhaUFIUVJCcUVPY0JOZ0lZREFnTElBZEJHR29nQWlBRUlBRkJBUkRYQVNFQUFrQWdCQ2dDQUNJQlFRUnhJQUJCQmtweVJRUkFJQVVnQURZQ0dBd0JDeUFFSUFGQkJISTJBZ0FMREFjTElBQWdCeWdDR0NBQ0lBTWdCQ0FGSUFBb0FnQW9BaFFSQ1FBTUJ3c2dBRUVJYWlBQUtBSUlLQUlZRVFBQUlRRWdCeUFBSUFjb0FoZ2dBaUFESUFRZ0JTQUJFRDRnQVJBK0lBRVFOMm9RNXdFMkFoZ01CUXNnQlVFVWFpQUhRUmhxSUFJZ0JDQUJFTEFIREFRTElBZEJHR29nQWlBRUlBRkJCQkRYQVNFQUlBUXRBQUJCQkhGRkJFQWdCU0FBUWV3T2F6WUNGQXNNQXdzZ0JrRWxSZzBCQ3lBRUlBUW9BZ0JCQkhJMkFnQU1BUXNqQUVFUWF5SUFKQUFnQUNBQ05nSUlRUVloQWdKQUFrQWdCMEVZYWlJRElBQkJDR29RZXcwQVFRUWhBaUFCSUFNUWFSQzlBa0VsUncwQVFRSWhBaUFERUhZZ0FFRUlhaEI3UlEwQkN5QUVJQVFvQWdBZ0FuSTJBZ0FMSUFCQkVHb2tBQXNnQnlnQ0dBc2hBQ0FIUVNCcUpBQWdBQXRJQVFGL0l3QkJFR3NpQmlRQUlBWWdBVFlDQ0NBR0lBTVFUeUFHRUpzQklRRWdCaEJISUFWQkZHb2dCa0VJYWlBQ0lBUWdBUkN3QnlBR0tBSUlJUUFnQmtFUWFpUUFJQUFMU2dFQmZ5TUFRUkJySWdZa0FDQUdJQUUyQWdnZ0JpQURFRThnQmhDYkFTRUJJQVlRUnlBQUlBVkJFR29nQmtFSWFpQUNJQVFnQVJDeEJ5QUdLQUlJSVFBZ0JrRVFhaVFBSUFBTFNnRUJmeU1BUVJCcklnWWtBQ0FHSUFFMkFnZ2dCaUFERUU4Z0JoQ2JBU0VCSUFZUVJ5QUFJQVZCR0dvZ0JrRUlhaUFDSUFRZ0FSQ3pCeUFHS0FJSUlRQWdCa0VRYWlRQUlBQUxMZ0FnQUNBQklBSWdBeUFFSUFVZ0FFRUlhaUFBS0FJSUtBSVVFUUFBSWdBUVBpQUFFRDRnQUJBM2FoRG5BUXRBQVFGL0l3QkJFR3NpQmlRQUlBWkNwWkRwcWRMSnpwTFRBRGNEQ0NBQUlBRWdBaUFESUFRZ0JTQUdRUWhxSUFaQkVHb2lBUkRuQVNFQUlBRWtBQ0FBQzdNQkFRVi9Jd0JCMEFGcklnQWtBQ0FBUWV1NEF5OEFBRHNCekFFZ0FFSG51QU1vQUFBMkFzZ0JFRndoQmlBQUlBUTJBZ0FnQUVHd0FXb2lCeUFISUFkQkZDQUdJQUJCeUFGcUlBQVFyZ0VpQ0dvaUJDQUNFTmtCSVFZZ0FFRVFhaUlGSUFJUVR5QUZFSlVCSVFrZ0JSQkhJQWtnQnlBRUlBVVE2QUVnQVNBRklBaEJBblFnQldvaUFTQUdJQUJyUVFKMElBQnFRYkFGYXlBRUlBWkdHeUFCSUFJZ0F4Q2FBaUVCSUFCQjBBRnFKQUFnQVF1SkJBRUhmeU1BUWJBRGF5SUFKQUFnQUVJbE53T29BeUFBUWFnRGFrRUJja0dRa1FJZ0FpZ0NCQkM2QXlFSUlBQWdBRUdBQTJvMkF2d0NFRndoQmdKL0lBZ0VRQ0FDS0FJSUlRY2dBRUZBYXlBRk53TUFJQUFnQkRjRE9DQUFJQWMyQWpBZ0FFR0FBMnBCSGlBR0lBQkJxQU5xSUFCQk1Hb1FyZ0VNQVFzZ0FDQUVOd05RSUFBZ0JUY0RXQ0FBUVlBRGFrRWVJQVlnQUVHb0Eyb2dBRUhRQUdvUXJnRUxJUVlnQUVIUEFqWUNnQUVnQUVId0FtcEJBQ0FBUVlBQmFoQm5JUWtnQUVHQUEyb2lDaUVIQWtBZ0JrRWVUZ1JBRUZ3aEJnSi9JQWdFUUNBQ0tBSUlJUWNnQUNBRk53TVFJQUFnQkRjRENDQUFJQWMyQWdBZ0FFSDhBbW9nQmlBQVFhZ0RhaUFBRU5nQkRBRUxJQUFnQkRjRElDQUFJQVUzQXlnZ0FFSDhBbW9nQmlBQVFhZ0RhaUFBUVNCcUVOZ0JDeUlHUVg5R0RRRWdDU0FBS0FMOEFoQi9JQUFvQXZ3Q0lRY0xJQWNnQmlBSGFpSUxJQUlRMlFFaERDQUFRYzhDTmdLQUFTQUFRZmdBYWtFQUlBQkJnQUZxRUdjaEJ3SkFJQUFvQXZ3Q0lBQkJnQU5xUmdSQUlBQkJnQUZxSVFZTUFRc2dCa0VEZEJBNUlnWkZEUUVnQnlBR0VIOGdBQ2dDL0FJaENnc2dBRUhvQUdvaUNDQUNFRThnQ2lBTUlBc2dCaUFBUWZRQWFpQUFRZkFBYWlBSUVMUUhJQWdRUnlBQklBWWdBQ2dDZENBQUtBSndJQUlnQXhDYUFpRUJJQWNRWmlBSkVHWWdBRUd3QTJva0FDQUJEd3NRVlFBTDVRTUJCMzhqQUVHQUEyc2lBQ1FBSUFCQ0pUY0QrQUlnQUVINEFtcEJBWEpCc3FFQ0lBSW9BZ1FRdWdNaEJ5QUFJQUJCMEFKcU5nTE1BaEJjSVFVQ2Z5QUhCRUFnQWlnQ0NDRUdJQUFnQkRrREtDQUFJQVkyQWlBZ0FFSFFBbXBCSGlBRklBQkIrQUpxSUFCQklHb1FyZ0VNQVFzZ0FDQUVPUU13SUFCQjBBSnFRUjRnQlNBQVFmZ0NhaUFBUVRCcUVLNEJDeUVGSUFCQnp3STJBbEFnQUVIQUFtcEJBQ0FBUWRBQWFoQm5JUWdnQUVIUUFtb2lDU0VHQWtBZ0JVRWVUZ1JBRUZ3aEJRSi9JQWNFUUNBQ0tBSUlJUVlnQUNBRU9RTUlJQUFnQmpZQ0FDQUFRY3dDYWlBRklBQkIrQUpxSUFBUTJBRU1BUXNnQUNBRU9RTVFJQUJCekFKcUlBVWdBRUg0QW1vZ0FFRVFhaERZQVFzaUJVRi9SZzBCSUFnZ0FDZ0N6QUlRZnlBQUtBTE1BaUVHQ3lBR0lBVWdCbW9pQ2lBQ0VOa0JJUXNnQUVIUEFqWUNVQ0FBUWNnQWFrRUFJQUJCMEFCcUVHY2hCZ0pBSUFBb0Fzd0NJQUJCMEFKcVJnUkFJQUJCMEFCcUlRVU1BUXNnQlVFRGRCQTVJZ1ZGRFFFZ0JpQUZFSDhnQUNnQ3pBSWhDUXNnQUVFNGFpSUhJQUlRVHlBSklBc2dDaUFGSUFCQnhBQnFJQUJCUUdzZ0J4QzBCeUFIRUVjZ0FTQUZJQUFvQWtRZ0FDZ0NRQ0FDSUFNUW1nSWhBU0FHRUdZZ0NCQm1JQUJCZ0FOcUpBQWdBUThMRUZVQUN4RUFJQUFnQVNBQ0lBTWdCRUVBRU80R0N4RUFJQUFnQVNBQ0lBTWdCRUVBRU84R0N4RUFJQUFnQVNBQ0lBTWdCRUVCRU80R0N4RUFJQUFnQVNBQ0lBTWdCRUVCRU84R0M5SUJBUUYvSXdCQk1Hc2lCU1FBSUFVZ0FUWUNLQUpBSUFJb0FnUkJBWEZGQkVBZ0FDQUJJQUlnQXlBRUlBQW9BZ0FvQWhnUkNnQWhBZ3dCQ3lBRlFSaHFJZ0FnQWhCUElBQVF2d0loQVNBQUVFY0NRQ0FFQkVBZ0JVRVlhaUFCRUxNQkRBRUxJQVZCR0dvZ0FSREJBUXNnQlNBRlFSaHFFSzhCTmdJUUEwQWdCU0FGUVJocUVJRUNOZ0lJSUFWQkVHb2dCVUVJYWhDQ0FRUkFJQVZCS0dvZ0JVRVFhaUlBS0FJQUtBSUFFTnNFSUFBUWpnSU1BUVVnQlNnQ0tDRUNJQVZCR0dvUU9Cb0xDd3NnQlVFd2FpUUFJQUlMcVFFQkJYOGpBRUhnQUdzaUFDUUFJQUJCNjdnREx3QUFPd0ZjSUFCQjU3Z0RLQUFBTmdKWUVGd2hCaUFBSUFRMkFnQWdBRUZBYXlJSElBY2dCMEVVSUFZZ0FFSFlBR29nQUJDdUFTSUlhaUlFSUFJUTJRRWhCaUFBUVJCcUlnVWdBaEJQSUFVUW13RWhDU0FGRUVjZ0NTQUhJQVFnQlJDREFpQUJJQVVnQlNBSWFpSUJJQVlnQUdzZ0FHcEJNR3NnQkNBR1Joc2dBU0FDSUFNUTZRRWhBU0FBUWVBQWFpUUFJQUVMaVFRQkIzOGpBRUdBQW1zaUFDUUFJQUJDSlRjRCtBRWdBRUg0QVdwQkFYSkJrSkVDSUFJb0FnUVF1Z01oQ0NBQUlBQkIwQUZxTmdMTUFSQmNJUVlDZnlBSUJFQWdBaWdDQ0NFSElBQkJRR3NnQlRjREFDQUFJQVEzQXpnZ0FDQUhOZ0l3SUFCQjBBRnFRUjRnQmlBQVFmZ0JhaUFBUVRCcUVLNEJEQUVMSUFBZ0JEY0RVQ0FBSUFVM0ExZ2dBRUhRQVdwQkhpQUdJQUJCK0FGcUlBQkIwQUJxRUs0QkN5RUdJQUJCendJMkFvQUJJQUJCd0FGcVFRQWdBRUdBQVdvUVp5RUpJQUJCMEFGcUlnb2hCd0pBSUFaQkhrNEVRQkJjSVFZQ2Z5QUlCRUFnQWlnQ0NDRUhJQUFnQlRjREVDQUFJQVEzQXdnZ0FDQUhOZ0lBSUFCQnpBRnFJQVlnQUVINEFXb2dBQkRZQVF3QkN5QUFJQVEzQXlBZ0FDQUZOd01vSUFCQnpBRnFJQVlnQUVINEFXb2dBRUVnYWhEWUFRc2lCa0YvUmcwQklBa2dBQ2dDekFFUWZ5QUFLQUxNQVNFSEN5QUhJQVlnQjJvaUN5QUNFTmtCSVF3Z0FFSFBBallDZ0FFZ0FFSDRBR3BCQUNBQVFZQUJhaEJuSVFjQ1FDQUFLQUxNQVNBQVFkQUJha1lFUUNBQVFZQUJhaUVHREFFTElBWkJBWFFRT1NJR1JRMEJJQWNnQmhCL0lBQW9Bc3dCSVFvTElBQkI2QUJxSWdnZ0FoQlBJQW9nRENBTElBWWdBRUgwQUdvZ0FFSHdBR29nQ0JDM0J5QUlFRWNnQVNBR0lBQW9BblFnQUNnQ2NDQUNJQU1RNlFFaEFTQUhFR1lnQ1JCbUlBQkJnQUpxSkFBZ0FROExFRlVBQytVREFRZC9Jd0JCMEFGcklnQWtBQ0FBUWlVM0E4Z0JJQUJCeUFGcVFRRnlRYktoQWlBQ0tBSUVFTG9ESVFjZ0FDQUFRYUFCYWpZQ25BRVFYQ0VGQW44Z0J3UkFJQUlvQWdnaEJpQUFJQVE1QXlnZ0FDQUdOZ0lnSUFCQm9BRnFRUjRnQlNBQVFjZ0JhaUFBUVNCcUVLNEJEQUVMSUFBZ0JEa0RNQ0FBUWFBQmFrRWVJQVVnQUVISUFXb2dBRUV3YWhDdUFRc2hCU0FBUWM4Q05nSlFJQUJCa0FGcVFRQWdBRUhRQUdvUVp5RUlJQUJCb0FGcUlna2hCZ0pBSUFWQkhrNEVRQkJjSVFVQ2Z5QUhCRUFnQWlnQ0NDRUdJQUFnQkRrRENDQUFJQVkyQWdBZ0FFR2NBV29nQlNBQVFjZ0JhaUFBRU5nQkRBRUxJQUFnQkRrREVDQUFRWndCYWlBRklBQkJ5QUZxSUFCQkVHb1EyQUVMSWdWQmYwWU5BU0FJSUFBb0Fwd0JFSDhnQUNnQ25BRWhCZ3NnQmlBRklBWnFJZ29nQWhEWkFTRUxJQUJCendJMkFsQWdBRUhJQUdwQkFDQUFRZEFBYWhCbklRWUNRQ0FBS0FLY0FTQUFRYUFCYWtZRVFDQUFRZEFBYWlFRkRBRUxJQVZCQVhRUU9TSUZSUTBCSUFZZ0JSQi9JQUFvQXB3QklRa0xJQUJCT0dvaUJ5QUNFRThnQ1NBTElBb2dCU0FBUWNRQWFpQUFRVUJySUFjUXR3Y2dCeEJISUFFZ0JTQUFLQUpFSUFBb0FrQWdBaUFERU9rQklRRWdCaEJtSUFnUVppQUFRZEFCYWlRQUlBRVBDeEJWQUFzUkFDQUFJQUVnQWlBRElBUkJBQkR3QmdzUkFDQUFJQUVnQWlBRElBUkJBQkR4QmdzUkFDQUFJQUVnQWlBRElBUkJBUkR3QmdzUkFDQUFJQUVnQWlBRElBUkJBUkR4Qmd2U0FRRUJmeU1BUVRCcklnVWtBQ0FGSUFFMkFpZ0NRQ0FDS0FJRVFRRnhSUVJBSUFBZ0FTQUNJQU1nQkNBQUtBSUFLQUlZRVFvQUlRSU1BUXNnQlVFWWFpSUFJQUlRVHlBQUVKd0NJUUVnQUJCSEFrQWdCQVJBSUFWQkdHb2dBUkN6QVF3QkN5QUZRUmhxSUFFUXdRRUxJQVVnQlVFWWFoQ3ZBVFlDRUFOQUlBVWdCVUVZYWhDQ0FqWUNDQ0FGUVJCcUlBVkJDR29RZ2dFRVFDQUZRU2hxSUFWQkVHb2lBQ2dDQUN3QUFCREhBeUFBRU93Q0RBRUZJQVVvQWlnaEFpQUZRUmhxRURnYUN3c0xJQVZCTUdva0FDQUNDL1VDQVFGL0l3QkI0QUpySWdBa0FDQUFJQUkyQXRBQ0lBQWdBVFlDMkFJZ0FFSFFBV29RUkNFR0lBQkJFR29pQWlBREVFOGdBaENWQVVIQXVBTkIycmdESUFCQjRBRnFFT2dCSUFJUVJ5QUFRY0FCYWhCRUlnTWdBeEJSRUVFZ0FDQURRUUFRUUNJQk5nSzhBU0FBSUFJMkFnd2dBRUVBTmdJSUEwQUNRQ0FBUWRnQ2FpQUFRZEFDYWhDUUFVVU5BQ0FBS0FLOEFTQURFRGNnQVdwR0JFQWdBeEEzSVFJZ0F5QURFRGRCQVhRUVFTQURJQU1RVVJCQklBQWdBaUFEUVFBUVFDSUJhallDdkFFTElBQkIyQUpxRUdoQkVDQUJJQUJCdkFGcUlBQkJDR3BCQUNBR0lBQkJFR29nQUVFTWFpQUFRZUFCYWhDK0FnMEFJQUJCMkFKcUVIVWFEQUVMQ3lBRElBQW9BcndCSUFGckVFRWdBeEErSVFJUVhDRUJJQUFnQlRZQ0FDQUNJQUVnQUJDOEIwRUJSd1JBSUFSQkJEWUNBQXNnQUVIWUFtb2dBRUhRQW1vUWVnUkFJQVFnQkNnQ0FFRUNjallDQUFzZ0FDZ0MyQUloQVNBREVEZ2FJQVlRT0JvZ0FFSGdBbW9rQUNBQkM5UURBUUYrSXdCQmdBTnJJZ0FrQUNBQUlBSTJBdkFDSUFBZ0FUWUMrQUlnQUVIWUFXb2dBeUFBUWZBQmFpQUFRZXdCYWlBQVFlZ0JhaEM3QkNBQVFjZ0JhaEJFSWdFZ0FSQlJFRUVnQUNBQlFRQVFRQ0lDTmdMRUFTQUFJQUJCSUdvMkFod2dBRUVBTmdJWUlBQkJBVG9BRnlBQVFjVUFPZ0FXQTBBQ1FDQUFRZmdDYWlBQVFmQUNhaENRQVVVTkFDQUFLQUxFQVNBQkVEY2dBbXBHQkVBZ0FSQTNJUU1nQVNBQkVEZEJBWFFRUVNBQklBRVFVUkJCSUFBZ0F5QUJRUUFRUUNJQ2FqWUN4QUVMSUFCQitBSnFFR2dnQUVFWGFpQUFRUlpxSUFJZ0FFSEVBV29nQUNnQzdBRWdBQ2dDNkFFZ0FFSFlBV29nQUVFZ2FpQUFRUnhxSUFCQkdHb2dBRUh3QVdvUXVnUU5BQ0FBUWZnQ2FoQjFHZ3dCQ3dzQ1FDQUFRZGdCYWhBM1JRMEFJQUF0QUJkRkRRQWdBQ2dDSENJRElBQkJJR3ByUVo4QlNnMEFJQUFnQTBFRWFqWUNIQ0FESUFBb0FoZzJBZ0FMSUFBZ0FpQUFLQUxFQVNBRUVMMEhJQUFwQXdBaEJpQUZJQUFwQXdnM0F3Z2dCU0FHTndNQUlBQkIyQUZxSUFCQklHb2dBQ2dDSENBRUVJNEJJQUJCK0FKcUlBQkI4QUpxRUhvRVFDQUVJQVFvQWdCQkFuSTJBZ0FMSUFBb0F2Z0NJUUlnQVJBNEdpQUFRZGdCYWhBNEdpQUFRWUFEYWlRQUlBSUx2UU1BSXdCQjhBSnJJZ0FrQUNBQUlBSTJBdUFDSUFBZ0FUWUM2QUlnQUVISUFXb2dBeUFBUWVBQmFpQUFRZHdCYWlBQVFkZ0JhaEM3QkNBQVFiZ0JhaEJFSWdFZ0FSQlJFRUVnQUNBQlFRQVFRQ0lDTmdLMEFTQUFJQUJCRUdvMkFnd2dBRUVBTmdJSUlBQkJBVG9BQnlBQVFjVUFPZ0FHQTBBQ1FDQUFRZWdDYWlBQVFlQUNhaENRQVVVTkFDQUFLQUswQVNBQkVEY2dBbXBHQkVBZ0FSQTNJUU1nQVNBQkVEZEJBWFFRUVNBQklBRVFVUkJCSUFBZ0F5QUJRUUFRUUNJQ2FqWUN0QUVMSUFCQjZBSnFFR2dnQUVFSGFpQUFRUVpxSUFJZ0FFRzBBV29nQUNnQzNBRWdBQ2dDMkFFZ0FFSElBV29nQUVFUWFpQUFRUXhxSUFCQkNHb2dBRUhnQVdvUXVnUU5BQ0FBUWVnQ2FoQjFHZ3dCQ3dzQ1FDQUFRY2dCYWhBM1JRMEFJQUF0QUFkRkRRQWdBQ2dDRENJRElBQkJFR3ByUVo4QlNnMEFJQUFnQTBFRWFqWUNEQ0FESUFBb0FnZzJBZ0FMSUFVZ0FpQUFLQUswQVNBRUVMOEhPUU1BSUFCQnlBRnFJQUJCRUdvZ0FDZ0NEQ0FFRUk0QklBQkI2QUpxSUFCQjRBSnFFSG9FUUNBRUlBUW9BZ0JCQW5JMkFnQUxJQUFvQXVnQ0lRSWdBUkE0R2lBQVFjZ0JhaEE0R2lBQVFmQUNhaVFBSUFJTHZRTUFJd0JCOEFKcklnQWtBQ0FBSUFJMkF1QUNJQUFnQVRZQzZBSWdBRUhJQVdvZ0F5QUFRZUFCYWlBQVFkd0JhaUFBUWRnQmFoQzdCQ0FBUWJnQmFoQkVJZ0VnQVJCUkVFRWdBQ0FCUVFBUVFDSUNOZ0swQVNBQUlBQkJFR28yQWd3Z0FFRUFOZ0lJSUFCQkFUb0FCeUFBUWNVQU9nQUdBMEFDUUNBQVFlZ0NhaUFBUWVBQ2FoQ1FBVVVOQUNBQUtBSzBBU0FCRURjZ0FtcEdCRUFnQVJBM0lRTWdBU0FCRURkQkFYUVFRU0FCSUFFUVVSQkJJQUFnQXlBQlFRQVFRQ0lDYWpZQ3RBRUxJQUJCNkFKcUVHZ2dBRUVIYWlBQVFRWnFJQUlnQUVHMEFXb2dBQ2dDM0FFZ0FDZ0MyQUVnQUVISUFXb2dBRUVRYWlBQVFReHFJQUJCQ0dvZ0FFSGdBV29RdWdRTkFDQUFRZWdDYWhCMUdnd0JDd3NDUUNBQVFjZ0JhaEEzUlEwQUlBQXRBQWRGRFFBZ0FDZ0NEQ0lESUFCQkVHcHJRWjhCU2cwQUlBQWdBMEVFYWpZQ0RDQURJQUFvQWdnMkFnQUxJQVVnQWlBQUtBSzBBU0FFRU1BSE9BSUFJQUJCeUFGcUlBQkJFR29nQUNnQ0RDQUVFSTRCSUFCQjZBSnFJQUJCNEFKcUVIb0VRQ0FFSUFRb0FnQkJBbkkyQWdBTElBQW9BdWdDSVFJZ0FSQTRHaUFBUWNnQmFoQTRHaUFBUWZBQ2FpUUFJQUlMb0FNQkFuOGpBRUhnQW1zaUFDUUFJQUFnQWpZQzBBSWdBQ0FCTmdMWUFpQURFTm9CSVFZZ0F5QUFRZUFCYWhEdUFpRUhJQUJCMEFGcUlBTWdBRUhNQW1vUTdRSWdBRUhBQVdvUVJDSUJJQUVRVVJCQklBQWdBVUVBRUVBaUFqWUN2QUVnQUNBQVFSQnFOZ0lNSUFCQkFEWUNDQU5BQWtBZ0FFSFlBbW9nQUVIUUFtb1FrQUZGRFFBZ0FDZ0N2QUVnQVJBM0lBSnFSZ1JBSUFFUU55RURJQUVnQVJBM1FRRjBFRUVnQVNBQkVGRVFRU0FBSUFNZ0FVRUFFRUFpQW1vMkFyd0JDeUFBUWRnQ2FoQm9JQVlnQWlBQVFid0JhaUFBUVFocUlBQW9Bc3dDSUFCQjBBRnFJQUJCRUdvZ0FFRU1haUFIRUw0Q0RRQWdBRUhZQW1vUWRSb01BUXNMQWtBZ0FFSFFBV29RTjBVTkFDQUFLQUlNSWdNZ0FFRVFhbXRCbndGS0RRQWdBQ0FEUVFScU5nSU1JQU1nQUNnQ0NEWUNBQXNnQlNBQ0lBQW9BcndCSUFRZ0JoREJCemNEQUNBQVFkQUJhaUFBUVJCcUlBQW9BZ3dnQkJDT0FTQUFRZGdDYWlBQVFkQUNhaEI2QkVBZ0JDQUVLQUlBUVFKeU5nSUFDeUFBS0FMWUFpRUNJQUVRT0JvZ0FFSFFBV29RT0JvZ0FFSGdBbW9rQUNBQ0M2QURBUUovSXdCQjRBSnJJZ0FrQUNBQUlBSTJBdEFDSUFBZ0FUWUMyQUlnQXhEYUFTRUdJQU1nQUVIZ0FXb1E3Z0loQnlBQVFkQUJhaUFESUFCQnpBSnFFTzBDSUFCQndBRnFFRVFpQVNBQkVGRVFRU0FBSUFGQkFCQkFJZ0kyQXJ3QklBQWdBRUVRYWpZQ0RDQUFRUUEyQWdnRFFBSkFJQUJCMkFKcUlBQkIwQUpxRUpBQlJRMEFJQUFvQXJ3QklBRVFOeUFDYWtZRVFDQUJFRGNoQXlBQklBRVFOMEVCZEJCQklBRWdBUkJSRUVFZ0FDQURJQUZCQUJCQUlnSnFOZ0s4QVFzZ0FFSFlBbW9RYUNBR0lBSWdBRUc4QVdvZ0FFRUlhaUFBS0FMTUFpQUFRZEFCYWlBQVFSQnFJQUJCREdvZ0J4QytBZzBBSUFCQjJBSnFFSFVhREFFTEN3SkFJQUJCMEFGcUVEZEZEUUFnQUNnQ0RDSURJQUJCRUdwclFaOEJTZzBBSUFBZ0EwRUVhallDRENBRElBQW9BZ2cyQWdBTElBVWdBaUFBS0FLOEFTQUVJQVlReEFjN0FRQWdBRUhRQVdvZ0FFRVFhaUFBS0FJTUlBUVFqZ0VnQUVIWUFtb2dBRUhRQW1vUWVnUkFJQVFnQkNnQ0FFRUNjallDQUFzZ0FDZ0MyQUloQWlBQkVEZ2FJQUJCMEFGcUVEZ2FJQUJCNEFKcUpBQWdBZ3VnQXdFQ2Z5TUFRZUFDYXlJQUpBQWdBQ0FDTmdMUUFpQUFJQUUyQXRnQ0lBTVEyZ0VoQmlBRElBQkI0QUZxRU80Q0lRY2dBRUhRQVdvZ0F5QUFRY3dDYWhEdEFpQUFRY0FCYWhCRUlnRWdBUkJSRUVFZ0FDQUJRUUFRUUNJQ05nSzhBU0FBSUFCQkVHbzJBZ3dnQUVFQU5nSUlBMEFDUUNBQVFkZ0NhaUFBUWRBQ2FoQ1FBVVVOQUNBQUtBSzhBU0FCRURjZ0FtcEdCRUFnQVJBM0lRTWdBU0FCRURkQkFYUVFRU0FCSUFFUVVSQkJJQUFnQXlBQlFRQVFRQ0lDYWpZQ3ZBRUxJQUJCMkFKcUVHZ2dCaUFDSUFCQnZBRnFJQUJCQ0dvZ0FDZ0N6QUlnQUVIUUFXb2dBRUVRYWlBQVFReHFJQWNRdmdJTkFDQUFRZGdDYWhCMUdnd0JDd3NDUUNBQVFkQUJhaEEzUlEwQUlBQW9BZ3dpQXlBQVFSQnFhMEdmQVVvTkFDQUFJQU5CQkdvMkFnd2dBeUFBS0FJSU5nSUFDeUFGSUFJZ0FDZ0N2QUVnQkNBR0VNVUhOd01BSUFCQjBBRnFJQUJCRUdvZ0FDZ0NEQ0FFRUk0QklBQkIyQUpxSUFCQjBBSnFFSG9FUUNBRUlBUW9BZ0JCQW5JMkFnQUxJQUFvQXRnQ0lRSWdBUkE0R2lBQVFkQUJhaEE0R2lBQVFlQUNhaVFBSUFJTG9BTUJBbjhqQUVIZ0Ftc2lBQ1FBSUFBZ0FqWUMwQUlnQUNBQk5nTFlBaUFERU5vQklRWWdBeUFBUWVBQmFoRHVBaUVISUFCQjBBRnFJQU1nQUVITUFtb1E3UUlnQUVIQUFXb1FSQ0lCSUFFUVVSQkJJQUFnQVVFQUVFQWlBallDdkFFZ0FDQUFRUkJxTmdJTUlBQkJBRFlDQ0FOQUFrQWdBRUhZQW1vZ0FFSFFBbW9Ra0FGRkRRQWdBQ2dDdkFFZ0FSQTNJQUpxUmdSQUlBRVFOeUVESUFFZ0FSQTNRUUYwRUVFZ0FTQUJFRkVRUVNBQUlBTWdBVUVBRUVBaUFtbzJBcndCQ3lBQVFkZ0NhaEJvSUFZZ0FpQUFRYndCYWlBQVFRaHFJQUFvQXN3Q0lBQkIwQUZxSUFCQkVHb2dBRUVNYWlBSEVMNENEUUFnQUVIWUFtb1FkUm9NQVFzTEFrQWdBRUhRQVdvUU4wVU5BQ0FBS0FJTUlnTWdBRUVRYW10Qm53RktEUUFnQUNBRFFRUnFOZ0lNSUFNZ0FDZ0NDRFlDQUFzZ0JTQUNJQUFvQXJ3QklBUWdCaERHQnpZQ0FDQUFRZEFCYWlBQVFSQnFJQUFvQWd3Z0JCQ09BU0FBUWRnQ2FpQUFRZEFDYWhCNkJFQWdCQ0FFS0FJQVFRSnlOZ0lBQ3lBQUtBTFlBaUVDSUFFUU9Cb2dBRUhRQVdvUU9Cb2dBRUhnQW1va0FDQUNDKzhCQVFGL0l3QkJJR3NpQmlRQUlBWWdBVFlDR0FKQUlBTW9BZ1JCQVhGRkJFQWdCa0YvTmdJQUlBWWdBQ0FCSUFJZ0F5QUVJQVlnQUNnQ0FDZ0NFQkVKQUNJQk5nSVlBa0FDUUFKQUlBWW9BZ0FPQWdBQkFnc2dCVUVBT2dBQURBTUxJQVZCQVRvQUFBd0NDeUFGUVFFNkFBQWdCRUVFTmdJQURBRUxJQVlnQXhCUElBWVFsUUVoQVNBR0VFY2dCaUFERUU4Z0JoQy9BaUVBSUFZUVJ5QUdJQUFRc3dFZ0JrRU1jaUFBRU1FQklBVWdCa0VZYWlJRElBSWdCaUFESUFFZ0JFRUJFTDBESUFaR09nQUFJQVlvQWhnaEFRTkFJQU5CREdzUU9DSURJQVpIRFFBTEN5QUdRU0JxSkFBZ0FRdjFBZ0VCZnlNQVFaQUNheUlBSkFBZ0FDQUNOZ0tBQWlBQUlBRTJBb2dDSUFCQjBBRnFFRVFoQmlBQVFSQnFJZ0lnQXhCUElBSVFtd0ZCd0xnRFFkcTRBeUFBUWVBQmFoQ0RBaUFDRUVjZ0FFSEFBV29RUkNJRElBTVFVUkJCSUFBZ0EwRUFFRUFpQVRZQ3ZBRWdBQ0FDTmdJTUlBQkJBRFlDQ0FOQUFrQWdBRUdJQW1vZ0FFR0FBbW9Ra1FGRkRRQWdBQ2dDdkFFZ0F4QTNJQUZxUmdSQUlBTVFOeUVDSUFNZ0F4QTNRUUYwRUVFZ0F5QURFRkVRUVNBQUlBSWdBMEVBRUVBaUFXbzJBcndCQ3lBQVFZZ0NhaEJwUVJBZ0FTQUFRYndCYWlBQVFRaHFRUUFnQmlBQVFSQnFJQUJCREdvZ0FFSGdBV29Rd1FJTkFDQUFRWWdDYWhCMkdnd0JDd3NnQXlBQUtBSzhBU0FCYXhCQklBTVFQaUVDRUZ3aEFTQUFJQVUyQWdBZ0FpQUJJQUFRdkFkQkFVY0VRQ0FFUVFRMkFnQUxJQUJCaUFKcUlBQkJnQUpxRUhzRVFDQUVJQVFvQWdCQkFuSTJBZ0FMSUFBb0FvZ0NJUUVnQXhBNEdpQUdFRGdhSUFCQmtBSnFKQUFnQVF2VUF3RUJmaU1BUWFBQ2F5SUFKQUFnQUNBQ05nS1FBaUFBSUFFMkFwZ0NJQUJCNEFGcUlBTWdBRUh3QVdvZ0FFSHZBV29nQUVIdUFXb1F2Z1FnQUVIUUFXb1FSQ0lCSUFFUVVSQkJJQUFnQVVFQUVFQWlBallDekFFZ0FDQUFRU0JxTmdJY0lBQkJBRFlDR0NBQVFRRTZBQmNnQUVIRkFEb0FGZ05BQWtBZ0FFR1lBbW9nQUVHUUFtb1FrUUZGRFFBZ0FDZ0N6QUVnQVJBM0lBSnFSZ1JBSUFFUU55RURJQUVnQVJBM1FRRjBFRUVnQVNBQkVGRVFRU0FBSUFNZ0FVRUFFRUFpQW1vMkFzd0JDeUFBUVpnQ2FoQnBJQUJCRjJvZ0FFRVdhaUFDSUFCQnpBRnFJQUFzQU84QklBQXNBTzRCSUFCQjRBRnFJQUJCSUdvZ0FFRWNhaUFBUVJocUlBQkI4QUZxRUwwRURRQWdBRUdZQW1vUWRob01BUXNMQWtBZ0FFSGdBV29RTjBVTkFDQUFMUUFYUlEwQUlBQW9BaHdpQXlBQVFTQnFhMEdmQVVvTkFDQUFJQU5CQkdvMkFod2dBeUFBS0FJWU5nSUFDeUFBSUFJZ0FDZ0N6QUVnQkJDOUJ5QUFLUU1BSVFZZ0JTQUFLUU1JTndNSUlBVWdCamNEQUNBQVFlQUJhaUFBUVNCcUlBQW9BaHdnQkJDT0FTQUFRWmdDYWlBQVFaQUNhaEI3QkVBZ0JDQUVLQUlBUVFKeU5nSUFDeUFBS0FLWUFpRUNJQUVRT0JvZ0FFSGdBV29RT0JvZ0FFR2dBbW9rQUNBQ0M3MERBQ01BUVpBQ2F5SUFKQUFnQUNBQ05nS0FBaUFBSUFFMkFvZ0NJQUJCMEFGcUlBTWdBRUhnQVdvZ0FFSGZBV29nQUVIZUFXb1F2Z1FnQUVIQUFXb1FSQ0lCSUFFUVVSQkJJQUFnQVVFQUVFQWlBallDdkFFZ0FDQUFRUkJxTmdJTUlBQkJBRFlDQ0NBQVFRRTZBQWNnQUVIRkFEb0FCZ05BQWtBZ0FFR0lBbW9nQUVHQUFtb1FrUUZGRFFBZ0FDZ0N2QUVnQVJBM0lBSnFSZ1JBSUFFUU55RURJQUVnQVJBM1FRRjBFRUVnQVNBQkVGRVFRU0FBSUFNZ0FVRUFFRUFpQW1vMkFyd0JDeUFBUVlnQ2FoQnBJQUJCQjJvZ0FFRUdhaUFDSUFCQnZBRnFJQUFzQU44QklBQXNBTjRCSUFCQjBBRnFJQUJCRUdvZ0FFRU1haUFBUVFocUlBQkI0QUZxRUwwRURRQWdBRUdJQW1vUWRob01BUXNMQWtBZ0FFSFFBV29RTjBVTkFDQUFMUUFIUlEwQUlBQW9BZ3dpQXlBQVFSQnFhMEdmQVVvTkFDQUFJQU5CQkdvMkFnd2dBeUFBS0FJSU5nSUFDeUFGSUFJZ0FDZ0N2QUVnQkJDL0J6a0RBQ0FBUWRBQmFpQUFRUkJxSUFBb0Fnd2dCQkNPQVNBQVFZZ0NhaUFBUVlBQ2FoQjdCRUFnQkNBRUtBSUFRUUp5TmdJQUN5QUFLQUtJQWlFQ0lBRVFPQm9nQUVIUUFXb1FPQm9nQUVHUUFtb2tBQ0FDQzcwREFDTUFRWkFDYXlJQUpBQWdBQ0FDTmdLQUFpQUFJQUUyQW9nQ0lBQkIwQUZxSUFNZ0FFSGdBV29nQUVIZkFXb2dBRUhlQVdvUXZnUWdBRUhBQVdvUVJDSUJJQUVRVVJCQklBQWdBVUVBRUVBaUFqWUN2QUVnQUNBQVFSQnFOZ0lNSUFCQkFEWUNDQ0FBUVFFNkFBY2dBRUhGQURvQUJnTkFBa0FnQUVHSUFtb2dBRUdBQW1vUWtRRkZEUUFnQUNnQ3ZBRWdBUkEzSUFKcVJnUkFJQUVRTnlFRElBRWdBUkEzUVFGMEVFRWdBU0FCRUZFUVFTQUFJQU1nQVVFQUVFQWlBbW8yQXJ3QkN5QUFRWWdDYWhCcElBQkJCMm9nQUVFR2FpQUNJQUJCdkFGcUlBQXNBTjhCSUFBc0FONEJJQUJCMEFGcUlBQkJFR29nQUVFTWFpQUFRUWhxSUFCQjRBRnFFTDBFRFFBZ0FFR0lBbW9RZGhvTUFRc0xBa0FnQUVIUUFXb1FOMFVOQUNBQUxRQUhSUTBBSUFBb0Fnd2lBeUFBUVJCcWEwR2ZBVW9OQUNBQUlBTkJCR28yQWd3Z0F5QUFLQUlJTmdJQUN5QUZJQUlnQUNnQ3ZBRWdCQkRBQnpnQ0FDQUFRZEFCYWlBQVFSQnFJQUFvQWd3Z0JCQ09BU0FBUVlnQ2FpQUFRWUFDYWhCN0JFQWdCQ0FFS0FJQVFRSnlOZ0lBQ3lBQUtBS0lBaUVDSUFFUU9Cb2dBRUhRQVdvUU9Cb2dBRUdRQW1va0FDQUNDNVVEQVFGL0l3QkJrQUpySWdBa0FDQUFJQUkyQW9BQ0lBQWdBVFlDaUFJZ0F4RGFBU0VHSUFCQjBBRnFJQU1nQUVIL0FXb1E3d0lnQUVIQUFXb1FSQ0lCSUFFUVVSQkJJQUFnQVVFQUVFQWlBallDdkFFZ0FDQUFRUkJxTmdJTUlBQkJBRFlDQ0FOQUFrQWdBRUdJQW1vZ0FFR0FBbW9Ra1FGRkRRQWdBQ2dDdkFFZ0FSQTNJQUpxUmdSQUlBRVFOeUVESUFFZ0FSQTNRUUYwRUVFZ0FTQUJFRkVRUVNBQUlBTWdBVUVBRUVBaUFtbzJBcndCQ3lBQVFZZ0NhaEJwSUFZZ0FpQUFRYndCYWlBQVFRaHFJQUFzQVA4QklBQkIwQUZxSUFCQkVHb2dBRUVNYWtIQXVBTVF3UUlOQUNBQVFZZ0NhaEIyR2d3QkN3c0NRQ0FBUWRBQmFoQTNSUTBBSUFBb0Fnd2lBeUFBUVJCcWEwR2ZBVW9OQUNBQUlBTkJCR28yQWd3Z0F5QUFLQUlJTmdJQUN5QUZJQUlnQUNnQ3ZBRWdCQ0FHRU1FSE53TUFJQUJCMEFGcUlBQkJFR29nQUNnQ0RDQUVFSTRCSUFCQmlBSnFJQUJCZ0FKcUVIc0VRQ0FFSUFRb0FnQkJBbkkyQWdBTElBQW9Bb2dDSVFJZ0FSQTRHaUFBUWRBQmFoQTRHaUFBUVpBQ2FpUUFJQUlMbFFNQkFYOGpBRUdRQW1zaUFDUUFJQUFnQWpZQ2dBSWdBQ0FCTmdLSUFpQURFTm9CSVFZZ0FFSFFBV29nQXlBQVFmOEJhaER2QWlBQVFjQUJhaEJFSWdFZ0FSQlJFRUVnQUNBQlFRQVFRQ0lDTmdLOEFTQUFJQUJCRUdvMkFnd2dBRUVBTmdJSUEwQUNRQ0FBUVlnQ2FpQUFRWUFDYWhDUkFVVU5BQ0FBS0FLOEFTQUJFRGNnQW1wR0JFQWdBUkEzSVFNZ0FTQUJFRGRCQVhRUVFTQUJJQUVRVVJCQklBQWdBeUFCUVFBUVFDSUNhallDdkFFTElBQkJpQUpxRUdrZ0JpQUNJQUJCdkFGcUlBQkJDR29nQUN3QS93RWdBRUhRQVdvZ0FFRVFhaUFBUVF4cVFjQzRBeERCQWcwQUlBQkJpQUpxRUhZYURBRUxDd0pBSUFCQjBBRnFFRGRGRFFBZ0FDZ0NEQ0lESUFCQkVHcHJRWjhCU2cwQUlBQWdBMEVFYWpZQ0RDQURJQUFvQWdnMkFnQUxJQVVnQWlBQUtBSzhBU0FFSUFZUXhBYzdBUUFnQUVIUUFXb2dBRUVRYWlBQUtBSU1JQVFRamdFZ0FFR0lBbW9nQUVHQUFtb1Fld1JBSUFRZ0JDZ0NBRUVDY2pZQ0FBc2dBQ2dDaUFJaEFpQUJFRGdhSUFCQjBBRnFFRGdhSUFCQmtBSnFKQUFnQWd1VkF3RUJmeU1BUVpBQ2F5SUFKQUFnQUNBQ05nS0FBaUFBSUFFMkFvZ0NJQU1RMmdFaEJpQUFRZEFCYWlBRElBQkIvd0ZxRU84Q0lBQkJ3QUZxRUVRaUFTQUJFRkVRUVNBQUlBRkJBQkJBSWdJMkFyd0JJQUFnQUVFUWFqWUNEQ0FBUVFBMkFnZ0RRQUpBSUFCQmlBSnFJQUJCZ0FKcUVKRUJSUTBBSUFBb0Fyd0JJQUVRTnlBQ2FrWUVRQ0FCRURjaEF5QUJJQUVRTjBFQmRCQkJJQUVnQVJCUkVFRWdBQ0FESUFGQkFCQkFJZ0pxTmdLOEFRc2dBRUdJQW1vUWFTQUdJQUlnQUVHOEFXb2dBRUVJYWlBQUxBRC9BU0FBUWRBQmFpQUFRUkJxSUFCQkRHcEJ3TGdERU1FQ0RRQWdBRUdJQW1vUWRob01BUXNMQWtBZ0FFSFFBV29RTjBVTkFDQUFLQUlNSWdNZ0FFRVFhbXRCbndGS0RRQWdBQ0FEUVFScU5nSU1JQU1nQUNnQ0NEWUNBQXNnQlNBQ0lBQW9BcndCSUFRZ0JoREZCemNEQUNBQVFkQUJhaUFBUVJCcUlBQW9BZ3dnQkJDT0FTQUFRWWdDYWlBQVFZQUNhaEI3QkVBZ0JDQUVLQUlBUVFKeU5nSUFDeUFBS0FLSUFpRUNJQUVRT0JvZ0FFSFFBV29RT0JvZ0FFR1FBbW9rQUNBQ0N3Y0FJQUFvQWd3TGxRTUJBWDhqQUVHUUFtc2lBQ1FBSUFBZ0FqWUNnQUlnQUNBQk5nS0lBaUFERU5vQklRWWdBRUhRQVdvZ0F5QUFRZjhCYWhEdkFpQUFRY0FCYWhCRUlnRWdBUkJSRUVFZ0FDQUJRUUFRUUNJQ05nSzhBU0FBSUFCQkVHbzJBZ3dnQUVFQU5nSUlBMEFDUUNBQVFZZ0NhaUFBUVlBQ2FoQ1JBVVVOQUNBQUtBSzhBU0FCRURjZ0FtcEdCRUFnQVJBM0lRTWdBU0FCRURkQkFYUVFRU0FCSUFFUVVSQkJJQUFnQXlBQlFRQVFRQ0lDYWpZQ3ZBRUxJQUJCaUFKcUVHa2dCaUFDSUFCQnZBRnFJQUJCQ0dvZ0FDd0Evd0VnQUVIUUFXb2dBRUVRYWlBQVFReHFRY0M0QXhEQkFnMEFJQUJCaUFKcUVIWWFEQUVMQ3dKQUlBQkIwQUZxRURkRkRRQWdBQ2dDRENJRElBQkJFR3ByUVo4QlNnMEFJQUFnQTBFRWFqWUNEQ0FESUFBb0FnZzJBZ0FMSUFVZ0FpQUFLQUs4QVNBRUlBWVF4Z2MyQWdBZ0FFSFFBV29nQUVFUWFpQUFLQUlNSUFRUWpnRWdBRUdJQW1vZ0FFR0FBbW9RZXdSQUlBUWdCQ2dDQUVFQ2NqWUNBQXNnQUNnQ2lBSWhBaUFCRURnYUlBQkIwQUZxRURnYUlBQkJrQUpxSkFBZ0Fnc0xyYzBEVEFCQmdBZ0x1VGxtYzJWMEFDVnpMeVZ6QUNWekxpVnpBR1JsWW5WbkFHRnNiRzlqWVhSdmNqeFVQam82WVd4c2IyTmhkR1VvYzJsNlpWOTBJRzRwSUNkdUp5QmxlR05sWldSeklHMWhlR2x0ZFcwZ2MzVndjRzl5ZEdWa0lITnBlbVVBZDJJQUpXUGloTG52dUk5YmQyVmlZWEpyYVhRdGFXNW1ienBkQUNWdExTVmtMU1ZaTFNWSUxTVk5MU1ZUQUUxaGNtdGxjaUJQU3k0QUxBQkJjM05sY25ScGIyNGdZSGdnUGowZ2JVMXBibGhnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQjNhV1IwYUNBK1BTQTFZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2QybGtkR2dnUGowZ01XQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhkcFpIUm9JRDRnTUdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSEI1Y21GdGFXUXRQbk5wZW1Vb0tTQStJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnRVM1JoY25SVWFXMWxJRDQ5SURCZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0FvYzNKalgzZHBaSFJvSlRJcElEMDlJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnBiUzUzYVdSMGFDZ3BJRDA5SUdsdExuTjBaWEFvS1M5emFYcGxiMllvWm14dllYUXBZQ0JtWVdsc1pXUWdhVzRnQUNBSkNnMEFSWEp5YjNJNklHMWhiR3h2WXdvQVJYSnliM0lnTVRvZ2FXTndSMlYwU1c1cGRGaDNNbGhqQ2dBZ1BUMDlJRzFoZEhKcGVDQW9KV1FzSldRcElEMDlQUW9BSUQwOVBTQjJaV04wYjNJZ0tDVmtLU0E5UFQwS0FEOC9QeUF4Q2dCRmNuSnZjam9nYkdGaVpXeHBibWNnZDI5eWF5QnZkbVZ5Wm14dmR5NEtBQ01qSXlCR1pXRjBkWEpsSUdOaGJtUnBaR0YwWlhNZ1ptOXlJSFJ5WVdOcmFXNW5JR0Z5WlNCdmRtVnlabXh2ZHk0S0FHRnlaMnhEWVcxbGNtRkdjblZ6ZEhWdFVrZ29LVG9nWVhKUVlYSmhiVVJsWTI5dGNFMWhkQ2dwSUdsdVpHbGpZWFJsWkNCd1lYSmhiV1YwWlhJZ1pYSnliM0l1Q2dCcmNHMUVaV3hsZEdWU1pXWkVZWFJoVTJWMEtDazZJRTVWVEV3Z2NtVm1SR0YwWVZObGRGQjBjaTl5WldaSmJXRm5aUzRLQUZOMFlYSjBJSFJ5WVdOcmFXNW5YM1JvY21WaFpDQWpKV1F1Q2dCUGRYUWdiMllnYldWdGIzSjVJU0VLQUVSaGRHRWdiblZ0SUdWeWNtOXlJU0VLQUdOdmJHOXlPaUFqTmpZME5EQXdPeUJpWVdOclozSnZkVzVrTFdOdmJHOXlPaUFqWm1abVpqazVPeUJpYjNKa1pYSXRjbUZrYVhWek9pQTBjSGc3SUhCaFpHUnBibWM2SURKd2VBQjNBRWxFSUdGc2NtVmhaSGtnWlhocGMzUnpBQ1Z6SlhNQUpYTXVKWE1BY2dBdmFHOXRaUzkzWVd4MFpYSXZhMkZzZDJGc2RDMW5hWFJvZFdJdmFuTmhjblJ2YjJ4cmFYUk9SbFF2WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdlpHVjBaV04wYjNKekwyOXlhV1Z1ZEdGMGFXOXVYMkZ6YzJsbmJtMWxiblF1WTNCd0FDOW9iMjFsTDNkaGJIUmxjaTlyWVd4M1lXeDBMV2RwZEdoMVlpOXFjMkZ5ZEc5dmJHdHBkRTVHVkM5bGJYTmpjbWx3ZEdWdUwxZGxZa0ZTUzJsMFRHbGlMMnhwWWk5VFVrTXZTMUJOTDBaeVpXRnJUV0YwWTJobGNpOW1jbUZ0WlhkdmNtc3ZkR2x0WlhKekxtTndjQUF2YUc5dFpTOTNZV3gwWlhJdmEyRnNkMkZzZEMxbmFYUm9kV0l2YW5OaGNuUnZiMnhyYVhST1JsUXZaVzF6WTNKcGNIUmxiaTlYWldKQlVrdHBkRXhwWWk5c2FXSXZVMUpETDB0UVRTOUdjbVZoYTAxaGRHTm9aWEl2WkdWMFpXTjBiM0p6TDJoaGNuSnBjeTVqY0hBQUwyaHZiV1V2ZDJGc2RHVnlMMnRoYkhkaGJIUXRaMmwwYUhWaUwycHpZWEowYjI5c2EybDBUa1pVTDJWdGMyTnlhWEIwWlc0dlYyVmlRVkpMYVhSTWFXSXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwyUmxkR1ZqZEc5eWN5OUViMGRmYzJOaGJHVmZhVzUyWVhKcFlXNTBYMlJsZEdWamRHOXlMbU53Y0FBdmFHOXRaUzkzWVd4MFpYSXZhMkZzZDJGc2RDMW5hWFJvZFdJdmFuTmhjblJ2YjJ4cmFYUk9SbFF2WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdmJXRjBZMmhsY25NdmFHOTFaMmhmYzJsdGFXeGhjbWwwZVY5MmIzUnBibWN1WTNCd0FDOW9iMjFsTDNkaGJIUmxjaTlyWVd4M1lXeDBMV2RwZEdoMVlpOXFjMkZ5ZEc5dmJHdHBkRTVHVkM5bGJYTmpjbWx3ZEdWdUwxZGxZa0ZTUzJsMFRHbGlMMnhwWWk5VFVrTXZTMUJOTDBaeVpXRnJUV0YwWTJobGNpOW1jbUZ0WlhkdmNtc3ZhVzFoWjJVdVkzQndBQzlvYjIxbEwzZGhiSFJsY2k5cllXeDNZV3gwTFdkcGRHaDFZaTlxYzJGeWRHOXZiR3RwZEU1R1ZDOWxiWE5qY21sd2RHVnVMMWRsWWtGU1MybDBUR2xpTDJ4cFlpOVRVa012UzFCTkwwWnlaV0ZyVFdGMFkyaGxjaTlrWlhSbFkzUnZjbk12WjJGMWMzTnBZVzVmYzJOaGJHVmZjM0JoWTJWZmNIbHlZVzFwWkM1amNIQUFMMmh2YldVdmQyRnNkR1Z5TDJ0aGJIZGhiSFF0WjJsMGFIVmlMMnB6WVhKMGIyOXNhMmwwVGtaVUwyVnRjMk55YVhCMFpXNHZWMlZpUVZKTGFYUk1hV0l2YkdsaUwxTlNReTlMVUUwdlJuSmxZV3ROWVhSamFHVnlMMlJsZEdWamRHOXljeTl3ZVhKaGJXbGtMbU53Y0FCcGJtWnZBRVZ5Y205eU9pQnBZM0JIWlhSS1gxVmZXR01BZDJJQWNtSUFRVkpmVUVsWVJVeGZSazlTVFVGVVgxSkhRZ0JRWVhSMFpYSnVJR1Y0ZEhKaFkzUnBiMjRnWm1GcGJHVmtMZ0JCYzNObGNuUnBiMjRnWUhCNWNtRnRhV1JnSUdaaGFXeGxaQ0JwYmlBQVZISmhZMnRwYm1jZ2RHaHlaV0ZrSUQwZ0pXUUtBRk5KV2tVZ1BTQWxaQ3dnSldRS0FFVnljbTl5SURJNklHbGpjRWRsZEVsdWFYUllkekpZWXdvQVB6OC9JRElLQUVWeWNtOXlPaUIxYm5OMWNIQnZjblJsWkNCd2FYaGxiQ0JtYjNKdFlYUXVDZ0JWYm10dWIzZHVJRzl5SUhWdWMzVndjRzl5ZEdWa0lHeGhZbVZzYVc1bklIUm9jbVZ6YUc5c1pDQnRiMlJsSUhKbGNYVmxjM1JsWkM0Z1UyVjBJSFJ2SUcxaGJuVmhiQzRLQUd0d2JVUmxiR1YwWlZKbFprUmhkR0ZUWlhRb0tUb2dNQ0I0YzJsNlpTOTVjMmw2WlM5a2NHa3VDZ0JGY25KdmNpQW9KV1FwT2lCMWJtRmliR1VnZEc4Z2IzQmxiaUJqWVcxbGNtRWdjR0Z5WVcxbGRHVnljeUJtYVd4bElDSWxjeUlnWm05eUlIZHlhWFJwYm1jdUNnQkZjbkp2Y2pvZ1RsVk1UQ0J3WVhSMFNHRnVaR3hsTGdvQVJXNWtJSFJ5WVdOcmFXNW5YM1JvY21WaFpDQWpKV1F1Q2dCUGRYUWdiMllnYldWdGIzSjVJU0VLQUhJQUwyaHZiV1V2ZDJGc2RHVnlMMnRoYkhkaGJIUXRaMmwwYUhWaUwycHpZWEowYjI5c2EybDBUa1pVTDJWdGMyTnlhWEIwWlc0dlYyVmlRVkpMYVhSTWFXSXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwyMWhkR05vWlhKekwyWnlaV0ZyTG1nQWQyRnlibWx1WndBZ0pURXdad0JDZFdsc1pDQlFlWEpoYldsa0FDVTBaQUIzWWdCeVlnQWxZL0NmbXFsYmQyVmlZWEpyYVhRdFpYSnliM0k2WFFCQlVsOVFTVmhGVEY5R1QxSk5RVlJmUWtkU0FFMUJUbFZCVEFCSFpXNWxjbWxqSUdWeWNtOXlJR1IxY21sdVp5QnRZWFJqYUdsdVp5QndhR0Z6WlM0QUlHeHBibVVnQUNWekpYTUtBRVpwYkdVZ2IzQmxiaUJsY25KdmNpNGdKWE1LQUVScGMzUnZjblJwYjI0Z1ptRmpkRzl5T2lCck1UMGxNUzR4TUdZc0lHc3lQU1V4TGpFd1ppd2djREU5SlRFdU1UQm1MQ0J3TWowbE1TNHhNR1lLQUVWeWNtOXlPaUJ0WVd4c2IyTUtBRVZ5Y205eUlETTZJR2xqY0VkbGRFbHVhWFJZZHpKWVl3b0FSWEp5YjNJZ2FXTndSMlYwU2w5VlgxTUtBRDA5UFQwOVBTQWxjeUE5UFQwOVBUMDlQUW9BUHo4L0lETUtBRVZ5Y205eU9pQmpZVzRuZENCc2IyRmtJSEJoZEhSbGNtNGdabkp2YlNCT1ZVeE1JR0oxWm1abGNpNEtBR3R3YlZObGRGSmxaa1JoZEdGVFpYUW9LVG9nVGxWTVRDQnJjRzFJWVc1a2JHVXZabWxzWlc1aGJXVXVDZ0JGY25KdmNpQnpZWFpwYm1jZ1ptVmhkSFZ5WlNCdFlYQTZJR1Z5Y205eUlIZHlhWFJwYm1jZ1pHRjBZUzRLQUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BWTI5c2IzSTZJQ05tWm1abVptWTdJR0poWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWmpBeE1ERTdJR0p2Y21SbGNpMXlZV1JwZFhNNklEUndlRHNnY0dGa1pHbHVaem9nTW5CNEFFVjRkSEpoWTNRZ1JtVmhkSFZ5WlhNQVpYSnliM0lBUm5KbFlXc2dabVZoZEhWeVpYTWdMU0FsWkFCeVlnQkJWVlJQWDAxRlJFbEJUZ0JCVWw5UVNWaEZURjlHVDFKTlFWUmZVa2RDUVFCSmJuTjFabVpwWTJsbGJuUWdZMjl1ZEhKaGMzUWdaSFZ5YVc1bklHMWhkR05vYVc1bkxnQWxOeTQxWmlBQUlHeHBibVVnQUVWeWNtOXlJRzl3Wlc1cGJtY2dabWxzWlNBbkpYTW5PaUFBSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5nOUpXWXNJR1o1UFNWbUxDQjRNRDBsWml3Z2VUQTlKV1lzSUhNOUpXWUtBRVZ5Y205eUlEUTZJR2xqY0VkbGRFbHVhWFJZZHpKWVl3b0FSWEp5YjNJZ2FXTndSMlYwVlY5bWNtOXRYMWhmWW5sZlRXRjBXREpWQ2dCRmNuSnZjaUJoYkd4dlkyRjBhVzVuSUcxbGJXOXllUzRLQUVWeWNtOXlPaUJ2ZFhRZ2IyWWdiV1Z0YjNKNUxnb0FSWEp5YjNJNklGVnVZV0pzWlNCMGJ5QnZjR1Z1SUdacGJHVWdKeVZ6SnlCbWIzSWdkM0pwZEdsdVp5NEtBRVZ5Y205eU9pQjFibUZpYkdVZ2RHOGdiM0JsYmlCbWFXeGxJQ2NsY3lWekp5Qm1iM0lnY21WaFpHbHVaeTRLQUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BVTNSbGNDQnphWHBsSUcxMWMzUWdZbVVnWlhGMVlXd2dkRzhnZDJsa2RHZ2dabTl5SUc1dmR3QmJKWE5kSUZzbGMxMGdXeVZ6WFNBNklFWnZkVzVrSUNWa0lHWmxZWFIxY21WekFDVnpBRmRwWkhSb0lHTmhibTV2ZENCaVpTQjZaWEp2QUZOdmRYSmpaU0IzYVdSMGFDQnRkWE4wSUdKbElHVjJaVzRBU1cxaFoyVWdhWE1nZEc5dklITnRZV3hzQUhnZ2IzVjBJRzltSUhKaGJtZGxBRU5zYjJOcklHaGhjeUJ1YjNRZ1ltVmxiaUJ6ZEdGeWRHVmtBRkI1Y21GdGFXUWdhWE1nYm05MElHRnNiRzlqWVhSbFpBQnlZZ0FsWStLYW9PKzRqMXQzWldKaGNtdHBkQzEzWVhKdU9sMEFRVlZVVDE5UFZGTlZBRUZTWDFCSldFVk1YMFpQVWsxQlZGOUNSMUpCQUhkd0lHMTFjM1FnWW1VZ1lYUWdiR1ZoYzNRZ01RQkNZWEpqYjJSbElHMWhkR05vYVc1bklHTnZkV3hrSUc1dmRDQm1hVzVrSUdOdmNuSmxZM1FnWW1GeVkyOWtaU0JzYjJOaGRHOXlJSEJoZEhSbGNtNHVBRnNsYzEwZ0FEb2dBQ1Z6SlhNS0FFUnBjM1J2Y25ScGIyNGdabUZqZEc5eUlEMGdKV1lnSldZZ0pXWWdKV1lnSldZZ0pXWUtBRVZ5Y205eUlEVTZJR2xqY0VkbGRFbHVhWFJZZHpKWVl3b0FSWEp5YjNJZ2FXTndSMlYwV0dOZlpuSnZiVjlZZDE5aWVWOU5ZWFJZZHpKWVl3b0FSWEp5YjNJZ2NtVmhaR2x1WnlCcGJXRm5aVk5sZEM0S0FFVnljbTl5SUhkb2FXeGxJR0ZrWkdsdVp5QnlaV1psY21WdVkyVWdaR0YwWVNCelpYUTZJR3R3YlVkbGJsSmxaa1JoZEdGVFpYUW9LU0JtWVdsc1pXUXVDZ0JGY25KdmNpQnZjR1Z1YVc1bklDY2xjeWN1Q2dCRFlXNG5kQ0J2Y0dWdUlFcFFSVWNnWm1sc1pTQW5KWE1uQ2dCUGRYUWdiMllnYldWdGIzSjVJU0VLQUZCaGRIUmxjbTRnUkdGMFlTQnlaV0ZrSUdWeWNtOXlJU0VLQUZKbFlXUWdaWEp5YjNJaElRb0FZMjlzYjNJNklDTTNOelEwTURBN0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVptT1RrN0lHSnZjbVJsY2kxeVlXUnBkWE02SURSd2VEc2djR0ZrWkdsdVp6b2dNbkI0QUNWbUFIZGlBRUZTWDFCSldFVk1YMFpQVWsxQlZGOUJRa2RTQUZCNWNtRnRhV1FnYVhNZ1RsVk1UQUJCVlZSUFgwRkVRVkJVU1ZaRkFFSmhjbU52WkdVZ2JXRjBZMmhwYm1jZ1pYSnliM0lnWkdWMFpXTjBhVzl1TDJOdmNuSmxZM1JwYjI0Z1ptOTFibVFnZFc1eVpXTnZkbVZ5WVdKc1pTQmxjbkp2Y2k0QVJYSnliM0lnWTNKbFlYUnBibWNnWm5Wc2JDQm1hV3hsSUhCaGRHZ2dabkp2YlNBbkpYTW5JR0Z1WkNBbkpYTW5BRUZ6YzJWeWRHbHZiaUJnZUNBOElHMU5ZWGhZWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdhR1ZwWjJoMElENDlJRFZnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQm9aV2xuYUhRZ1BqMGdNV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHaGxhV2RvZENBK0lEQmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCdFNXMWhaMlZ6TG5OcGVtVW9LU0ErSURCZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0I0SUQ0OUlEQmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCdFUzUnZjRlJwYldVZ1BqMGdNR0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHUnpkQ0FoUFNBd1lDQm1ZV2xzWldRZ2FXNGdBQ0JKVGtaUElDQUFKWE1sY3dvQVJHbHpkRzl5ZEdsdmJpQm1ZV04wYjNJZ1BTQWxaaUFsWmlBbFppQWxaaUFsWmdvQVJYSnliM0lnUFNBbFpnb0FSWEp5YjNJZ05qb2dhV053UjJWMFNXNXBkRmgzTWxoakNnQWdJQ0FnSUNBZ0lDQkpiV0ZuWlZOcGVtVWdQU0FsTjJSYmNHbDRaV3hkQ2dBOVBUMDlQVDA5UFQwZ0pXUWdQVDA5UFQwOVBUMDlQVDBLQUVsdFlXZGxjMlYwSUdOdmJuUmhhVzV6SUNWa0lHbHRZV2RsY3k0S0FFVnljbTl5T2lCVmJtRmliR1VnZEc4Z2IzQmxiaUJtYVd4bElDY2xjeWNnWm05eUlISmxZV1JwYm1jdUNnQkZjbkp2Y2lBb0pXUXBPaUIxYm1GaWJHVWdkRzhnYjNCbGJpQmpZVzFsY21FZ2NHRnlZVzFsZEdWeWN5Qm1hV3hsSUNJbGN5SWdabTl5SUhKbFlXUnBibWN1Q2dCRmNuSnZjaUJ5WldGa2FXNW5JSEJoZEhSbGNtNGdabWxzWlNBbkpYTW5MZ29BUW5WcGJHUWdTVzVrWlhnQVNHVnBaMmgwSUdOaGJtNXZkQ0JpWlNCNlpYSnZBQ1ZtSUNWbUlDVm1JQ1ZtQUhnZ2JYVnpkQ0JpWlNCd2IzTnBkR2wyWlFCTVlYQnNZV05wWVc0Z2NIbHlZVzFwWkNCb1lYTWdibTkwSUdKbFpXNGdZV3hzYjJOaGRHVmtBRU5zYjJOcklHaGhjeUJ1YjNRZ1ltVmxiaUJ6ZEc5d2NHVmtBRUZTWDFCSldFVk1YMFpQVWsxQlZGOU5UMDVQQUVSbGMzUnBibUYwYVc5dUlHbHpJRTVWVEV3QVFWVlVUMTlDVWtGRFMwVlVTVTVIQUdod0lHMTFjM1FnWW1VZ1lYUWdiR1ZoYzNRZ01RQkZjbkp2Y2lBb0pXUXBPaUIxYm1GaWJHVWdkRzhnWkdWMFpYSnRhVzVsSUdacGJHVWdiR1Z1WjNSb0xnQk5ZWFJqYUdsdVp5QmpiMjVtYVdSbGJtTmxJR04xZEc5bVppQjJZV3gxWlNCdWIzUWdjbVZoWTJobFpDNEFRWE56WlhKMGFXOXVJR0I1SUQ0OUlHMU5hVzVaWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdhVzFoWjJVdWRIbHdaU2dwSUQwOUlFbE5RVWRGWDFWSlRsUTRZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2MzUnZjbVV1YzJsNlpTZ3BJRDA5SUhCdmFXNTBjeTV6YVhwbEtDbGdJR1poYVd4bFpDQnBiaUFBSlhNbGN3b0FSR2x6ZEc5eWRHbHZiaUJtWVdOMGIzSWdQU0FsWmlBbFppQWxaaUFsWmdvQVJYSnliM0lnTnpvZ2FXTndSMlYwU1c1cGRGaDNNbGhqQ2dCRmVIUnlZV04wWldRZ1ptVmhkSFZ5WlhNZ1BTQWxOMlJiY0dsNFpXeGRDZ0JGY25KdmNpQnBZM0F5UjJWMFZGTUtBRVpoYkd4cGJtY2dZbUZqYXlCMGJ5QnlaV0ZrYVc1bklDY2xjeVZ6SnlCcGJpQkJVbFJ2YjJ4TGFYUWdkalF1ZUNCbWIzSnRZWFF1Q2dCRmNuSnZjaUJwYmlCdmNHVnVhVzVuSUNjbGN5Y2dhVzRnZW1sd1ptbHNaUzRLQUVWeWNtOXlJSEpsWVdScGJtY2dTbEJGUnlCbWFXeGxMZ29BUlhKeWIzSWdkMmhwYkdVZ1lXUmthVzVuSUhKbFptVnlaVzVqWlNCa1lYUmhJSE5sZERvZ2EzQnRUV1Z5WjJWU1pXWkVZWFJoVTJWMEtDa2dabUZwYkdWa0xnb0FSWEp5YjNJZ2MyRjJhVzVuSUdabFlYUjFjbVVnYzJWME9pQmxjbkp2Y2lCM2NtbDBhVzVuSUdSaGRHRXVDZ0JQZFhRZ2IyWWdiV1Z0YjNKNUlTRUtBQUFBQUFBVERnQUFEQkFBQUhvU0FBQ2hGQUFBTWhnQUFGc2xjMTBnV3lWelhTQmJKWE5kSURvZ0pYTTZJQ1ZtSUcxekFFbHRZV2RsSUcxMWMzUWdZbVVnWjNKaGVYTmpZV3hsQUhrZ2IzVjBJRzltSUhKaGJtZGxBRVpsWVhSMWNtVWdjM1J2Y21VZ2FHRnpJRzV2ZENCaVpXVnVJR0ZzYkc5allYUmxaQUFsWkFCM1lnQkJVbDlRU1ZoRlRGOUdUMUpOUVZSZlFWSkhRZ0JOWVhocGJYVnRJR0ZzYkc5M1lXSnNaU0J3YjNObElHVnljbTl5SUdWNFkyVmxaR1ZrTGdCQmMzTmxjblJwYjI0Z1lITjBaWEFnUGowZ2QybGtkR2hnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnBLekVyWTJoMWJtdGZjMmw2WlNBOElIZHBaSFJvWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdjSGx5WVcxcFpHQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhCNWNtRnRhV1F0UG01MWJVOWpkR0YyWlhNb0tTQStJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnpjbU1nSVQwZ01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhnZ1BDQnRSM0poWkdsbGJuUnpXMjlqZEdGMlpTcHRUblZ0VTJOaGJHVnpVR1Z5VDJOMFlYWmxLM05qWVd4bFhTNTNhV1IwYUNncFlDQm1ZV2xzWldRZ2FXNGdBRVZ5Y205eUlHbHVJRzl3Wlc1cGJtY2dKeVZ6SnlCbWIzSWdjbVZoWkdsdVp3b0FJRVpwYkhSbGNtVmtJR1psWVhSMWNtVnpJRDBnSlRka1czQnBlR1ZzWFFvQVRHRmlaV3hwYm1jZ2RHaHlaWE5vYjJ4a0lHMXZaR1VnYzJWMElIUnZJQ1Z6TGdvQVJYSnliM0lnY21WaFpHbHVaeUJLVUVWSElHWnBiR1VnYUdWaFpHVnlMZ29BUlhKeWIzSTZJSE4xY0hCc2FXVmtJR1pwYkdVZ1pHOWxjeUJ1YjNRZ1lYQndaV0Z5SUhSdklHSmxJR0Z1SUVGU1ZHOXZiRXRwZENCallXMWxjbUVnY0dGeVlXMWxkR1Z5SUdacGJHVXVDZ0JyY0cxRVpXeGxkR1ZTWldaRVlYUmhVMlYwS0NrNklFNVZURXdnY21WbVJHRjBZVk5sZEZCMGNqRXZjbVZtUkdGMFlWTmxkRkIwY2pJdUNnQkRZVzRuZENCeVpXRmtJRXBRUlVjZ1ptbHNaU0FuSlhNbkNnQkJVbDlRU1ZoRlRGOUdUMUpOUVZSZk1uWjFlUUJRZVhKaGJXbGtJR1J2WlhNZ2JtOTBJR052Ym5SaGFXNGdZVzU1SUd4bGRtVnNjd0JUZEdWd0lHMTFjM1FnWW1VZ1ozSmxZWFJsY2lCMGFHRnVJRzl5SUdWeGRXRnNJSFJvWlNCM2FXUjBhQUI0SUcxMWMzUWdZbVVnYkdWemN5QjBhR0Z1SUhSb1pTQnBiV0ZuWlNCM2FXUjBhQUF2YUc5dFpTOTNZV3gwWlhJdmEyRnNkMkZzZEMxbmFYUm9kV0l2YW5OaGNuUnZiMnhyYVhST1JsUXZaVzF6WTNKcGNIUmxiaTlYWldKQlVrdHBkRXhwWWk5c2FXSXZVMUpETDB0UVRTOUdjbVZoYTAxaGRHTm9aWEl2YldGMFkyaGxjbk12ZG1semRXRnNYMlJoZEdGaVlYTmxMbWdBUlhoMFpXNWthVzVuSUdKbGVXOXVaQ0IwYUdVZ2QybGtkR2dnYjJZZ2RHaGxJR2x0WVdkbEFGTnZkWEpqWlNCcGN5Qk9WVXhNQUVWeWNtOXlJQ2dsWkNrNklIVnVZV0pzWlNCMGJ5QnlaV0ZrSUdaeWIyMGdabWxzWlM0QVRYVnNkR2t0YldGeWEyVnlJSEJ2YzJVZ1pYSnliM0lnZG1Gc2RXVWdaWGhqWldWa1pXUXVBQTBsTkdRdkpUUmtMZ0JCYzNObGNuUnBiMjRnWUhrZ1BDQnRUV0Y0V1dBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR2x0WVdkbExtTm9ZVzV1Wld4ektDa2dQVDBnTVdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZRzUxYlY5d2IybHVkSE1nUFQwZ2NHOXBiblJ6TG5OcGVtVW9LV0FnWm1GcGJHVmtJR2x1SUFBbE55NDFaaUFBSUVsT1JrOGdJQUJyY0cxVFpYUlNaV1pFWVhSaFUyVjBLQ2s2SUU1VlRFd2dhM0J0U0dGdVpHeGxMM0psWmtSaGRHRlRaWFF1Q2dCcmNHMUVaV3hsZEdWU1pXWkVZWFJoVTJWMEtDazZJRTVWVEV3Z2NtVm1SR0YwWVZObGRGQjBjaTRLQUVWeWNtOXlPaUIxYm1GaWJHVWdkRzhnYjNCbGJpQm1hV3hsSUNjbGN5Y2dabTl5SUhkeWFYUnBibWN1Q2dCRmNuSnZjam9nVlc1emRYQndiM0owWldRZ2NHbDRaV3dnWm05eWJXRjBJQ2dsWkNrZ2NtVnhkV1Z6ZEdWa0xnb0FSWEp5YjNJZ2FXNGdjbVZoWkdsdVp5QW5KWE1uTGdvQUNpTWpJeUJUZFhKbVlXTmxJRTV2TGlWa0lDTWpJd29BUWNUQkFBdWRIUUVBQUFBQkFBQUFBUUFBQUFBQUFBRC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vd0FBQUFBQkFBQUFBUUFBQUFFQUFBQUFBQUFBLy8vLy8wRlNYMUJKV0VWTVgwWlBVazFCVkY5NWRYWnpBQ1Z6QUVsdFlXZGxJRzExYzNRZ2FHRjJaU0F4SUdOb1lXNXVaV3dBVTJodmRXeGtJR0psSUhOaGJXVWdjMmw2WlFCU1pXcGxZM1JsWkNCbWNtVnhkV1Z1ZEd4NUlHMXBjM0psWTI5bmJtbHpaV1FnYldGMGNtbDRJRzFoY210bGNpNEFRWE56WlhKMGFXOXVJR0JpZFdOclpYUmJNRjB1Wm1seWMzUWdQajBnWW5WamEyVjBXMjVkTG1acGNuTjBZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ1lXNW5iR1VnUGlBdFVFbGdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCamFHRnVibVZzY3lBK0lEQmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCemNtTmZkMmxrZEdnZ1BpQXdZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2VTQStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdaSGx1WVcxcFkxOWpZWE4wUEdOdmJuTjBJRUpwYm05dGFXRnNVSGx5WVcxcFpETXlaaW8rS0hCNWNtRnRhV1FwWUNCbVlXbHNaV1FnYVc0Z0FDQnNhVzVsSUFCcmNHMVRZWFpsVW1WbVJHRjBZVk5sZENncE9pQk9WVXhNSUdacGJHVnVZVzFsTDNKbFprUmhkR0ZUWlhRdUNnQnJjRzFUWlhSU1pXWkVZWFJoVTJWMEtDazZJSEpsWmtSaGRHRlRaWFF1Q2dCRmNuSnZjam9nYzNWd2NHeHBaV1FnWW5WbVptVnlJR1J2WlhNZ2JtOTBJR0Z3Y0dWaGNpQjBieUJpWlNCQlVsUnZiMnhMYVhRZ1kyRnRaWEpoSUhCaGNtRnRaWFJsY25NdUNnQkZjbkp2Y2lCcGJpQjNjbWwwYVc1bklDY2xjeWNnYVc0Z2RHaGxJSHBwY0dacGJHVXVDZ0JGY25KdmNpQnpZWFpwYm1jZ2FXMWhaMlVnYzJWME9pQmxjbkp2Y2lCM2NtbDBhVzVuSUdSaGRHRXVDZ0JPZFcxaVpYSWdiMllnWTJoaGJtNWxiSE1nWTJGdWJtOTBJR0psSUhwbGNtOEFlU0J0ZFhOMElHSmxJSEJ2YzJsMGFYWmxBRmRwWkhSb0lHMTFjM1FnWW1VZ2NHOXphWFJwZG1VQVlXNW5iR1VnYjNWMElHOW1JSEpoYm1kbEFFOXViSGtnWW1sdWIyMXBZV3dnY0hseVlXMXBaQ0JwY3lCemRYQndiM0owWldRQWJuUm9YMlZzWlcxbGJuUWdabUZwYkdWa0FFRlNYMUJKV0VWTVgwWlBVazFCVkY5U1IwSmZOVFkxQUVGemMyVnlkR2x2YmlCZ2JWQjVjbUZ0YVdRdWMybDZaU2dwSUQwOUlHMU9kVzFQWTNSaGRtVnpLbTFPZFcxVFkyRnNaWE5RWlhKUFkzUmhkbVZnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnZZM1JoZG1VZ1BqMGdNR0FnWm1GcGJHVmtJR2x1SUFBNklBQkdhV1ZzWkMxdlppMTJhV1YzSUhabGNuUnBZMkZzSUQwZ0pTNHhaaXdnYUc5eWFYcHZiblJoYkNBOUlDVXVNV1lnWkdWbmNtVmxjeXdnWVhOd1pXTjBJSEpoZEdsdklEMGdKUzR6WmdvQVRXRjRJR1psWVhSMWNtVWdQU0FsWkFvQUlDQlNaV0ZrSUVsdFlXZGxVMlYwTGdvQVJYSnliM0lnYzJGMmFXNW5JRXRRVFNCa1lYUmhPaUIxYm1GaWJHVWdkRzhnYjNCbGJpQm1hV3hsSUNjbGN5VnpKWE1uSUdadmNpQjNjbWwwYVc1bkxnb0FSWEp5YjNJZ0tDVmtLVG9nZFc1aFlteGxJSFJ2SUc5d1pXNGdaWGgwWlhKdVlXd2djR0Z5WVcxbGRHVnljeUJtYVd4bElDSWxjeUlnWm05eUlIZHlhWFJwYm1jdUNnQkZjbkp2Y2lCcGJpQmpiRzl6YVc1bklDVnpJR2x1SUhSb1pTQjZhWEJtYVd4bExnb0FRWFYwYnlCMGFISmxjMmh2YkdRZ0tHSnlZV05yWlhRcElHMWhjbXRsY2lCamIzVnVkSE1nTFZzbE0yUTZJQ1V6WkYwZ1d5VXpaRG9nSlROa1hTQmJKVE5rT2lBbE0yUmRLeTRLQUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BVUhseVlXMXBaQ0JvWVhNZ2JtOTBJR0psWlc0Z1lXeHNiMk5oZEdWa0lIbGxkQUF2YUc5dFpTOTNZV3gwWlhJdmEyRnNkMkZzZEMxbmFYUm9kV0l2YW5OaGNuUnZiMnhyYVhST1JsUXZaVzF6WTNKcGNIUmxiaTlYWldKQlVrdHBkRXhwWWk5c2FXSXZVMUpETDB0UVRTOUdjbVZoYTAxaGRHTm9aWEl2WkdWMFpXTjBiM0p6TDJkaGRYTnphV0Z1WDNOallXeGxYM053WVdObFgzQjVjbUZ0YVdRdWFBQlFlWEpoYldsa0lHbHpJRTVWVEV3QVFWSmZVRWxZUlV4ZlJrOVNUVUZVWDFKSFFrRmZOVFUxTVFBdUFFRnpjMlZ5ZEdsdmJpQmdjRnN3WFNBK0lIQnRNVnN0TVYxZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JoYm1kc1pTQThQU0JRU1dBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR1F1ZEhsd1pTZ3BJRDA5SUVsTlFVZEZYMFl6TW1BZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSE55WTE5b1pXbG5hSFFnUGlBd1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnZVNBOElHMUhjbUZrYVdWdWRITmJiMk4wWVhabEttMU9kVzFUWTJGc1pYTlFaWEpQWTNSaGRtVXJjMk5oYkdWZExtaGxhV2RvZENncFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYlVSaGRHRXVaMlYwS0NsZ0lHWmhhV3hsWkNCcGJpQUFKVE5rT2lBb0pUTmtMQ1V6WkNrZ09pQWxaaUJ0YVc0OUpXWWdiV0Y0UFNWbUxDQnpaRDBsWmdvQWNHRm5aU0FsWkN3Z2FXMWhaMlVnYm5WdElDVmtMQ0J3YjJsdWRITWdMU0FsWkFvQVJYSnliM0lnS0NWa0tUb2dkVzVoWW14bElIUnZJRzl3Wlc0Z1pYaDBaWEp1WVd3Z2NHRnlZVzFsZEdWeWN5Qm1hV3hsSUNJbGN5SWdabTl5SUhKbFlXUnBibWN1Q2dCQmRYUnZJSFJvY21WemFHOXNaQ0FvWW5KaFkydGxkQ2tnWVdScWRYTjBaV1FnZEdoeVpYTm9iMnhrSUhSdklDVmtMZ29BUlhKeWIzSWdiM0JsYm1sdVp5Qm1hV3hsSUNjbGN5NXBjMlYwSnk0S0FFVnljbTl5SUdsdUlHTnNiM05wYm1jZ0p5VnpKeTRLQUhrZ2JYVnpkQ0JpWlNCc1pYTnpJSFJvWVc0Z2RHaGxJR2x0WVdkbElHaGxhV2RvZEFCSVpXbG5hSFFnYlhWemRDQmlaU0J3YjNOcGRHbDJaUUJQWTNSaGRtVWdiWFZ6ZENCaVpTQndiM05wZEdsMlpRQlBibXg1SUVZek1pQnBiV0ZuWlhNZ2MzVndjRzl5ZEdWa0FGTm9iM1ZzWkNCaVpTQnRZWGhwYldFQVJHRjBZU0J3YjJsdWRHVnlJR2x6SUU1VlRFd0FRVkpmVUVsWVJVeGZSazlTVFVGVVgxSkhRa0ZmTkRRME5BQkJjM05sY25ScGIyNGdZR1JsZEdWamRHOXlZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2MyTmhiR1VnUGowZ2JVMXBibE5qWVd4bFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYVcxaFoyVXVkMmxrZEdnb0tTQTlQU0J0VUhseVlXMXBaRnN3WFM1M2FXUjBhQ2dwWUNCbVlXbHNaV1FnYVc0Z0FGc2xJQzR6WmlBbElDNHpaaUFsSUM0elpsMGdXeVVnTmk0eFpsMEtBRVZ5Y205eUlDZ2xaQ2s2SUhWdVlXSnNaU0IwYnlCdmNHVnVJRzl3ZEdsallXd2djR0Z5WVcxbGRHVnljeUJtYVd4bElDSWxjeUlnWm05eUlIZHlhWFJwYm1jdUNnQnJjRzFUWlhSU1pXWkVZWFJoVTJWMFJtbHNaU2dwT2lCT1ZVeE1JR3R3YlVoaGJtUnNaUzltYVd4bGJtRnRaUzRLQUNBZ0lDQmxibVF1Q2dCQmRYUnZJSFJvY21WemFHOXNaQ0FvSlhNcElHRmthblZ6ZEdWa0lIUm9jbVZ6YUc5c1pDQjBieUFsWkM0S0FDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExRb0FRVkpmVUVsWVJVeGZSazlTVFVGVVh6UXlNSFlBYldWa2FXRnVBSE5qWVd4bElHOTFkQ0J2WmlCeVlXNW5aUUJKYldGblpTQnZaaUIzY205dVp5QnphWHBsSUdadmNpQndlWEpoYldsa0FGVnVZV0pzWlNCMGJ5QmhiR3h2WTJGMFpTQnBiV0ZuWlNCa1lYUmhBRVJsZEdWamRHOXlJR2x6SUU1VlRFd0FRWE56WlhKMGFXOXVJR0J2WTNSaGRtVWdQQ0J0VG5WdFQyTjBZWFpsYzJBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSEJiTUYwZ1BpQndiVEZiTUYxZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JwYlRFdWRIbHdaU2dwSUQwOUlFbE5RVWRGWDBZek1tQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdjdVkyaGhibTVsYkhNb0tTQTlQU0F5WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdjM0pqWDNOMFpYQWdQaUF3WUNCbVlXbHNaV1FnYVc0Z0FDVXpaQ3dnSlROa09pQnRZWGhmYzJsdElEMGdKV1lLQUNBZ1VtVmhaQ0JHWldGMGRYSmxVMlYwTGdvQVEyRnVibTkwSUdacGJtUWdkR2hsSUhCaFoyVWdabTl5SUhOcmFYQndhVzVuTGdvQVJYSnliM0lnS0NWa0tUb2dkVzVoWW14bElIUnZJRzl3Wlc0Z2IzQjBhV05oYkNCd1lYSmhiV1YwWlhKeklHWnBiR1VnSWlWeklpQm1iM0lnY21WaFpHbHVaeTRLQUVWeWNtOXlJSE5oZG1sdVp5QkxVRTBnWkdGMFlUb2daWEp5YjNJZ2QzSnBkR2x1WnlCa1lYUmhMZ29BVDNSemRRQlBZM1JoZG1VZ2JYVnpkQ0JpWlNCc1pYTnpJSFJvWVc0Z2JuVnRZbVZ5SUc5bUlHOWpkR0YyWlhNQVFWSmZVRWxZUlV4ZlJrOVNUVUZVWHpReU1HWUFVM1JsY0NCdGRYTjBJR0psSUhCdmMybDBhWFpsQUVsdWRtRnNhV1FnYVcxaFoyVWdkSGx3WlFCT2RXMWlaWElnYjJZZ1kyaGhibTVsYkhNZ2MyaHZkV3hrSUdKbElESUFRWE56WlhKMGFXOXVJR0J6WTJGc1pTQThJRzFOWVhoVFkyRnNaV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lIQmJNRjBnUGlCd2JURmJNVjFnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnBiVEl1ZEhsd1pTZ3BJRDA5SUVsTlFVZEZYMFl6TW1BZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSEI1Y21GdGFXUXRQbWx0WVdkbGN5Z3BMbk5wZW1Vb0tTQStJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnBiV0ZuWlM1b1pXbG5hSFFvS1NBOVBTQnRVSGx5WVcxcFpGc3dYUzVvWldsbmFIUW9LV0FnWm1GcGJHVmtJR2x1SUFBbE55NDBaaUFBYTNCdFRHOWhaRkpsWmtSaGRHRlRaWFFvS1RvZ1RsVk1UQ0JtYVd4bGJtRnRaUzl5WldaRVlYUmhVMlYwVUhSeUxnb0FhM0J0VFdGMFkyaHBibWNvS1RvZ1RsVk1UQ0JyY0cxSVlXNWtiR1V2YVc1SmJXRm5aVXgxYldFdUNnQkZjbkp2Y2lCdmNHVnVhVzVuSUdacGJHVWdKeVZ6TG1aelpYUW5MZ29BQUFFQUFBQUpBQUFBQlFBQUFBUUFBQUFEQUFBQUFnQkI4OTRBQzY1S0FRQUJBUUVBQWdULy93VURBUUFDL3dZSC93TUJBZ0lEQWdNQ0F3TUEvd1FHQndYL0FRUUZCQVFGQlFRRkJ3WUdCZ2NIQndiL0FnUUdCd1VEL3dELy93UC9CUWIvL3drSy93ei8vdy8vRVJML0ZQLy9GeGovL3h2L0hSNy8vd0VDL3dULy93Y0kvLzhML3cwTy94RC8veFAvRlJiLy94a2EveHovL3g4QkFBQUFBZ0FBQUFRQUFBQUlBQUFBQXdBQUFBWUFBQUFNQUFBQUN3QUFBQVVBQUFBS0FBQUFCd0FBQUE0QUFBQVBBQUFBRFFBQUFBa0FBQUFBQUFBQS8vLy8vd0FBQUFBQkFBQUFCQUFBQUFJQUFBQUlBQUFBQlFBQUFBb0FBQUFEQUFBQURnQUFBQWtBQUFBSEFBQUFCZ0FBQUEwQUFBQUxBQUFBREFBQUFBRUFBQUFDQUFBQUJBQUFBQWdBQUFBUUFBQUFCUUFBQUFvQUFBQVVBQUFBRFFBQUFCb0FBQUFSQUFBQUJ3QUFBQTRBQUFBY0FBQUFIUUFBQUI4QUFBQWJBQUFBRXdBQUFBTUFBQUFHQUFBQURBQUFBQmdBQUFBVkFBQUFEd0FBQUI0QUFBQVpBQUFBRndBQUFBc0FBQUFXQUFBQUNRQUFBQklBQUFBQUFBQUEvLy8vL3dBQUFBQUJBQUFBRWdBQUFBSUFBQUFGQUFBQUV3QUFBQXNBQUFBREFBQUFIUUFBQUFZQUFBQWJBQUFBRkFBQUFBZ0FBQUFNQUFBQUZ3QUFBQVFBQUFBS0FBQUFIZ0FBQUJFQUFBQUhBQUFBRmdBQUFCd0FBQUFhQUFBQUZRQUFBQmtBQUFBSkFBQUFFQUFBQUEwQUFBQU9BQUFBR0FBQUFBOEFBQUFCQUFBQUFnQUFBQVFBQUFBSUFBQUFFQUFBQUNBQUFBQkFBQUFBQXdBQUFBWUFBQUFNQUFBQUdBQUFBREFBQUFCZ0FBQUFRd0FBQUFVQUFBQUtBQUFBRkFBQUFDZ0FBQUJRQUFBQUl3QUFBRVlBQUFBUEFBQUFIZ0FBQUR3QUFBQjRBQUFBY3dBQUFHVUFBQUJKQUFBQUVRQUFBQ0lBQUFCRUFBQUFDd0FBQUJZQUFBQXNBQUFBV0FBQUFETUFBQUJtQUFBQVR3QUFBQjBBQUFBNkFBQUFkQUFBQUdzQUFBQlZBQUFBS1FBQUFGSUFBQUFuQUFBQVRnQUFBQjhBQUFBK0FBQUFmQUFBQUhzQUFBQjFBQUFBYVFBQUFGRUFBQUFoQUFBQVFnQUFBQWNBQUFBT0FBQUFIQUFBQURnQUFBQndBQUFBWXdBQUFFVUFBQUFKQUFBQUVnQUFBQ1FBQUFCSUFBQUFFd0FBQUNZQUFBQk1BQUFBR3dBQUFEWUFBQUJzQUFBQVd3QUFBRFVBQUFCcUFBQUFWd0FBQUMwQUFBQmFBQUFBTndBQUFHNEFBQUJmQUFBQVBRQUFBSG9BQUFCM0FBQUFiUUFBQUZrQUFBQXhBQUFBWWdBQUFFY0FBQUFOQUFBQUdnQUFBRFFBQUFCb0FBQUFVd0FBQUNVQUFBQktBQUFBRndBQUFDNEFBQUJjQUFBQU93QUFBSFlBQUFCdkFBQUFYUUFBQURrQUFBQnlBQUFBWndBQUFFMEFBQUFaQUFBQU1nQUFBR1FBQUFCTEFBQUFGUUFBQUNvQUFBQlVBQUFBS3dBQUFGWUFBQUF2QUFBQVhnQUFBRDhBQUFCK0FBQUFmd0FBQUgwQUFBQjVBQUFBY1FBQUFHRUFBQUJCQUFBQUFBQUFBUC8vLy84QUFBQUFBUUFBQUFjQUFBQUNBQUFBRGdBQUFBZ0FBQUE0QUFBQUF3QUFBRDhBQUFBUEFBQUFId0FBQUFrQUFBQmFBQUFBT1FBQUFCVUFBQUFFQUFBQUhBQUFBRUFBQUFCREFBQUFFQUFBQUhBQUFBQWdBQUFBWVFBQUFBb0FBQUJzQUFBQVd3QUFBRVlBQUFBNkFBQUFKZ0FBQUJZQUFBQXZBQUFBQlFBQUFEWUFBQUFkQUFBQUV3QUFBRUVBQUFCZkFBQUFSQUFBQUMwQUFBQVJBQUFBS3dBQUFIRUFBQUJ6QUFBQUlRQUFBRTBBQUFCaUFBQUFkUUFBQUFzQUFBQlhBQUFBYlFBQUFDTUFBQUJjQUFBQVNnQUFBRWNBQUFCUEFBQUFPd0FBQUdnQUFBQW5BQUFBWkFBQUFCY0FBQUJTQUFBQU1BQUFBSGNBQUFBR0FBQUFmZ0FBQURjQUFBQU5BQUFBSGdBQUFENEFBQUFVQUFBQVdRQUFBRUlBQUFBYkFBQUFZQUFBQUc4QUFBQkZBQUFBYXdBQUFDNEFBQUFsQUFBQUVnQUFBRFVBQUFBc0FBQUFYZ0FBQUhJQUFBQXFBQUFBZEFBQUFFd0FBQUFpQUFBQVZnQUFBRTRBQUFCSkFBQUFZd0FBQUdjQUFBQjJBQUFBVVFBQUFBd0FBQUI5QUFBQVdBQUFBRDBBQUFCdUFBQUFHZ0FBQUNRQUFBQnFBQUFBWFFBQUFEUUFBQUJMQUFBQUtRQUFBRWdBQUFCVkFBQUFVQUFBQUdZQUFBQThBQUFBZkFBQUFHa0FBQUFaQUFBQUtBQUFBRE1BQUFCbEFBQUFWQUFBQUJnQUFBQjdBQUFBVXdBQUFESUFBQUF4QUFBQWVnQUFBSGdBQUFCNUFBQUFVSGx5WVcxcFpDQnBjeUJsYlhCMGVRQkJVbDlRU1ZoRlRGOUdUMUpOUVZSZlRsWXlNUUJCYzNObGNuUnBiMjRnWUhCYk1GMGdQaUJ3V3kweFhXQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdSemRDNTBlWEJsS0NrZ1BUMGdTVTFCUjBWZlJqTXlZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ1pDNWphR0Z1Ym1Wc2N5Z3BJRDA5SURGZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0J0WVhoZmFHVnBaMmgwSUQ0Z01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdSemRGOTNhV1IwYUNBK0lEQmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCemFYcGxJRDRnTUdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSE5qWVd4bElENDlJREJnSUdaaGFXeGxaQ0JwYmlBQVVHRm5aVnNsWkYwZ0lIQnlaVG9sTTJRc0lHRm1kRG9sTTJRc0lHVnljbTl5SUQwZ0pXWUtBQ1V6WkN3Z0pUTmtPaUJ0WVhoZmMybHRJRDBnSldZc0lDaHRZWGdzYldsdUtTQTlJQ1ZtTENBbFppd2djMlFnUFNBbFpnb0FJQ0JTWldGa0lFMWhjbXRsY2xObGRDNEtBRVZ5Y205eUlHeHZZV1JwYm1jZ1MxQk5JR1JoZEdFNklIVnVZV0pzWlNCMGJ5QnZjR1Z1SUdacGJHVWdKeVZ6SlhNbGN5Y2dabTl5SUhKbFlXUnBibWN1Q2dCRVpYTjBhVzVoZEdsdmJpQnBiV0ZuWlNCemFHOTFiR1FnWW1VZ1lTQm1iRzloZEFCdGNtc0FjMmw2WlNCdGRYTjBJR0psSUhCdmMybDBhWFpsQUZOallXeGxJRzExYzNRZ1ltVWdjRzl6YVhScGRtVUFUV0Y0YVcxMWJTQmlhVzRnYzJodmRXeGtJR0psSUhCdmMybDBhWFpsQUU5dWJIa2djMmx1WjJ4bElHTm9ZVzV1Wld3Z2FXMWhaMlZ6SUhOMWNIQnZjblJsWkFCQmMzTmxjblJwYjI0Z1lIQmJNRjBnUGlCd1d6RmRZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ1pITjBYM04wWlhBZ1BpQXdZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2NIbHlZVzFwWkMwK2FXMWhaMlZ6S0NsYk1GMHVkMmxrZEdnb0tTQTlQU0JrWlhSbFkzUnZjaTArZDJsa2RHZ29LV0FnWm1GcGJHVmtJR2x1SUFCS1VFVkhJR1pwYkdVZ2FHRnpJSFZ1YzNWd2NHOXlkR1ZrSUNWa0xXTnZiWEJ2Ym1WdWRDQndhWGhsYkhNS0FFVnljbTl5SUd4dllXUnBibWNnUzFCTklHUmhkR0U2SUdWeWNtOXlJSEpsWVdScGJtY2daR0YwWVM0S0FHRnlWWFJwYkVkbGRGQnBlR1ZzUm05eWJXRjBUbUZ0WlRvZ1JYSnliM0lzSUhWdWNtVmpiMmR1YVhObFpDQndhWGhsYkNCbWIzSnRZWFFnS0NWa0tTNEtBRkI1Y21GdGFXUWdZVzVrSUdSbGRHVmpkRzl5SUhOcGVtVWdiV2x6YldGMFkyZ0FZV3hzYjJOaGRHOXlQRlErT2pwaGJHeHZZMkYwWlNoemFYcGxYM1FnYmlrZ0oyNG5JR1Y0WTJWbFpITWdiV0Y0YVcxMWJTQnpkWEJ3YjNKMFpXUWdjMmw2WlFCVmJtdHViM2R1SUdsdFlXZGxJSFI1Y0dVQVFYTnpaWEowYVc5dUlHQnpZMkZzWlNBOElHMU9kVzFUWTJGc1pYTlFaWEpQWTNSaGRtVmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCd1d6QmRJRDRnY0hBeFd5MHhYV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHaHBjM1FnSVQwZ1RsVk1UR0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lDaHpjbU5mZDJsa2RHZ2xNaWtnUFQwZ01XQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdsdE1TNWphR0Z1Ym1Wc2N5Z3BJRDA5SURGZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0J0VW1WbVNXMWhaMlZYYVdSMGFDQStJREJnSUdaaGFXeGxaQ0JwYmlBQVQzVjBJRzltSUcxbGJXOXllUzRLQUd0d2JVTm9ZVzVuWlZCaFoyVk9iMDltVW1WbVJHRjBZVk5sZENncE9pQk9WVXhNSUhKbFprUmhkR0ZUWlhRdUNnQkZjbkp2Y2lCdmNHVnVhVzVuSUdacGJHVWdKeVZ6TG0xeWF5Y3VDZ0FsSlNVd01uZ0FMMmh2YldVdmQyRnNkR1Z5TDJ0aGJIZGhiSFF0WjJsMGFIVmlMMnB6WVhKMGIyOXNhMmwwVGtaVUwyVnRjMk55YVhCMFpXNHZWMlZpUVZKTGFYUk1hV0l2YkdsaUwxTlNReTlMVUUwdlJuSmxZV3ROWVhSamFHVnlMMlJsZEdWamRHOXljeTl2Y21sbGJuUmhkR2x2Ymw5aGMzTnBaMjV0Wlc1MExtZ0FKV1lnSldZZ0pXWWdKV1lBZDJsa2RHZ2diWFZ6ZENCaVpTQndiM05wZEdsMlpRQlRZMkZzWlNCdGRYTjBJR0psSUd4bGMzTWdkR2hoYmlCdWRXMWlaWElnYjJZZ2MyTmhiR1VnY0dWeUlHOWpkR0YyWlFCVmJuTjFjSEJ2Y25SbFpDQnBiV0ZuWlNCMGVYQmxBRk52ZFhKalpTQjNhV1IwYUNCdGRYTjBJR0psSUc5a1pBQkJjM05sY25ScGIyNGdZSEJiTUYwZ1BpQndjREZiTUYxZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JwYlRJdVkyaGhibTVsYkhNb0tTQTlQU0F4WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdjSGx5WVcxcFpDMCthVzFoWjJWektDbGJNRjB1YUdWcFoyaDBLQ2tnUFQwZ1pHVjBaV04wYjNJdFBtaGxhV2RvZENncFlDQm1ZV2xzWldRZ2FXNGdBR0ZzYkc5allYUnZjanhVUGpvNllXeHNiMk5oZEdVb2MybDZaVjkwSUc0cElDZHVKeUJsZUdObFpXUnpJRzFoZUdsdGRXMGdjM1Z3Y0c5eWRHVmtJSE5wZW1VQUwzQnliMk12YzJWc1ppOWxlR1VBVDJOMFlYWmxJRzkxZENCdlppQnlZVzVuWlFCSWFYTjBiMmR5WVcwZ2NHOXBiblJsY2lCcGN5Qk9WVXhNQUVGemMyVnlkR2x2YmlCZ1lYTnphV2R1YldWdWRDNXphWHBsS0NrZ1BUMGdiblZ0WDJsdVpHbGpaWE5nSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQndXekJkSUQ0Z2NIQXhXekZkWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdLR05vZFc1clgzTnBlbVVsTWlrOVBUQmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCdFVtVm1TVzFoWjJWSVpXbG5hSFFnUGlBd1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnWkM1M2FXUjBhQ2dwSUQwOUlHbHRNaTUzYVdSMGFDZ3BZQ0JtWVdsc1pXUWdhVzRnQUZSeVlXNXpabTl5YldGMGFXOXVJRzFoZEhKcGVDQnlaV0ZrSUdWeWNtOXlJU0VLQUVsdFlXZGxjeUJ0ZFhOMElHaGhkbVVnZEdobElITmhiV1VnZDJsa2RHZ0FMMmh2YldVdmQyRnNkR1Z5TDJ0aGJIZGhiSFF0WjJsMGFIVmlMMnB6WVhKMGIyOXNhMmwwVGtaVUwyVnRjMk55YVhCMFpXNHZWMlZpUVZKTGFYUk1hV0l2YkdsaUwxTlNReTlMVUUwdlJuSmxZV3ROWVhSamFHVnlMMjFoZEdOb1pYSnpMMkpwYm1GeWVWOW9hV1Z5WVhKamFHbGpZV3hmWTJ4MWMzUmxjbWx1Wnk1b0FHcHdad0JWYm5SbGMzUmxaQ0JpWldoaGRtbHZjaUJtYjNJZ2IyUmtJR05vZFc1cklITnBlbVVBYUdWcFoyaDBJRzExYzNRZ1ltVWdjRzl6YVhScGRtVUFVMk5oYkdVZ2IzVjBJRzltSUhKaGJtZGxBRUZ6YzJWeWRHbHZiaUJnS0daaWFXNHJNQzQxWmlrZ1BpQXdJQ1ltSUNobVltbHVMVEF1TldZcElEd2diblZ0WDJKcGJuTmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdBaGFYTnBibVlvZFZzd1hTbGdJR1poYVd4bFpDQnBiaUFBSlhNbGN3b0FWMmxrZEdnZ2FYTWdlbVZ5YndBdmFHOXRaUzkzWVd4MFpYSXZhMkZzZDJGc2RDMW5hWFJvZFdJdmFuTmhjblJ2YjJ4cmFYUk9SbFF2WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdmJXRjBZMmhsY25NdmFHOTFaMmhmYzJsdGFXeGhjbWwwZVY5MmIzUnBibWN1YUFCQmMzTnBaMjV0Wlc1MElITnBlbVVnZDNKdmJtY0FSR1ZqYVcxaGJDQmlhVzRnY0c5emFYUnBiMjRnYVc1a1pYZ2diM1YwSUc5bUlISmhibWRsQUVsT1JnQkJjM05sY25ScGIyNGdZQ2hwYm5RcGMzUmtPanBtYkc5dmNpaDRLU0E5UFNBb2FXNTBLWGhnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQmtMbWhsYVdkb2RDZ3BJRDA5SUdsdE1pNW9aV2xuYUhRb0tXQWdabUZwYkdWa0lHbHVJQUJKYldGblpYTWdiWFZ6ZENCb1lYWmxJSFJvWlNCellXMWxJR2hsYVdkb2RBQXZMaTR2YzJoaGNtVXZKWE1BU0dWcFoyaDBJR2x6SUhwbGNtOEFMMmh2YldVdmQyRnNkR1Z5TDJ0aGJIZGhiSFF0WjJsMGFIVmlMMnB6WVhKMGIyOXNhMmwwVGtaVUwyVnRjMk55YVhCMFpXNHZWMlZpUVZKTGFYUk1hV0l2YkdsaUwxTlNReTlMVUUwdlJuSmxZV3ROWVhSamFHVnlMMlJsZEdWamRHOXljeTlwYm5SbGNuQnZiR0YwWlM1b0FFRnpjMlZ5ZEdsdmJpQmdZWE56YVdkdWJXVnVkRnRwWFNBaFBTQXRNV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHbHVaR1Y0SUQ0OUlEQmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCdFlXZHVhWFIxWkdVZ1BqMGdNR0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lDRnBjMmx1WmloMVd6RmRLV0FnWm1GcGJHVmtJR2x1SUFCVGRHVndJR2x6SUhwbGNtOEFUV0ZuYm1sMGRXUmxJR05oYm01dmRDQmlaU0J1WldkaGRHbDJaUUJtYkc5dmNpZ3BJR0Z1WkNCallYTjBJRzV2ZENCMGFHVWdjMkZ0WlFCcGJtUmxlQ0J2ZFhRZ2IyWWdjbUZ1WjJVQVFYTnphV2R1YldWdWRDQnBjeUJwYm5aaGJHbGtBRWhQVFVVQVFYTnpaWEowYVc5dUlHQnBiVEV1ZDJsa2RHZ29LU0E5UFNCcGJUSXVkMmxrZEdnb0tXQWdabUZwYkdWa0lHbHVJQUF2YUc5dFpTOTNZV3gwWlhJdmEyRnNkMkZzZEMxbmFYUm9kV0l2YW5OaGNuUnZiMnhyYVhST1JsUXZaVzF6WTNKcGNIUmxiaTlYWldKQlVrdHBkRXhwWWk5c2FXSXZVMUpETDB0UVRTOUdjbVZoYTAxaGRHTm9aWEl2WkdWMFpXTjBiM0p6TDJoaGNuSnBjeTFwYm14cGJtVXVhQUJoYkd4dlkyRjBiM0k4VkQ0Nk9tRnNiRzlqWVhSbEtITnBlbVZmZENCdUtTQW5iaWNnWlhoalpXVmtjeUJ0WVhocGJYVnRJSE4xY0hCdmNuUmxaQ0J6YVhwbEFDOXdjbTlqTDNObGJHWXZZMjFrYkdsdVpRQkJjM05sY25ScGIyNGdZQ2hwYm5RcGMzUmtPanBtYkc5dmNpaDVLU0E5UFNBb2FXNTBLWGxnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQmhjM05wWjI1dFpXNTBXMmxkSUR3Z2JuVnRYMmx1WkdsalpYTmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCdWRXMWZZbWx1Y3lBK1BTQXdZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ0tHaytQakVwSUR3Z2MzUmtPanBqWldsc0tDaHpjbU5mYUdWcFoyaDBMVEVwTHpJdVppbGdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCcGJURXVhR1ZwWjJoMEtDa2dQVDBnYVcweUxtaGxhV2RvZENncFlDQm1ZV2xzWldRZ2FXNGdBRWx1WkdWNElHbHpJRzkxZENCdlppQmliM1Z1WkhNQVRuVnRZbVZ5SUdKcGJuTWdiWFZ6ZENCaVpTQndiM05wZEdsMlpRQkJjM05wWjI1dFpXNTBJRzkxZENCdlppQnlZVzVuWlFCUGRYUWdiMllnY21GdVoyVUFSRzlISUZCNWNtRnRhV1FBY21JQVFYTnpaWEowYVc5dUlHQjVjQ0ErUFNBd0lDWW1JSGx3SUR3Z2FHVnBaMmgwWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdZbWx1V0NBK1BTQXdZQ0JtWVdsc1pXUWdhVzRnQUhsd0lHOTFkQ0J2WmlCaWIzVnVaSE1BVG05dUxXMWhlQ0J6ZFhCd2NtVnpjMmx2YmdCaWFXNVlJRzkxZENCdlppQnlZVzVuWlFCQmMzTmxjblJwYjI0Z1lHbHVaR2xqWlhOYllYTnphV2R1YldWdWRGdHBYVjBnUENCdWRXMWZabVZoZEhWeVpYTmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCcGJXRm5aUzUwZVhCbEtDa2dQVDBnU1UxQlIwVmZWVWxPVkRoZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0IzTVNBK1BTQXdZQ0JtWVdsc1pXUWdhVzRnQUNWek9pQWxjd29BVTNWaWNHbDRaV3dBZHpFZ2JYVnpkQ0JpWlNCd2IzTnBkR2wyWlFCVmJtRmliR1VnZEc4Z1pHVjBaWEp0YVc1bElIQnliMk5sYzNNZ2JtRnRaUUJQYm14NUlHZHlZWGtnYzJOaGJHVWdhVzFoWjJWeklHRnlaU0J6ZFhCd2IzSjBaV1FBUVhOelpYSjBhVzl1SUdCNWNGOXdiSFZ6WHpFZ1BqMGdNQ0FtSmlCNWNGOXdiSFZ6WHpFZ1BDQm9aV2xuYUhSZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JpYVc1WUlEd2diVTUxYlZoQ2FXNXpZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2FYUXRQbk5sWTI5dVpDNXphWHBsS0NrZ0lUMGdNR0FnWm1GcGJHVmtJR2x1SUFCd2NuVnVaVVpsWVhSMWNtVnpBSGx3WDNCc2RYTmZNU0J2ZFhRZ2IyWWdZbTkxYm1SekFDVnpKWE1BUTJ4MWMzUmxjaUJ0ZFhOMElHaGhkbVVnWVhSc1pXRnpaWFFnTVNCbVpXRjBkWEpsQUVGemMyVnlkR2x2YmlCZ2IyTjBZWFpsSUR3Z2JVNTFiVTlqZEdGMlpYTmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCaWFXNVpJRDQ5SURCZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0IzTWlBK1BTQXdZQ0JtWVdsc1pXUWdhVzRnQUVacGJtUWdUM0pwWlc1MFlYUnBiMjV6QUM5b2IyMWxMM2RoYkhSbGNpOXJZV3gzWVd4MExXZHBkR2gxWWk5cWMyRnlkRzl2Ykd0cGRFNUdWQzlsYlhOamNtbHdkR1Z1TDFkbFlrRlNTMmwwVEdsaUwyeHBZaTlUVWtNdlMxQk5MMFp5WldGclRXRjBZMmhsY2k5a1pYUmxZM1J2Y25NdloyRjFjM05wWVc1ZmMyTmhiR1ZmYzNCaFkyVmZjSGx5WVcxcFpDNW9BSGN5SUcxMWMzUWdZbVVnY0c5emFYUnBkbVVBTDNaaGNpOWpZV05vWlFCaWFXNVpJRzkxZENCdlppQnlZVzVuWlFCQmMzTmxjblJwYjI0Z1lIaHdJRDQ5SURBZ0ppWWdlSEFnUENCM2FXUjBhR0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHUnpkRnRwWFNBK1BTQXRNalU0TURZMFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYlVzZ1BUMGdiVU5sYm5SbGNuTXVjMmw2WlNncFlDQm1ZV2xzWldRZ2FXNGdBSGh3SUc5MWRDQnZaaUJpYjNWdVpITUFMMmh2YldVdmQyRnNkR1Z5TDJ0aGJIZGhiSFF0WjJsMGFIVmlMMnB6WVhKMGIyOXNhMmwwVGtaVUwyVnRjMk55YVhCMFpXNHZWMlZpUVZKTGFYUk1hV0l2YkdsaUwxTlNReTlMVUUwdlJuSmxZV3ROWVhSamFHVnlMMjFoZEdOb1pYSnpMMnR0WldSdmFXUnpMbWdBTHk1allXTm9aUUJQWTNSaGRtVWdiM1YwSUc5bUlISmhibWRsQUVGemMyVnlkR2x2YmlCZ1lqRWdQajBnTUNBbUppQmlNU0E4SUc1MWJWOWlhVzV6WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdZbWx1V1NBOElHMU9kVzFaUW1sdWMyQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdSemRGdHBYU0E4UFNBeU5UZ3dOalJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnBiVEF1YUdWcFoyaDBLQ2tnUFQwZ2FXMHhMbWhsYVdkb2RDZ3BZQ0JtWVdsc1pXUWdhVzRnQUVobGFXZG9kQ0JwY3lCcGJtTnZibk5wYzNSbGJuUUFheUJ6YUc5MWJHUWdiV0YwWTJnZ2RHaGxJRzUxYldKbGNpQnZaaUJqYkhWemRHVnlJR05sYm5SbGNuTUFKWE12SlhNQVlqRWdZbWx1SUdsdVpHVjRJRzkxZENCdlppQnlZVzVuWlFCQmMzTmxjblJwYjI0Z1lIaHdYM0JzZFhOZk1TQStQU0F3SUNZbUlIaHdYM0JzZFhOZk1TQThJSGRwWkhSb1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYzJOaGJHVWdQQ0J0VG5WdFUyTmhiR1Z6VUdWeVQyTjBZWFpsWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdaSE4wVzJsZElEdzlJRFF4TWprd01qUmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCaWFXNUJibWRzWlNBK1BTQXdZQ0JtWVdsc1pXUWdhVzRnQUhod1gzQnNkWE5mTVNCdmRYUWdiMllnWW05MWJtUnpBR0pwYmtGdVoyeGxJRzkxZENCdlppQnlZVzVuWlFCVFkyRnNaU0J2ZFhRZ2IyWWdjbUZ1WjJVQUwzWmhjaTlzYVdJQVFYTnpaWEowYVc5dUlHQmlNaUErUFNBd0lDWW1JR0l5SUR3Z2JuVnRYMkpwYm5OZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JrYzNSYmFWMGdQajBnTFRReE1qa3dNalJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnVkVzFmWm1WaGRIVnlaWE1nUGlBd1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYVcwd0xtaGxhV2RvZENncElEMDlJR2x0TWk1b1pXbG5hSFFvS1dBZ1ptRnBiR1ZrSUdsdUlBQXZMbU52Ym1acFp3QmhiR3h2WTJGMGIzSThWRDQ2T21Gc2JHOWpZWFJsS0hOcGVtVmZkQ0J1S1NBbmJpY2daWGhqWldWa2N5QnRZWGhwYlhWdElITjFjSEJ2Y25SbFpDQnphWHBsQUU1MWJXSmxjaUJ2WmlCbVpXRjBkWEpsY3lCdGRYTjBJR0psSUhCdmMybDBhWFpsQUdJeUlHSnBiaUJwYm1SbGVDQnZkWFFnYjJZZ2NtRnVaMlVBUVhOelpYSjBhVzl1SUdCaWFXNUJibWRzWlNBOElHMU9kVzFCYm1kc1pVSnBibk5nSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQjNNQ0ErUFNBd0lDWW1JSGN3SUR3OUlERXVNREF3TVdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZQ2hwYlRFdWFHVnBaMmgwS0NrK1BqRXBJRDA5SUdsdE1pNW9aV2xuYUhRb0tXQWdabUZwYkdWa0lHbHVJQUJoYkd4dlkyRjBiM0k4VkQ0Nk9tRnNiRzlqWVhSbEtITnBlbVZmZENCdUtTQW5iaWNnWlhoalpXVmtjeUJ0WVhocGJYVnRJSE4xY0hCdmNuUmxaQ0J6YVhwbEFFOTFkQ0J2WmlCeVlXNW5aUUJVVFZCRVNWSUFRWE56WlhKMGFXOXVJR0J1ZFcxZmFXNWthV05sY3lBOFBTQnVkVzFmWm1WaGRIVnlaWE5nSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQm5lSGdnUEQwZ05ERXlPVEF5TkdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR0pwYmxOallXeGxJRDQ5SURCZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0FvYVcwd0xtaGxhV2RvZENncFBqNHhLU0E5UFNCcGJURXVhR1ZwWjJoMEtDbGdJR1poYVd4bFpDQnBiaUFBVFc5eVpTQnBibVJwWTJWeklIUm9ZVzRnWm1WaGRIVnlaWE1BTDNSdGNBQmlhVzVUWTJGc1pTQnZkWFFnYjJZZ2NtRnVaMlVBUVhOelpYSjBhVzl1SUdCeWIzY2dQQ0J0U0dWcFoyaDBZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2R6RWdQajBnTUNBbUppQjNNU0E4UFNBeExqQXdNREZnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQm5lSGdnUGowZ01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUNocGJUQXVhR1ZwWjJoMEtDaytQakVwSUQwOUlHbHRNaTVvWldsbmFIUW9LV0FnWm1GcGJHVmtJR2x1SUFCRmNuSnZjaUJzYjI5cmFXNW5JR1p2Y2lCeVpYTnZkWEpqWlhNZ1pHbHlaV04wYjNKNUlIQmhkR2dBTDJodmJXVXZkMkZzZEdWeUwydGhiSGRoYkhRdFoybDBhSFZpTDJwellYSjBiMjlzYTJsMFRrWlVMMlZ0YzJOeWFYQjBaVzR2VjJWaVFWSkxhWFJNYVdJdmJHbGlMMU5TUXk5TFVFMHZSbkpsWVd0TllYUmphR1Z5TDJaeVlXMWxkMjl5YXk5cGJXRm5aUzVvQUVGemMyVnlkR2x2YmlCZ1ltbHVVMk5oYkdVZ1BDQnRUblZ0VTJOaGJHVkNhVzV6WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdiVUoxWTJ0bGRITXVjMmw2WlNncElEMDlJRzFPZFcxQ2RXTnJaWFJ6V0dBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZRzUxYlY5cGJtUnBZMlZ6SUQ0OUlHMUxZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ1ozbDVJRHc5SURReE1qa3dNalJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQjNNaUErUFNBd0lDWW1JSGN5SUR3OUlERXVNREF3TVdBZ1ptRnBiR1ZrSUdsdUlBQk9iM1FnWlc1dmRXZG9JR1psWVhSMWNtVnpBSEp2ZHlCdmRYUWdiMllnWW05MWJtUnpBRVZ5Y205eUlHTnlaV0YwYVc1bklISmxjMjkxY21ObGN5QmthWEpsWTNSdmNua2djR0YwYUFCQ2RXTnJaWFJ6SUdGeVpTQnViM1FnWVd4c2IyTmhkR1ZrQUVGemMyVnlkR2x2YmlCZ2R6TWdQajBnTUNBbUppQjNNeUE4UFNBeExqQXdNREZnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQm5lWGtnUGowZ01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdsdVpHVjRJRHc5SUNoaWFXNVlJQ3NnWW1sdVdTcHRUblZ0V0VKcGJuTWdLeUJpYVc1QmJtZHNaU3B0VG5WdFdFSnBibk1xYlU1MWJWbENhVzV6SUNzZ1ltbHVVMk5oYkdVcWJVNTFiVmhDYVc1ekttMU9kVzFaUW1sdWN5cHRUblZ0UVc1bmJHVkNhVzV6S1dBZ1ptRnBiR1ZrSUdsdUlBQkJjM05wWjI1dFpXNTBJSE5wZW1VZ2FYTWdhVzVqYjNKeVpXTjBBRUZ6YzJWeWRHbHZiaUJnYlVKMVkydGxkSE5iTUYwdWMybDZaU2dwSUQwOUlHMU9kVzFDZFdOclpYUnpXV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHZDRlU0E4UFNBME1USTVNREkwWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdLSGN3SzNjeEszY3lLM2N6S1NBOFBTQXhMakF3TURGZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0J1SUQ0Z01HQWdabUZwYkdWa0lHbHVJQUJGY25KdmNqb2dWVzVoWW14bElIUnZJR05vWVc1blpTQjNiM0pyYVc1bklHUnBjbVZqZEc5eWVTQjBieUFuSlhNbkxnb0FMMmh2YldVdmQyRnNkR1Z5TDJ0aGJIZGhiSFF0WjJsMGFIVmlMMnB6WVhKMGIyOXNhMmwwVGtaVUwyVnRjMk55YVhCMFpXNHZWMlZpUVZKTGFYUk1hV0l2YkdsaUwxTlNReTlMVUUwdlJuSmxZV3ROWVhSamFHVnlMM1YwYVd4ekwzQmhjblJwWVd4ZmMyOXlkQzVvQUVGemMyVnlkR2x2YmlCZ2JVWmxZWFIxY21WUWIybHVkSE11YzJsNlpTZ3BJRHc5SUcxTllYaE9kVzFHWldGMGRYSmxVRzlwYm5SellDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnY0c5eklEMDlJRFkyTm1BZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR2Q0ZVNBK1BTQXROREV5T1RBeU5HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUc1MWJWOWpaVzUwWlhKeklENGdNR0FnWm1GcGJHVmtJR2x1SUFCYkpTQXVNMllnSlNBdU0yWWdKU0F1TTJaZElGc2xJRFl1TVdaZENnQURBQUFBQXdBQUFBUUFBQUFFQUFBQUJBQUFBQUVBQUFBRUFBQUFBZ0FBQUFJQUFBQUNBQUFBQWdBQUFBSUFBQUFCQUFBQUFRQUFBQUVBUWJDcEFRdmxNQVFBQUFDSUFBQUFCUUFBQUpBQUFBQUdBQUFBbUFBQUFBa0FBQUN3QUFBQUVRUUFBSUFMQUFEQkRRQUE3dzhBQUM1cGMyVjBBSEppQUU0MmRtbHphVzl1TWpWSFlYVnpjMmxoYmxOallXeGxVM0JoWTJWUWVYSmhiV2xrUlFBQUFBVDFBQURwVkFBQVZHOXZJRzFoYm5rZ1ptVmhkSFZ5WlNCd2IybHVkSE1BVkdobGNtVWdiWFZ6ZENCaVpTQmhkQ0JzWldGemRDQXhJR05sYm5SbGNnQnVJRzExYzNRZ1ltVWdjRzl6YVhScGRtVUFVRzl6YVhScGIyNGdhWE1nYm05MElIZHBkR2hwYmlCeVlXNW5aUUJiSlhOZElGc2xjMTBnV3lWelhTQTZJRVp2ZFc1a0lDVmtJR1psWVhSMWNtVnpJR2x1SUhGMVpYSjVBRUZ6YzJWeWRHbHZiaUJnYXlBK0lEQmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCcmNDNXpZMkZzWlNBOElHMU1ZWEJzWVdOcFlXNVFlWEpoYldsa0xtNTFiVk5qWVd4bFVHVnlUMk4wWVhabEtDbGdJR1poYVd4bFpDQnBiaUFBUm1WaGRIVnlaU0J3YjJsdWRDQnpZMkZzWlNCcGN5QnZkWFFnYjJZZ1ltOTFibVJ6QUdzZ2JYVnpkQ0JpWlNCd2IzTnBkR2wyWlFCR2FXNWtJRTFoZEdOb1pYTWdLREVwQUVodmRXZG9JRlp2ZEdsdVp5QW9NU2tBUVhOelpYSjBhVzl1SUdCcmNDNXpZMjl5WlNBOVBTQnNZWEF4TG1kbGREeG1iRzloZEQ0b2VTbGJlRjFnSUdaaGFXeGxaQ0JwYmlBQVUyTnZjbVVnYVhNZ2JtOTBJR052Ym5OcGMzUmxiblFnZDJsMGFDQjBhR1VnUkc5SElHbHRZV2RsQUVacGJtUWdTRzkxWjJnZ1RXRjBZMmhsY3lBb01Ta0FSWE4wYVcxaGRHVWdTRzl0YjJkeVlYQm9lU0FvTVNrQVFYTnpaWEowYVc5dUlHQmlkV05yWlhSYk1GMHVabWx5YzNRZ1BqMGdZblZqYTJWMFcyNWRMbVpwY25OMFlDQm1ZV2xzWldRZ2FXNGdBRzUwYUY5bGJHVnRaVzUwSUdaaGFXeGxaQUJHYVc1a0lFbHViR2xsY25NZ0tERXBBRVpwYm1RZ1RXRjBZMmhsY3lBb01pa0FRWE56WlhKMGFXOXVJR0J2WTNSaGRtVWdQQ0J0VG5WdFQyTjBZWFpsYzJBZ1ptRnBiR1ZrSUdsdUlBQXZhRzl0WlM5M1lXeDBaWEl2YTJGc2QyRnNkQzFuYVhSb2RXSXZhbk5oY25SdmIyeHJhWFJPUmxRdlpXMXpZM0pwY0hSbGJpOVhaV0pCVWt0cGRFeHBZaTlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZaR1YwWldOMGIzSnpMMmRoZFhOemFXRnVYM05qWVd4bFgzTndZV05sWDNCNWNtRnRhV1F1YUFCSWIzVm5hQ0JXYjNScGJtY2dLRElwQUU5amRHRjJaU0J2ZFhRZ2IyWWdjbUZ1WjJVQVJtbHVaQ0JJYjNWbmFDQk5ZWFJqYUdWeklDZ3lLUUJGYzNScGJXRjBaU0JJYjIxdlozSmhjR2g1SUNneUtRQkJjM05sY25ScGIyNGdZSE5qWVd4bElEd2diVTUxYlZOallXeGxjMUJsY2s5amRHRjJaV0FnWm1GcGJHVmtJR2x1SUFCVFkyRnNaU0J2ZFhRZ2IyWWdjbUZ1WjJVQVJtbHVaQ0JKYm14cFpYSnpJQ2d5S1FCQmMzTmxjblJwYjI0Z1lHSmxjM1JmYVc1a1pYZ2dJVDBnYzNSa09qcHVkVzFsY21salgyeHBiV2wwY3p4emFYcGxYM1ErT2pwdFlYZ29LV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHbHVaR1Y0SUR3Z2JVbHRZV2RsY3k1emFYcGxLQ2xnSUdaaGFXeGxaQ0JwYmlBQUwyaHZiV1V2ZDJGc2RHVnlMMnRoYkhkaGJIUXRaMmwwYUhWaUwycHpZWEowYjI5c2EybDBUa1pVTDJWdGMyTnlhWEIwWlc0dlYyVmlRVkpMYVhSTWFXSXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwyUmxkR1ZqZEc5eWN5OUViMGRmYzJOaGJHVmZhVzUyWVhKcFlXNTBYMlJsZEdWamRHOXlMbWdBTDJodmJXVXZkMkZzZEdWeUwydGhiSGRoYkhRdFoybDBhSFZpTDJwellYSjBiMjlzYTJsMFRrWlVMMlZ0YzJOeWFYQjBaVzR2VjJWaVFWSkxhWFJNYVdJdmJHbGlMMU5TUXk5TFVFMHZSbkpsWVd0TllYUmphR1Z5TDIxaGRHTm9aWEp6TDJabFlYUjFjbVZmYldGMFkyaGxjaTFwYm14cGJtVXVhQUJUYjIxbGRHaHBibWNnYzNSeVlXNW5aUUJKYm1SbGVDQnBjeUJ2ZFhRZ2IyWWdjbUZ1WjJVQVFYTnpaWEowYVc5dUlHQnpZMkZzWlNBK1BTQXdZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2JVMWhkR05vWlhNdWMybDZaU2dwSUR3OUlHWmxZWFIxY21Wek1TMCtjMmw2WlNncFlDQm1ZV2xzWldRZ2FXNGdBRTUxYldKbGNpQnZaaUJ0WVhSamFHVnpJSE5vYjNWc1pDQmlaU0JzYjNkbGNnQlRZMkZzWlNCdGRYTjBJR0psSUhCdmMybDBhWFpsQUZOallXeGxJRzExYzNRZ1ltVWdiR1Z6Y3lCMGFHRnVJRzUxYldKbGNpQnZaaUJ6WTJGc1pTQndaWElnYjJOMFlYWmxBRUZ6YzJWeWRHbHZiaUJnYlZKdmIzUXVaMlYwS0NsZ0lHWmhhV3hsWkNCcGJpQUFVbTl2ZENCallXNXViM1FnWW1VZ1RsVk1UQUJCYzNObGNuUnBiMjRnWUd4aGNEQXVhR1ZwWjJoMEtDa2dQVDBnYkdGd01TNW9aV2xuYUhRb0tTQTlQU0JzWVhBeUxtaGxhV2RvZENncFlDQm1ZV2xzWldRZ2FXNGdBRmRwWkhSb0wyaGxhV2RvZENCaGNtVWdibTkwSUdOdmJuTnBjM1JsYm5RQVFYTnpaWEowYVc5dUlHQnRhVzVwSUNFOUlDMHhZQ0JtWVdsc1pXUWdhVzRnQUUxcGJtbHRkVzBnYVc1a1pYZ2dibTkwSUhObGRBQkJjM05sY25ScGIyNGdZQ2hzWVhBd0xtaGxhV2RvZENncElEMDlJR3hoY0RFdWFHVnBaMmgwS0NrcElDWW1JQ2dvYkdGd01TNW9aV2xuYUhRb0tUNCtNU2tnUFQwZ2JHRndNaTVvWldsbmFIUW9LU2xnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQW9LR3hoY0RBdWQybGtkR2dvS1Q0K01Ta2dQVDBnYkdGd01TNTNhV1IwYUNncEtTQW1KaUFvYkdGd01TNTNhV1IwYUNncElEMDlJR3hoY0RJdWQybGtkR2dvS1NsZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0J1SUR3OUlHbHVYMjFoZEdOb1pYTXVjMmw2WlNncFlDQm1ZV2xzWldRZ2FXNGdBRk5vYjNWc1pDQmlaU0IwYUdVZ2MyRnRaUUJCYzNObGNuUnBiMjRnWURCZ0lHWmhhV3hsWkNCcGJpQUFTVzFoWjJVZ2MybDZaWE1nWVhKbElHbHVZMjl1YzJsemRHVnVkQUJCYzNObGNuUnBiMjRnWUdKcGJsZ2dQajBnTUdBZ1ptRnBiR1ZrSUdsdUlBQXZhRzl0WlM5M1lXeDBaWEl2YTJGc2QyRnNkQzFuYVhSb2RXSXZhbk5oY25SdmIyeHJhWFJPUmxRdlpXMXpZM0pwY0hSbGJpOVhaV0pCVWt0cGRFeHBZaTlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZiV0YwWTJobGNuTXZhRzkxWjJoZmMybHRhV3hoY21sMGVWOTJiM1JwYm1jdWFBQkJjM05sY25ScGIyNGdZQ2g0TFRFcElENDlJREFnSmlZZ0tIZ3JNU2tnUENCc1lYQXhMbmRwWkhSb0tDbGdJR1poYVd4bFpDQnBiaUFBZUNCdmRYUWdiMllnWW05MWJtUnpBR0pwYmxnZ2IzVjBJRzltSUhKaGJtZGxBRUZ6YzJWeWRHbHZiaUJnWW1sdVdDQThJRzFPZFcxWVFtbHVjMkFnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lDaDVMVEVwSUQ0OUlEQWdKaVlnS0hrck1Ta2dQQ0JzWVhBeExtaGxhV2RvZENncFlDQm1ZV2xzWldRZ2FXNGdBSGtnYjNWMElHOW1JR0p2ZFc1a2N3QkJjM05sY25ScGIyNGdZR0pwYmxrZ1BqMGdNR0FnWm1GcGJHVmtJR2x1SUFCaWFXNVpJRzkxZENCdlppQnlZVzVuWlFCQmMzTmxjblJwYjI0Z1lHeGhjREF1ZDJsa2RHZ29LU0E5UFNCc1lYQXhMbmRwWkhSb0tDbGdJR1poYVd4bFpDQnBiaUFBU1cxaFoyVWdaR2x0Wlc1emFXOXVjeUJwYm1OdmJuTnBjM1JsYm5RQVFYTnpaWEowYVc5dUlHQmlhVzVaSUR3Z2JVNTFiVmxDYVc1ellDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnWW1sdVFXNW5iR1VnUGowZ01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUd4aGNEQXVkMmxrZEdnb0tTQTlQU0JzWVhBeUxuZHBaSFJvS0NsZ0lHWmhhV3hsWkNCcGJpQUFZbWx1UVc1bmJHVWdiM1YwSUc5bUlISmhibWRsQUVGemMyVnlkR2x2YmlCZ2JHRndNQzVvWldsbmFIUW9LU0E5UFNCc1lYQXhMbWhsYVdkb2RDZ3BZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ1ltbHVRVzVuYkdVZ1BDQnRUblZ0UVc1bmJHVkNhVzV6WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdiR0Z3TUM1b1pXbG5hSFFvS1NBOVBTQnNZWEF5TG1obGFXZG9kQ2dwWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdZbWx1VTJOaGJHVWdQajBnTUdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZQ2g0TFRFcElENDlJREFnSmlZZ0tIZ3JNU2tnUENCcGJTNTNhV1IwYUNncFlDQm1ZV2xzWldRZ2FXNGdBR0pwYmxOallXeGxJRzkxZENCdlppQnlZVzVuWlFCQmMzTmxjblJwYjI0Z1lDaDVMVEVwSUQ0OUlEQWdKaVlnS0hrck1Ta2dQQ0JwYlM1b1pXbG5hSFFvS1dBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR0pwYmxOallXeGxJRHdnYlU1MWJWTmpZV3hsUW1sdWMyQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUNoc1lYQXdMbmRwWkhSb0tDaytQakVwSUQwOUlHeGhjREl1ZDJsa2RHZ29LV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHUnBjM1JDYVc1QmJtZHNaU0ErUFNBd1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnS0d4aGNEQXVhR1ZwWjJoMEtDaytQakVwSUQwOUlHeGhjREl1YUdWcFoyaDBLQ2xnSUdaaGFXeGxaQ0JwYmlBQVpHbHpkRUpwYmtGdVoyeGxJRzExYzNRZ2JtOTBJR0psSUc1bFoyRjBhWFpsQUVGemMyVnlkR2x2YmlCZ2VGOWthWFpmTWkwd0xqVm1JRDQ5SURCZ0lHWmhhV3hsWkNCcGJpQUFlRjlrYVhaZk1pQnZkWFFnYjJZZ1ltOTFibVJ6SUc5MWRDQnZaaUJpYjNWdVpITWdabTl5SUdsdWRHVnljRzlzWVhScGIyNEFRWE56WlhKMGFXOXVJR0JvZVhBdWMybDZaU2dwSUQ0OUlEa3FiV0Y0WDI1MWJWOW9lWEJ2ZEdobGMyVnpZQ0JtWVdsc1pXUWdhVzRnQUM5b2IyMWxMM2RoYkhSbGNpOXJZV3gzWVd4MExXZHBkR2gxWWk5cWMyRnlkRzl2Ykd0cGRFNUdWQzlsYlhOamNtbHdkR1Z1TDFkbFlrRlNTMmwwVEdsaUwyeHBZaTlUVWtNdlMxQk5MMFp5WldGclRXRjBZMmhsY2k5b2IyMXZaM0poY0doNVgyVnpkR2x0WVhScGIyNHZjbTlpZFhOMFgyaHZiVzluY21Gd2FIa3VhQUJCYzNObGNuUnBiMjRnWUhsZlpHbDJYekl0TUM0MVppQStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FHaDVjQ0IyWldOMGIzSWdjMmh2ZFd4a0lHSmxJRzltSUhOcGVtVWdPU3B0WVhoZmJuVnRYMmg1Y0c5MGFHVnpaWE1BZVY5a2FYWmZNaUJ2ZFhRZ2IyWWdZbTkxYm1SeklHOTFkQ0J2WmlCaWIzVnVaSE1nWm05eUlHbHVkR1Z5Y0c5c1lYUnBiMjRBUVhOelpYSjBhVzl1SUdCMGJYQmZhUzV6YVhwbEtDa2dQajBnYm5WdFgzQnZhVzUwYzJBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSGhmWkdsMlh6SXJNQzQxWmlBOElHeGhjREl1ZDJsa2RHZ29LV0FnWm1GcGJHVmtJR2x1SUFCMGJYQmZhU0IyWldOMGIzSWdjMmh2ZFd4a0lHSmxJRzltSUhOcGVtVWdiblZ0WDNCdmFXNTBjd0JCYzNObGNuUnBiMjRnWUhsZlpHbDJYeklyTUM0MVppQThJR3hoY0RJdWFHVnBaMmgwS0NsZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JvZVhCZlkyOXpkSE11YzJsNlpTZ3BJRDQ5SUcxaGVGOXVkVzFmYUhsd2IzUm9aWE5sYzJBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZQ2hzWVhBd0xuZHBaSFJvS0NrK1BqRXBJRDA5SUd4aGNERXVkMmxrZEdnb0tXQWdabUZwYkdWa0lHbHVJQUJvZVhCZlkyOXpkSE1nZG1WamRHOXlJSE5vYjNWc1pDQmlaU0J2WmlCemFYcGxJRzFoZUY5dWRXMWZhSGx3YjNSb1pYTmxjd0JCYzNObGNuUnBiMjRnWUNoc1lYQXdMbWhsYVdkb2RDZ3BQajR4S1NBOVBTQnNZWEF4TG1obGFXZG9kQ2dwWUNCbVlXbHNaV1FnYVc0Z0FHRnNiRzlqWVhSdmNqeFVQam82WVd4c2IyTmhkR1VvYzJsNlpWOTBJRzRwSUNkdUp5QmxlR05sWldSeklHMWhlR2x0ZFcwZ2MzVndjRzl5ZEdWa0lITnBlbVVBUVhOelpYSjBhVzl1SUdCdUlENGdNR0FnWm1GcGJHVmtJR2x1SUFBdmFHOXRaUzkzWVd4MFpYSXZhMkZzZDJGc2RDMW5hWFJvZFdJdmFuTmhjblJ2YjJ4cmFYUk9SbFF2WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdmRYUnBiSE12Y0dGeWRHbGhiRjl6YjNKMExtZ0FRWE56WlhKMGFXOXVJR0J5YjNjZ1BDQnRTR1ZwWjJoMFlDQm1ZV2xzWldRZ2FXNGdBQzlvYjIxbEwzZGhiSFJsY2k5cllXeDNZV3gwTFdkcGRHaDFZaTlxYzJGeWRHOXZiR3RwZEU1R1ZDOWxiWE5qY21sd2RHVnVMMWRsWWtGU1MybDBUR2xpTDJ4cFlpOVRVa012UzFCTkwwWnlaV0ZyVFdGMFkyaGxjaTltY21GdFpYZHZjbXN2YVcxaFoyVXVhQUJ1SUcxMWMzUWdZbVVnY0c5emFYUnBkbVVBY205M0lHOTFkQ0J2WmlCaWIzVnVaSE1BUVhOelpYSjBhVzl1SUdCcklENGdNR0FnWm1GcGJHVmtJR2x1SUFCcklHMTFjM1FnWW1VZ2NHOXphWFJwZG1VQVFYTnpaWEowYVc5dUlHQW9hVzUwS1hOMFpEbzZabXh2YjNJb2VDa2dQVDBnS0dsdWRDbDRZQ0JtWVdsc1pXUWdhVzRnQUM5b2IyMWxMM2RoYkhSbGNpOXJZV3gzWVd4MExXZHBkR2gxWWk5cWMyRnlkRzl2Ykd0cGRFNUdWQzlsYlhOamNtbHdkR1Z1TDFkbFlrRlNTMmwwVEdsaUwyeHBZaTlUVWtNdlMxQk5MMFp5WldGclRXRjBZMmhsY2k5a1pYUmxZM1J2Y25NdmFXNTBaWEp3YjJ4aGRHVXVhQUJCYzNObGNuUnBiMjRnWURCZ0lHWmhhV3hsWkNCcGJpQUFSbUZwYkdWa0lIUnZJR052YlhCMWRHVWdiV0YwY21sNElHbHVkbVZ5YzJVQVpteHZiM0lvS1NCaGJtUWdZMkZ6ZENCdWIzUWdkR2hsSUhOaGJXVUFRWE56WlhKMGFXOXVJR0FvYVc1MEtYTjBaRG82Wm14dmIzSW9lU2tnUFQwZ0tHbHVkQ2w1WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdlWEFnUGowZ01DQW1KaUI1Y0NBOElHaGxhV2RvZEdBZ1ptRnBiR1ZrSUdsdUlBQjVjQ0J2ZFhRZ2IyWWdZbTkxYm1SekFFRnpjMlZ5ZEdsdmJpQmdlWEJmY0d4MWMxOHhJRDQ5SURBZ0ppWWdlWEJmY0d4MWMxOHhJRHdnYUdWcFoyaDBZQ0JtWVdsc1pXUWdhVzRnQUhsd1gzQnNkWE5mTVNCdmRYUWdiMllnWW05MWJtUnpBRUZ6YzJWeWRHbHZiaUJnZUhBZ1BqMGdNQ0FtSmlCNGNDQThJSGRwWkhSb1lDQm1ZV2xzWldRZ2FXNGdBSGh3SUc5MWRDQnZaaUJpYjNWdVpITUFRWE56WlhKMGFXOXVJR0I0Y0Y5d2JIVnpYekVnUGowZ01DQW1KaUI0Y0Y5d2JIVnpYekVnUENCM2FXUjBhR0FnWm1GcGJHVmtJR2x1SUFCNGNGOXdiSFZ6WHpFZ2IzVjBJRzltSUdKdmRXNWtjd0JCYzNObGNuUnBiMjRnWUhjd0lENDlJREFnSmlZZ2R6QWdQRDBnTVM0d01EQXhZQ0JtWVdsc1pXUWdhVzRnQUU5MWRDQnZaaUJ5WVc1blpRQkJjM05sY25ScGIyNGdZSGN4SUQ0OUlEQWdKaVlnZHpFZ1BEMGdNUzR3TURBeFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnZHpJZ1BqMGdNQ0FtSmlCM01pQThQU0F4TGpBd01ERmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCM015QStQU0F3SUNZbUlIY3pJRHc5SURFdU1EQXdNV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lDaDNNQ3QzTVN0M01pdDNNeWtnUEQwZ01TNHdNREF4WUNCbVlXbHNaV1FnYVc0Z0FBQUFBQUFBQUJCVkFBQVFBQUFBRVFBQUFBQUFBQURBYWdBQUVnQUFBQk1BQUFCT05uWnBjMmx2YmpsRmVHTmxjSFJwYjI1RkFDejFBQUNBYWdBQUhQWUFBRTQyZG1semFXOXVNVGhDYVc1dmJXbGhiRkI1Y21GdGFXUXpNbVpGQUFBQUxQVUFBS0JxQUFBUVZRQUFBQUFBQUpScUFBQU9BQUFBRkFBQUFCVUFBQUM1VW93K2pscm5QcmxTakQ0QUFBQUFBQUFBQUpSckFBQVdBQUFBRndBQUFCZ0FBQUFaQUFBQUdnQUFBRTVUZEROZlh6SXlNRjlmYzJoaGNtVmtYM0IwY2w5d2IybHVkR1Z5U1ZCT05uWnBjMmx2YmpoTFpYbG1jbUZ0WlVsTWFUazJSVVZGVGxOZk1UQnphR0Z5WldSZmNIUnlTVk16WDBVeU4xOWZjMmhoY21Wa1gzQjBjbDlrWldaaGRXeDBYMlJsYkdWMFpVbFRNMTlUTTE5RlJVNVRYemxoYkd4dlkyRjBiM0pKVXpOZlJVVkZSUUFzOVFBQURHc0FBS1R5QUFCT1UzUXpYMTh5TVRCemFHRnlaV1JmY0hSeVNVNDJkbWx6YVc5dU9FdGxlV1p5WVcxbFNVeHBPVFpGUlVWRk1qZGZYM05vWVhKbFpGOXdkSEpmWkdWbVlYVnNkRjlrWld4bGRHVkpVek5mVXpOZlJVVUFZbTl2YkNCMmFYTnBiMjQ2T2xacGMzVmhiRVJoZEdGaVlYTmxQSFpwYzJsdmJqbzZSbEpGUVV0RmVIUnlZV04wYjNJc0lIWnBjMmx2YmpvNlFtbHVZWEo1Um1WaGRIVnlaVk4wYjNKbExDQjJhWE5wYjI0Nk9rSnBibUZ5ZVVabFlYUjFjbVZOWVhSamFHVnlQRGsyUGo0Nk9uRjFaWEo1S0dOdmJuTjBJSFpwYzJsdmJqbzZSMkYxYzNOcFlXNVRZMkZzWlZOd1lXTmxVSGx5WVcxcFpDQXFLU0JiUmtWQlZGVlNSVjlGV0ZSU1FVTlVUMUlnUFNCMmFYTnBiMjQ2T2taU1JVRkxSWGgwY21GamRHOXlMQ0JUVkU5U1JTQTlJSFpwYzJsdmJqbzZRbWx1WVhKNVJtVmhkSFZ5WlZOMGIzSmxMQ0JOUVZSRFNFVlNJRDBnZG1semFXOXVPanBDYVc1aGNubEdaV0YwZFhKbFRXRjBZMmhsY2p3NU5qNWRBRUdrMmdFTHNFeXl2cmsrRXR5Z3ZwQytPVDRTM0tDK2tMNDV2Z0FBQUlDeXZybStFdHlnUHBDK09iNFMzS0Era0w0NVB0SnlHTDhBQUFBQTBuS1l2am9HQkwvU2NwZytPZ1lFdjlKeUdEOEFBQUNBMG5LWVBqb0dCRC9TY3BpK09nWUVQd0FBQUlCV3VEMi9aazBrUDFhNHZiNW1UU1EvVnJpOVBnQUFBQUJXdUQwL1prMGt2MWE0dlQ1bVRTUy9Wcmk5dmd6cFdEOEFBQUNBRE9uWVBwblpPejhNNmRpK21kazdQd3pwV0w4QUFBQUFET25ZdnBuWk83OE02ZGcrbWRrN3Z3QUFBQUQ4VTI0LzhXVk92dzFVN2o3eFpVNi9EVlR1dmdBQUFJRDhVMjYvOFdWT1B3MVU3cjd4WlU0L0RWVHVQZ0FBZ0w4QUFBQUFBQUFBdjlDelhiOEFBQUEvMExOZHZ3QUFnRDhBQUFDQUFBQUFQOUN6WFQ4QUFBQy8wTE5kUHdBQUFBQ29iZ0FBRmdBQUFCc0FBQUFjQUFBQUhRQUFBQjRBQUFCT1UzUXpYMTh5TWpCZlgzTm9ZWEpsWkY5d2RISmZjRzlwYm5SbGNrbFFhREUyVG5Wc2JFRnljbUY1UkdWc1pYUmxja2xvUlU1VFh6bGhiR3h2WTJGMGIzSkphRVZGUlVVQUFBQUFMUFVBQUZ4dUFBQ2s4Z0FBTVRaT2RXeHNRWEp5WVhsRVpXeGxkR1Z5U1doRkFBQUFBQUFBQUZCdkFBQVdBQUFBSHdBQUFDQUFBQUFoQUFBQUlnQUFBRTVUZEROZlh6SXlNRjlmYzJoaGNtVmtYM0IwY2w5d2IybHVkR1Z5U1ZCb1RsTmZNVEJ6YUdGeVpXUmZjSFJ5U1doRk1qZGZYM05vWVhKbFpGOXdkSEpmWkdWbVlYVnNkRjlrWld4bGRHVkphR2hGUlU1VFh6bGhiR3h2WTJGMGIzSkphRVZGUlVVQUxQVUFBT2h1QUFDazhnQUFUbE4wTTE5Zk1qRXdjMmhoY21Wa1gzQjBja2xvUlRJM1gxOXphR0Z5WldSZmNIUnlYMlJsWm1GMWJIUmZaR1ZzWlhSbFNXaG9SVVVBZG1semFXOXVPanBUWTI5d1pXUlVhVzFsY2pvNmZsTmpiM0JsWkZScGJXVnlLQ2tBYVdscEFHbHBhV2tBYVdscGFRQnBibVpwYm1sMGVRQk5hWE56YVc1bklFaDFabVp0WVc0Z1kyOWtaU0IwWVdKc1pTQmxiblJ5ZVFCR1pXSnlkV0Z5ZVFCS1lXNTFZWEo1QUVwMWJIa0FWR2gxY25Oa1lYa0FWSFZsYzJSaGVRQlhaV1J1WlhOa1lYa0FVMkYwZFhKa1lYa0FVM1Z1WkdGNUFFMXZibVJoZVFCR2NtbGtZWGtBVFdGNUFDVnRMeVZrTHlWNUFFMUJXRjlCVEV4UFExOURTRlZPU3lCcGN5QjNjbTl1Wnl3Z2NHeGxZWE5sSUdacGVBQkJURWxIVGw5VVdWQkZJR2x6SUhkeWIyNW5MQ0J3YkdWaGMyVWdabWw0QUU1dmRDQmhJRXBRUlVjZ1ptbHNaVG9nYzNSaGNuUnpJSGRwZEdnZ01IZ2xNREo0SURCNEpUQXllQUJEYjNKeWRYQjBJRXBRUlVjZ1pHRjBZVG9nSlhVZ1pYaDBjbUZ1Wlc5MWN5QmllWFJsY3lCaVpXWnZjbVVnYldGeWEyVnlJREI0SlRBeWVBQlZibVY0Y0dWamRHVmtJRzFoY210bGNpQXdlQ1V3TW5nQVZXNXpkWEJ3YjNKMFpXUWdiV0Z5YTJWeUlIUjVjR1VnTUhnbE1ESjRBRlZ1YzNWd2NHOXlkR1ZrSUVwUVJVY2djSEp2WTJWemN6b2dVMDlHSUhSNWNHVWdNSGdsTURKNEFFUmxabWx1WlNCSWRXWm1iV0Z1SUZSaFlteGxJREI0SlRBeWVBQkVaV1pwYm1VZ1FYSnBkR2h0WlhScFl5QlVZV0pzWlNBd2VDVXdNbmc2SURCNEpUQXllQUF0S3lBZ0lEQllNSGdBTFRCWUt6QllJREJZTFRCNEt6QjRJREI0QUVKdlozVnpJRVJCUXlCMllXeDFaU0F3ZUNWNEFGOWZibVY0ZEY5d2NtbHRaU0J2ZG1WeVpteHZkd0JJZFdabWJXRnVJR052WkdVZ2MybDZaU0IwWVdKc1pTQnZkbVZ5Wm14dmR3Qk9iM1lBVkdoMUFDQWdJQ0FnSUNBZ0pUUjFJQ1UwZFNBbE5IVWdKVFIxSUNVMGRTQWxOSFVnSlRSMUlDVTBkUUJLVUVWSElIQmhjbUZ0WlhSbGNpQnpkSEoxWTNRZ2JXbHpiV0YwWTJnNklHeHBZbkpoY25rZ2RHaHBibXR6SUhOcGVtVWdhWE1nSlhVc0lHTmhiR3hsY2lCbGVIQmxZM1J6SUNWMUFFUmxabWx1WlNCU1pYTjBZWEowSUVsdWRHVnlkbUZzSUNWMUFGZGhjbTVwYm1jNklIUm9kVzFpYm1GcGJDQnBiV0ZuWlNCemFYcGxJR1J2WlhNZ2JtOTBJRzFoZEdOb0lHUmhkR0VnYkdWdVozUm9JQ1YxQUUxcGMyTmxiR3hoYm1WdmRYTWdiV0Z5YTJWeUlEQjRKVEF5ZUN3Z2JHVnVaM1JvSUNWMUFFcEdTVVlnWlhoMFpXNXphVzl1SUcxaGNtdGxjam9nZEhsd1pTQXdlQ1V3TW5nc0lHeGxibWQwYUNBbGRRQktSa2xHSUdWNGRHVnVjMmx2YmlCdFlYSnJaWEk2SUhCaGJHVjBkR1VnZEdoMWJXSnVZV2xzSUdsdFlXZGxMQ0JzWlc1bmRHZ2dKWFVBU2taSlJpQmxlSFJsYm5OcGIyNGdiV0Z5YTJWeU9pQktVRVZITFdOdmJYQnlaWE56WldRZ2RHaDFiV0p1WVdsc0lHbHRZV2RsTENCc1pXNW5kR2dnSlhVQVNrWkpSaUJsZUhSbGJuTnBiMjRnYldGeWEyVnlPaUJTUjBJZ2RHaDFiV0p1WVdsc0lHbHRZV2RsTENCc1pXNW5kR2dnSlhVQVZXNXJibTkzYmlCQlVGQXhOQ0J0WVhKclpYSWdLRzV2ZENCQlpHOWlaU2tzSUd4bGJtZDBhQ0FsZFFCVmJtdHViM2R1SUVGUVVEQWdiV0Z5YTJWeUlDaHViM1FnU2taSlJpa3NJR3hsYm1kMGFDQWxkUUJQWW5SaGFXNWxaQ0JZVFZNZ2FHRnVaR3hsSUNWMUFFWnlaV1ZrSUZoTlV5Qm9ZVzVrYkdVZ0pYVUFUMkowWVdsdVpXUWdSVTFUSUdoaGJtUnNaU0FsZFFCR2NtVmxaQ0JGVFZNZ2FHRnVaR3hsSUNWMUFIVnVjM1Z3Y0c5eWRHVmtJR3h2WTJGc1pTQm1iM0lnYzNSaGJtUmhjbVFnYVc1d2RYUUFRWFZuZFhOMEFFbHVkRXhwYzNRQVUzUnlhVzVuVEdsemRBQkpiblpoYkdsa0lHTnliM0FnY21WeGRXVnpkQUJWYm5OMWNIQnZjblJsWkNCamIyeHZjaUJqYjI1MlpYSnphVzl1SUhKbGNYVmxjM1FBZFc1emFXZHVaV1FnYzJodmNuUUFkVzV6YVdkdVpXUWdhVzUwQUVOdmNuSjFjSFFnU2xCRlJ5QmtZWFJoT2lCd2NtVnRZWFIxY21VZ1pXNWtJRzltSUdSaGRHRWdjMlZuYldWdWRBQm9aV2xuYUhRQVJuSmhZM1JwYjI1aGJDQnpZVzF3YkdsdVp5QnViM1FnYVcxd2JHVnRaVzUwWldRZ2VXVjBBRU5EU1ZJMk1ERWdjMkZ0Y0d4cGJtY2dibTkwSUdsdGNHeGxiV1Z1ZEdWa0lIbGxkQUJPYjNRZ2FXMXdiR1Z0Wlc1MFpXUWdlV1YwQUVWeWNtOXlJSEpsWVdScGJtY2daR0YwWVNCbWNtOXRJQ1Z6TG1aelpYUUFVbVZoWkdsdVp5QWxjeTVtYzJWMEFHZGxkQUJGY25KdmNqb2dhM0J0VTJWMFVtVm1SR0YwWVZObGRBQkZjbkp2Y2pvZ2EzQnRRMmhoYm1kbFVHRm5aVTV2VDJaU1pXWkVZWFJoVTJWMEFFVnljbTl5T2lCcmNHMU5aWEpuWlZKbFprUmhkR0ZUWlhRQVQyTjBBR1pzYjJGMEFGTmhkQUIxYVc1ME5qUmZkQUJEWVc1dWIzUWdjWFZoYm5ScGVtVWdiVzl5WlNCMGFHRnVJQ1ZrSUdOdmJHOXlJR052YlhCdmJtVnVkSE1BVTNSaGNuUWdUMllnVTJOaGJqb2dKV1FnWTI5dGNHOXVaVzUwY3dCQ2IyZDFjeUIyYVhKMGRXRnNJR0Z5Y21GNUlHRmpZMlZ6Y3dCQ2IyZDFjeUJ6WVcxd2JHbHVaeUJtWVdOMGIzSnpBRkYxWVc1MGFYcHBibWNnZEc4Z0pXUWdQU0FsWkNvbFpDb2xaQ0JqYjJ4dmNuTUFVWFZoYm5ScGVtbHVaeUIwYnlBbFpDQmpiMnh2Y25NQVEyRnVibTkwSUhGMVlXNTBhWHBsSUhSdklHWmxkMlZ5SUhSb1lXNGdKV1FnWTI5c2IzSnpBRU5oYm01dmRDQnhkV0Z1ZEdsNlpTQjBieUJ0YjNKbElIUm9ZVzRnSldRZ1kyOXNiM0p6QUVsdWRtRnNhV1FnU2xCRlJ5Qm1hV3hsSUhOMGNuVmpkSFZ5WlRvZ2RIZHZJRk5QU1NCdFlYSnJaWEp6QUVsdWRtRnNhV1FnU2xCRlJ5Qm1hV3hsSUhOMGNuVmpkSFZ5WlRvZ2RIZHZJRk5QUmlCdFlYSnJaWEp6QUc1bWRFMWhjbXRsY25NQVgyRmtaRTVHVkUxaGNtdGxjbk1BVTIxdmIzUm9hVzVuSUc1dmRDQnpkWEJ3YjNKMFpXUWdkMmwwYUNCdWIyNXpkR0Z1WkdGeVpDQnpZVzF3YkdsdVp5QnlZWFJwYjNNQVRXRjRhVzExYlNCemRYQndiM0owWldRZ2FXMWhaMlVnWkdsdFpXNXphVzl1SUdseklDVjFJSEJwZUdWc2N3QkJjSEJzYVdOaGRHbHZiaUIwY21GdWMyWmxjbkpsWkNCMGIyOGdiV0Z1ZVNCelkyRnViR2x1WlhNQVFYQndiR2xqWVhScGIyNGdkSEpoYm5ObVpYSnlaV1FnZEc5dklHWmxkeUJ6WTJGdWJHbHVaWE1BUkdWaWRXY2diVzlrWlNCelpYUWdkRzhnSlhNQVJtRnBiR1ZrSUhSdklHTnlaV0YwWlNCMFpXMXdiM0poY25rZ1ptbHNaU0FsY3dCRGJHOXpaV1FnZEdWdGNHOXlZWEo1SUdacGJHVWdKWE1BVDNCbGJtVmtJSFJsYlhCdmNtRnllU0JtYVd4bElDVnpBRUZ3Y2dCMlpXTjBiM0lBU1c1d2RYUWdabWxzWlNCeVpXRmtJR1Z5Y205eUFFbHVkbUZzYVdRZ1NsQkZSeUJtYVd4bElITjBjblZqZEhWeVpUb2diV2x6YzJsdVp5QlRUMU1nYldGeWEyVnlBRzVtZEUxaGNtdGxjZ0JrWlhSbFkzUk5ZWEpyWlhJQVoyVjBUa1pVVFdGeWEyVnlBR1JsZEdWamRFNUdWRTFoY210bGNnQlBZM1J2WW1WeUFFNXZkbVZ0WW1WeUFGTmxjSFJsYldKbGNnQkVaV05sYldKbGNnQjFibk5wWjI1bFpDQmphR0Z5QUdsdmMxOWlZWE5sT2pwamJHVmhjZ0JOWVhJQVZXNXlaV052WjI1cGVtVmtJR052YlhCdmJtVnVkQ0JKUkhNZ0pXUWdKV1FnSldRc0lHRnpjM1Z0YVc1bklGbERZa055QUhObGRIVndBRlpwY25SMVlXd2dZWEp5WVhrZ1kyOXVkSEp2Ykd4bGNpQnRaWE56WldRZ2RYQUFVMlZ3QUNWSk9pVk5PaVZUSUNWd0FIUmxZWEprYjNkdUFGTjFiZ0JLZFc0QWMzUmtPanBsZUdObGNIUnBiMjRBUW05bmRYTWdTSFZtWm0xaGJpQjBZV0pzWlNCa1pXWnBibWwwYVc5dUFGTmxiR1ZqZEdWa0lDVmtJR052Ykc5eWN5Qm1iM0lnY1hWaGJuUnBlbUYwYVc5dUFFbHRZV2RsSUhSdmJ5QjNhV1JsSUdadmNpQjBhR2x6SUdsdGNHeGxiV1Z1ZEdGMGFXOXVBRTF2YmdCdVlXNEFSR2xrYmlkMElHVjRjR1ZqZENCdGIzSmxJSFJvWVc0Z2IyNWxJSE5qWVc0QVUyRnRjR3hwYm1jZ1ptRmpkRzl5Y3lCMGIyOGdiR0Z5WjJVZ1ptOXlJR2x1ZEdWeWJHVmhkbVZrSUhOallXNEFTbUZ1QUVwMWJBQmliMjlzQUVKMVptWmxjaUJ3WVhOelpXUWdkRzhnU2xCRlJ5QnNhV0p5WVhKNUlHbHpJSFJ2YnlCemJXRnNiQUJCY0hKcGJBQnpaWFJNYjJkTVpYWmxiQUJuWlhSTWIyZE1aWFpsYkFCbGJYTmpjbWx3ZEdWdU9qcDJZV3dBY0hWemFGOWlZV05yQUVaeWFRQmtjR2tBVGtaVUlHMWhjbXRsY2lCb1pXbG5hSFE2SUNWcEFFNUdWQ0J1ZFcwdUlHOW1JRWx0WVdkbFUyVjBPaUFsYVFCT1JsUWdiV0Z5YTJWeUlHUndhVG9nSldrQVRrWlVJRzFoY210bGNpQjNhV1IwYURvZ0pXa0FaR0YwWVhObGRGQmhkR2h1WVcxbGN5QnphWHBsT2lBbGFRQkNiMmQxY3lCdFlYSnJaWElnYkdWdVozUm9BSGRwWkhSb0FFMWhjbU5vQUVGMVp3QjFibk5wWjI1bFpDQnNiMjVuQUhOMFpEbzZkM04wY21sdVp3QnpkR1E2T25OMGNtbHVad0J6ZEdRNk9uVXhObk4wY21sdVp3QnpkR1E2T25Vek1uTjBjbWx1WndCRGIzQjVjbWxuYUhRZ0tFTXBJREl3TVRnc0lGUm9iMjFoY3lCSExpQk1ZVzVsTENCSGRXbGtieUJXYjJ4c1ltVmthVzVuQUdsdVpnQWxMakJNWmdBbFRHWUFjbVZ6YVhwbEFHRnNiRzlqWVhSdmNqeFVQam82WVd4c2IyTmhkR1VvYzJsNlpWOTBJRzRwSUNkdUp5QmxlR05sWldSeklHMWhlR2x0ZFcwZ2MzVndjRzl5ZEdWa0lITnBlbVVBZEhKMVpRQlVkV1VBWm1Gc2MyVUFVM1Z6Y0dWdWMybHZiaUJ1YjNRZ1lXeHNiM2RsWkNCb1pYSmxBRXAxYm1VQWMyVjBVSEp2YW1WamRHbHZiazVsWVhKUWJHRnVaUUJuWlhSUWNtOXFaV04wYVc5dVRtVmhjbEJzWVc1bEFITmxkRkJ5YjJwbFkzUnBiMjVHWVhKUWJHRnVaUUJuWlhSUWNtOXFaV04wYVc5dVJtRnlVR3hoYm1VQVVtVnhkV1Z6ZEdWa0lHWmxZWFIxY21VZ2QyRnpJRzl0YVhSMFpXUWdZWFFnWTI5dGNHbHNaU0IwYVcxbEFGTmxaV3NnWm1GcGJHVmtJRzl1SUhSbGJYQnZjbUZ5ZVNCbWFXeGxBRkpsWVdRZ1ptRnBiR1ZrSUc5dUlIUmxiWEJ2Y21GeWVTQm1hV3hsQUVWdGNIUjVJR2x1Y0hWMElHWnBiR1VBVUhKbGJXRjBkWEpsSUdWdVpDQnZaaUJwYm5CMWRDQm1hV3hsQUZCeVpXMWhkSFZ5WlNCbGJtUWdiMllnU2xCRlJ5Qm1hV3hsQUhObGRFTmhiV1Z5WVNncE9pQkZjbkp2Y2lCamNtVmhkR2x1WnlBelJDQm9ZVzVrYkdVQVpHOTFZbXhsQUVSRFZDQmpiMlZtWm1samFXVnVkQ0J2ZFhRZ2IyWWdjbUZ1WjJVQVNXNTJZV3hwWkNCamIyeHZjaUJ4ZFdGdWRHbDZZWFJwYjI0Z2JXOWtaU0JqYUdGdVoyVUFTbEJGUnlCa1lYUmhjM1J5WldGdElHTnZiblJoYVc1eklHNXZJR2x0WVdkbEFDQWdJQ0IzYVhSb0lDVmtJSGdnSldRZ2RHaDFiV0p1WVdsc0lHbHRZV2RsQUdkbGRGQnliMk5sYzNOcGJtZEpiV0ZuWlFCVGRHRnlkQ0J2WmlCSmJXRm5aUUJGYm1RZ1QyWWdTVzFoWjJVQVFtOW5kWE1nWW5WbVptVnlJR052Ym5SeWIyd2diVzlrWlFCRGIzSnlkWEIwSUVwUVJVY2daR0YwWVRvZ1ltRmtJRWgxWm1adFlXNGdZMjlrWlFCRGIzSnlkWEIwSUVwUVJVY2daR0YwWVRvZ1ltRmtJR0Z5YVhSb2JXVjBhV01nWTI5a1pRQnpaWFJFWldKMVowMXZaR1VBWjJWMFJHVmlkV2ROYjJSbEFITmxkRlJvY21WemFHOXNaRTF2WkdVQVoyVjBWR2h5WlhOb2IyeGtUVzlrWlFCelpYUkpiV0ZuWlZCeWIyTk5iMlJsQUdkbGRFbHRZV2RsVUhKdlkwMXZaR1VBUW05bmRYTWdhVzV3ZFhRZ1kyOXNiM0p6Y0dGalpRQkNiMmQxY3lCS1VFVkhJR052Ykc5eWMzQmhZMlVBYzJWMFZHaHlaWE5vYjJ4a0FHZGxkRlJvY21WemFHOXNaQUIyYjJsa0FFSmhZMnRwYm1jZ2MzUnZjbVVnYm05MElITjFjSEJ2Y25SbFpBQkVRMVFnYzJOaGJHVmtJR0pzYjJOcklITnBlbVVnSldSNEpXUWdibTkwSUhOMWNIQnZjblJsWkFCUmRXRnVkR2w2WVhScGIyNGdkR0ZpYkdVZ01IZ2xNREo0SUhkaGN5QnViM1FnWkdWbWFXNWxaQUJJZFdabWJXRnVJSFJoWW14bElEQjRKVEF5ZUNCM1lYTWdibTkwSUdSbFptbHVaV1FBUVhKcGRHaHRaWFJwWXlCMFlXSnNaU0F3ZUNVd01uZ2dkMkZ6SUc1dmRDQmtaV1pwYm1Wa0FGZHlhWFJsSUhSdklGaE5VeUJtWVdsc1pXUUFVbVZoWkNCbWNtOXRJRmhOVXlCbVlXbHNaV1FBVjNKcGRHVWdkRzhnUlUxVElHWmhhV3hsWkFCU1pXRmtJR1p5YjIwZ1JVMVRJR1poYVd4bFpBQlhaV1FBSUNBZ0lDQWdJQ0FsTTJRZ0pUTmtJQ1V6WkNBbE0yUWdKVE5rSUNVelpDQWxNMlFnSlROa0FGZGhjbTVwYm1jNklIVnVhMjV2ZDI0Z1NrWkpSaUJ5WlhacGMybHZiaUJ1ZFcxaVpYSWdKV1F1SlRBeVpBQkRiM0p5ZFhCMElFcFFSVWNnWkdGMFlUb2dabTkxYm1RZ2JXRnlhMlZ5SURCNEpUQXllQ0JwYm5OMFpXRmtJRzltSUZKVFZDVmtBRk4wWVhKMElFOW1JRVp5WVcxbElEQjRKVEF5ZURvZ2QybGtkR2c5SlhVc0lHaGxhV2RvZEQwbGRTd2dZMjl0Y0c5dVpXNTBjejBsWkFBZ0lDQWdRMjl0Y0c5dVpXNTBJQ1ZrT2lBbFpHaDRKV1IySUhFOUpXUUFTVzUyWVd4cFpDQndjbTluY21WemMybDJaU0J3WVhKaGJXVjBaWEp6SUZOelBTVmtJRk5sUFNWa0lFRm9QU1ZrSUVGc1BTVmtBQ0FnVTNNOUpXUXNJRk5sUFNWa0xDQkJhRDBsWkN3Z1FXdzlKV1FBSUNBZ0lFTnZiWEJ2Ym1WdWRDQWxaRG9nWkdNOUpXUWdZV005SldRQVNXNTJZV3hwWkNCd2NtOW5jbVZ6YzJsMlpTQndZWEpoYldWMFpYSnpJR0YwSUhOallXNGdjMk55YVhCMElHVnVkSEo1SUNWa0FFbHVkbUZzYVdRZ2MyTmhiaUJ6WTNKcGNIUWdZWFFnWlc1MGNua2dKV1FBUW05bmRYTWdSRkZVSUdsdVpHVjRJQ1ZrQUVKdlozVnpJRVJJVkNCcGJtUmxlQ0FsWkFCQ2IyZDFjeUJFUVVNZ2FXNWtaWGdnSldRQVZHOXZJRzFoYm5rZ1kyOXNiM0lnWTI5dGNHOXVaVzUwY3pvZ0pXUXNJRzFoZUNBbFpBQkpibU52Ym5OcGMzUmxiblFnY0hKdlozSmxjM05wYjI0Z2MyVnhkV1Z1WTJVZ1ptOXlJR052YlhCdmJtVnVkQ0FsWkNCamIyVm1abWxqYVdWdWRDQWxaQUJYY205dVp5QktVRVZISUd4cFluSmhjbmtnZG1WeWMybHZiam9nYkdsaWNtRnllU0JwY3lBbFpDd2dZMkZzYkdWeUlHVjRjR1ZqZEhNZ0pXUUFWR2h5WlhOb2IyeGtJRzF2WkdVZ2MyVjBJSFJ2SUNWa0FGUm9jbVZ6YUc5c1pDQnpaWFFnZEc4Z0pXUUFRWFFnYldGeWEyVnlJREI0SlRBeWVDd2djbVZqYjNabGNua2dZV04wYVc5dUlDVmtBRlZ1YzNWd2NHOXlkR1ZrSUVwUVJVY2daR0YwWVNCd2NtVmphWE5wYjI0Z0pXUUFSR1ZtYVc1bElGRjFZVzUwYVhwaGRHbHZiaUJVWVdKc1pTQWxaQ0FnY0hKbFkybHphVzl1SUNWa0FFRmtiMkpsSUVGUVVERTBJRzFoY210bGNqb2dkbVZ5YzJsdmJpQWxaQ3dnWm14aFozTWdNSGdsTURSNElEQjRKVEEwZUN3Z2RISmhibk5tYjNKdElDVmtBRUZzYkc5allYUmxaQ0IyYVdSbGIwWnlZVzFsVTJsNlpTQWxaQUJKYlhCeWIzQmxjaUJqWVd4c0lIUnZJRXBRUlVjZ2JHbGljbUZ5ZVNCcGJpQnpkR0YwWlNBbFpBQkRZVzV1YjNRZ2RISmhibk5qYjJSbElHUjFaU0IwYnlCdGRXeDBhWEJzWlNCMWMyVWdiMllnY1hWaGJuUnBlbUYwYVc5dUlIUmhZbXhsSUNWa0FGVnVhMjV2ZDI0Z1FXUnZZbVVnWTI5c2IzSWdkSEpoYm5ObWIzSnRJR052WkdVZ0pXUUFTVzUyWVd4cFpDQnRaVzF2Y25rZ2NHOXZiQ0JqYjJSbElDVmtBRUp2WjNWeklHMWxjM05oWjJVZ1kyOWtaU0FsWkFCVWNtRmphMmx1WnlCc2IzTjBMaUFsWkFCS1JrbEdJRUZRVURBZ2JXRnlhMlZ5T2lCMlpYSnphVzl1SUNWa0xpVXdNbVFzSUdSbGJuTnBkSGtnSldSNEpXUWdJQ1ZrQUVSbFl3QWxiR1FsWXdCRGIyMXdiMjVsYm5RZ2FXNWtaWGdnSldRNklHMXBjMjFoZEdOb2FXNW5JSE5oYlhCc2FXNW5JSEpoZEdsdklDVmtPaVZrTENBbFpEb2xaQ3dnSldNQVJtVmlBSEozWVFCVFkyRnVJSE5qY21sd2RDQmtiMlZ6SUc1dmRDQjBjbUZ1YzIxcGRDQmhiR3dnWkdGMFlRQm5aWFJPUmxSRVlYUmhBRjlzYjJGa1EyRnRaWEpoQUNWaElDVmlJQ1ZrSUNWSU9pVk5PaVZUSUNWWkFGQlBVMGxZQUVGU1gweEJRa1ZNU1U1SFgxUklVa1ZUU0Y5TlQwUkZYMEZWVkU5ZlQxUlRWUUJCVWw5TlFWSkxSVkpmU1U1R1QxOURWVlJQUmtaZlVFaEJVMFZmVFVGVVEwaGZRMDlPVkZKQlUxUUFRVkpmVFVGWVgweFBUMUJmUTA5VlRsUUFTVzUyWVd4cFpDQmpiMjF3YjI1bGJuUWdTVVFnSldRZ2FXNGdVMDlUQUVGU1gwMUJVa3RGVWw5SlRrWlBYME5WVkU5R1JsOVFTRUZUUlY5SVJWVlNTVk5VU1VOZlZGSlBWVUpNUlZOUFRVVmZUVUZVVWtsWVgwTlBSRVZUQUVWU1VrOVNYMDFCVWt0RlVsOUpUa1JGV0Y5UFZWUmZUMFpmUWs5VlRrUlRBQ1ZJT2lWTk9pVlRBRUZTWDB4UFIxOU1SVlpGVEY5RlVsSlBVZ0JCVWw5TlFWSkxSVkpmU1U1R1QxOURWVlJQUmtaZlVFaEJVMFZmVUU5VFJWOUZVbEpQVWdCQlVsOU1UMGRmVEVWV1JVeGZTVTVHVHdCQlVsOU1UMGRmVEVWV1JVeGZVa1ZNWDBsT1JrOEFRVkpmVEU5SFgweEZWa1ZNWDFkQlVrNEFRVkpmVFVGU1MwVlNYMGxPUms5ZlExVlVUMFpHWDFCSVFWTkZYMUJCVkZSRlVrNWZSVmhVVWtGRFZFbFBUZ0JPUVU0QVFWSmZURUZDUlV4SlRrZGZWRWhTUlZOSVgwMVBSRVZmUVZWVVQxOU5SVVJKUVU0QVVFMEFTbEJGUjAxRlRRQkJUUUJNUTE5QlRFd0FRVkpmVFVGU1MwVlNYMGxPUms5ZlExVlVUMFpHWDFCSVFWTkZYMDFCVkVOSVgwSkJVa05QUkVWZlJVUkRYMFpCU1V3QVFWSmZURUZDUlV4SlRrZGZWRWhTUlZOSVgwMVBSRVZmVFVGT1ZVRk1BRUZTWDAxQlVrdEZVbDlKVGtaUFgwTlZWRTlHUmw5UVNFRlRSVjlRVDFORlgwVlNVazlTWDAxVlRGUkpBRUZTWDB4UFQxQmZRbEpGUVV0ZlZFaFNSVk5JQUVGU1gwUkZSa0ZWVEZSZlRFRkNSVXhKVGtkZlZFaFNSVk5JQUVGU1gweFBSMTlNUlZaRlRGOUVSVUpWUndCTVFVNUhBRWx1ZG1Gc2FXUWdVMDlUSUhCaGNtRnRaWFJsY25NZ1ptOXlJSE5sY1hWbGJuUnBZV3dnU2xCRlJ3QkRZWFYwYVc5dU9pQnhkV0Z1ZEdsNllYUnBiMjRnZEdGaWJHVnpJR0Z5WlNCMGIyOGdZMjloY25ObElHWnZjaUJpWVhObGJHbHVaU0JLVUVWSEFFbHVkbUZzYVdRZ1NsQkZSeUJtYVd4bElITjBjblZqZEhWeVpUb2dKWE1nWW1WbWIzSmxJRk5QUmdCSlRrWUFRVkpmVEVGQ1JVeEpUa2RmVkVoU1JWTklYMDFQUkVWZlFWVlVUMTlCUkVGUVZFbFdSUUJCVWw5TlFWSkxSVkpmU1U1R1QxOURWVlJQUmtaZlVFaEJVMFZmVGs5T1JRQkJVbDlFUlVKVlIxOUVTVk5CUWt4RkFFRlNYMFJGUWxWSFgwVk9RVUpNUlFCQlVsOUpUVUZIUlY5UVVrOURYMFpTUVUxRlgwbE5RVWRGQUVGU1gwbE5RVWRGWDFCU1QwTmZSa2xGVEVSZlNVMUJSMFVBUVZKZlJFVkdRVlZNVkY5RVJVSlZSMTlOVDBSRkFFRlNYMFJGUmtGVlRGUmZTVTFCUjBWZlVGSlBRMTlOVDBSRkFFRlNYMDFCVWt0RlVsOUpUa1pQWDBOVlZFOUdSbDlRU0VGVFJWOU5RVlJEU0Y5RFQwNUdTVVJGVGtORkFFVlNVazlTWDBGU1EwOU9WRkpQVEV4RlVsOU9UMVJmUms5VlRrUUFSVkpTVDFKZlRWVk1WRWxOUVZKTFJWSmZUazlVWDBaUFZVNUVBRUZTWDAxQlVrdEZVbDlKVGtaUFgwTlZWRTlHUmw5UVNFRlRSVjlOUVZSRFNGOUNRVkpEVDBSRlgwNVBWRjlHVDFWT1JBQkJVbDlOUVZKTFJWSmZTVTVHVDE5RFZWUlBSa1pmVUVoQlUwVmZUVUZVUTBoZlIwVk9SVkpKUXdCUGRYUndkWFFnWm1sc1pTQjNjbWwwWlNCbGNuSnZjaUF0TFMwZ2IzVjBJRzltSUdScGMyc2djM0JoWTJVL0FGZHlhWFJsSUdaaGFXeGxaQ0J2YmlCMFpXMXdiM0poY25rZ1ptbHNaU0F0TFMwZ2IzVjBJRzltSUdScGMyc2djM0JoWTJVL0FHVnRjMk55YVhCMFpXNDZPbTFsYlc5eWVWOTJhV1YzUEhOb2IzSjBQZ0JsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eDFibk5wWjI1bFpDQnphRzl5ZEQ0QVpXMXpZM0pwY0hSbGJqbzZiV1Z0YjNKNVgzWnBaWGM4YVc1MFBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4MWJuTnBaMjVsWkNCcGJuUStBR1Z0YzJOeWFYQjBaVzQ2T20xbGJXOXllVjkyYVdWM1BHWnNiMkYwUGdCbGJYTmpjbWx3ZEdWdU9qcHRaVzF2Y25sZmRtbGxkengxYVc1ME9GOTBQZ0JsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eHBiblE0WDNRK0FHVnRjMk55YVhCMFpXNDZPbTFsYlc5eWVWOTJhV1YzUEhWcGJuUXhObDkwUGdCbGJYTmpjbWx3ZEdWdU9qcHRaVzF2Y25sZmRtbGxkenhwYm5ReE5sOTBQZ0JsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eDFhVzUwTXpKZmRENEFaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOGFXNTBNekpmZEQ0QVpXMXpZM0pwY0hSbGJqbzZiV1Z0YjNKNVgzWnBaWGM4WTJoaGNqNEFaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOGRXNXphV2R1WldRZ1kyaGhjajRBYzNSa09qcGlZWE5wWTE5emRISnBibWM4ZFc1emFXZHVaV1FnWTJoaGNqNEFaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOGMybG5ibVZrSUdOb1lYSStBR1Z0YzJOeWFYQjBaVzQ2T20xbGJXOXllVjkyYVdWM1BHeHZibWMrQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQSFZ1YzJsbmJtVmtJR3h2Ym1jK0FHVnRjMk55YVhCMFpXNDZPbTFsYlc5eWVWOTJhV1YzUEdSdmRXSnNaVDRBTURFeU16UTFOamM0T1FBNVl5QWdNVFF0U21GdUxUSXdNVGdBUXk1VlZFWXRPQUJGY25KdmNpQnlaV0ZrYVc1bklFdFFUU0JrWVhSaElHWnliMjBnSlhNdVpuTmxkRE1BVW1WaFpHbHVaeUFsY3k1bWMyVjBNd0J6WlhSMWNFRlNNZ0JGY25KdmNpQmxlR05sWldRZ2JXRjRhVzExYlNCd1lXZGxjeTRBYjI0dUFHOW1aaTRBVEc5aFpHbHVaeUJ2WmlCT1JsUWdaR0YwWVNCamIyMXdiR1YwWlM0QWMyVjBRMkZ0WlhKaEtDazZJRVZ5Y205eU9pQmhjbEJoY21GdFRGUkRjbVZoZEdVdUFFUnZibVV1QUhObGRFTmhiV1Z5WVNncE9pQkZjbkp2Y2pvZ1lYSkRjbVZoZEdWSVlXNWtiR1V1QUVWeWNtOXlPaUJoY2pKRGNtVmhkR1ZJWVc1a2JHVXVBR0Z5Um1sc2RHVnlWSEpoYm5OTllYUWdaWEp5YjNJZ2QybDBhQ0J0WVhKclpYSWdKV1F1QUVsdFlXZGxJSEJ5YjJNdUlHMXZaR1VnYzJWMElIUnZJQ1ZrTGdCQmMzTnBaMjVsWkNCd1lXZGxJRzV2TGlBbFpDNEFiRzloWkVOaGJXVnlZU2dwT2lCRmNuSnZjaUJzYjJGa2FXNW5JSEJoY21GdFpYUmxjaUJtYVd4bElDVnpJR1p2Y2lCallXMWxjbUV1QUNodWRXeHNLUUJGYlhCMGVTQktVRVZISUdsdFlXZGxJQ2hFVGt3Z2JtOTBJSE4xY0hCdmNuUmxaQ2tBU1c1emRXWm1hV05wWlc1MElHMWxiVzl5ZVNBb1kyRnpaU0FsWkNrQVlXUmtJRTVHVkNCdFlYSnJaWEl0UGlBbkpYTW5BRkIxY21VZ2RtbHlkSFZoYkNCbWRXNWpkR2x2YmlCallXeHNaV1FoQUNWekNnQkZjbkp2Y2pvZ2JXRnNiRzlqQ2dBakl5TWdSbVZoZEhWeVpTQmpZVzVrYVdSaGRHVnpJR1p2Y2lCMGNtRmphMmx1WnlCaGNtVWdiM1psY21ac2IzY3VDZ0JVY21GamEyVmtJSEJoWjJVZ0pXUWdLRzFoZUNBbFpDa3VDZ0FxS2lvZ1EyRnRaWEpoSUZCaGNtRnRaWFJsY2lCeVpYTnBlbVZrSUdaeWIyMGdKV1FzSUNWa0xpQXFLaW9LQUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BYVdSa1pHUmtaR1JrWkdSa1pHUUFhUUJwYVdscGFXa0FBRTVUZEROZlh6STJkbVZqZEc5eVNVNVRYekV5WW1GemFXTmZjM1J5YVc1blNXTk9VMTh4TVdOb1lYSmZkSEpoYVhSelNXTkZSVTVUWHpsaGJHeHZZMkYwYjNKSlkwVkZSVVZPVXpSZlNWTTJYMFZGUlVVQVRsTjBNMTlmTWpFelgxOTJaV04wYjNKZlltRnpaVWxPVTE4eE1tSmhjMmxqWDNOMGNtbHVaMGxqVGxOZk1URmphR0Z5WDNSeVlXbDBjMGxqUlVWT1UxODVZV3hzYjJOaGRHOXlTV05GUlVWRlRsTTBYMGxUTmw5RlJVVkZBRTVUZEROZlh6SXlNRjlmZG1WamRHOXlYMkpoYzJWZlkyOXRiVzl1U1V4aU1VVkZSUUFBQUFBRTlRQUFnSkVBQUlqMUFBQWlrUUFBQUFBQUFBRUFBQUNva1FBQUFBQUFBSWoxQUFETWtBQUFBQUFBQUFFQUFBQ3drUUFBQUFBQUFGQk9VM1F6WDE4eU5uWmxZM1J2Y2tsT1UxOHhNbUpoYzJsalgzTjBjbWx1WjBsalRsTmZNVEZqYUdGeVgzUnlZV2wwYzBsalJVVk9VMTg1WVd4c2IyTmhkRzl5U1dORlJVVkZUbE0wWDBsVE5sOUZSVVZGQUFEazlRQUE0SkVBQUFBQUFBRElrUUFBVUV0T1UzUXpYMTh5Tm5abFkzUnZja2xPVTE4eE1tSmhjMmxqWDNOMGNtbHVaMGxqVGxOZk1URmphR0Z5WDNSeVlXbDBjMGxqUlVWT1UxODVZV3hzYjJOaGRHOXlTV05GUlVWRlRsTTBYMGxUTmw5RlJVVkZBT1QxQUFCSWtnQUFBUUFBQU1pUkFBQnBhUUIyQUhacEFEaVNBQUJBOUFBQU9KSUFBRGlUQUFCT1UzUXpYMTh5TVRKaVlYTnBZMTl6ZEhKcGJtZEpZMDVUWHpFeFkyaGhjbDkwY21GcGRITkpZMFZGVGxOZk9XRnNiRzlqWVhSdmNrbGpSVVZGUlFCT1UzUXpYMTh5TWpGZlgySmhjMmxqWDNOMGNtbHVaMTlqYjIxdGIyNUpUR0l4UlVWRkFBQUFBQVQxQUFBSGt3QUFpUFVBQU1pU0FBQUFBQUFBQVFBQUFEQ1RBQUFBQUFBQWRtbHBhUUJCNEtZQ0MxQkE5QUFBT0pJQUFNVDBBQUE0a3dBQWRtbHBhV2tBQUFERTlBQUFvSklBQUdscGFRQ2trd0FBeUpFQUFNVDBBQUJPTVRCbGJYTmpjbWx3ZEdWdU0zWmhiRVVBQUFUMUFBQ1Frd0FBYVdscGFRQkJ3S2NDQzVZQ1dQUUFBTWlSQUFERTlBQUFPSk1BQUdscGFXbHBBRTVUZEROZlh6STJkbVZqZEc5eVNXbE9VMTg1WVd4c2IyTmhkRzl5U1dsRlJVVkZBRTVUZEROZlh6SXhNMTlmZG1WamRHOXlYMkpoYzJWSmFVNVRYemxoYkd4dlkyRjBiM0pKYVVWRlJVVUFBQUNJOVFBQStwTUFBQUFBQUFBQkFBQUFxSkVBQUFBQUFBQ0k5UUFBMXBNQUFBQUFBQUFCQUFBQUtKUUFBQUFBQUFCUVRsTjBNMTlmTWpaMlpXTjBiM0pKYVU1VFh6bGhiR3h2WTJGMGIzSkphVVZGUlVVQUFBQUE1UFVBQUZpVUFBQUFBQUFBUUpRQUFGQkxUbE4wTTE5Zk1qWjJaV04wYjNKSmFVNVRYemxoYkd4dlkyRjBiM0pKYVVWRlJVVUFBQURrOVFBQWtKUUFBQUVBQUFCQWxBQUFnSlFBQUVEMEFBQ0FsQUFBb1BRQVFlQ3BBZ3NpUVBRQUFJQ1VBQURFOUFBQW9QUUFBTVQwQUFDNGxBQUFwSk1BQUVDVUFBREU5QUJCa0tvQ0MvSUNXUFFBQUVDVUFBREU5QUFBb1BRQUFFNVRkRE5mWHpJMmRtVmpkRzl5U1RsdVpuUk5ZWEpyWlhKT1UxODVZV3hzYjJOaGRHOXlTVk14WDBWRlJVVUFUbE4wTTE5Zk1qRXpYMTkyWldOMGIzSmZZbUZ6WlVrNWJtWjBUV0Z5YTJWeVRsTmZPV0ZzYkc5allYUnZja2xUTVY5RlJVVkZBQUFBaVBVQUFFK1ZBQUFBQUFBQUFRQUFBS2lSQUFBQUFBQUFpUFVBQUNDVkFBQUFBQUFBQVFBQUFJaVZBQUFBQUFBQVVFNVRkRE5mWHpJMmRtVmpkRzl5U1RsdVpuUk5ZWEpyWlhKT1UxODVZV3hzYjJOaGRHOXlTVk14WDBWRlJVVUE1UFVBQUxpVkFBQUFBQUFBb0pVQUFGQkxUbE4wTTE5Zk1qWjJaV04wYjNKSk9XNW1kRTFoY210bGNrNVRYemxoYkd4dlkyRjBiM0pKVXpGZlJVVkZSUUFBQUFEazlRQUErSlVBQUFFQUFBQ2dsUUFBNkpVQUFFRDBBQURvbFFBQVdKWUFBRGx1Wm5STllYSnJaWElBQUFUMUFBQk1sZ0FBUVBRQUFPaVZBQURFOUFBQVdKWUFBTVQwQUFBc2xnQUFwSk1BQUtDVkFBREU5QUJCa0swQ0M1SUJXUFFBQUtDVkFBREU5QUFBV0pZQUFLRDBBQUNnOUFBQW9QUUFBS0QwQUFDZzlBQUFvUFFBQUVDVUFBQ2c5QUFBeUpFQUFLRDBBQUE0a3dBQW9QUUFBS0QwQUFDZzlBQUFXSllBQUtEMEFBQ2c5QUFBYVFBQUFFRDBBQUNnOUFBQWRtbHBBS0QwQUFCQTlBQUFvUFFBQVBUMEFBQjJhV2xrQUFBQUFQVDBBQUNnOUFBQVpHbHBBRUQwQUFDZzlBQUFvUFFBUWJDdUFndkxBNEVCSFZvT0FvWWxFQU1VRVJJRUN3Z1VCZGdERndiYUFSa0g1UUFjQ0c4QUhnazJBQ0VLR2dBakN3MEFDUXdHQUFvTkF3QU1EUUVBanc5L1dpUVFKVDhtRWZJc0p4SjhJQ2dUdVJjcUZJSVJLeFh2REMwV29Ra3VGeThITUJoY0JURVpCZ1F6R2dNRE5CdEFBalljc1FFNEhVUUJPUjcxQURzZnR3QThJSW9BUGlGb0FEOGlUZ0FnSXpzQUlRa3NBS1VsNFZwQUpreElRU2NOT2tNbzhTNUVLUjhtUlNvekgwWXJxQmxJTEJnVlNTMTNFVW91ZEE1TEwvc0xUVEQ0Q1U0eFlRaFBNZ1lITURQTkJUSTAzZ1F5TlE4RU16WmpBelEzMUFJMU9Gd0NOam40QVRjNnBBRTRPMkFCT1R3bEFUbzk5Z0E3UHNzQVBUK3JBRDBnandEQlFSSmJVRUlFVFZGRExFRlNSTmczVTBYb0wxUkdQQ2xXUjNralYwamZIbGRKcVJwSVNrNFhTRXNrRkVwTW5CRktUV3NQUzA1UkRVMVB0Z3ROTUVBSzBGRXlXRmhTSEUxWlU0NURXbFRkTzF0VjdqUmNWcTR1WFZlYUtWWkhGaVhZV1hCVlgxcXBUR0JiMlVSaFhDSStZMTBrT0dOZXRESmRWaGN1MzJDb1ZtVmhSazltWXVWSFoyUFBRV2hrUFR4alhWNDNhV1l4VW1wbkQweHJhRGxHWjJOZVFlbHFKMVpzYStkUWJXZUZTMjV0bDFWdmEwOVE3bThRV25CdElsWHdiK3RaY1hFZFdsTlBVd0JCeWJJQ0N3Tk1VMFVBUWFHekFndklBVURGV0o5VFFrc0FRRWt5b3lLb0VjVllJWHY4YzJKb3hWaS9SUXN3ZmhpZlUveHpRVzFVWXA5VHMwRkJMUklYUWt0aWFGUmlmbGhDU3lFN3VpakRGQUJBeFZpZlUwSkxBRUJKTXFNaXFCRkpNcjlGczBFaE8wa3lnaWMzRytBTm95SUxNRUV0dWlpaklqY2J2eEtPQ2FnUmZoZ1NGOE1VcUJIZ0RZNEozd1FBQUFBQUFBRHdQKzloU0xGUU1mWS95bTlOa2E3bjlEK3FFV3p2WXREeVB3QUFBQUFBQVBBL083K253R2trNlQrN0lNZDdlbEhoUDEycmN0NVZxTkUvcndBQUFMQUFBQUN4QUVIMHRBSUxMUUVBQUFBQ0FBQUFBd0FBQUFBQUFBQUJBQUFBQlFBQUFBSUFBQUFFQUFBQUJnQUFBQU1BQUFBSEFBQUFDQUJCdExVQ0M1MEJBUUFBQUFVQUFBQUdBQUFBQWdBQUFBUUFBQUFIQUFBQURBQUFBQU1BQUFBSUFBQUFDd0FBQUEwQUFBQUpBQUFBQ2dBQUFBNEFBQUFQQUFBQUFBQUFBQUVBQUFBRkFBQUFCZ0FBQUE0QUFBQUNBQUFBQkFBQUFBY0FBQUFOQUFBQUR3QUFBQU1BQUFBSUFBQUFEQUFBQUJBQUFBQVZBQUFBQ1FBQUFBc0FBQUFSQUFBQUZBQUFBQllBQUFBS0FBQUFFZ0FBQUJNQUFBQVhBQUFBR0FCQjVMWUNDODBDQVFBQUFBVUFBQUFHQUFBQURnQUFBQThBQUFBQ0FBQUFCQUFBQUFjQUFBQU5BQUFBRUFBQUFCa0FBQUFEQUFBQUNBQUFBQXdBQUFBUkFBQUFHQUFBQUJvQUFBQUpBQUFBQ3dBQUFCSUFBQUFYQUFBQUd3QUFBQ0FBQUFBS0FBQUFFd0FBQUJZQUFBQWNBQUFBSHdBQUFDRUFBQUFVQUFBQUZRQUFBQjBBQUFBZUFBQUFJZ0FBQUNNQUFBQUFBQUFBQVFBQUFBVUFBQUFHQUFBQURnQUFBQThBQUFBYkFBQUFBZ0FBQUFRQUFBQUhBQUFBRFFBQUFCQUFBQUFhQUFBQUhBQUFBQU1BQUFBSUFBQUFEQUFBQUJFQUFBQVpBQUFBSFFBQUFDWUFBQUFKQUFBQUN3QUFBQklBQUFBWUFBQUFIZ0FBQUNVQUFBQW5BQUFBQ2dBQUFCTUFBQUFYQUFBQUh3QUFBQ1FBQUFBb0FBQUFMUUFBQUJRQUFBQVdBQUFBSUFBQUFDTUFBQUFwQUFBQUxBQUFBQzRBQUFBVkFBQUFJUUFBQUNJQUFBQXFBQUFBS3dBQUFDOEFBQUF3QUVIRXVRSUw5UWdCQUFBQUJRQUFBQVlBQUFBT0FBQUFEd0FBQUJzQUFBQWNBQUFBQWdBQUFBUUFBQUFIQUFBQURRQUFBQkFBQUFBYUFBQUFIUUFBQUNvQUFBQURBQUFBQ0FBQUFBd0FBQUFSQUFBQUdRQUFBQjRBQUFBcEFBQUFLd0FBQUFrQUFBQUxBQUFBRWdBQUFCZ0FBQUFmQUFBQUtBQUFBQ3dBQUFBMUFBQUFDZ0FBQUJNQUFBQVhBQUFBSUFBQUFDY0FBQUF0QUFBQU5BQUFBRFlBQUFBVUFBQUFGZ0FBQUNFQUFBQW1BQUFBTGdBQUFETUFBQUEzQUFBQVBBQUFBQlVBQUFBaUFBQUFKUUFBQUM4QUFBQXlBQUFBT0FBQUFEc0FBQUE5QUFBQUl3QUFBQ1FBQUFBd0FBQUFNUUFBQURrQUFBQTZBQUFBUGdBQUFEOEFBQUFBQUFBQUFRQUFBQU1BQUFBSEFBQUFEd0FBQUI4QUFBQS9BQUFBZndBQUFQOEFBQUQvQVFBQS93TUFBUDhIQUFEL0R3QUEveDhBQVA4L0FBRC9md0FBQVFBQUFBTUFBQUFEQUFBQUJBQUFBQVFBQUFBREFBQUFBd0FBQUFBQUFBQnhoUUFBY25BQUFFMXdBQUFaZndBQTJJWUFBTTUwQUFCamZnQUFSSUFBQU5pRkFBQlhlZ0FBM0g4QUFQTi9BQUFEZkFBQWpJTUFBT3A2QUFCVmhRQUFHNFFBQUNLQ0FBQ1VnZ0FBdzNZQUFNdUNBQURIaEFBQU4zSUFBS2gyQUFBbmV3QUFDWDBBQUlSMUFBQWtnd0FBNDNRQUFCR0RBQUM3Y1FBQS9vSUFBT3VDQUFDYmp3QUFJb0VBQUE2QkFBREplZ0FBQ25rQUFEQ0xBQUJjZFFBQTVuRUFBTkJ2QUFBUmVBQUE3bjBBQVA5OUFBRHhoQUFBSUlZQUFJQitBQUNwZFFBQWhIMEFBTDJBQUFBb2dBQUFtSUFBQUtkK0FBQnVnQUFBa25BQUFNQ1BBQUJkZGdBQUZYY0FBRDEzQUFCd2lRQUFrWGNBQUNCNUFBQXhjUUFBWkhjQUFLcDRBQURRZlFBQXNuMEFBRitMQUFCcmVBQUFFbkVBQUFSNkFBQ2FlZ0FBK1lBQUFPV0FBQUJzZkFBQUFJNEFBREtKQUFCcGhBQUFEblFBQU9KekFBQjNjUUFBVzNFQUFENkVBQUNFY2dBQWVuUUFBR04wQUFBTWZ3QUFPNEVBQUptRkFBQ2ZjZ0FBQW5NQUFNbCtBQURiY2dBQStYQUFBQTl5QUFEYWRnQUEvWFlBQUhaNkFBRDJnd0FBdzRFQUFOaDNBQURKZ1FBQUE0SUFBUDErQUFDTGRnQUFkb0lBQUZtQ0FBRE5lQUFBNW5nQUFHcHpBQUF3Y3dBQXJITUFBTXA1QUFCUGRBQUFPSFFBQUMrRkFBQlhmd0FBU29NQUFMMXdBQUFrZFFBQU0zOEFBR09CQUFBYmZnQUFrWUVBQUFlSkFBQkFlQUFBQUFBQUFFQUdBQUNBUGdBQUFBQUFBSWdUQUFBQXdERHdETXc4L0FQRE0vTVB6ei8vZ0VDd2NJeE12SHlEUTdOemowKy9meURnRU5BczdCemNJK01UMHkvdkg5K2dZSkJRckd5Y1hLTmprMU92YjU5ZkNNZzQrQVRFTlBRTHl6djdCOGMzOTRoSXVIaUVSTFIwaTB1N2U0ZEh0M2NvNkJqWUpPUVUxQ3ZyRzlzbjV4ZlhxR2lZV0tSa2xGU3JhNXRicDJlWFZ3TENNdklPemo3K0FjRXg4UTNOUGYyQ1FySnlqazYrZm9GQnNYR05UYjE5SXVJUzBpN3VIdDRoNFJIUkxlMGQzYUppa2xLdWJwNWVvV0dSVWExdG5WMEt5anI2QnNZMjlnbkpPZmtGeFRYMWlrcTZlb1pHdG5hSlNibDVoVVcxZFNycUd0b201aGJXS2VrWjJTWGxGZFdxYXBwYXBtYVdWcWxwbVZtbFpaVlZBUUFBQUFBQUFBQUNBRUhFd2dJTHZRUUJBQUFBQ0FBQUFCQUFBQUFKQUFBQUFnQUFBQU1BQUFBS0FBQUFFUUFBQUJnQUFBQWdBQUFBR1FBQUFCSUFBQUFMQUFBQUJBQUFBQVVBQUFBTUFBQUFFd0FBQUJvQUFBQWhBQUFBS0FBQUFEQUFBQUFwQUFBQUlnQUFBQnNBQUFBVUFBQUFEUUFBQUFZQUFBQUhBQUFBRGdBQUFCVUFBQUFjQUFBQUl3QUFBQ29BQUFBeEFBQUFPQUFBQURrQUFBQXlBQUFBS3dBQUFDUUFBQUFkQUFBQUZnQUFBQThBQUFBWEFBQUFIZ0FBQUNVQUFBQXNBQUFBTXdBQUFEb0FBQUE3QUFBQU5BQUFBQzBBQUFBbUFBQUFId0FBQUNjQUFBQXVBQUFBTlFBQUFEd0FBQUE5QUFBQU5nQUFBQzhBQUFBM0FBQUFQZ0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFBQUFBQUFFQUFBQUlBQUFBRUFBQUFBa0FBQUFDQUFBQUF3QUFBQW9BQUFBUkFBQUFHQUFBQUNBQUFBQVpBQUFBRWdBQUFBc0FBQUFFQUFBQUJRQUFBQXdBQUFBVEFBQUFHZ0FBQUNFQUFBQW9BQUFBTUFBQUFDa0FBQUFpQUFBQUd3QUFBQlFBQUFBTkFBQUFCZ0FBQUE0QUFBQVZBQUFBSEFBQUFDTUFBQUFxQUFBQU1RQUFBRElBQUFBckFBQUFKQUFBQUIwQUFBQVdBQUFBSGdBQUFDVUFBQUFzQUFBQU13QUFBRFFBQUFBdEFBQUFKZ0FBQUM0QUFBQTFBQUFBTmdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QVFaVEhBZ3Z0QWdFQUFBQUlBQUFBRUFBQUFBa0FBQUFDQUFBQUF3QUFBQW9BQUFBUkFBQUFHQUFBQUNBQUFBQVpBQUFBRWdBQUFBc0FBQUFFQUFBQUJRQUFBQXdBQUFBVEFBQUFHZ0FBQUNFQUFBQW9BQUFBS1FBQUFDSUFBQUFiQUFBQUZBQUFBQTBBQUFBVkFBQUFIQUFBQUNNQUFBQXFBQUFBS3dBQUFDUUFBQUFkQUFBQUpRQUFBQ3dBQUFBdEFBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBQUFBQUFBQkFBQUFDQUFBQUJBQUFBQUpBQUFBQWdBQUFBTUFBQUFLQUFBQUVRQUFBQmdBQUFBZ0FBQUFHUUFBQUJJQUFBQUxBQUFBQkFBQUFBd0FBQUFUQUFBQUdnQUFBQ0VBQUFBaUFBQUFHd0FBQUJRQUFBQWNBQUFBSXdBQUFDUUFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BRUdVeWdJTDNRRUJBQUFBQ0FBQUFCQUFBQUFKQUFBQUFnQUFBQU1BQUFBS0FBQUFFUUFBQUJnQUFBQVpBQUFBRWdBQUFBc0FBQUFUQUFBQUdnQUFBQnNBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQUFBQUFBQUVBQUFBSUFBQUFFQUFBQUFrQUFBQUNBQUFBQ2dBQUFCRUFBQUFTQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdCQmhNd0NDNE1kQVFBQUFBZ0FBQUFKQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFFNVRkRE5mWHpJeE1tSmhjMmxqWDNOMGNtbHVaMGxvVGxOZk1URmphR0Z5WDNSeVlXbDBjMGxvUlVWT1UxODVZV3hzYjJOaGRHOXlTV2hGUlVWRkFBQ0k5UUFBVUtZQUFBQUFBQUFCQUFBQU1KTUFBQUFBQUFCT1UzUXpYMTh5TVRKaVlYTnBZMTl6ZEhKcGJtZEpkMDVUWHpFeFkyaGhjbDkwY21GcGRITkpkMFZGVGxOZk9XRnNiRzlqWVhSdmNrbDNSVVZGUlFBQWlQVUFBS2ltQUFBQUFBQUFBUUFBQURDVEFBQUFBQUFBVGxOME0xOWZNakV5WW1GemFXTmZjM1J5YVc1blNVUnpUbE5mTVRGamFHRnlYM1J5WVdsMGMwbEVjMFZGVGxOZk9XRnNiRzlqWVhSdmNrbEVjMFZGUlVVQUFBQ0k5UUFBQUtjQUFBQUFBQUFCQUFBQU1KTUFBQUFBQUFCT1UzUXpYMTh5TVRKaVlYTnBZMTl6ZEhKcGJtZEpSR2xPVTE4eE1XTm9ZWEpmZEhKaGFYUnpTVVJwUlVWT1UxODVZV3hzYjJOaGRHOXlTVVJwUlVWRlJRQUFBSWoxQUFCY3B3QUFBQUFBQUFFQUFBQXdrd0FBQUFBQUFFNHhNR1Z0YzJOeWFYQjBaVzR4TVcxbGJXOXllVjkyYVdWM1NXTkZSUUFBQlBVQUFMaW5BQUJPTVRCbGJYTmpjbWx3ZEdWdU1URnRaVzF2Y25sZmRtbGxkMGxoUlVVQUFBVDFBQURncHdBQVRqRXdaVzF6WTNKcGNIUmxiakV4YldWdGIzSjVYM1pwWlhkSmFFVkZBQUFFOVFBQUNLZ0FBRTR4TUdWdGMyTnlhWEIwWlc0eE1XMWxiVzl5ZVY5MmFXVjNTWE5GUlFBQUJQVUFBRENvQUFCT01UQmxiWE5qY21sd2RHVnVNVEZ0WlcxdmNubGZkbWxsZDBsMFJVVUFBQVQxQUFCWXFBQUFUakV3WlcxelkzSnBjSFJsYmpFeGJXVnRiM0o1WDNacFpYZEphVVZGQUFBRTlRQUFnS2dBQUU0eE1HVnRjMk55YVhCMFpXNHhNVzFsYlc5eWVWOTJhV1YzU1dwRlJRQUFCUFVBQUtpb0FBQk9NVEJsYlhOamNtbHdkR1Z1TVRGdFpXMXZjbmxmZG1sbGQwbHNSVVVBQUFUMUFBRFFxQUFBVGpFd1pXMXpZM0pwY0hSbGJqRXhiV1Z0YjNKNVgzWnBaWGRKYlVWRkFBQUU5UUFBK0tnQUFFNHhNR1Z0YzJOeWFYQjBaVzR4TVcxbGJXOXllVjkyYVdWM1NXWkZSUUFBQlBVQUFDQ3BBQUJPTVRCbGJYTmpjbWx3ZEdWdU1URnRaVzF2Y25sZmRtbGxkMGxrUlVVQUFBVDFBQUJJcVFBQTJ3OUpQOXNQU2Iva3l4WkE1TXNXd0FBQUFBQUFBQUNBMnc5SlFOc1BTY0E0WSswKzJnOUpQMTZZZXovYUQ4ay9hVGVzTVdnaElqTzBEeFF6YUNHaU13TUFBQUFFQUFBQUJBQUFBQVlBQUFDRCthSUFSRTV1QVB3cEZRRFJWeWNBM1RUMUFHTGJ3QUE4bVpVQVFaQkRBR05SL2dDNzNxc0F0MkhGQURwdUpBRFNUVUlBU1FiZ0FBbnFMZ0Fja3RFQTZ4MytBQ214SEFEb1BxY0E5VFdDQUVTN0xnQ2M2WVFBdENad0FFRitYd0RXa1RrQVU0TTVBSnowT1FDTFg0UUFLUG05QVBnZk93RGUvNWNBRDVnRkFCRXY3d0FLV29zQWJSOXRBTTkrTmdBSnl5Y0FSayszQUo1bVB3QXQ2bDhBdWlkMUFPWHJ4d0E5ZS9FQTl6a0hBSkpTaWdEN2Erb0FIN0ZmQUFoZGpRQXdBMVlBZS94R0FQQ3Jhd0Fndk04QU52U2FBT09wSFFCZVlaRUFDQnZtQUlXWlpRQ2dGRjhBalVCb0FJRFkvd0FuYzAwQUJnWXhBTXBXRlFESnFITUFlK0pnQUd1TXdBQVp4RWNBeldmREFBbm8zQUJaZ3lvQWkzYkVBS1ljbGdCRXI5MEFHVmZSQUtVK0JRQUZCLzhBTTM0L0FNSXk2QUNZVDk0QXUzMHlBQ1k5d3dBZWErOEFuL2hlQURVZk9nQi84c29BOFljZEFIeVFJUUJxSkh3QTFXNzZBREF0ZHdBVk8wTUF0UlRHQU1NWm5RQ3R4TUlBTEUxQkFBd0FYUUNHZlVZQTQzRXRBSnZHbWdBellnQUF0Tko4QUxTbmx3QTNWZFVBMXo3MkFLTVFHQUJOZHZ3QVpKMHFBSERYcXdCamZQZ0FlckJYQUJjVjV3REFTVllBTzliWkFLZUVPQUFrSThzQTFvcDNBRnBVSXdBQUg3a0E4UW9iQUJuTzN3Q2ZNZjhBWmg1cUFKbFhZUUNzKzBjQWZuL1lBQ0psdHdBeTZJa0E1cjlnQU8vRXpRQnNOZ2tBWFQvVUFCYmUxd0JZTzk0QTNwdVNBTklpS0FBb2h1Z0E0bGhOQU1iS01nQUk0eFlBNEgzTEFCZkFVQUR6SGFjQUdPQmJBQzRUTkFDREVtSUFnMGdCQVBXT1d3Q3RzSDhBSHVueUFFaEtRd0FRWjlNQXF0M1lBSzVmUWdCcVljNEFDaWlrQU5PWnRBQUdwdklBWEhkL0FLUENnd0JoUElnQWluTjRBSytNV2dCdjE3MEFMYVpqQVBTL3l3Q05nZThBSnNGbkFGWEtSUURLMlRZQUtLalNBTUpoalFBU3lYY0FCQ1lVQUJKR213REVXY1FBeU1WRUFFMnlrUUFBRi9NQTFFT3RBQ2xKNVFEOTFSQUFBTDc4QUI2VXpBQnd6dTRBRXo3MUFPenhnQUN6NThNQXgvZ29BSk1GbEFEQmNUNEFMZ216QUF0Rjh3Q0lFcHdBcXlCN0FDNjFud0JIa3NJQWV6SXZBQXhWYlFCeXA1QUFhK2NmQURITGxnQjVGa29BUVhuaUFQVGZpUURvbEpjQTR1YUVBSmt4bHdDSTdXc0FYMTgyQUx2OURnQkltclFBWjZSc0FIRnlRZ0NOWFRJQW54VzRBTHpsQ1FDTk1TVUE5M1E1QURBRkhBQU5EQUVBU3dob0FDenVXQUJIcXBBQWRPY0NBTDNXSkFEM2ZhWUFia2h5QUo4Vzd3Q09sS1lBdEpIMkFORlRVUURQQ3ZJQUlKZ3pBUFZMZmdDeVkyZ0EzVDVmQUVCZEF3Q0ZpWDhBVlZJcEFEZGt3QUJ0MkJBQU1rZ3lBRnRNZFFCT2NkUUFSVlJ1QUFzSndRQXE5V2tBRkdiVkFDY0huUUJkQkZBQXREdmJBT3AyeFFDSCtSY0FTV3Q5QUIwbnVnQ1dhU2tBeHN5c0FLMFVWQUNRNG1vQWlObUpBQ3h5VUFBRXBMNEFkd2VVQVBNd2NBQUEvQ2NBNm5Hb0FHYkNTUUJrNEQwQWw5MkRBS00vbHdCRGxQMEFEWWFNQURGQjNnQ1NPWjBBM1hDTUFCZTM1d0FJM3pzQUZUY3JBRnlBb0FCYWdKTUFFQkdTQUEvbzJBQnNnSzhBMi85TEFEaVFEd0JaR0hZQVlxVVZBR0hMdXdESGlia0FFRUM5QU5MeUJBQkpkU2NBNjdiMkFOc2l1d0FLRktvQWlTWXZBR1NEZGdBSk96TUFEcFFhQUZFNnFnQWRvOElBcisydUFGd21FZ0J0d2swQUxYcWNBTUJXbHdBRFA0TUFDZkQyQUN0QWpBQnRNWmtBT2JRSEFBd2dGUURZdzFzQTlaTEVBTWF0U3dCT3lxVUFwemZOQU9hcE5nQ3JrcFFBM1VKb0FCbGozZ0Iyak84QWFJdFNBUHpiTndDdW9hc0EzeFV4QUFDdW9RQU0rOW9BWkUxbUFPMEZ0d0FwWlRBQVYxYS9BRWYvT2dCcStia0FkYjd6QUNpVDN3Q3JnREFBWm96MkFBVExGUUQ2SWdZQTJlUWRBRDJ6cEFCWEc0OEFOczBKQUU1QzZRQVR2cVFBTXlPMUFQQ3FHZ0JQWmFnQTBzR2xBQXMvRHdCYmVNMEFJL2wyQUh1TEJBQ0pGM0lBeHFaVEFHOXU0Z0R2NndBQW0wcFlBTVRhdHdDcVpyb0Fkcy9QQU5FQ0hRQ3g4UzBBakpuQkFNT3Rkd0NHU05vQTkxMmdBTWFBOUFDczhDOEEzZXlhQUQ5Y3ZBRFEzbTBBa01jZkFDcmJ0Z0NqSlRvQUFLK2FBSzFUa3dDMlZ3UUFLUzIwQUV1QWZnRGFCNmNBZHFvT0FIdFpvUUFXRWlvQTNMY3RBUHJsL1FDSjIvNEFpYjc5QU9SMmJBQUdxZndBUG9Cd0FJVnVGUUQ5aC84QUtENEhBR0ZuTXdBcUdJWUFUYjNxQUxQbnJ3Q1BiVzRBbFdjNUFERy9Xd0NFMTBnQU1OOFdBTWN0UXdBbFlUVUF5WERPQURETHVBQy9iUDBBcEFDaUFBVnM1QUJhM2FBQUlXOUhBR0lTMGdDNVhJUUFjR0ZKQUd0VzRBQ1pVZ0VBVUZVM0FCN1Z0d0F6OGNRQUUyNWZBRjB3NUFDRkxxa0FIYkxEQUtFeU5nQUl0NlFBNnJIVUFCYjNJUUNQYWVRQUovOTNBQXdEZ0FDTlFDMEFUODJnQUNDbG1RQ3pvdE1BTDEwS0FMVDVRZ0FSMnNzQWZiN1FBSnZid1FDckY3MEF5cUtCQUFocVhBQXVWUmNBSndCVkFIOFU4QURoQjRZQUZBdGtBSlpCalFDSHZ0NEEydjBxQUdzbHRnQjdpVFFBQmZQK0FMbS9uZ0JvYWs4QVNpcW9BRS9FV2dBdCtMd0ExMXFZQVBUSGxRQU5UWTBBSURxbUFLUlhYd0FVUDdFQWdEaVZBTXdnQVFCeDNZWUF5ZDYyQUw5ZzlRQk5aUkVBQVFkckFJeXdyQUN5d05BQVVWVklBQjc3RGdDVmNzTUFvd1k3QU1CQU5RQUczSHNBNEVYTUFFNHArZ0RXeXNnQTZQTkJBSHhrM2dDYlpOZ0EyYjR4QUtTWHd3QjNXTlFBYWVQRkFQRGFFd0M2T2p3QVJoaEdBRlYxWHdEU3ZmVUFicExHQUt3dVhRQU9STzBBSEQ1Q0FHSEVod0FwL2VrQTU5YnpBQ0o4eWdCdmtUVUFDT0RGQVAvWGpRQnVhdUlBc1AzR0FKTUl3UUI4WFhRQWE2MnlBTTF1blFBK2Nuc0F4aEZxQVBmUHFRQXBjOThBdGNtNkFMY0FVUURpc2cwQWRMb2tBT1Y5WUFCMDJJb0FEUlVzQUlFWURBQitacFFBQVNrV0FKOTZkZ0Q5L2I0QVZrWHZBTmwrTmdEczJSTUFpN3E1QU1TWC9BQXhxQ2NBOFc3REFKVEZOZ0RZcUZZQXRLaTFBTS9NRGdBU2lTMEFiMWMwQUN4V2lRQ1p6dU1BMWlDNUFHdGVxZ0ErS3B3QUVWL01BUDBMU2dEaDlQc0FqanR0QU9LR0xBRHAxSVFBL0xTcEFPL3UwUUF1TmNrQUx6bGhBRGdoUkFBYjJjZ0FnZndLQVB0S2FnQXZITmdBVTdTRUFFNlpqQUJVSXN3QUtsWGNBTURHMWdBTEdaWUFHbkM0QUdtVlpBQW1XbUFBUDFMdUFIOFJEd0QwdFJFQS9NdjFBRFM4TFFBMHZPNEE2RjNNQU4xZVlBQm5qcHNBa2pQdkFNa1h1QUJoV0pzQTRWZThBRkdEeGdEWVBoQUEzWEZJQUMwYzNRQ3ZHS0VBSVN4R0FGbnoxd0RaZXBnQW5sVEFBRStHK2dCV0J2d0E1WG11QUlraU5nQTRyU0lBWjVQY0FGWG9xZ0NDSmpnQXl1ZWJBRkVOcEFDWk03RUFxZGNPQUdrRlNBQmxzdkFBZjRpbkFJaE1sd0Q1MFRZQUlaS3pBSHVDU2dDWXp5RUFRSi9jQU54SFZRRGhkRG9BWit0Q0FQNmQzd0JlMUY4QWUyZWtBTHFzZWdCVjlxSUFLNGdqQUVHNlZRQlpiZ2dBSVNxR0FEbEhnd0NKNCtZQTVaN1VBRW43UUFEL1Z1a0FIQS9LQU1WWmlnQ1UraXNBMDhIRkFBL0Z6d0RiV3E0QVI4V0dBSVZEWWdBaGhqc0FMSG1VQUJCaGh3QXFUSHNBZ0N3YUFFTy9FZ0NJSnBBQWVEeUpBS2pFNUFEbDIzc0F4RHJDQUNiMDZnRDNaNG9BRFpLL0FHV2pLd0E5azdFQXZYd0xBS1JSM0FBbjNXTUFhZUhkQUpxVUdRQ29LWlVBYU00b0FBbnR0QUJFbnlBQVRwaktBSENDWXdCK2ZDTUFEN2t5QUtmMWpnQVVWdWNBSWZFSUFMV2RLZ0J2ZmswQXBSbFJBTFg1cXdDQzM5WUFsdDFoQUJZMkFnREVPcDhBZzZLaEFITHRiUUE1alhvQWdyaXBBR3N5WEFCR0oxc0FBRFR0QU5JQWR3RDg5RlVBQVZsTkFPQnhnQUJCaytrQ0MvMENRUHNoK1Q4QUFBQUFMVVIwUGdBQUFJQ1lSdmc4QUFBQVlGSE1lRHNBQUFDQWd4dndPUUFBQUVBZ0pYbzRBQUFBZ0NLQzR6WUFBQUFBSGZOcE5iN3orSG5zWWZZLzNxcU1nUGQ3MWI4OWlLOUs3WEgxUDl0dHdLZnd2dEsvc0JEdzhEbVY5RDluT2xGL3JoN1F2NFVEdUxDVnlmTS82U1NDcHRneHk3K2xaSWdNR1EzelAxaDN3QXBQVjhhL29JNExleUplOGo4QWdaekhLNnJCdno4MEdrcEt1L0UvWGc2TXpuWk91cis2NVlyd1dDUHhQOHdjWVZvOGw3Ry9wd0NaUVQrVjhEOGVET0U0OUZLaXZ3QUFBQUFBQVBBL0FBQUFBQUFBQUFDc1I1cjlqR0R1UDRSWjhsMnFwYW8vb0dvQ0g3T2s3RCswTGphcVUxNjhQK2I4YWxjMklPcy9DTnNnZCtVbXhUOHRxcUZqMGNMcFAzQkhJZzJHd3NzLzdVRjRBK2FHNkQvaGZxRElpd1hSUDJKSVUvWGNaK2MvQ2U2MlZ6QUUxRC92T2ZyK1FpN21QelNEdUVpakR0Qy9hZ3ZnQzF0WDFUOGpRUXJ5L3YvZnZ3QUFBQUFBQVBBL0FBQUFBQUFBK0Q4QUFBQUFBQUFBQUFiUXowUHIvVXcrQUVHYjdBSUx1aE5BQTdqaVB3QUFBQUFBQVBBL2RJVVYwN0RaN3o4UGlmbHNXTFh2UDFGYkV0QUJrKzgvZTFGOVBMaHk3eitxdVdneGgxVHZQemhpZFc1Nk9POC80ZDRmOVowZTd6OFZ0ekVLL2didlA4dXBPamVuOGU0L0lqUVNUS2JlN2o4dGlXRmdDTTd1UHljcU50WGF2KzQvZ2srZFZpdTA3ajhwVkVqZEI2dnVQNFZWT3JCK3BPNC96VHQvWnA2ZzdqOTBYK3pvZFovdVA0Y0I2M01Vb2U0L0U4NU1tWW1sN2ovYm9DcEM1YXp1UCtYRnpiQTN0KzQva1BDamdwSEU3ajlkSlQ2eUE5WHVQNjNUV3BtZjZPNC9SMTc3OG5iLzdqK2NVb1hkbXhudlAybVE3OXdnTis4L2g2VDczQmhZN3o5Zm0zc3psM3p2UDlxUXBLS3ZwTzgvUUVWdVczYlE3ejhBQUFBQUFBRG9RcFFqa1V2NGFxdy84OFQ2VU02L3pqL1dVZ3ovUWk3bVB3QUFBQUFBQURoRC9vSXJaVWNWUjBDVUk1RkwrR3E4UHZQRStsRE92eTQvMWxJTS8wSXVsaisrOC9oNTdHSDJQeGt3bGx2Ry90Ni9QWWl2U3UxeDlUK2svTlF5YUF2YnY3QVE4UEE1bGZRL2U3Y2ZDb3RCMTcrRkE3aXdsY256UDN2UGJScnBuZE8vcFdTSURCa044ejh4dHZMem14M1F2NkNPQzNzaVh2SS84SG83R3gxOHliOC9OQnBLU3J2eFA1ODhyNVBqK2NLL3V1V0s4RmdqOFQ5Y2pYaS95MkM1djZjQW1VRS9sZkEvemw5SHRwMXZxcjhBQUFBQUFBRHdQd0FBQUFBQUFBQUFyRWVhL1l4ZzdqODk5U1NmeWppelA2QnFBaCt6cE93L3VwRTRWS2wyeEQvbS9HcFhOaURyUDlMa3hFb0xoTTQvTGFxaFk5SEM2VDhjWmNid1JRYlVQKzFCZUFQbWh1Zy8rSjhiTEp5TzJEOWlTRlAxM0dmblA4eDdzVTZrNE53L0MyNUp5UloyMGo5NnhuV2dhUm5YdjkyNnAyd0t4OTQveVBhK1NFY1Y1NzhydUNwbFJ4WDNQd0FCRndJZEdCTURIaHNaQ3hRSUJBMGZGaHdTR2dvSERCVVJDUVlRQlE4T3dQWUFBRmozQUFCT2J5Qmxjbkp2Y2lCcGJtWnZjbTFoZEdsdmJnQkpiR3hsWjJGc0lHSjVkR1VnYzJWeGRXVnVZMlVBUkc5dFlXbHVJR1Z5Y205eUFGSmxjM1ZzZENCdWIzUWdjbVZ3Y21WelpXNTBZV0pzWlFCT2IzUWdZU0IwZEhrQVVHVnliV2x6YzJsdmJpQmtaVzVwWldRQVQzQmxjbUYwYVc5dUlHNXZkQ0J3WlhKdGFYUjBaV1FBVG04Z2MzVmphQ0JtYVd4bElHOXlJR1JwY21WamRHOXllUUJPYnlCemRXTm9JSEJ5YjJObGMzTUFSbWxzWlNCbGVHbHpkSE1BVm1Gc2RXVWdkRzl2SUd4aGNtZGxJR1p2Y2lCa1lYUmhJSFI1Y0dVQVRtOGdjM0JoWTJVZ2JHVm1kQ0J2YmlCa1pYWnBZMlVBVDNWMElHOW1JRzFsYlc5eWVRQlNaWE52ZFhKalpTQmlkWE41QUVsdWRHVnljblZ3ZEdWa0lITjVjM1JsYlNCallXeHNBRkpsYzI5MWNtTmxJSFJsYlhCdmNtRnlhV3g1SUhWdVlYWmhhV3hoWW14bEFFbHVkbUZzYVdRZ2MyVmxhd0JEY205emN5MWtaWFpwWTJVZ2JHbHVhd0JTWldGa0xXOXViSGtnWm1sc1pTQnplWE4wWlcwQVJHbHlaV04wYjNKNUlHNXZkQ0JsYlhCMGVRQkRiMjV1WldOMGFXOXVJSEpsYzJWMElHSjVJSEJsWlhJQVQzQmxjbUYwYVc5dUlIUnBiV1ZrSUc5MWRBQkRiMjV1WldOMGFXOXVJSEpsWm5WelpXUUFTRzl6ZENCcGN5QmtiM2R1QUVodmMzUWdhWE1nZFc1eVpXRmphR0ZpYkdVQVFXUmtjbVZ6Y3lCcGJpQjFjMlVBUW5KdmEyVnVJSEJwY0dVQVNTOVBJR1Z5Y205eUFFNXZJSE4xWTJnZ1pHVjJhV05sSUc5eUlHRmtaSEpsYzNNQVFteHZZMnNnWkdWMmFXTmxJSEpsY1hWcGNtVmtBRTV2SUhOMVkyZ2daR1YyYVdObEFFNXZkQ0JoSUdScGNtVmpkRzl5ZVFCSmN5QmhJR1JwY21WamRHOXllUUJVWlhoMElHWnBiR1VnWW5WemVRQkZlR1ZqSUdadmNtMWhkQ0JsY25KdmNnQkpiblpoYkdsa0lHRnlaM1Z0Wlc1MEFFRnlaM1Z0Wlc1MElHeHBjM1FnZEc5dklHeHZibWNBVTNsdFltOXNhV01nYkdsdWF5QnNiMjl3QUVacGJHVnVZVzFsSUhSdmJ5QnNiMjVuQUZSdmJ5QnRZVzU1SUc5d1pXNGdabWxzWlhNZ2FXNGdjM2x6ZEdWdEFFNXZJR1pwYkdVZ1pHVnpZM0pwY0hSdmNuTWdZWFpoYVd4aFlteGxBRUpoWkNCbWFXeGxJR1JsYzJOeWFYQjBiM0lBVG04Z1kyaHBiR1FnY0hKdlkyVnpjd0JDWVdRZ1lXUmtjbVZ6Y3dCR2FXeGxJSFJ2YnlCc1lYSm5aUUJVYjI4Z2JXRnVlU0JzYVc1cmN3Qk9ieUJzYjJOcmN5QmhkbUZwYkdGaWJHVUFVbVZ6YjNWeVkyVWdaR1ZoWkd4dlkyc2dkMjkxYkdRZ2IyTmpkWElBVTNSaGRHVWdibTkwSUhKbFkyOTJaWEpoWW14bEFGQnlaWFpwYjNWeklHOTNibVZ5SUdScFpXUUFUM0JsY21GMGFXOXVJR05oYm1ObGJHVmtBRVoxYm1OMGFXOXVJRzV2ZENCcGJYQnNaVzFsYm5SbFpBQk9ieUJ0WlhOellXZGxJRzltSUdSbGMybHlaV1FnZEhsd1pRQkpaR1Z1ZEdsbWFXVnlJSEpsYlc5MlpXUUFSR1YyYVdObElHNXZkQ0JoSUhOMGNtVmhiUUJPYnlCa1lYUmhJR0YyWVdsc1lXSnNaUUJFWlhacFkyVWdkR2x0Wlc5MWRBQlBkWFFnYjJZZ2MzUnlaV0Z0Y3lCeVpYTnZkWEpqWlhNQVRHbHVheUJvWVhNZ1ltVmxiaUJ6WlhabGNtVmtBRkJ5YjNSdlkyOXNJR1Z5Y205eUFFSmhaQ0J0WlhOellXZGxBRVpwYkdVZ1pHVnpZM0pwY0hSdmNpQnBiaUJpWVdRZ2MzUmhkR1VBVG05MElHRWdjMjlqYTJWMEFFUmxjM1JwYm1GMGFXOXVJR0ZrWkhKbGMzTWdjbVZ4ZFdseVpXUUFUV1Z6YzJGblpTQjBiMjhnYkdGeVoyVUFVSEp2ZEc5amIyd2dkM0p2Ym1jZ2RIbHdaU0JtYjNJZ2MyOWphMlYwQUZCeWIzUnZZMjlzSUc1dmRDQmhkbUZwYkdGaWJHVUFVSEp2ZEc5amIyd2dibTkwSUhOMWNIQnZjblJsWkFCVGIyTnJaWFFnZEhsd1pTQnViM1FnYzNWd2NHOXlkR1ZrQUU1dmRDQnpkWEJ3YjNKMFpXUUFVSEp2ZEc5amIyd2dabUZ0YVd4NUlHNXZkQ0J6ZFhCd2IzSjBaV1FBUVdSa2NtVnpjeUJtWVcxcGJIa2dibTkwSUhOMWNIQnZjblJsWkNCaWVTQndjbTkwYjJOdmJBQkJaR1J5WlhOeklHNXZkQ0JoZG1GcGJHRmliR1VBVG1WMGQyOXlheUJwY3lCa2IzZHVBRTVsZEhkdmNtc2dkVzV5WldGamFHRmliR1VBUTI5dWJtVmpkR2x2YmlCeVpYTmxkQ0JpZVNCdVpYUjNiM0pyQUVOdmJtNWxZM1JwYjI0Z1lXSnZjblJsWkFCT2J5QmlkV1ptWlhJZ2MzQmhZMlVnWVhaaGFXeGhZbXhsQUZOdlkydGxkQ0JwY3lCamIyNXVaV04wWldRQVUyOWphMlYwSUc1dmRDQmpiMjV1WldOMFpXUUFRMkZ1Ym05MElITmxibVFnWVdaMFpYSWdjMjlqYTJWMElITm9kWFJrYjNkdUFFOXdaWEpoZEdsdmJpQmhiSEpsWVdSNUlHbHVJSEJ5YjJkeVpYTnpBRTl3WlhKaGRHbHZiaUJwYmlCd2NtOW5jbVZ6Y3dCVGRHRnNaU0JtYVd4bElHaGhibVJzWlFCU1pXMXZkR1VnU1M5UElHVnljbTl5QUZGMWIzUmhJR1Y0WTJWbFpHVmtBRTV2SUcxbFpHbDFiU0JtYjNWdVpBQlhjbTl1WnlCdFpXUnBkVzBnZEhsd1pRQk5kV3gwYVdodmNDQmhkSFJsYlhCMFpXUUFRZUwvQWd1V0FhVUNXd0R3QWJVRmpBVWxBWU1HSFFPVUJQOEF4d014QXdzR3ZBR1BBWDhEeWdRckFOb0dyd0JDQTA0RDNBRU9CQlVBb1FZTkFaUUNDd0k0Qm1RQ3ZBTC9BbDBENXdRTEI4OEN5d1h2QmRzRjRRSWVCa1VDaFFDQ0Ftd0Rid1R4QVBNREdBWFpBTm9EVEFaVUFuc0JuUU85QkFBQVVRQVZBcnNBc3dOdEFQOEJoUVF2QmZrRU9BQmxBVVlCbndDM0JxZ0Jjd0pUQVFCQnFJRURDd3doQkFBQUFBQUFBQUFBTHdJQVFjaUJBd3NHTlFSSEJGWUVBRUhlZ1FNTEFxQUVBRUh5Z1FNTFgwWUZZQVZ1QldFR0FBRFBBUUFBQUFBQUFBQUF5UWJwQnZrR0FBQUFBQmtBQ2dBWkdSa0FBQUFBQlFBQUFBQUFBQWtBQUFBQUN3QUFBQUFBQUFBQUdRQVJDaGtaR1FNS0J3QUJBQWtMR0FBQUNRWUxBQUFMQUFZWkFBQUFHUmtaQUVIaGdnTUxJUTRBQUFBQUFBQUFBQmtBQ2cwWkdSa0FEUUFBQWdBSkRnQUFBQWtBRGdBQURnQkJtNE1EQ3dFTUFFR25nd01MRlJNQUFBQUFFd0FBQUFBSkRBQUFBQUFBREFBQURBQkIxWU1EQ3dFUUFFSGhnd01MRlE4QUFBQUVEd0FBQUFBSkVBQUFBQUFBRUFBQUVBQkJqNFFEQ3dFU0FFR2JoQU1MSGhFQUFBQUFFUUFBQUFBSkVnQUFBQUFBRWdBQUVnQUFHZ0FBQUJvYUdnQkIwb1FEQ3c0YUFBQUFHaG9hQUFBQUFBQUFDUUJCZzRVREN3RVVBRUdQaFFNTEZSY0FBQUFBRndBQUFBQUpGQUFBQUFBQUZBQUFGQUJCdllVREN3RVdBRUhKaFFNTEp4VUFBQUFBRlFBQUFBQUpGZ0FBQUFBQUZnQUFGZ0FBTURFeU16UTFOamM0T1VGQ1EwUkZSZ0JCbElZREN3SUZBUUJCdklZREN3ai8vLy8vLy8vLy93QkJnSWNEQzRNUzBYU2VBRmVkdlNxQWNGSVAvLzgrSndvQUFBQmtBQUFBNkFNQUFCQW5BQUNnaGdFQVFFSVBBSUNXbUFBQTRmVUZHQUFBQURVQUFBQnhBQUFBYS8vLy84NzcvLytTdi8vL0FBQUFBQUFBQUFELy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9BQUVDQXdRRkJnY0lDZi8vLy8vLy8vOEtDd3dORGc4UUVSSVRGQlVXRnhnWkdoc2NIUjRmSUNFaUkvLy8vLy8vL3dvTERBME9EeEFSRWhNVUZSWVhHQmthR3h3ZEhoOGdJU0lqLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vd0FCQWdRSEF3WUZBQUFBQUFBQUFBSUFBTUFEQUFEQUJBQUF3QVVBQU1BR0FBREFCd0FBd0FnQUFNQUpBQURBQ2dBQXdBc0FBTUFNQUFEQURRQUF3QTRBQU1BUEFBREFFQUFBd0JFQUFNQVNBQURBRXdBQXdCUUFBTUFWQUFEQUZnQUF3QmNBQU1BWUFBREFHUUFBd0JvQUFNQWJBQURBSEFBQXdCMEFBTUFlQUFEQUh3QUF3QUFBQUxNQkFBRERBZ0FBd3dNQUFNTUVBQUREQlFBQXd3WUFBTU1IQUFERENBQUF3d2tBQU1NS0FBRERDd0FBd3d3QUFNTU5BQURURGdBQXd3OEFBTU1BQUF5N0FRQU13d0lBRE1NREFBekRCQUFNMndBQUFBQUFBQUFBQWdBQUFBTUFBQUFGQUFBQUJ3QUFBQXNBQUFBTkFBQUFFUUFBQUJNQUFBQVhBQUFBSFFBQUFCOEFBQUFsQUFBQUtRQUFBQ3NBQUFBdkFBQUFOUUFBQURzQUFBQTlBQUFBUXdBQUFFY0FBQUJKQUFBQVR3QUFBRk1BQUFCWkFBQUFZUUFBQUdVQUFBQm5BQUFBYXdBQUFHMEFBQUJ4QUFBQWZ3QUFBSU1BQUFDSkFBQUFpd0FBQUpVQUFBQ1hBQUFBblFBQUFLTUFBQUNuQUFBQXJRQUFBTE1BQUFDMUFBQUF2d0FBQU1FQUFBREZBQUFBeHdBQUFOTUFBQUFCQUFBQUN3QUFBQTBBQUFBUkFBQUFFd0FBQUJjQUFBQWRBQUFBSHdBQUFDVUFBQUFwQUFBQUt3QUFBQzhBQUFBMUFBQUFPd0FBQUQwQUFBQkRBQUFBUndBQUFFa0FBQUJQQUFBQVV3QUFBRmtBQUFCaEFBQUFaUUFBQUdjQUFBQnJBQUFBYlFBQUFIRUFBQUI1QUFBQWZ3QUFBSU1BQUFDSkFBQUFpd0FBQUk4QUFBQ1ZBQUFBbHdBQUFKMEFBQUNqQUFBQXB3QUFBS2tBQUFDdEFBQUFzd0FBQUxVQUFBQzdBQUFBdndBQUFNRUFBQURGQUFBQXh3QUFBTkVBQUFBQUFBQUFOTWtBQUFjQkFBQUlBUUFBQ1FFQUFBb0JBQUFMQVFBQURBRUFBQTBCQUFBT0FRQUFEd0VBQUJBQkFBQVJBUUFBRWdFQUFCTUJBQUFVQVFBQUFBQUFBSERKQUFBVkFRQUFGZ0VBQUJjQkFBQVlBUUFBR1FFQUFCb0JBQUFiQVFBQUhBRUFBQjBCQUFBZUFRQUFId0VBQUNBQkFBQWhBUUFBSWdFQUFBZ0FBQUFBQUFBQXFNa0FBQ01CQUFBa0FRQUErUC8vLy9qLy8vK295UUFBSlFFQUFDWUJBQUM4eHdBQTBNY0FBQWdBQUFBQUFBQUE4TWtBQUNjQkFBQW9BUUFBK1AvLy8vai8vLy93eVFBQUtRRUFBQ29CQUFEc3h3QUFBTWdBQUFRQUFBQUFBQUFBT01vQUFDc0JBQUFzQVFBQS9QLy8vL3ovLy84NHlnQUFMUUVBQUM0QkFBQWN5QUFBTU1nQUFBUUFBQUFBQUFBQWdNb0FBQzhCQUFBd0FRQUEvUC8vLy96Ly8vK0F5Z0FBTVFFQUFESUJBQUJNeUFBQVlNZ0FBQUFBQUFDc3lBQUFNd0VBQURRQkFBQk9VM1F6WDE4eU9XSmhjMmxqWDJsdmMwbGpUbE5mTVRGamFHRnlYM1J5WVdsMGMwbGpSVVZGUlFBQUFDejFBQUNBeUFBQXZNb0FBQUFBQUFEMHlBQUFOUUVBQURZQkFBQk9VM1F6WDE4eU9XSmhjMmxqWDJsdmMwbDNUbE5mTVRGamFHRnlYM1J5WVdsMGMwbDNSVVZGUlFBQUFDejFBQURJeUFBQXZNb0FBRTVUZEROZlh6SXhOV0poYzJsalgzTjBjbVZoYldKMVprbGpUbE5mTVRGamFHRnlYM1J5WVdsMGMwbGpSVVZGUlFBQUFBQUU5UUFBQU1rQUFFNVRkRE5mWHpJeE5XSmhjMmxqWDNOMGNtVmhiV0oxWmtsM1RsTmZNVEZqYUdGeVgzUnlZV2wwYzBsM1JVVkZSUUFBQUFBRTlRQUFQTWtBQUU1VGRETmZYekl4TTJKaGMybGpYMmx6ZEhKbFlXMUpZMDVUWHpFeFkyaGhjbDkwY21GcGRITkpZMFZGUlVVQUFJajFBQUI0eVFBQUFBQUFBQUVBQUFDc3lBQUFBL1QvLzA1VGRETmZYekl4TTJKaGMybGpYMmx6ZEhKbFlXMUpkMDVUWHpFeFkyaGhjbDkwY21GcGRITkpkMFZGUlVVQUFJajFBQURBeVFBQUFBQUFBQUVBQUFEMHlBQUFBL1QvLzA1VGRETmZYekl4TTJKaGMybGpYMjl6ZEhKbFlXMUpZMDVUWHpFeFkyaGhjbDkwY21GcGRITkpZMFZGUlVVQUFJajFBQUFJeWdBQUFBQUFBQUVBQUFDc3lBQUFBL1QvLzA1VGRETmZYekl4TTJKaGMybGpYMjl6ZEhKbFlXMUpkMDVUWHpFeFkyaGhjbDkwY21GcGRITkpkMFZGUlVVQUFJajFBQUJReWdBQUFBQUFBQUVBQUFEMHlBQUFBL1QvL3dBQUFBQzh5Z0FBTndFQUFEZ0JBQUJPVTNRelgxOHlPR2x2YzE5aVlYTmxSUUFBQUFUMUFBQ295Z0FBOFBjQUFBQUFBQUFneXdBQUJ3RUFBRHNCQUFBOEFRQUFDZ0VBQUFzQkFBQU1BUUFBRFFFQUFBNEJBQUFQQVFBQVBRRUFBRDRCQUFBL0FRQUFFd0VBQUJRQkFBQk9VM1F6WDE4eU1UQmZYM04wWkdsdVluVm1TV05GUlFBczlRQUFDTXNBQURUSkFBQUFBQUFBaE1zQUFCVUJBQUJBQVFBQVFRRUFBQmdCQUFBWkFRQUFHZ0VBQUJzQkFBQWNBUUFBSFFFQUFFSUJBQUJEQVFBQVJBRUFBQ0VCQUFBaUFRQUFUbE4wTTE5Zk1qRXdYMTl6ZEdScGJtSjFaa2wzUlVVQUxQVUFBR3pMQUFCd3lRQUFBQUFBQU96TEFBQUhBUUFBUlFFQUFFWUJBQUFLQVFBQUN3RUFBQXdCQUFCSEFRQUFEZ0VBQUE4QkFBQVFBUUFBRVFFQUFCSUJBQUJJQVFBQVNRRUFBRTVUZEROZlh6SXhNVjlmYzNSa2IzVjBZblZtU1dORlJRQUFBQUFzOVFBQTBNc0FBRFRKQUFBQUFBQUFWTXdBQUJVQkFBQktBUUFBU3dFQUFCZ0JBQUFaQVFBQUdnRUFBRXdCQUFBY0FRQUFIUUVBQUI0QkFBQWZBUUFBSUFFQUFFMEJBQUJPQVFBQVRsTjBNMTlmTWpFeFgxOXpkR1J2ZFhSaWRXWkpkMFZGQUFBQUFDejFBQUE0ekFBQWNNa0FBTjRTQkpVQUFBQUEvLy8vLy8vLy8vLy8vLy8vWU13QUFCUUFBQUJETGxWVVJpMDRBRUd3bVFNTEFuVE1BRUhRbVFNTFNreERYME5VV1ZCRkFBQUFBRXhEWDA1VlRVVlNTVU1BQUV4RFgxUkpUVVVBQUFBQUFFeERYME5QVEV4QlZFVUFBRXhEWDAxUFRrVlVRVkpaQUV4RFgwMUZVMU5CUjBWVEFDRE9BRUdnbkFNTC93RUNBQUlBQWdBQ0FBSUFBZ0FDQUFJQUFnQURJQUlnQWlBQ0lBSWdBZ0FDQUFJQUFnQUNBQUlBQWdBQ0FBSUFBZ0FDQUFJQUFnQUNBQUlBQWdBQ0FBSUFBV0FFd0FUQUJNQUV3QVRBQk1BRXdBVEFCTUFFd0FUQUJNQUV3QVRBQk1BSTJBallDTmdJMkFqWUNOZ0kyQWpZQ05nSTJBVEFCTUFFd0FUQUJNQUV3QVRBQ05VSTFRalZDTlVJMVFqVkNNVUl4UWpGQ01VSXhRakZDTVVJeFFqRkNNVUl4UWpGQ01VSXhRakZDTVVJeFFqRkNNVUl4UVRBQk1BRXdBVEFCTUFFd0FqV0NOWUkxZ2pXQ05ZSTFnakdDTVlJeGdqR0NNWUl4Z2pHQ01ZSXhnakdDTVlJeGdqR0NNWUl4Z2pHQ01ZSXhnakdDTVlFd0FUQUJNQUV3QUlBUWFDZ0F3c0NNTklBUWJTa0F3djVBd0VBQUFBQ0FBQUFBd0FBQUFRQUFBQUZBQUFBQmdBQUFBY0FBQUFJQUFBQUNRQUFBQW9BQUFBTEFBQUFEQUFBQUEwQUFBQU9BQUFBRHdBQUFCQUFBQUFSQUFBQUVnQUFBQk1BQUFBVUFBQUFGUUFBQUJZQUFBQVhBQUFBR0FBQUFCa0FBQUFhQUFBQUd3QUFBQndBQUFBZEFBQUFIZ0FBQUI4QUFBQWdBQUFBSVFBQUFDSUFBQUFqQUFBQUpBQUFBQ1VBQUFBbUFBQUFKd0FBQUNnQUFBQXBBQUFBS2dBQUFDc0FBQUFzQUFBQUxRQUFBQzRBQUFBdkFBQUFNQUFBQURFQUFBQXlBQUFBTXdBQUFEUUFBQUExQUFBQU5nQUFBRGNBQUFBNEFBQUFPUUFBQURvQUFBQTdBQUFBUEFBQUFEMEFBQUErQUFBQVB3QUFBRUFBQUFCQkFBQUFRZ0FBQUVNQUFBQkVBQUFBUlFBQUFFWUFBQUJIQUFBQVNBQUFBRWtBQUFCS0FBQUFTd0FBQUV3QUFBQk5BQUFBVGdBQUFFOEFBQUJRQUFBQVVRQUFBRklBQUFCVEFBQUFWQUFBQUZVQUFBQldBQUFBVndBQUFGZ0FBQUJaQUFBQVdnQUFBRnNBQUFCY0FBQUFYUUFBQUY0QUFBQmZBQUFBWUFBQUFFRUFBQUJDQUFBQVF3QUFBRVFBQUFCRkFBQUFSZ0FBQUVjQUFBQklBQUFBU1FBQUFFb0FBQUJMQUFBQVRBQUFBRTBBQUFCT0FBQUFUd0FBQUZBQUFBQlJBQUFBVWdBQUFGTUFBQUJVQUFBQVZRQUFBRllBQUFCWEFBQUFXQUFBQUZrQUFBQmFBQUFBZXdBQUFId0FBQUI5QUFBQWZnQUFBSDhBUWJDc0F3c0NRTmdBUWNTd0F3djVBd0VBQUFBQ0FBQUFBd0FBQUFRQUFBQUZBQUFBQmdBQUFBY0FBQUFJQUFBQUNRQUFBQW9BQUFBTEFBQUFEQUFBQUEwQUFBQU9BQUFBRHdBQUFCQUFBQUFSQUFBQUVnQUFBQk1BQUFBVUFBQUFGUUFBQUJZQUFBQVhBQUFBR0FBQUFCa0FBQUFhQUFBQUd3QUFBQndBQUFBZEFBQUFIZ0FBQUI4QUFBQWdBQUFBSVFBQUFDSUFBQUFqQUFBQUpBQUFBQ1VBQUFBbUFBQUFKd0FBQUNnQUFBQXBBQUFBS2dBQUFDc0FBQUFzQUFBQUxRQUFBQzRBQUFBdkFBQUFNQUFBQURFQUFBQXlBQUFBTXdBQUFEUUFBQUExQUFBQU5nQUFBRGNBQUFBNEFBQUFPUUFBQURvQUFBQTdBQUFBUEFBQUFEMEFBQUErQUFBQVB3QUFBRUFBQUFCaEFBQUFZZ0FBQUdNQUFBQmtBQUFBWlFBQUFHWUFBQUJuQUFBQWFBQUFBR2tBQUFCcUFBQUFhd0FBQUd3QUFBQnRBQUFBYmdBQUFHOEFBQUJ3QUFBQWNRQUFBSElBQUFCekFBQUFkQUFBQUhVQUFBQjJBQUFBZHdBQUFIZ0FBQUI1QUFBQWVnQUFBRnNBQUFCY0FBQUFYUUFBQUY0QUFBQmZBQUFBWUFBQUFHRUFBQUJpQUFBQVl3QUFBR1FBQUFCbEFBQUFaZ0FBQUdjQUFBQm9BQUFBYVFBQUFHb0FBQUJyQUFBQWJBQUFBRzBBQUFCdUFBQUFid0FBQUhBQUFBQnhBQUFBY2dBQUFITUFBQUIwQUFBQWRRQUFBSFlBQUFCM0FBQUFlQUFBQUhrQUFBQjZBQUFBZXdBQUFId0FBQUI5QUFBQWZnQUFBSDhBUWNDNEF3dkJBVEF4TWpNME5UWTNPRGxoWW1Oa1pXWkJRa05FUlVaNFdDc3RjRkJwU1c1T0FDVUFBQUFBQUNWd0FBQUFBQ1ZKT2lWTk9pVlRJQ1Z3SlVnNkpVMEFBQUFsQUFBQWJRQUFBQzhBQUFBbEFBQUFaQUFBQUM4QUFBQWxBQUFBZVFBQUFDVUFBQUJaQUFBQUxRQUFBQ1VBQUFCdEFBQUFMUUFBQUNVQUFBQmtBQUFBSlFBQUFFa0FBQUE2QUFBQUpRQUFBRTBBQUFBNkFBQUFKUUFBQUZNQUFBQWdBQUFBSlFBQUFIQUFBQUFBQUFBQUpRQUFBRWdBQUFBNkFBQUFKUUFBQUUwQVFaQzZBd3ZaQXlVQUFBQklBQUFBT2dBQUFDVUFBQUJOQUFBQU9nQUFBQ1VBQUFCVEFBQUFBQUFBQUpUaEFBQmhBUUFBWWdFQUFHTUJBQUFBQUFBQTlPRUFBR1FCQUFCbEFRQUFZd0VBQUdZQkFBQm5BUUFBYUFFQUFHa0JBQUJxQVFBQWF3RUFBR3dCQUFCdEFRQUFBQUFBQUZ6aEFBQnVBUUFBYndFQUFHTUJBQUJ3QVFBQWNRRUFBSElCQUFCekFRQUFkQUVBQUhVQkFBQjJBUUFBQUFBQUFDemlBQUIzQVFBQWVBRUFBR01CQUFCNUFRQUFlZ0VBQUhzQkFBQjhBUUFBZlFFQUFBQUFBQUJRNGdBQWZnRUFBSDhCQUFCakFRQUFnQUVBQUlFQkFBQ0NBUUFBZ3dFQUFJUUJBQUIwQUFBQWNnQUFBSFVBQUFCbEFBQUFBQUFBQUdZQUFBQmhBQUFBYkFBQUFITUFBQUJsQUFBQUFBQUFBQ1VBQUFCdEFBQUFMd0FBQUNVQUFBQmtBQUFBTHdBQUFDVUFBQUI1QUFBQUFBQUFBQ1VBQUFCSUFBQUFPZ0FBQUNVQUFBQk5BQUFBT2dBQUFDVUFBQUJUQUFBQUFBQUFBQ1VBQUFCaEFBQUFJQUFBQUNVQUFBQmlBQUFBSUFBQUFDVUFBQUJrQUFBQUlBQUFBQ1VBQUFCSUFBQUFPZ0FBQUNVQUFBQk5BQUFBT2dBQUFDVUFBQUJUQUFBQUlBQUFBQ1VBQUFCWkFBQUFBQUFBQUNVQUFBQkpBQUFBT2dBQUFDVUFBQUJOQUFBQU9nQUFBQ1VBQUFCVEFBQUFJQUFBQUNVQUFBQndBRUgwdlFNTGxna2Mzd0FBaFFFQUFJWUJBQUJqQVFBQVRsTjBNMTlmTWpac2IyTmhiR1UxWm1GalpYUkZBQUFBTFBVQUFBVGZBQUJnOGdBQUFBQUFBSnpmQUFDRkFRQUFod0VBQUdNQkFBQ0lBUUFBaVFFQUFJb0JBQUNMQVFBQWpBRUFBSTBCQUFDT0FRQUFqd0VBQUpBQkFBQ1JBUUFBa2dFQUFKTUJBQUJPVTNRelgxOHlOV04wZVhCbFNYZEZSUUJPVTNRelgxOHlNVEJqZEhsd1pWOWlZWE5sUlFBQUJQVUFBSDdmQUFDSTlRQUFiTjhBQUFBQUFBQUNBQUFBSE44QUFBSUFBQUNVM3dBQUFnQUFBQUFBQUFBdzRBQUFoUUVBQUpRQkFBQmpBUUFBbFFFQUFKWUJBQUNYQVFBQW1BRUFBSmtCQUFDYUFRQUFtd0VBQUU1VGRETmZYekkzWTI5a1pXTjJkRWxqWXpFeFgxOXRZbk4wWVhSbFgzUkZSUUJPVTNRelgxOHlNVEpqYjJSbFkzWjBYMkpoYzJWRkFBQUFBQVQxQUFBTzRBQUFpUFVBQU96ZkFBQUFBQUFBQWdBQUFCemZBQUFDQUFBQUtPQUFBQUlBQUFBQUFBQUFwT0FBQUlVQkFBQ2NBUUFBWXdFQUFKMEJBQUNlQVFBQW53RUFBS0FCQUFDaEFRQUFvZ0VBQUtNQkFBQk9VM1F6WDE4eU4yTnZaR1ZqZG5SSlJITmpNVEZmWDIxaWMzUmhkR1ZmZEVWRkFBQ0k5UUFBZ09BQUFBQUFBQUFDQUFBQUhOOEFBQUlBQUFBbzRBQUFBZ0FBQUFBQUFBQVk0UUFBaFFFQUFLUUJBQUJqQVFBQXBRRUFBS1lCQUFDbkFRQUFxQUVBQUtrQkFBQ3FBUUFBcXdFQUFFNVRkRE5mWHpJM1kyOWtaV04yZEVsRWFXTXhNVjlmYldKemRHRjBaVjkwUlVVQUFJajFBQUQwNEFBQUFBQUFBQUlBQUFBYzN3QUFBZ0FBQUNqZ0FBQUNBQUFBVGxOME0xOWZNamRqYjJSbFkzWjBTWGRqTVRGZlgyMWljM1JoZEdWZmRFVkZBQUFBaVBVQUFEamhBQUFBQUFBQUFnQUFBQnpmQUFBQ0FBQUFLT0FBQUFJQUFBQk9VM1F6WDE4eU5teHZZMkZzWlRWZlgybHRjRVVBQUFBczlRQUFmT0VBQUJ6ZkFBQk9VM1F6WDE4eU4yTnZiR3hoZEdWSlkwVkZBQ3oxQUFDZzRRQUFITjhBQUU1VGRETmZYekkzWTI5c2JHRjBaVWwzUlVVQUxQVUFBTURoQUFBYzN3QUFUbE4wTTE5Zk1qVmpkSGx3WlVsalJVVUFBQUNJOVFBQTRPRUFBQUFBQUFBQ0FBQUFITjhBQUFJQUFBQ1Uzd0FBQWdBQUFFNVRkRE5mWHpJNGJuVnRjSFZ1WTNSSlkwVkZBQUFBQUN6MUFBQVU0Z0FBSE44QUFFNVRkRE5mWHpJNGJuVnRjSFZ1WTNSSmQwVkZBQUFBQUN6MUFBQTQ0Z0FBSE44QUFBQUFBQUMwNFFBQXJBRUFBSzBCQUFCakFRQUFyZ0VBQUs4QkFBQ3dBUUFBQUFBQUFOVGhBQUN4QVFBQXNnRUFBR01CQUFDekFRQUF0QUVBQUxVQkFBQUFBQUFBY09NQUFJVUJBQUMyQVFBQVl3RUFBTGNCQUFDNEFRQUF1UUVBQUxvQkFBQzdBUUFBdkFFQUFMMEJBQUMrQVFBQXZ3RUFBTUFCQUFEQkFRQUFUbE4wTTE5Zk1qZHVkVzFmWjJWMFNXTk9VMTh4T1dsemRISmxZVzFpZFdaZmFYUmxjbUYwYjNKSlkwNVRYekV4WTJoaGNsOTBjbUZwZEhOSlkwVkZSVVZGUlFCT1UzUXpYMTh5T1Y5ZmJuVnRYMmRsZEVsalJVVUFUbE4wTTE5Zk1qRTBYMTl1ZFcxZloyVjBYMkpoYzJWRkFBQUU5UUFBTnVNQUFJajFBQUFnNHdBQUFBQUFBQUVBQUFCUTR3QUFBQUFBQUlqMUFBRGM0Z0FBQUFBQUFBSUFBQUFjM3dBQUFnQUFBRmpqQUVHVXh3TUx5Z0ZFNUFBQWhRRUFBTUlCQUFCakFRQUF3d0VBQU1RQkFBREZBUUFBeGdFQUFNY0JBQURJQVFBQXlRRUFBTW9CQUFETEFRQUF6QUVBQU0wQkFBQk9VM1F6WDE4eU4yNTFiVjluWlhSSmQwNVRYekU1YVhOMGNtVmhiV0oxWmw5cGRHVnlZWFJ2Y2tsM1RsTmZNVEZqYUdGeVgzUnlZV2wwYzBsM1JVVkZSVVZGQUU1VGRETmZYekk1WDE5dWRXMWZaMlYwU1hkRlJRQUFBSWoxQUFBVTVBQUFBQUFBQUFFQUFBQlE0d0FBQUFBQUFJajFBQURRNHdBQUFBQUFBQUlBQUFBYzN3QUFBZ0FBQUN6a0FFSG95QU1MM2dFczVRQUFoUUVBQU00QkFBQmpBUUFBendFQUFOQUJBQURSQVFBQTBnRUFBTk1CQUFEVUFRQUExUUVBQU5ZQkFBQk9VM1F6WDE4eU4yNTFiVjl3ZFhSSlkwNVRYekU1YjNOMGNtVmhiV0oxWmw5cGRHVnlZWFJ2Y2tsalRsTmZNVEZqYUdGeVgzUnlZV2wwYzBsalJVVkZSVVZGQUU1VGRETmZYekk1WDE5dWRXMWZjSFYwU1dORlJRQk9VM1F6WDE4eU1UUmZYMjUxYlY5d2RYUmZZbUZ6WlVVQUFBVDFBQUR5NUFBQWlQVUFBTnprQUFBQUFBQUFBUUFBQUF6bEFBQUFBQUFBaVBVQUFKamtBQUFBQUFBQUFnQUFBQnpmQUFBQ0FBQUFGT1VBUWRES0F3dStBZlRsQUFDRkFRQUExd0VBQUdNQkFBRFlBUUFBMlFFQUFOb0JBQURiQVFBQTNBRUFBTjBCQUFEZUFRQUEzd0VBQUU1VGRETmZYekkzYm5WdFgzQjFkRWwzVGxOZk1UbHZjM1J5WldGdFluVm1YMmwwWlhKaGRHOXlTWGRPVTE4eE1XTm9ZWEpmZEhKaGFYUnpTWGRGUlVWRlJVVUFUbE4wTTE5Zk1qbGZYMjUxYlY5d2RYUkpkMFZGQUFBQWlQVUFBTVRsQUFBQUFBQUFBUUFBQUF6bEFBQUFBQUFBaVBVQUFJRGxBQUFBQUFBQUFnQUFBQnpmQUFBQ0FBQUEzT1VBUVpqTUF3dWFDL1RtQUFEZ0FRQUE0UUVBQUdNQkFBRGlBUUFBNHdFQUFPUUJBQURsQVFBQTVnRUFBT2NCQUFEb0FRQUErUC8vLy9UbUFBRHBBUUFBNmdFQUFPc0JBQURzQVFBQTdRRUFBTzRCQUFEdkFRQUFUbE4wTTE5Zk1qaDBhVzFsWDJkbGRFbGpUbE5mTVRscGMzUnlaV0Z0WW5WbVgybDBaWEpoZEc5eVNXTk9VMTh4TVdOb1lYSmZkSEpoYVhSelNXTkZSVVZGUlVVQVRsTjBNMTlmTWpsMGFXMWxYMkpoYzJWRkFBVDFBQUN0NWdBQVRsTjBNMTlmTWpJd1gxOTBhVzFsWDJkbGRGOWpYM04wYjNKaFoyVkpZMFZGQUFBQUJQVUFBTWptQUFDSTlRQUFhT1lBQUFBQUFBQURBQUFBSE44QUFBSUFBQURBNWdBQUFnQUFBT3ptQUFBQUNBQUFBQUFBQU9EbkFBRHdBUUFBOFFFQUFHTUJBQUR5QVFBQTh3RUFBUFFCQUFEMUFRQUE5Z0VBQVBjQkFBRDRBUUFBK1AvLy8rRG5BQUQ1QVFBQStnRUFBUHNCQUFEOEFRQUEvUUVBQVA0QkFBRC9BUUFBVGxOME0xOWZNamgwYVcxbFgyZGxkRWwzVGxOZk1UbHBjM1J5WldGdFluVm1YMmwwWlhKaGRHOXlTWGRPVTE4eE1XTm9ZWEpmZEhKaGFYUnpTWGRGUlVWRlJVVUFUbE4wTTE5Zk1qSXdYMTkwYVcxbFgyZGxkRjlqWDNOMGIzSmhaMlZKZDBWRkFBQUU5UUFBdGVjQUFJajFBQUJ3NXdBQUFBQUFBQU1BQUFBYzN3QUFBZ0FBQU1EbUFBQUNBQUFBMk9jQUFBQUlBQUFBQUFBQWhPZ0FBQUFDQUFBQkFnQUFZd0VBQUFJQ0FBQk9VM1F6WDE4eU9IUnBiV1ZmY0hWMFNXTk9VMTh4T1c5emRISmxZVzFpZFdaZmFYUmxjbUYwYjNKSlkwNVRYekV4WTJoaGNsOTBjbUZwZEhOSlkwVkZSVVZGUlFCT1UzUXpYMTh5TVRCZlgzUnBiV1ZmY0hWMFJRQUFBQVQxQUFCbDZBQUFpUFVBQUNEb0FBQUFBQUFBQWdBQUFCemZBQUFDQUFBQWZPZ0FBQUFJQUFBQUFBQUFCT2tBQUFNQ0FBQUVBZ0FBWXdFQUFBVUNBQUJPVTNRelgxOHlPSFJwYldWZmNIVjBTWGRPVTE4eE9XOXpkSEpsWVcxaWRXWmZhWFJsY21GMGIzSkpkMDVUWHpFeFkyaGhjbDkwY21GcGRITkpkMFZGUlVWRlJRQUFBQUNJOVFBQXZPZ0FBQUFBQUFBQ0FBQUFITjhBQUFJQUFBQjg2QUFBQUFnQUFBQUFBQUNZNlFBQWhRRUFBQVlDQUFCakFRQUFCd0lBQUFnQ0FBQUpBZ0FBQ2dJQUFBc0NBQUFNQWdBQURRSUFBQTRDQUFBUEFnQUFUbE4wTTE5Zk1qRXdiVzl1Wlhsd2RXNWpkRWxqVEdJd1JVVkZBRTVUZEROZlh6SXhNRzF2Ym1WNVgySmhjMlZGQUFBQUFBVDFBQUI0NlFBQWlQVUFBRnpwQUFBQUFBQUFBZ0FBQUJ6ZkFBQUNBQUFBa09rQUFBSUFBQUFBQUFBQURPb0FBSVVCQUFBUUFnQUFZd0VBQUJFQ0FBQVNBZ0FBRXdJQUFCUUNBQUFWQWdBQUZnSUFBQmNDQUFBWUFnQUFHUUlBQUU1VGRETmZYekl4TUcxdmJtVjVjSFZ1WTNSSlkweGlNVVZGUlFDSTlRQUE4T2tBQUFBQUFBQUNBQUFBSE44QUFBSUFBQUNRNlFBQUFnQUFBQUFBQUFDQTZnQUFoUUVBQUJvQ0FBQmpBUUFBR3dJQUFCd0NBQUFkQWdBQUhnSUFBQjhDQUFBZ0FnQUFJUUlBQUNJQ0FBQWpBZ0FBVGxOME0xOWZNakV3Ylc5dVpYbHdkVzVqZEVsM1RHSXdSVVZGQUlqMUFBQms2Z0FBQUFBQUFBSUFBQUFjM3dBQUFnQUFBSkRwQUFBQ0FBQUFBQUFBQVBUcUFBQ0ZBUUFBSkFJQUFHTUJBQUFsQWdBQUpnSUFBQ2NDQUFBb0FnQUFLUUlBQUNvQ0FBQXJBZ0FBTEFJQUFDMENBQUJPVTNRelgxOHlNVEJ0YjI1bGVYQjFibU4wU1hkTVlqRkZSVVVBaVBVQUFOanFBQUFBQUFBQUFnQUFBQnpmQUFBQ0FBQUFrT2tBQUFJQUFBQUFBQUFBbU9zQUFJVUJBQUF1QWdBQVl3RUFBQzhDQUFBd0FnQUFUbE4wTTE5Zk1qbHRiMjVsZVY5blpYUkpZMDVUWHpFNWFYTjBjbVZoYldKMVpsOXBkR1Z5WVhSdmNrbGpUbE5mTVRGamFHRnlYM1J5WVdsMGMwbGpSVVZGUlVWRkFFNVRkRE5mWHpJeE1WOWZiVzl1WlhsZloyVjBTV05GUlFBQUJQVUFBSGJyQUFDSTlRQUFNT3NBQUFBQUFBQUNBQUFBSE44QUFBSUFBQUNRNndCQnZOY0RDNW9CUE93QUFJVUJBQUF4QWdBQVl3RUFBRElDQUFBekFnQUFUbE4wTTE5Zk1qbHRiMjVsZVY5blpYUkpkMDVUWHpFNWFYTjBjbVZoYldKMVpsOXBkR1Z5WVhSdmNrbDNUbE5mTVRGamFHRnlYM1J5WVdsMGMwbDNSVVZGUlVWRkFFNVRkRE5mWHpJeE1WOWZiVzl1WlhsZloyVjBTWGRGUlFBQUJQVUFBQnJzQUFDSTlRQUExT3NBQUFBQUFBQUNBQUFBSE44QUFBSUFBQUEwN0FCQjROZ0RDNW9CNE93QUFJVUJBQUEwQWdBQVl3RUFBRFVDQUFBMkFnQUFUbE4wTTE5Zk1qbHRiMjVsZVY5d2RYUkpZMDVUWHpFNWIzTjBjbVZoYldKMVpsOXBkR1Z5WVhSdmNrbGpUbE5mTVRGamFHRnlYM1J5WVdsMGMwbGpSVVZGUlVWRkFFNVRkRE5mWHpJeE1WOWZiVzl1WlhsZmNIVjBTV05GUlFBQUJQVUFBTDdzQUFDSTlRQUFlT3dBQUFBQUFBQUNBQUFBSE44QUFBSUFBQURZN0FCQmhOb0RDNW9CaE8wQUFJVUJBQUEzQWdBQVl3RUFBRGdDQUFBNUFnQUFUbE4wTTE5Zk1qbHRiMjVsZVY5d2RYUkpkMDVUWHpFNWIzTjBjbVZoYldKMVpsOXBkR1Z5WVhSdmNrbDNUbE5mTVRGamFHRnlYM1J5WVdsMGMwbDNSVVZGUlVWRkFFNVRkRE5mWHpJeE1WOWZiVzl1WlhsZmNIVjBTWGRGUlFBQUJQVUFBR0x0QUFDSTlRQUFITzBBQUFBQUFBQUNBQUFBSE44QUFBSUFBQUI4N1FCQnFOc0RDN2tJL08wQUFJVUJBQUE2QWdBQVl3RUFBRHNDQUFBOEFnQUFQUUlBQUU1VGRETmZYekk0YldWemMyRm5aWE5KWTBWRkFFNVRkRE5mWHpJeE0yMWxjM05oWjJWelgySmhjMlZGQUFBQUFBVDFBQURaN1FBQWlQVUFBTVR0QUFBQUFBQUFBZ0FBQUJ6ZkFBQUNBQUFBOU8wQUFBSUFBQUFBQUFBQVZPNEFBSVVCQUFBK0FnQUFZd0VBQUQ4Q0FBQkFBZ0FBUVFJQUFFNVRkRE5mWHpJNGJXVnpjMkZuWlhOSmQwVkZBQUFBQUlqMUFBQTg3Z0FBQUFBQUFBSUFBQUFjM3dBQUFnQUFBUFR0QUFBQ0FBQUFVd0FBQUhVQUFBQnVBQUFBWkFBQUFHRUFBQUI1QUFBQUFBQUFBRTBBQUFCdkFBQUFiZ0FBQUdRQUFBQmhBQUFBZVFBQUFBQUFBQUJVQUFBQWRRQUFBR1VBQUFCekFBQUFaQUFBQUdFQUFBQjVBQUFBQUFBQUFGY0FBQUJsQUFBQVpBQUFBRzRBQUFCbEFBQUFjd0FBQUdRQUFBQmhBQUFBZVFBQUFBQUFBQUJVQUFBQWFBQUFBSFVBQUFCeUFBQUFjd0FBQUdRQUFBQmhBQUFBZVFBQUFBQUFBQUJHQUFBQWNnQUFBR2tBQUFCa0FBQUFZUUFBQUhrQUFBQUFBQUFBVXdBQUFHRUFBQUIwQUFBQWRRQUFBSElBQUFCa0FBQUFZUUFBQUhrQUFBQUFBQUFBVXdBQUFIVUFBQUJ1QUFBQUFBQUFBRTBBQUFCdkFBQUFiZ0FBQUFBQUFBQlVBQUFBZFFBQUFHVUFBQUFBQUFBQVZ3QUFBR1VBQUFCa0FBQUFBQUFBQUZRQUFBQm9BQUFBZFFBQUFBQUFBQUJHQUFBQWNnQUFBR2tBQUFBQUFBQUFVd0FBQUdFQUFBQjBBQUFBQUFBQUFFb0FBQUJoQUFBQWJnQUFBSFVBQUFCaEFBQUFjZ0FBQUhrQUFBQUFBQUFBUmdBQUFHVUFBQUJpQUFBQWNnQUFBSFVBQUFCaEFBQUFjZ0FBQUhrQUFBQUFBQUFBVFFBQUFHRUFBQUJ5QUFBQVl3QUFBR2dBQUFBQUFBQUFRUUFBQUhBQUFBQnlBQUFBYVFBQUFHd0FBQUFBQUFBQVRRQUFBR0VBQUFCNUFBQUFBQUFBQUVvQUFBQjFBQUFBYmdBQUFHVUFBQUFBQUFBQVNnQUFBSFVBQUFCc0FBQUFlUUFBQUFBQUFBQkJBQUFBZFFBQUFHY0FBQUIxQUFBQWN3QUFBSFFBQUFBQUFBQUFVd0FBQUdVQUFBQndBQUFBZEFBQUFHVUFBQUJ0QUFBQVlnQUFBR1VBQUFCeUFBQUFBQUFBQUU4QUFBQmpBQUFBZEFBQUFHOEFBQUJpQUFBQVpRQUFBSElBQUFBQUFBQUFUZ0FBQUc4QUFBQjJBQUFBWlFBQUFHMEFBQUJpQUFBQVpRQUFBSElBQUFBQUFBQUFSQUFBQUdVQUFBQmpBQUFBWlFBQUFHMEFBQUJpQUFBQVpRQUFBSElBQUFBQUFBQUFTZ0FBQUdFQUFBQnVBQUFBQUFBQUFFWUFBQUJsQUFBQVlnQUFBQUFBQUFCTkFBQUFZUUFBQUhJQUFBQUFBQUFBUVFBQUFIQUFBQUJ5QUFBQUFBQUFBRW9BQUFCMUFBQUFiZ0FBQUFBQUFBQktBQUFBZFFBQUFHd0FBQUFBQUFBQVFRQUFBSFVBQUFCbkFBQUFBQUFBQUZNQUFBQmxBQUFBY0FBQUFBQUFBQUJQQUFBQVl3QUFBSFFBQUFBQUFBQUFUZ0FBQUc4QUFBQjJBQUFBQUFBQUFFUUFBQUJsQUFBQVl3QUFBQUFBQUFCQkFBQUFUUUFBQUFBQUFBQlFBQUFBVFFCQjdPTURDN0lKN09ZQUFPa0JBQURxQVFBQTZ3RUFBT3dCQUFEdEFRQUE3Z0VBQU84QkFBQUFBQUFBMk9jQUFQa0JBQUQ2QVFBQSt3RUFBUHdCQUFEOUFRQUEvZ0VBQVA4QkFBQUFBQUFBWVBJQUFCWUFBQUJDQWdBQVF3SUFBRTVUZEROZlh6SXhORjlmYzJoaGNtVmtYMk52ZFc1MFJRQUFBQUFFOVFBQVJQSUFBQUFBQUFDazhnQUFGZ0FBQUVRQ0FBQkRBZ0FBUlFJQUFFTUNBQUJPVTNRelgxOHlNVGxmWDNOb1lYSmxaRjkzWldGclgyTnZkVzUwUlFBQUFJajFBQUNFOGdBQUFBQUFBQUVBQUFCZzhnQUFBQUFBQUU0eE1GOWZZM2g0WVdKcGRqRXhObDlmYzJocGJWOTBlWEJsWDJsdVptOUZBQUFBQUN6MUFBQzg4Z0FBbVBZQUFFNHhNRjlmWTNoNFlXSnBkakV4TjE5ZlkyeGhjM05mZEhsd1pWOXBibVp2UlFBQUFDejFBQURzOGdBQTRQSUFBRTR4TUY5ZlkzaDRZV0pwZGpFeE4xOWZjR0poYzJWZmRIbHdaVjlwYm1adlJRQUFBQ3oxQUFBYzh3QUE0UElBQUU0eE1GOWZZM2g0WVdKcGRqRXhPVjlmY0c5cGJuUmxjbDkwZVhCbFgybHVabTlGQUN6MUFBQk04d0FBUVBNQUFFNHhNRjlmWTNoNFlXSnBkakV5TUY5ZlpuVnVZM1JwYjI1ZmRIbHdaVjlwYm1adlJRQUFBQUFzOVFBQWZQTUFBT0R5QUFCT01UQmZYMk40ZUdGaWFYWXhNamxmWDNCdmFXNTBaWEpmZEc5ZmJXVnRZbVZ5WDNSNWNHVmZhVzVtYjBVQUFBQXM5UUFBc1BNQUFFRHpBQUFBQUFBQU1QUUFBRVlDQUFCSEFnQUFTQUlBQUVrQ0FBQktBZ0FBVGpFd1gxOWplSGhoWW1sMk1USXpYMTltZFc1a1lXMWxiblJoYkY5MGVYQmxYMmx1Wm05RkFDejFBQUFJOUFBQTRQSUFBSFlBQUFEMDh3QUFQUFFBQUVSdUFBRDA4d0FBU1BRQUFHSUFBQUQwOHdBQVZQUUFBR01BQUFEMDh3QUFZUFFBQUdnQUFBRDA4d0FBYlBRQUFHRUFBQUQwOHdBQWVQUUFBSE1BQUFEMDh3QUFoUFFBQUhRQUFBRDA4d0FBa1BRQUFHa0FBQUQwOHdBQW5QUUFBR29BQUFEMDh3QUFxUFFBQUd3QUFBRDA4d0FBdFBRQUFHMEFBQUQwOHdBQXdQUUFBSGdBQUFEMDh3QUF6UFFBQUhrQUFBRDA4d0FBMlBRQUFHWUFBQUQwOHdBQTVQUUFBR1FBQUFEMDh3QUE4UFFBQUFBQUFBQVE4d0FBUmdJQUFFc0NBQUJJQWdBQVNRSUFBRXdDQUFCTkFnQUFUZ0lBQUU4Q0FBQUFBQUFBZFBVQUFFWUNBQUJRQWdBQVNBSUFBRWtDQUFCTUFnQUFVUUlBQUZJQ0FBQlRBZ0FBVGpFd1gxOWplSGhoWW1sMk1USXdYMTl6YVY5amJHRnpjMTkwZVhCbFgybHVabTlGQUFBQUFDejFBQUJNOVFBQUVQTUFBQUFBQUFEUTlRQUFSZ0lBQUZRQ0FBQklBZ0FBU1FJQUFFd0NBQUJWQWdBQVZnSUFBRmNDQUFCT01UQmZYMk40ZUdGaWFYWXhNakZmWDNadGFWOWpiR0Z6YzE5MGVYQmxYMmx1Wm05RkFBQUFMUFVBQUtqMUFBQVE4d0FBQUFBQUFIRHpBQUJHQWdBQVdBSUFBRWdDQUFCSkFnQUFXUUlBQUFBQUFBQWM5Z0FBV2dJQUFGc0NBQUJjQWdBQVUzUTVaWGhqWlhCMGFXOXVBQUFBQUFUMUFBQU05Z0FBQUFBQUFFajJBQUFNQUFBQVhRSUFBRjRDQUFCVGRERXhiRzluYVdOZlpYSnliM0lBTFBVQUFEajJBQUFjOWdBQUFBQUFBSHoyQUFBTUFBQUFYd0lBQUY0Q0FBQlRkREV5YkdWdVozUm9YMlZ5Y205eUFBQUFBQ3oxQUFCbzlnQUFTUFlBQUZOME9YUjVjR1ZmYVc1bWJ3QUFBQUFFOVFBQWlQWUFRYUR0QXdzaEFRQUFBRjRFQUFCSEJ3QUE1dzBBQUpJUEFBRC8vLy8vL2YvLy8vNy8vLzhGQUVITjdRTUxBUUVBUWVUdEF3c0wvZ0FBQVAwQUFBQjREQUVBUWZ6dEF3c0JBZ0JCak80REN3ai8vLy8vLy8vLy93QkIwTzREQ3duQTlnQUFBQUFBQUFVQVFlVHVBd3NDQVFFQVFmenVBd3NPL2dBQUFBSUJBQUNJREFFQUFBUUFRWlR2QXdzQkFRQkJwTzhEQ3dYLy8vLy9DZ0JCNk84REN3bFk5d0FBMENKUkFBa0FRZjN2QXdzQkFRQkJrUEFEQ3hML0FBQUFBQUFBQVAwQUFBQ1lFZ0VBQUFRQVFiendBd3NFLy8vLy93PT1cIjtpZighaXNEYXRhVVJJKHdhc21CaW5hcnlGaWxlKSl7d2FzbUJpbmFyeUZpbGU9bG9jYXRlRmlsZSh3YXNtQmluYXJ5RmlsZSl9ZnVuY3Rpb24gZ2V0QmluYXJ5KGZpbGUpe3RyeXtpZihmaWxlPT13YXNtQmluYXJ5RmlsZSYmd2FzbUJpbmFyeSl7cmV0dXJuIG5ldyBVaW50OEFycmF5KHdhc21CaW5hcnkpfXZhciBiaW5hcnk9dHJ5UGFyc2VBc0RhdGFVUkkoZmlsZSk7aWYoYmluYXJ5KXtyZXR1cm4gYmluYXJ5fWlmKHJlYWRCaW5hcnkpe3JldHVybiByZWFkQmluYXJ5KGZpbGUpfWVsc2V7dGhyb3dcImJvdGggYXN5bmMgYW5kIHN5bmMgZmV0Y2hpbmcgb2YgdGhlIHdhc20gZmFpbGVkXCJ9fWNhdGNoKGVycil7YWJvcnQoZXJyKX19ZnVuY3Rpb24gZ2V0QmluYXJ5UHJvbWlzZSgpe2lmKCF3YXNtQmluYXJ5JiYoRU5WSVJPTk1FTlRfSVNfV0VCfHxFTlZJUk9OTUVOVF9JU19XT1JLRVIpKXtpZih0eXBlb2YgZmV0Y2g9PVwiZnVuY3Rpb25cIiYmIWlzRmlsZVVSSSh3YXNtQmluYXJ5RmlsZSkpe3JldHVybiBmZXRjaCh3YXNtQmluYXJ5RmlsZSx7Y3JlZGVudGlhbHM6XCJzYW1lLW9yaWdpblwifSkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7aWYoIXJlc3BvbnNlW1wib2tcIl0pe3Rocm93XCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcIit3YXNtQmluYXJ5RmlsZStcIidcIn1yZXR1cm4gcmVzcG9uc2VbXCJhcnJheUJ1ZmZlclwiXSgpfSkuY2F0Y2goZnVuY3Rpb24oKXtyZXR1cm4gZ2V0QmluYXJ5KHdhc21CaW5hcnlGaWxlKX0pfWVsc2V7aWYocmVhZEFzeW5jKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe3JlYWRBc3luYyh3YXNtQmluYXJ5RmlsZSxmdW5jdGlvbihyZXNwb25zZSl7cmVzb2x2ZShuZXcgVWludDhBcnJheShyZXNwb25zZSkpfSxyZWplY3QpfSl9fX1yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpe3JldHVybiBnZXRCaW5hcnkod2FzbUJpbmFyeUZpbGUpfSl9ZnVuY3Rpb24gY3JlYXRlV2FzbSgpe3ZhciBpbmZvPXtcImFcIjphc21MaWJyYXJ5QXJnfTtmdW5jdGlvbiByZWNlaXZlSW5zdGFuY2UoaW5zdGFuY2UsbW9kdWxlKXt2YXIgZXhwb3J0cz1pbnN0YW5jZS5leHBvcnRzO01vZHVsZVtcImFzbVwiXT1leHBvcnRzO3dhc21NZW1vcnk9TW9kdWxlW1wiYXNtXCJdW1wiWVwiXTt1cGRhdGVHbG9iYWxCdWZmZXJBbmRWaWV3cyh3YXNtTWVtb3J5LmJ1ZmZlcik7d2FzbVRhYmxlPU1vZHVsZVtcImFzbVwiXVtcImJhXCJdO2FkZE9uSW5pdChNb2R1bGVbXCJhc21cIl1bXCJaXCJdKTtyZW1vdmVSdW5EZXBlbmRlbmN5KFwid2FzbS1pbnN0YW50aWF0ZVwiKX1hZGRSdW5EZXBlbmRlbmN5KFwid2FzbS1pbnN0YW50aWF0ZVwiKTtmdW5jdGlvbiByZWNlaXZlSW5zdGFudGlhdGlvblJlc3VsdChyZXN1bHQpe3JlY2VpdmVJbnN0YW5jZShyZXN1bHRbXCJpbnN0YW5jZVwiXSl9ZnVuY3Rpb24gaW5zdGFudGlhdGVBcnJheUJ1ZmZlcihyZWNlaXZlcil7cmV0dXJuIGdldEJpbmFyeVByb21pc2UoKS50aGVuKGZ1bmN0aW9uKGJpbmFyeSl7cmV0dXJuIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGJpbmFyeSxpbmZvKX0pLnRoZW4oZnVuY3Rpb24oaW5zdGFuY2Upe3JldHVybiBpbnN0YW5jZX0pLnRoZW4ocmVjZWl2ZXIsZnVuY3Rpb24ocmVhc29uKXtlcnIoXCJmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiBcIityZWFzb24pO2Fib3J0KHJlYXNvbil9KX1mdW5jdGlvbiBpbnN0YW50aWF0ZUFzeW5jKCl7aWYoIXdhc21CaW5hcnkmJnR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZz09XCJmdW5jdGlvblwiJiYhaXNEYXRhVVJJKHdhc21CaW5hcnlGaWxlKSYmIWlzRmlsZVVSSSh3YXNtQmluYXJ5RmlsZSkmJnR5cGVvZiBmZXRjaD09XCJmdW5jdGlvblwiKXtyZXR1cm4gZmV0Y2god2FzbUJpbmFyeUZpbGUse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe3ZhciByZXN1bHQ9V2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcocmVzcG9uc2UsaW5mbyk7cmV0dXJuIHJlc3VsdC50aGVuKHJlY2VpdmVJbnN0YW50aWF0aW9uUmVzdWx0LGZ1bmN0aW9uKHJlYXNvbil7ZXJyKFwid2FzbSBzdHJlYW1pbmcgY29tcGlsZSBmYWlsZWQ6IFwiK3JlYXNvbik7ZXJyKFwiZmFsbGluZyBiYWNrIHRvIEFycmF5QnVmZmVyIGluc3RhbnRpYXRpb25cIik7cmV0dXJuIGluc3RhbnRpYXRlQXJyYXlCdWZmZXIocmVjZWl2ZUluc3RhbnRpYXRpb25SZXN1bHQpfSl9KX1lbHNle3JldHVybiBpbnN0YW50aWF0ZUFycmF5QnVmZmVyKHJlY2VpdmVJbnN0YW50aWF0aW9uUmVzdWx0KX19aWYoTW9kdWxlW1wiaW5zdGFudGlhdGVXYXNtXCJdKXt0cnl7dmFyIGV4cG9ydHM9TW9kdWxlW1wiaW5zdGFudGlhdGVXYXNtXCJdKGluZm8scmVjZWl2ZUluc3RhbmNlKTtyZXR1cm4gZXhwb3J0c31jYXRjaChlKXtlcnIoXCJNb2R1bGUuaW5zdGFudGlhdGVXYXNtIGNhbGxiYWNrIGZhaWxlZCB3aXRoIGVycm9yOiBcIitlKTtyZXR1cm4gZmFsc2V9fWluc3RhbnRpYXRlQXN5bmMoKS5jYXRjaChyZWFkeVByb21pc2VSZWplY3QpO3JldHVybnt9fXZhciB0ZW1wRG91YmxlO3ZhciB0ZW1wSTY0O3ZhciBBU01fQ09OU1RTPXs2MzYxNjpmdW5jdGlvbigkMCwkMSwkMil7dmFyIG1lc3NhZ2U9VVRGOFRvU3RyaW5nKCQwKTt2YXIgaW5mb0hlYWQ9VVRGOFRvU3RyaW5nKCQxKTt2YXIgc3R5bGU9VVRGOFRvU3RyaW5nKCQyKTtjb25zb2xlLmxvZyhpbmZvSGVhZCttZXNzYWdlLHN0eWxlKX0sNjM3NTU6ZnVuY3Rpb24oJDAsJDEsJDIsJDMpe3ZhciBtZXNzYWdlPVVURjhUb1N0cmluZygkMCk7dmFyIGluZm9IZWFkPVVURjhUb1N0cmluZygkMSk7dmFyIHN0eWxlPVVURjhUb1N0cmluZygkMik7dmFyIGZvcm1hdD1VVEY4VG9TdHJpbmcoJDMpO2NvbnNvbGUubG9nKGluZm9IZWFkK21lc3NhZ2Usc3R5bGUsZm9ybWF0KX0sNjM5MzM6ZnVuY3Rpb24oJDAsJDEsJDIsJDMpe3ZhciBtZXNzYWdlPVVURjhUb1N0cmluZygkMCk7dmFyIGluZm9IZWFkPVVURjhUb1N0cmluZygkMSk7dmFyIHN0eWxlPVVURjhUb1N0cmluZygkMik7dmFyIGZvcm1hdD1VVEY4VG9TdHJpbmcoJDMpO2NvbnNvbGUubG9nKGluZm9IZWFkK21lc3NhZ2Usc3R5bGUsZm9ybWF0KX0sNjQxMTE6ZnVuY3Rpb24oJDAsJDEsJDIsJDMpe3ZhciBtZXNzYWdlPVVURjhUb1N0cmluZygkMCk7dmFyIGluZm9IZWFkPVVURjhUb1N0cmluZygkMSk7dmFyIHN0eWxlPVVURjhUb1N0cmluZygkMik7dmFyIGZvcm1hdD1VVEY4VG9TdHJpbmcoJDMpO2NvbnNvbGUubG9nKGluZm9IZWFkK21lc3NhZ2Usc3R5bGUsZm9ybWF0KX0sNjQyODk6ZnVuY3Rpb24oJDAsJDEsJDIsJDMpe3ZhciBtZXNzYWdlPVVURjhUb1N0cmluZygkMCk7dmFyIGluZm9IZWFkPVVURjhUb1N0cmluZygkMSk7dmFyIHN0eWxlPVVURjhUb1N0cmluZygkMik7dmFyIGZvcm1hdD1VVEY4VG9TdHJpbmcoJDMpO2NvbnNvbGUubG9nKGluZm9IZWFkK21lc3NhZ2Usc3R5bGUsZm9ybWF0KX0sNjQ0Njc6ZnVuY3Rpb24oJDAsJDEsJDIsJDMpe3ZhciBtZXNzYWdlPVVURjhUb1N0cmluZygkMCk7dmFyIGluZm9IZWFkPVVURjhUb1N0cmluZygkMSk7dmFyIHN0eWxlPVVURjhUb1N0cmluZygkMik7Y29uc29sZS5sb2coaW5mb0hlYWQrbWVzc2FnZSxzdHlsZSwkMyl9LDY0NjEwOmZ1bmN0aW9uKCQwLCQxLCQyKXt2YXIgbWVzc2FnZT1VVEY4VG9TdHJpbmcoJDApO3ZhciBlcnJvckhlYWQ9VVRGOFRvU3RyaW5nKCQxKTt2YXIgc3R5bGU9VVRGOFRvU3RyaW5nKCQyKTtjb25zb2xlLmVycm9yKGVycm9ySGVhZCttZXNzYWdlLHN0eWxlKX0sNjQ3NTM6ZnVuY3Rpb24oJDAsJDEsJDIsJDMpe3ZhciBtZXNzYWdlPVVURjhUb1N0cmluZygkMCk7dmFyIGVycm9ySGVhZD1VVEY4VG9TdHJpbmcoJDEpO3ZhciBzdHlsZT1VVEY4VG9TdHJpbmcoJDIpO3ZhciBmb3JtYXQ9VVRGOFRvU3RyaW5nKCQzKTtjb25zb2xlLmVycm9yKGVycm9ySGVhZCttZXNzYWdlLHN0eWxlLGZvcm1hdCl9LDY0OTM1OmZ1bmN0aW9uKCQwLCQxLCQyLCQzKXt2YXIgbWVzc2FnZT1VVEY4VG9TdHJpbmcoJDApO3ZhciBlcnJvckhlYWQ9VVRGOFRvU3RyaW5nKCQxKTt2YXIgc3R5bGU9VVRGOFRvU3RyaW5nKCQyKTt2YXIgZm9ybWF0PVVURjhUb1N0cmluZygkMyk7Y29uc29sZS5lcnJvcihlcnJvckhlYWQrbWVzc2FnZSxzdHlsZSxmb3JtYXQpfSw2NTExNzpmdW5jdGlvbigkMCwkMSwkMiwkMyl7dmFyIG1lc3NhZ2U9VVRGOFRvU3RyaW5nKCQwKTt2YXIgZXJyb3JIZWFkPVVURjhUb1N0cmluZygkMSk7dmFyIHN0eWxlPVVURjhUb1N0cmluZygkMik7dmFyIGZvcm1hdD1VVEY4VG9TdHJpbmcoJDMpO2NvbnNvbGUuZXJyb3IoZXJyb3JIZWFkK21lc3NhZ2Usc3R5bGUsZm9ybWF0KX0sNjUyOTk6ZnVuY3Rpb24oJDAsJDEsJDIsJDMpe3ZhciBtZXNzYWdlPVVURjhUb1N0cmluZygkMCk7dmFyIGVycm9ySGVhZD1VVEY4VG9TdHJpbmcoJDEpO3ZhciBzdHlsZT1VVEY4VG9TdHJpbmcoJDIpO3ZhciBmb3JtYXQ9VVRGOFRvU3RyaW5nKCQzKTtjb25zb2xlLmVycm9yKGVycm9ySGVhZCttZXNzYWdlLHN0eWxlLGZvcm1hdCl9LDY1NDgxOmZ1bmN0aW9uKCQwLCQxLCQyLCQzKXt2YXIgbWVzc2FnZT1VVEY4VG9TdHJpbmcoJDApO3ZhciBlcnJvckhlYWQ9VVRGOFRvU3RyaW5nKCQxKTt2YXIgc3R5bGU9VVRGOFRvU3RyaW5nKCQyKTtjb25zb2xlLmVycm9yKGVycm9ySGVhZCttZXNzYWdlLHN0eWxlLCQzKX0sNjU2Mjg6ZnVuY3Rpb24oJDAsJDEsJDIpe3ZhciBtZXNzYWdlPVVURjhUb1N0cmluZygkMCk7dmFyIGluZm9IZWFkPVVURjhUb1N0cmluZygkMSk7dmFyIHN0eWxlPVVURjhUb1N0cmluZygkMik7Y29uc29sZS53YXJuKGluZm9IZWFkK21lc3NhZ2Usc3R5bGUpfSw2NTc2ODpmdW5jdGlvbigkMCwkMSwkMiwkMyl7dmFyIG1lc3NhZ2U9VVRGOFRvU3RyaW5nKCQwKTt2YXIgZXJyb3JIZWFkPVVURjhUb1N0cmluZygkMSk7dmFyIHN0eWxlPVVURjhUb1N0cmluZygkMik7dmFyIGZvcm1hdD1VVEY4VG9TdHJpbmcoJDMpO2NvbnNvbGUud2FybihlcnJvckhlYWQrbWVzc2FnZSxzdHlsZSxmb3JtYXQpfSw2NTk0OTpmdW5jdGlvbigkMCwkMSwkMiwkMyl7dmFyIG1lc3NhZ2U9VVRGOFRvU3RyaW5nKCQwKTt2YXIgZXJyb3JIZWFkPVVURjhUb1N0cmluZygkMSk7dmFyIHN0eWxlPVVURjhUb1N0cmluZygkMik7dmFyIGZvcm1hdD1VVEY4VG9TdHJpbmcoJDMpO2NvbnNvbGUud2FybihlcnJvckhlYWQrbWVzc2FnZSxzdHlsZSxmb3JtYXQpfSw2NjEzMDpmdW5jdGlvbigkMCwkMSwkMiwkMyl7dmFyIG1lc3NhZ2U9VVRGOFRvU3RyaW5nKCQwKTt2YXIgZXJyb3JIZWFkPVVURjhUb1N0cmluZygkMSk7dmFyIHN0eWxlPVVURjhUb1N0cmluZygkMik7dmFyIGZvcm1hdD1VVEY4VG9TdHJpbmcoJDMpO2NvbnNvbGUud2FybihlcnJvckhlYWQrbWVzc2FnZSxzdHlsZSxmb3JtYXQpfSw2NjMxMTpmdW5jdGlvbigkMCwkMSwkMiwkMyl7dmFyIG1lc3NhZ2U9VVRGOFRvU3RyaW5nKCQwKTt2YXIgZXJyb3JIZWFkPVVURjhUb1N0cmluZygkMSk7dmFyIHN0eWxlPVVURjhUb1N0cmluZygkMik7dmFyIGZvcm1hdD1VVEY4VG9TdHJpbmcoJDMpO2NvbnNvbGUud2FybihlcnJvckhlYWQrbWVzc2FnZSxzdHlsZSxmb3JtYXQpfSw2NjQ5MjpmdW5jdGlvbigkMCwkMSwkMiwkMyl7dmFyIG1lc3NhZ2U9VVRGOFRvU3RyaW5nKCQwKTt2YXIgZXJyb3JIZWFkPVVURjhUb1N0cmluZygkMSk7dmFyIHN0eWxlPVVURjhUb1N0cmluZygkMik7Y29uc29sZS53YXJuKGVycm9ySGVhZCttZXNzYWdlLHN0eWxlLCQzKX0sNjY2Mzg6ZnVuY3Rpb24oKXt2YXIgJGE9YXJndW1lbnRzO3ZhciBpPTA7aWYoIWFydG9vbGtpdE5GVFtcIk5GVE1hcmtlckluZm9cIl0pe2FydG9vbGtpdE5GVFtcIk5GVE1hcmtlckluZm9cIl09e2lkOjAsZXJyb3I6LTEsZm91bmQ6MCxwb3NlOlswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF19fXZhciBtYXJrZXJJbmZvPWFydG9vbGtpdE5GVFtcIk5GVE1hcmtlckluZm9cIl07bWFya2VySW5mb1tcImlkXCJdPSRhW2krK107bWFya2VySW5mb1tcImVycm9yXCJdPSRhW2krK107bWFya2VySW5mb1tcImZvdW5kXCJdPTE7bWFya2VySW5mb1tcInBvc2VcIl1bMF09JGFbaSsrXTttYXJrZXJJbmZvW1wicG9zZVwiXVsxXT0kYVtpKytdO21hcmtlckluZm9bXCJwb3NlXCJdWzJdPSRhW2krK107bWFya2VySW5mb1tcInBvc2VcIl1bM109JGFbaSsrXTttYXJrZXJJbmZvW1wicG9zZVwiXVs0XT0kYVtpKytdO21hcmtlckluZm9bXCJwb3NlXCJdWzVdPSRhW2krK107bWFya2VySW5mb1tcInBvc2VcIl1bNl09JGFbaSsrXTttYXJrZXJJbmZvW1wicG9zZVwiXVs3XT0kYVtpKytdO21hcmtlckluZm9bXCJwb3NlXCJdWzhdPSRhW2krK107bWFya2VySW5mb1tcInBvc2VcIl1bOV09JGFbaSsrXTttYXJrZXJJbmZvW1wicG9zZVwiXVsxMF09JGFbaSsrXTttYXJrZXJJbmZvW1wicG9zZVwiXVsxMV09JGFbaSsrXX0sNjczNDQ6ZnVuY3Rpb24oKXt2YXIgJGE9YXJndW1lbnRzO3ZhciBpPTA7aWYoIWFydG9vbGtpdE5GVFtcIk5GVE1hcmtlckluZm9cIl0pe2FydG9vbGtpdE5GVFtcIk5GVE1hcmtlckluZm9cIl09e2lkOjAsZXJyb3I6LTEsZm91bmQ6MCxwb3NlOlswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF19fXZhciBtYXJrZXJJbmZvPWFydG9vbGtpdE5GVFtcIk5GVE1hcmtlckluZm9cIl07bWFya2VySW5mb1tcImlkXCJdPSRhW2krK107bWFya2VySW5mb1tcImVycm9yXCJdPS0xO21hcmtlckluZm9bXCJmb3VuZFwiXT0wO21hcmtlckluZm9bXCJwb3NlXCJdWzBdPTA7bWFya2VySW5mb1tcInBvc2VcIl1bMV09MDttYXJrZXJJbmZvW1wicG9zZVwiXVsyXT0wO21hcmtlckluZm9bXCJwb3NlXCJdWzNdPTA7bWFya2VySW5mb1tcInBvc2VcIl1bNF09MDttYXJrZXJJbmZvW1wicG9zZVwiXVs1XT0wO21hcmtlckluZm9bXCJwb3NlXCJdWzZdPTA7bWFya2VySW5mb1tcInBvc2VcIl1bN109MDttYXJrZXJJbmZvW1wicG9zZVwiXVs4XT0wO21hcmtlckluZm9bXCJwb3NlXCJdWzldPTA7bWFya2VySW5mb1tcInBvc2VcIl1bMTBdPTA7bWFya2VySW5mb1tcInBvc2VcIl1bMTFdPTB9LDY3OTczOmZ1bmN0aW9uKCQwLCQxLCQyLCQzLCQ0LCQ1KXtpZighYXJ0b29sa2l0TkZUW1wiZnJhbWVNYWxsb2NcIl0pe2FydG9vbGtpdE5GVFtcImZyYW1lTWFsbG9jXCJdPXt9fXZhciBmcmFtZU1hbGxvYz1hcnRvb2xraXRORlRbXCJmcmFtZU1hbGxvY1wiXTtmcmFtZU1hbGxvY1tcImZyYW1lcG9pbnRlclwiXT0kMTtmcmFtZU1hbGxvY1tcImZyYW1lc2l6ZVwiXT0kMjtmcmFtZU1hbGxvY1tcImNhbWVyYVwiXT0kMztmcmFtZU1hbGxvY1tcInRyYW5zZm9ybVwiXT0kNDtmcmFtZU1hbGxvY1tcInZpZGVvTHVtYVBvaW50ZXJcIl09JDV9fTtmdW5jdGlvbiBjYWxsUnVudGltZUNhbGxiYWNrcyhjYWxsYmFja3Mpe3doaWxlKGNhbGxiYWNrcy5sZW5ndGg+MCl7dmFyIGNhbGxiYWNrPWNhbGxiYWNrcy5zaGlmdCgpO2lmKHR5cGVvZiBjYWxsYmFjaz09XCJmdW5jdGlvblwiKXtjYWxsYmFjayhNb2R1bGUpO2NvbnRpbnVlfXZhciBmdW5jPWNhbGxiYWNrLmZ1bmM7aWYodHlwZW9mIGZ1bmM9PVwibnVtYmVyXCIpe2lmKGNhbGxiYWNrLmFyZz09PXVuZGVmaW5lZCl7Z2V0V2FzbVRhYmxlRW50cnkoZnVuYykoKX1lbHNle2dldFdhc21UYWJsZUVudHJ5KGZ1bmMpKGNhbGxiYWNrLmFyZyl9fWVsc2V7ZnVuYyhjYWxsYmFjay5hcmc9PT11bmRlZmluZWQ/bnVsbDpjYWxsYmFjay5hcmcpfX19ZnVuY3Rpb24gZ2V0V2FzbVRhYmxlRW50cnkoZnVuY1B0cil7cmV0dXJuIHdhc21UYWJsZS5nZXQoZnVuY1B0cil9ZnVuY3Rpb24gX19fY3hhX2FsbG9jYXRlX2V4Y2VwdGlvbihzaXplKXtyZXR1cm4gX21hbGxvYyhzaXplKzI0KSsyNH1mdW5jdGlvbiBFeGNlcHRpb25JbmZvKGV4Y1B0cil7dGhpcy5leGNQdHI9ZXhjUHRyO3RoaXMucHRyPWV4Y1B0ci0yNDt0aGlzLnNldF90eXBlPWZ1bmN0aW9uKHR5cGUpe0hFQVAzMlt0aGlzLnB0cis0Pj4yXT10eXBlfTt0aGlzLmdldF90eXBlPWZ1bmN0aW9uKCl7cmV0dXJuIEhFQVAzMlt0aGlzLnB0cis0Pj4yXX07dGhpcy5zZXRfZGVzdHJ1Y3Rvcj1mdW5jdGlvbihkZXN0cnVjdG9yKXtIRUFQMzJbdGhpcy5wdHIrOD4+Ml09ZGVzdHJ1Y3Rvcn07dGhpcy5nZXRfZGVzdHJ1Y3Rvcj1mdW5jdGlvbigpe3JldHVybiBIRUFQMzJbdGhpcy5wdHIrOD4+Ml19O3RoaXMuc2V0X3JlZmNvdW50PWZ1bmN0aW9uKHJlZmNvdW50KXtIRUFQMzJbdGhpcy5wdHI+PjJdPXJlZmNvdW50fTt0aGlzLnNldF9jYXVnaHQ9ZnVuY3Rpb24oY2F1Z2h0KXtjYXVnaHQ9Y2F1Z2h0PzE6MDtIRUFQOFt0aGlzLnB0cisxMj4+MF09Y2F1Z2h0fTt0aGlzLmdldF9jYXVnaHQ9ZnVuY3Rpb24oKXtyZXR1cm4gSEVBUDhbdGhpcy5wdHIrMTI+PjBdIT0wfTt0aGlzLnNldF9yZXRocm93bj1mdW5jdGlvbihyZXRocm93bil7cmV0aHJvd249cmV0aHJvd24/MTowO0hFQVA4W3RoaXMucHRyKzEzPj4wXT1yZXRocm93bn07dGhpcy5nZXRfcmV0aHJvd249ZnVuY3Rpb24oKXtyZXR1cm4gSEVBUDhbdGhpcy5wdHIrMTM+PjBdIT0wfTt0aGlzLmluaXQ9ZnVuY3Rpb24odHlwZSxkZXN0cnVjdG9yKXt0aGlzLnNldF9hZGp1c3RlZF9wdHIoMCk7dGhpcy5zZXRfdHlwZSh0eXBlKTt0aGlzLnNldF9kZXN0cnVjdG9yKGRlc3RydWN0b3IpO3RoaXMuc2V0X3JlZmNvdW50KDApO3RoaXMuc2V0X2NhdWdodChmYWxzZSk7dGhpcy5zZXRfcmV0aHJvd24oZmFsc2UpfTt0aGlzLmFkZF9yZWY9ZnVuY3Rpb24oKXt2YXIgdmFsdWU9SEVBUDMyW3RoaXMucHRyPj4yXTtIRUFQMzJbdGhpcy5wdHI+PjJdPXZhbHVlKzF9O3RoaXMucmVsZWFzZV9yZWY9ZnVuY3Rpb24oKXt2YXIgcHJldj1IRUFQMzJbdGhpcy5wdHI+PjJdO0hFQVAzMlt0aGlzLnB0cj4+Ml09cHJldi0xO3JldHVybiBwcmV2PT09MX07dGhpcy5zZXRfYWRqdXN0ZWRfcHRyPWZ1bmN0aW9uKGFkanVzdGVkUHRyKXtIRUFQMzJbdGhpcy5wdHIrMTY+PjJdPWFkanVzdGVkUHRyfTt0aGlzLmdldF9hZGp1c3RlZF9wdHI9ZnVuY3Rpb24oKXtyZXR1cm4gSEVBUDMyW3RoaXMucHRyKzE2Pj4yXX07dGhpcy5nZXRfZXhjZXB0aW9uX3B0cj1mdW5jdGlvbigpe3ZhciBpc1BvaW50ZXI9X19fY3hhX2lzX3BvaW50ZXJfdHlwZSh0aGlzLmdldF90eXBlKCkpO2lmKGlzUG9pbnRlcil7cmV0dXJuIEhFQVAzMlt0aGlzLmV4Y1B0cj4+Ml19dmFyIGFkanVzdGVkPXRoaXMuZ2V0X2FkanVzdGVkX3B0cigpO2lmKGFkanVzdGVkIT09MClyZXR1cm4gYWRqdXN0ZWQ7cmV0dXJuIHRoaXMuZXhjUHRyfX12YXIgZXhjZXB0aW9uTGFzdD0wO3ZhciB1bmNhdWdodEV4Y2VwdGlvbkNvdW50PTA7ZnVuY3Rpb24gX19fY3hhX3Rocm93KHB0cix0eXBlLGRlc3RydWN0b3Ipe3ZhciBpbmZvPW5ldyBFeGNlcHRpb25JbmZvKHB0cik7aW5mby5pbml0KHR5cGUsZGVzdHJ1Y3Rvcik7ZXhjZXB0aW9uTGFzdD1wdHI7dW5jYXVnaHRFeGNlcHRpb25Db3VudCsrO3Rocm93IHB0cn1mdW5jdGlvbiBzZXRFcnJObyh2YWx1ZSl7SEVBUDMyW19fX2Vycm5vX2xvY2F0aW9uKCk+PjJdPXZhbHVlO3JldHVybiB2YWx1ZX12YXIgUEFUSD17aXNBYnM6cGF0aD0+cGF0aC5jaGFyQXQoMCk9PT1cIi9cIixzcGxpdFBhdGg6ZmlsZW5hbWU9Pnt2YXIgc3BsaXRQYXRoUmU9L14oXFwvP3wpKFtcXHNcXFNdKj8pKCg/OlxcLnsxLDJ9fFteXFwvXSs/fCkoXFwuW14uXFwvXSp8KSkoPzpbXFwvXSopJC87cmV0dXJuIHNwbGl0UGF0aFJlLmV4ZWMoZmlsZW5hbWUpLnNsaWNlKDEpfSxub3JtYWxpemVBcnJheToocGFydHMsYWxsb3dBYm92ZVJvb3QpPT57dmFyIHVwPTA7Zm9yKHZhciBpPXBhcnRzLmxlbmd0aC0xO2k+PTA7aS0tKXt2YXIgbGFzdD1wYXJ0c1tpXTtpZihsYXN0PT09XCIuXCIpe3BhcnRzLnNwbGljZShpLDEpfWVsc2UgaWYobGFzdD09PVwiLi5cIil7cGFydHMuc3BsaWNlKGksMSk7dXArK31lbHNlIGlmKHVwKXtwYXJ0cy5zcGxpY2UoaSwxKTt1cC0tfX1pZihhbGxvd0Fib3ZlUm9vdCl7Zm9yKDt1cDt1cC0tKXtwYXJ0cy51bnNoaWZ0KFwiLi5cIil9fXJldHVybiBwYXJ0c30sbm9ybWFsaXplOnBhdGg9Pnt2YXIgaXNBYnNvbHV0ZT1QQVRILmlzQWJzKHBhdGgpLHRyYWlsaW5nU2xhc2g9cGF0aC5zdWJzdHIoLTEpPT09XCIvXCI7cGF0aD1QQVRILm5vcm1hbGl6ZUFycmF5KHBhdGguc3BsaXQoXCIvXCIpLmZpbHRlcihwPT4hIXApLCFpc0Fic29sdXRlKS5qb2luKFwiL1wiKTtpZighcGF0aCYmIWlzQWJzb2x1dGUpe3BhdGg9XCIuXCJ9aWYocGF0aCYmdHJhaWxpbmdTbGFzaCl7cGF0aCs9XCIvXCJ9cmV0dXJuKGlzQWJzb2x1dGU/XCIvXCI6XCJcIikrcGF0aH0sZGlybmFtZTpwYXRoPT57dmFyIHJlc3VsdD1QQVRILnNwbGl0UGF0aChwYXRoKSxyb290PXJlc3VsdFswXSxkaXI9cmVzdWx0WzFdO2lmKCFyb290JiYhZGlyKXtyZXR1cm5cIi5cIn1pZihkaXIpe2Rpcj1kaXIuc3Vic3RyKDAsZGlyLmxlbmd0aC0xKX1yZXR1cm4gcm9vdCtkaXJ9LGJhc2VuYW1lOnBhdGg9PntpZihwYXRoPT09XCIvXCIpcmV0dXJuXCIvXCI7cGF0aD1QQVRILm5vcm1hbGl6ZShwYXRoKTtwYXRoPXBhdGgucmVwbGFjZSgvXFwvJC8sXCJcIik7dmFyIGxhc3RTbGFzaD1wYXRoLmxhc3RJbmRleE9mKFwiL1wiKTtpZihsYXN0U2xhc2g9PT0tMSlyZXR1cm4gcGF0aDtyZXR1cm4gcGF0aC5zdWJzdHIobGFzdFNsYXNoKzEpfSxqb2luOmZ1bmN0aW9uKCl7dmFyIHBhdGhzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtyZXR1cm4gUEFUSC5ub3JtYWxpemUocGF0aHMuam9pbihcIi9cIikpfSxqb2luMjoobCxyKT0+e3JldHVybiBQQVRILm5vcm1hbGl6ZShsK1wiL1wiK3IpfX07ZnVuY3Rpb24gZ2V0UmFuZG9tRGV2aWNlKCl7aWYodHlwZW9mIGNyeXB0bz09XCJvYmplY3RcIiYmdHlwZW9mIGNyeXB0b1tcImdldFJhbmRvbVZhbHVlc1wiXT09XCJmdW5jdGlvblwiKXt2YXIgcmFuZG9tQnVmZmVyPW5ldyBVaW50OEFycmF5KDEpO3JldHVybiBmdW5jdGlvbigpe2NyeXB0by5nZXRSYW5kb21WYWx1ZXMocmFuZG9tQnVmZmVyKTtyZXR1cm4gcmFuZG9tQnVmZmVyWzBdfX1lbHNlIGlmKEVOVklST05NRU5UX0lTX05PREUpe3RyeXt2YXIgY3J5cHRvX21vZHVsZT1yZXF1aXJlKFwiY3J5cHRvXCIpO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBjcnlwdG9fbW9kdWxlW1wicmFuZG9tQnl0ZXNcIl0oMSlbMF19fWNhdGNoKGUpe319cmV0dXJuIGZ1bmN0aW9uKCl7YWJvcnQoXCJyYW5kb21EZXZpY2VcIil9fXZhciBQQVRIX0ZTPXtyZXNvbHZlOmZ1bmN0aW9uKCl7dmFyIHJlc29sdmVkUGF0aD1cIlwiLHJlc29sdmVkQWJzb2x1dGU9ZmFsc2U7Zm9yKHZhciBpPWFyZ3VtZW50cy5sZW5ndGgtMTtpPj0tMSYmIXJlc29sdmVkQWJzb2x1dGU7aS0tKXt2YXIgcGF0aD1pPj0wP2FyZ3VtZW50c1tpXTpGUy5jd2QoKTtpZih0eXBlb2YgcGF0aCE9XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzXCIpfWVsc2UgaWYoIXBhdGgpe3JldHVyblwiXCJ9cmVzb2x2ZWRQYXRoPXBhdGgrXCIvXCIrcmVzb2x2ZWRQYXRoO3Jlc29sdmVkQWJzb2x1dGU9UEFUSC5pc0FicyhwYXRoKX1yZXNvbHZlZFBhdGg9UEFUSC5ub3JtYWxpemVBcnJheShyZXNvbHZlZFBhdGguc3BsaXQoXCIvXCIpLmZpbHRlcihwPT4hIXApLCFyZXNvbHZlZEFic29sdXRlKS5qb2luKFwiL1wiKTtyZXR1cm4ocmVzb2x2ZWRBYnNvbHV0ZT9cIi9cIjpcIlwiKStyZXNvbHZlZFBhdGh8fFwiLlwifSxyZWxhdGl2ZTooZnJvbSx0byk9Pntmcm9tPVBBVEhfRlMucmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7dG89UEFUSF9GUy5yZXNvbHZlKHRvKS5zdWJzdHIoMSk7ZnVuY3Rpb24gdHJpbShhcnIpe3ZhciBzdGFydD0wO2Zvcig7c3RhcnQ8YXJyLmxlbmd0aDtzdGFydCsrKXtpZihhcnJbc3RhcnRdIT09XCJcIilicmVha312YXIgZW5kPWFyci5sZW5ndGgtMTtmb3IoO2VuZD49MDtlbmQtLSl7aWYoYXJyW2VuZF0hPT1cIlwiKWJyZWFrfWlmKHN0YXJ0PmVuZClyZXR1cm5bXTtyZXR1cm4gYXJyLnNsaWNlKHN0YXJ0LGVuZC1zdGFydCsxKX12YXIgZnJvbVBhcnRzPXRyaW0oZnJvbS5zcGxpdChcIi9cIikpO3ZhciB0b1BhcnRzPXRyaW0odG8uc3BsaXQoXCIvXCIpKTt2YXIgbGVuZ3RoPU1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsdG9QYXJ0cy5sZW5ndGgpO3ZhciBzYW1lUGFydHNMZW5ndGg9bGVuZ3RoO2Zvcih2YXIgaT0wO2k8bGVuZ3RoO2krKyl7aWYoZnJvbVBhcnRzW2ldIT09dG9QYXJ0c1tpXSl7c2FtZVBhcnRzTGVuZ3RoPWk7YnJlYWt9fXZhciBvdXRwdXRQYXJ0cz1bXTtmb3IodmFyIGk9c2FtZVBhcnRzTGVuZ3RoO2k8ZnJvbVBhcnRzLmxlbmd0aDtpKyspe291dHB1dFBhcnRzLnB1c2goXCIuLlwiKX1vdXRwdXRQYXJ0cz1vdXRwdXRQYXJ0cy5jb25jYXQodG9QYXJ0cy5zbGljZShzYW1lUGFydHNMZW5ndGgpKTtyZXR1cm4gb3V0cHV0UGFydHMuam9pbihcIi9cIil9fTt2YXIgVFRZPXt0dHlzOltdLGluaXQ6ZnVuY3Rpb24oKXt9LHNodXRkb3duOmZ1bmN0aW9uKCl7fSxyZWdpc3RlcjpmdW5jdGlvbihkZXYsb3BzKXtUVFkudHR5c1tkZXZdPXtpbnB1dDpbXSxvdXRwdXQ6W10sb3BzOm9wc307RlMucmVnaXN0ZXJEZXZpY2UoZGV2LFRUWS5zdHJlYW1fb3BzKX0sc3RyZWFtX29wczp7b3BlbjpmdW5jdGlvbihzdHJlYW0pe3ZhciB0dHk9VFRZLnR0eXNbc3RyZWFtLm5vZGUucmRldl07aWYoIXR0eSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDMpfXN0cmVhbS50dHk9dHR5O3N0cmVhbS5zZWVrYWJsZT1mYWxzZX0sY2xvc2U6ZnVuY3Rpb24oc3RyZWFtKXtzdHJlYW0udHR5Lm9wcy5mbHVzaChzdHJlYW0udHR5KX0sZmx1c2g6ZnVuY3Rpb24oc3RyZWFtKXtzdHJlYW0udHR5Lm9wcy5mbHVzaChzdHJlYW0udHR5KX0scmVhZDpmdW5jdGlvbihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zKXtpZighc3RyZWFtLnR0eXx8IXN0cmVhbS50dHkub3BzLmdldF9jaGFyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig2MCl9dmFyIGJ5dGVzUmVhZD0wO2Zvcih2YXIgaT0wO2k8bGVuZ3RoO2krKyl7dmFyIHJlc3VsdDt0cnl7cmVzdWx0PXN0cmVhbS50dHkub3BzLmdldF9jaGFyKHN0cmVhbS50dHkpfWNhdGNoKGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI5KX1pZihyZXN1bHQ9PT11bmRlZmluZWQmJmJ5dGVzUmVhZD09PTApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYpfWlmKHJlc3VsdD09PW51bGx8fHJlc3VsdD09PXVuZGVmaW5lZClicmVhaztieXRlc1JlYWQrKztidWZmZXJbb2Zmc2V0K2ldPXJlc3VsdH1pZihieXRlc1JlYWQpe3N0cmVhbS5ub2RlLnRpbWVzdGFtcD1EYXRlLm5vdygpfXJldHVybiBieXRlc1JlYWR9LHdyaXRlOmZ1bmN0aW9uKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3Mpe2lmKCFzdHJlYW0udHR5fHwhc3RyZWFtLnR0eS5vcHMucHV0X2NoYXIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYwKX10cnl7Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXtzdHJlYW0udHR5Lm9wcy5wdXRfY2hhcihzdHJlYW0udHR5LGJ1ZmZlcltvZmZzZXQraV0pfX1jYXRjaChlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOSl9aWYobGVuZ3RoKXtzdHJlYW0ubm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKX1yZXR1cm4gaX19LGRlZmF1bHRfdHR5X29wczp7Z2V0X2NoYXI6ZnVuY3Rpb24odHR5KXtpZighdHR5LmlucHV0Lmxlbmd0aCl7dmFyIHJlc3VsdD1udWxsO2lmKEVOVklST05NRU5UX0lTX05PREUpe3ZhciBCVUZTSVpFPTI1Njt2YXIgYnVmPUJ1ZmZlci5hbGxvYyhCVUZTSVpFKTt2YXIgYnl0ZXNSZWFkPTA7dHJ5e2J5dGVzUmVhZD1mcy5yZWFkU3luYyhwcm9jZXNzLnN0ZGluLmZkLGJ1ZiwwLEJVRlNJWkUsLTEpfWNhdGNoKGUpe2lmKGUudG9TdHJpbmcoKS5pbmNsdWRlcyhcIkVPRlwiKSlieXRlc1JlYWQ9MDtlbHNlIHRocm93IGV9aWYoYnl0ZXNSZWFkPjApe3Jlc3VsdD1idWYuc2xpY2UoMCxieXRlc1JlYWQpLnRvU3RyaW5nKFwidXRmLThcIil9ZWxzZXtyZXN1bHQ9bnVsbH19ZWxzZSBpZih0eXBlb2Ygd2luZG93IT1cInVuZGVmaW5lZFwiJiZ0eXBlb2Ygd2luZG93LnByb21wdD09XCJmdW5jdGlvblwiKXtyZXN1bHQ9d2luZG93LnByb21wdChcIklucHV0OiBcIik7aWYocmVzdWx0IT09bnVsbCl7cmVzdWx0Kz1cIlxcblwifX1lbHNlIGlmKHR5cGVvZiByZWFkbGluZT09XCJmdW5jdGlvblwiKXtyZXN1bHQ9cmVhZGxpbmUoKTtpZihyZXN1bHQhPT1udWxsKXtyZXN1bHQrPVwiXFxuXCJ9fWlmKCFyZXN1bHQpe3JldHVybiBudWxsfXR0eS5pbnB1dD1pbnRBcnJheUZyb21TdHJpbmcocmVzdWx0LHRydWUpfXJldHVybiB0dHkuaW5wdXQuc2hpZnQoKX0scHV0X2NoYXI6ZnVuY3Rpb24odHR5LHZhbCl7aWYodmFsPT09bnVsbHx8dmFsPT09MTApe291dChVVEY4QXJyYXlUb1N0cmluZyh0dHkub3V0cHV0LDApKTt0dHkub3V0cHV0PVtdfWVsc2V7aWYodmFsIT0wKXR0eS5vdXRwdXQucHVzaCh2YWwpfX0sZmx1c2g6ZnVuY3Rpb24odHR5KXtpZih0dHkub3V0cHV0JiZ0dHkub3V0cHV0Lmxlbmd0aD4wKXtvdXQoVVRGOEFycmF5VG9TdHJpbmcodHR5Lm91dHB1dCwwKSk7dHR5Lm91dHB1dD1bXX19fSxkZWZhdWx0X3R0eTFfb3BzOntwdXRfY2hhcjpmdW5jdGlvbih0dHksdmFsKXtpZih2YWw9PT1udWxsfHx2YWw9PT0xMCl7ZXJyKFVURjhBcnJheVRvU3RyaW5nKHR0eS5vdXRwdXQsMCkpO3R0eS5vdXRwdXQ9W119ZWxzZXtpZih2YWwhPTApdHR5Lm91dHB1dC5wdXNoKHZhbCl9fSxmbHVzaDpmdW5jdGlvbih0dHkpe2lmKHR0eS5vdXRwdXQmJnR0eS5vdXRwdXQubGVuZ3RoPjApe2VycihVVEY4QXJyYXlUb1N0cmluZyh0dHkub3V0cHV0LDApKTt0dHkub3V0cHV0PVtdfX19fTtmdW5jdGlvbiBtbWFwQWxsb2Moc2l6ZSl7YWJvcnQoKX12YXIgTUVNRlM9e29wc190YWJsZTpudWxsLG1vdW50OmZ1bmN0aW9uKG1vdW50KXtyZXR1cm4gTUVNRlMuY3JlYXRlTm9kZShudWxsLFwiL1wiLDE2Mzg0fDUxMSwwKX0sY3JlYXRlTm9kZTpmdW5jdGlvbihwYXJlbnQsbmFtZSxtb2RlLGRldil7aWYoRlMuaXNCbGtkZXYobW9kZSl8fEZTLmlzRklGTyhtb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjMpfWlmKCFNRU1GUy5vcHNfdGFibGUpe01FTUZTLm9wc190YWJsZT17ZGlyOntub2RlOntnZXRhdHRyOk1FTUZTLm5vZGVfb3BzLmdldGF0dHIsc2V0YXR0cjpNRU1GUy5ub2RlX29wcy5zZXRhdHRyLGxvb2t1cDpNRU1GUy5ub2RlX29wcy5sb29rdXAsbWtub2Q6TUVNRlMubm9kZV9vcHMubWtub2QscmVuYW1lOk1FTUZTLm5vZGVfb3BzLnJlbmFtZSx1bmxpbms6TUVNRlMubm9kZV9vcHMudW5saW5rLHJtZGlyOk1FTUZTLm5vZGVfb3BzLnJtZGlyLHJlYWRkaXI6TUVNRlMubm9kZV9vcHMucmVhZGRpcixzeW1saW5rOk1FTUZTLm5vZGVfb3BzLnN5bWxpbmt9LHN0cmVhbTp7bGxzZWVrOk1FTUZTLnN0cmVhbV9vcHMubGxzZWVrfX0sZmlsZTp7bm9kZTp7Z2V0YXR0cjpNRU1GUy5ub2RlX29wcy5nZXRhdHRyLHNldGF0dHI6TUVNRlMubm9kZV9vcHMuc2V0YXR0cn0sc3RyZWFtOntsbHNlZWs6TUVNRlMuc3RyZWFtX29wcy5sbHNlZWsscmVhZDpNRU1GUy5zdHJlYW1fb3BzLnJlYWQsd3JpdGU6TUVNRlMuc3RyZWFtX29wcy53cml0ZSxhbGxvY2F0ZTpNRU1GUy5zdHJlYW1fb3BzLmFsbG9jYXRlLG1tYXA6TUVNRlMuc3RyZWFtX29wcy5tbWFwLG1zeW5jOk1FTUZTLnN0cmVhbV9vcHMubXN5bmN9fSxsaW5rOntub2RlOntnZXRhdHRyOk1FTUZTLm5vZGVfb3BzLmdldGF0dHIsc2V0YXR0cjpNRU1GUy5ub2RlX29wcy5zZXRhdHRyLHJlYWRsaW5rOk1FTUZTLm5vZGVfb3BzLnJlYWRsaW5rfSxzdHJlYW06e319LGNocmRldjp7bm9kZTp7Z2V0YXR0cjpNRU1GUy5ub2RlX29wcy5nZXRhdHRyLHNldGF0dHI6TUVNRlMubm9kZV9vcHMuc2V0YXR0cn0sc3RyZWFtOkZTLmNocmRldl9zdHJlYW1fb3BzfX19dmFyIG5vZGU9RlMuY3JlYXRlTm9kZShwYXJlbnQsbmFtZSxtb2RlLGRldik7aWYoRlMuaXNEaXIobm9kZS5tb2RlKSl7bm9kZS5ub2RlX29wcz1NRU1GUy5vcHNfdGFibGUuZGlyLm5vZGU7bm9kZS5zdHJlYW1fb3BzPU1FTUZTLm9wc190YWJsZS5kaXIuc3RyZWFtO25vZGUuY29udGVudHM9e319ZWxzZSBpZihGUy5pc0ZpbGUobm9kZS5tb2RlKSl7bm9kZS5ub2RlX29wcz1NRU1GUy5vcHNfdGFibGUuZmlsZS5ub2RlO25vZGUuc3RyZWFtX29wcz1NRU1GUy5vcHNfdGFibGUuZmlsZS5zdHJlYW07bm9kZS51c2VkQnl0ZXM9MDtub2RlLmNvbnRlbnRzPW51bGx9ZWxzZSBpZihGUy5pc0xpbmsobm9kZS5tb2RlKSl7bm9kZS5ub2RlX29wcz1NRU1GUy5vcHNfdGFibGUubGluay5ub2RlO25vZGUuc3RyZWFtX29wcz1NRU1GUy5vcHNfdGFibGUubGluay5zdHJlYW19ZWxzZSBpZihGUy5pc0NocmRldihub2RlLm1vZGUpKXtub2RlLm5vZGVfb3BzPU1FTUZTLm9wc190YWJsZS5jaHJkZXYubm9kZTtub2RlLnN0cmVhbV9vcHM9TUVNRlMub3BzX3RhYmxlLmNocmRldi5zdHJlYW19bm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKTtpZihwYXJlbnQpe3BhcmVudC5jb250ZW50c1tuYW1lXT1ub2RlO3BhcmVudC50aW1lc3RhbXA9bm9kZS50aW1lc3RhbXB9cmV0dXJuIG5vZGV9LGdldEZpbGVEYXRhQXNUeXBlZEFycmF5OmZ1bmN0aW9uKG5vZGUpe2lmKCFub2RlLmNvbnRlbnRzKXJldHVybiBuZXcgVWludDhBcnJheSgwKTtpZihub2RlLmNvbnRlbnRzLnN1YmFycmF5KXJldHVybiBub2RlLmNvbnRlbnRzLnN1YmFycmF5KDAsbm9kZS51c2VkQnl0ZXMpO3JldHVybiBuZXcgVWludDhBcnJheShub2RlLmNvbnRlbnRzKX0sZXhwYW5kRmlsZVN0b3JhZ2U6ZnVuY3Rpb24obm9kZSxuZXdDYXBhY2l0eSl7dmFyIHByZXZDYXBhY2l0eT1ub2RlLmNvbnRlbnRzP25vZGUuY29udGVudHMubGVuZ3RoOjA7aWYocHJldkNhcGFjaXR5Pj1uZXdDYXBhY2l0eSlyZXR1cm47dmFyIENBUEFDSVRZX0RPVUJMSU5HX01BWD0xMDI0KjEwMjQ7bmV3Q2FwYWNpdHk9TWF0aC5tYXgobmV3Q2FwYWNpdHkscHJldkNhcGFjaXR5KihwcmV2Q2FwYWNpdHk8Q0FQQUNJVFlfRE9VQkxJTkdfTUFYPzI6MS4xMjUpPj4+MCk7aWYocHJldkNhcGFjaXR5IT0wKW5ld0NhcGFjaXR5PU1hdGgubWF4KG5ld0NhcGFjaXR5LDI1Nik7dmFyIG9sZENvbnRlbnRzPW5vZGUuY29udGVudHM7bm9kZS5jb250ZW50cz1uZXcgVWludDhBcnJheShuZXdDYXBhY2l0eSk7aWYobm9kZS51c2VkQnl0ZXM+MClub2RlLmNvbnRlbnRzLnNldChvbGRDb250ZW50cy5zdWJhcnJheSgwLG5vZGUudXNlZEJ5dGVzKSwwKX0scmVzaXplRmlsZVN0b3JhZ2U6ZnVuY3Rpb24obm9kZSxuZXdTaXplKXtpZihub2RlLnVzZWRCeXRlcz09bmV3U2l6ZSlyZXR1cm47aWYobmV3U2l6ZT09MCl7bm9kZS5jb250ZW50cz1udWxsO25vZGUudXNlZEJ5dGVzPTB9ZWxzZXt2YXIgb2xkQ29udGVudHM9bm9kZS5jb250ZW50cztub2RlLmNvbnRlbnRzPW5ldyBVaW50OEFycmF5KG5ld1NpemUpO2lmKG9sZENvbnRlbnRzKXtub2RlLmNvbnRlbnRzLnNldChvbGRDb250ZW50cy5zdWJhcnJheSgwLE1hdGgubWluKG5ld1NpemUsbm9kZS51c2VkQnl0ZXMpKSl9bm9kZS51c2VkQnl0ZXM9bmV3U2l6ZX19LG5vZGVfb3BzOntnZXRhdHRyOmZ1bmN0aW9uKG5vZGUpe3ZhciBhdHRyPXt9O2F0dHIuZGV2PUZTLmlzQ2hyZGV2KG5vZGUubW9kZSk/bm9kZS5pZDoxO2F0dHIuaW5vPW5vZGUuaWQ7YXR0ci5tb2RlPW5vZGUubW9kZTthdHRyLm5saW5rPTE7YXR0ci51aWQ9MDthdHRyLmdpZD0wO2F0dHIucmRldj1ub2RlLnJkZXY7aWYoRlMuaXNEaXIobm9kZS5tb2RlKSl7YXR0ci5zaXplPTQwOTZ9ZWxzZSBpZihGUy5pc0ZpbGUobm9kZS5tb2RlKSl7YXR0ci5zaXplPW5vZGUudXNlZEJ5dGVzfWVsc2UgaWYoRlMuaXNMaW5rKG5vZGUubW9kZSkpe2F0dHIuc2l6ZT1ub2RlLmxpbmsubGVuZ3RofWVsc2V7YXR0ci5zaXplPTB9YXR0ci5hdGltZT1uZXcgRGF0ZShub2RlLnRpbWVzdGFtcCk7YXR0ci5tdGltZT1uZXcgRGF0ZShub2RlLnRpbWVzdGFtcCk7YXR0ci5jdGltZT1uZXcgRGF0ZShub2RlLnRpbWVzdGFtcCk7YXR0ci5ibGtzaXplPTQwOTY7YXR0ci5ibG9ja3M9TWF0aC5jZWlsKGF0dHIuc2l6ZS9hdHRyLmJsa3NpemUpO3JldHVybiBhdHRyfSxzZXRhdHRyOmZ1bmN0aW9uKG5vZGUsYXR0cil7aWYoYXR0ci5tb2RlIT09dW5kZWZpbmVkKXtub2RlLm1vZGU9YXR0ci5tb2RlfWlmKGF0dHIudGltZXN0YW1wIT09dW5kZWZpbmVkKXtub2RlLnRpbWVzdGFtcD1hdHRyLnRpbWVzdGFtcH1pZihhdHRyLnNpemUhPT11bmRlZmluZWQpe01FTUZTLnJlc2l6ZUZpbGVTdG9yYWdlKG5vZGUsYXR0ci5zaXplKX19LGxvb2t1cDpmdW5jdGlvbihwYXJlbnQsbmFtZSl7dGhyb3cgRlMuZ2VuZXJpY0Vycm9yc1s0NF19LG1rbm9kOmZ1bmN0aW9uKHBhcmVudCxuYW1lLG1vZGUsZGV2KXtyZXR1cm4gTUVNRlMuY3JlYXRlTm9kZShwYXJlbnQsbmFtZSxtb2RlLGRldil9LHJlbmFtZTpmdW5jdGlvbihvbGRfbm9kZSxuZXdfZGlyLG5ld19uYW1lKXtpZihGUy5pc0RpcihvbGRfbm9kZS5tb2RlKSl7dmFyIG5ld19ub2RlO3RyeXtuZXdfbm9kZT1GUy5sb29rdXBOb2RlKG5ld19kaXIsbmV3X25hbWUpfWNhdGNoKGUpe31pZihuZXdfbm9kZSl7Zm9yKHZhciBpIGluIG5ld19ub2RlLmNvbnRlbnRzKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig1NSl9fX1kZWxldGUgb2xkX25vZGUucGFyZW50LmNvbnRlbnRzW29sZF9ub2RlLm5hbWVdO29sZF9ub2RlLnBhcmVudC50aW1lc3RhbXA9RGF0ZS5ub3coKTtvbGRfbm9kZS5uYW1lPW5ld19uYW1lO25ld19kaXIuY29udGVudHNbbmV3X25hbWVdPW9sZF9ub2RlO25ld19kaXIudGltZXN0YW1wPW9sZF9ub2RlLnBhcmVudC50aW1lc3RhbXA7b2xkX25vZGUucGFyZW50PW5ld19kaXJ9LHVubGluazpmdW5jdGlvbihwYXJlbnQsbmFtZSl7ZGVsZXRlIHBhcmVudC5jb250ZW50c1tuYW1lXTtwYXJlbnQudGltZXN0YW1wPURhdGUubm93KCl9LHJtZGlyOmZ1bmN0aW9uKHBhcmVudCxuYW1lKXt2YXIgbm9kZT1GUy5sb29rdXBOb2RlKHBhcmVudCxuYW1lKTtmb3IodmFyIGkgaW4gbm9kZS5jb250ZW50cyl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNTUpfWRlbGV0ZSBwYXJlbnQuY29udGVudHNbbmFtZV07cGFyZW50LnRpbWVzdGFtcD1EYXRlLm5vdygpfSxyZWFkZGlyOmZ1bmN0aW9uKG5vZGUpe3ZhciBlbnRyaWVzPVtcIi5cIixcIi4uXCJdO2Zvcih2YXIga2V5IGluIG5vZGUuY29udGVudHMpe2lmKCFub2RlLmNvbnRlbnRzLmhhc093blByb3BlcnR5KGtleSkpe2NvbnRpbnVlfWVudHJpZXMucHVzaChrZXkpfXJldHVybiBlbnRyaWVzfSxzeW1saW5rOmZ1bmN0aW9uKHBhcmVudCxuZXduYW1lLG9sZHBhdGgpe3ZhciBub2RlPU1FTUZTLmNyZWF0ZU5vZGUocGFyZW50LG5ld25hbWUsNTExfDQwOTYwLDApO25vZGUubGluaz1vbGRwYXRoO3JldHVybiBub2RlfSxyZWFkbGluazpmdW5jdGlvbihub2RlKXtpZighRlMuaXNMaW5rKG5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1yZXR1cm4gbm9kZS5saW5rfX0sc3RyZWFtX29wczp7cmVhZDpmdW5jdGlvbihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zaXRpb24pe3ZhciBjb250ZW50cz1zdHJlYW0ubm9kZS5jb250ZW50cztpZihwb3NpdGlvbj49c3RyZWFtLm5vZGUudXNlZEJ5dGVzKXJldHVybiAwO3ZhciBzaXplPU1hdGgubWluKHN0cmVhbS5ub2RlLnVzZWRCeXRlcy1wb3NpdGlvbixsZW5ndGgpO2lmKHNpemU+OCYmY29udGVudHMuc3ViYXJyYXkpe2J1ZmZlci5zZXQoY29udGVudHMuc3ViYXJyYXkocG9zaXRpb24scG9zaXRpb24rc2l6ZSksb2Zmc2V0KX1lbHNle2Zvcih2YXIgaT0wO2k8c2l6ZTtpKyspYnVmZmVyW29mZnNldCtpXT1jb250ZW50c1twb3NpdGlvbitpXX1yZXR1cm4gc2l6ZX0sd3JpdGU6ZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uLGNhbk93bil7aWYoYnVmZmVyLmJ1ZmZlcj09PUhFQVA4LmJ1ZmZlcil7Y2FuT3duPWZhbHNlfWlmKCFsZW5ndGgpcmV0dXJuIDA7dmFyIG5vZGU9c3RyZWFtLm5vZGU7bm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKTtpZihidWZmZXIuc3ViYXJyYXkmJighbm9kZS5jb250ZW50c3x8bm9kZS5jb250ZW50cy5zdWJhcnJheSkpe2lmKGNhbk93bil7bm9kZS5jb250ZW50cz1idWZmZXIuc3ViYXJyYXkob2Zmc2V0LG9mZnNldCtsZW5ndGgpO25vZGUudXNlZEJ5dGVzPWxlbmd0aDtyZXR1cm4gbGVuZ3RofWVsc2UgaWYobm9kZS51c2VkQnl0ZXM9PT0wJiZwb3NpdGlvbj09PTApe25vZGUuY29udGVudHM9YnVmZmVyLnNsaWNlKG9mZnNldCxvZmZzZXQrbGVuZ3RoKTtub2RlLnVzZWRCeXRlcz1sZW5ndGg7cmV0dXJuIGxlbmd0aH1lbHNlIGlmKHBvc2l0aW9uK2xlbmd0aDw9bm9kZS51c2VkQnl0ZXMpe25vZGUuY29udGVudHMuc2V0KGJ1ZmZlci5zdWJhcnJheShvZmZzZXQsb2Zmc2V0K2xlbmd0aCkscG9zaXRpb24pO3JldHVybiBsZW5ndGh9fU1FTUZTLmV4cGFuZEZpbGVTdG9yYWdlKG5vZGUscG9zaXRpb24rbGVuZ3RoKTtpZihub2RlLmNvbnRlbnRzLnN1YmFycmF5JiZidWZmZXIuc3ViYXJyYXkpe25vZGUuY29udGVudHMuc2V0KGJ1ZmZlci5zdWJhcnJheShvZmZzZXQsb2Zmc2V0K2xlbmd0aCkscG9zaXRpb24pfWVsc2V7Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXtub2RlLmNvbnRlbnRzW3Bvc2l0aW9uK2ldPWJ1ZmZlcltvZmZzZXQraV19fW5vZGUudXNlZEJ5dGVzPU1hdGgubWF4KG5vZGUudXNlZEJ5dGVzLHBvc2l0aW9uK2xlbmd0aCk7cmV0dXJuIGxlbmd0aH0sbGxzZWVrOmZ1bmN0aW9uKHN0cmVhbSxvZmZzZXQsd2hlbmNlKXt2YXIgcG9zaXRpb249b2Zmc2V0O2lmKHdoZW5jZT09PTEpe3Bvc2l0aW9uKz1zdHJlYW0ucG9zaXRpb259ZWxzZSBpZih3aGVuY2U9PT0yKXtpZihGUy5pc0ZpbGUoc3RyZWFtLm5vZGUubW9kZSkpe3Bvc2l0aW9uKz1zdHJlYW0ubm9kZS51c2VkQnl0ZXN9fWlmKHBvc2l0aW9uPDApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1yZXR1cm4gcG9zaXRpb259LGFsbG9jYXRlOmZ1bmN0aW9uKHN0cmVhbSxvZmZzZXQsbGVuZ3RoKXtNRU1GUy5leHBhbmRGaWxlU3RvcmFnZShzdHJlYW0ubm9kZSxvZmZzZXQrbGVuZ3RoKTtzdHJlYW0ubm9kZS51c2VkQnl0ZXM9TWF0aC5tYXgoc3RyZWFtLm5vZGUudXNlZEJ5dGVzLG9mZnNldCtsZW5ndGgpfSxtbWFwOmZ1bmN0aW9uKHN0cmVhbSxhZGRyZXNzLGxlbmd0aCxwb3NpdGlvbixwcm90LGZsYWdzKXtpZihhZGRyZXNzIT09MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjgpfWlmKCFGUy5pc0ZpbGUoc3RyZWFtLm5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQzKX12YXIgcHRyO3ZhciBhbGxvY2F0ZWQ7dmFyIGNvbnRlbnRzPXN0cmVhbS5ub2RlLmNvbnRlbnRzO2lmKCEoZmxhZ3MmMikmJmNvbnRlbnRzLmJ1ZmZlcj09PWJ1ZmZlcil7YWxsb2NhdGVkPWZhbHNlO3B0cj1jb250ZW50cy5ieXRlT2Zmc2V0fWVsc2V7aWYocG9zaXRpb24+MHx8cG9zaXRpb24rbGVuZ3RoPGNvbnRlbnRzLmxlbmd0aCl7aWYoY29udGVudHMuc3ViYXJyYXkpe2NvbnRlbnRzPWNvbnRlbnRzLnN1YmFycmF5KHBvc2l0aW9uLHBvc2l0aW9uK2xlbmd0aCl9ZWxzZXtjb250ZW50cz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChjb250ZW50cyxwb3NpdGlvbixwb3NpdGlvbitsZW5ndGgpfX1hbGxvY2F0ZWQ9dHJ1ZTtwdHI9bW1hcEFsbG9jKGxlbmd0aCk7aWYoIXB0cil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDgpfUhFQVA4LnNldChjb250ZW50cyxwdHIpfXJldHVybntwdHI6cHRyLGFsbG9jYXRlZDphbGxvY2F0ZWR9fSxtc3luYzpmdW5jdGlvbihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgsbW1hcEZsYWdzKXtpZighRlMuaXNGaWxlKHN0cmVhbS5ub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0Myl9aWYobW1hcEZsYWdzJjIpe3JldHVybiAwfXZhciBieXRlc1dyaXR0ZW49TUVNRlMuc3RyZWFtX29wcy53cml0ZShzdHJlYW0sYnVmZmVyLDAsbGVuZ3RoLG9mZnNldCxmYWxzZSk7cmV0dXJuIDB9fX07ZnVuY3Rpb24gYXN5bmNMb2FkKHVybCxvbmxvYWQsb25lcnJvcixub1J1bkRlcCl7dmFyIGRlcD0hbm9SdW5EZXA/Z2V0VW5pcXVlUnVuRGVwZW5kZW5jeShcImFsIFwiK3VybCk6XCJcIjtyZWFkQXN5bmModXJsLGZ1bmN0aW9uKGFycmF5QnVmZmVyKXthc3NlcnQoYXJyYXlCdWZmZXIsJ0xvYWRpbmcgZGF0YSBmaWxlIFwiJyt1cmwrJ1wiIGZhaWxlZCAobm8gYXJyYXlCdWZmZXIpLicpO29ubG9hZChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO2lmKGRlcClyZW1vdmVSdW5EZXBlbmRlbmN5KGRlcCl9LGZ1bmN0aW9uKGV2ZW50KXtpZihvbmVycm9yKXtvbmVycm9yKCl9ZWxzZXt0aHJvdydMb2FkaW5nIGRhdGEgZmlsZSBcIicrdXJsKydcIiBmYWlsZWQuJ319KTtpZihkZXApYWRkUnVuRGVwZW5kZW5jeShkZXApfXZhciBGUz17cm9vdDpudWxsLG1vdW50czpbXSxkZXZpY2VzOnt9LHN0cmVhbXM6W10sbmV4dElub2RlOjEsbmFtZVRhYmxlOm51bGwsY3VycmVudFBhdGg6XCIvXCIsaW5pdGlhbGl6ZWQ6ZmFsc2UsaWdub3JlUGVybWlzc2lvbnM6dHJ1ZSxFcnJub0Vycm9yOm51bGwsZ2VuZXJpY0Vycm9yczp7fSxmaWxlc3lzdGVtczpudWxsLHN5bmNGU1JlcXVlc3RzOjAsbG9va3VwUGF0aDoocGF0aCxvcHRzPXt9KT0+e3BhdGg9UEFUSF9GUy5yZXNvbHZlKEZTLmN3ZCgpLHBhdGgpO2lmKCFwYXRoKXJldHVybntwYXRoOlwiXCIsbm9kZTpudWxsfTt2YXIgZGVmYXVsdHM9e2ZvbGxvd19tb3VudDp0cnVlLHJlY3Vyc2VfY291bnQ6MH07b3B0cz1PYmplY3QuYXNzaWduKGRlZmF1bHRzLG9wdHMpO2lmKG9wdHMucmVjdXJzZV9jb3VudD44KXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigzMil9dmFyIHBhcnRzPVBBVEgubm9ybWFsaXplQXJyYXkocGF0aC5zcGxpdChcIi9cIikuZmlsdGVyKHA9PiEhcCksZmFsc2UpO3ZhciBjdXJyZW50PUZTLnJvb3Q7dmFyIGN1cnJlbnRfcGF0aD1cIi9cIjtmb3IodmFyIGk9MDtpPHBhcnRzLmxlbmd0aDtpKyspe3ZhciBpc2xhc3Q9aT09PXBhcnRzLmxlbmd0aC0xO2lmKGlzbGFzdCYmb3B0cy5wYXJlbnQpe2JyZWFrfWN1cnJlbnQ9RlMubG9va3VwTm9kZShjdXJyZW50LHBhcnRzW2ldKTtjdXJyZW50X3BhdGg9UEFUSC5qb2luMihjdXJyZW50X3BhdGgscGFydHNbaV0pO2lmKEZTLmlzTW91bnRwb2ludChjdXJyZW50KSl7aWYoIWlzbGFzdHx8aXNsYXN0JiZvcHRzLmZvbGxvd19tb3VudCl7Y3VycmVudD1jdXJyZW50Lm1vdW50ZWQucm9vdH19aWYoIWlzbGFzdHx8b3B0cy5mb2xsb3cpe3ZhciBjb3VudD0wO3doaWxlKEZTLmlzTGluayhjdXJyZW50Lm1vZGUpKXt2YXIgbGluaz1GUy5yZWFkbGluayhjdXJyZW50X3BhdGgpO2N1cnJlbnRfcGF0aD1QQVRIX0ZTLnJlc29sdmUoUEFUSC5kaXJuYW1lKGN1cnJlbnRfcGF0aCksbGluayk7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKGN1cnJlbnRfcGF0aCx7cmVjdXJzZV9jb3VudDpvcHRzLnJlY3Vyc2VfY291bnQrMX0pO2N1cnJlbnQ9bG9va3VwLm5vZGU7aWYoY291bnQrKz40MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMzIpfX19fXJldHVybntwYXRoOmN1cnJlbnRfcGF0aCxub2RlOmN1cnJlbnR9fSxnZXRQYXRoOm5vZGU9Pnt2YXIgcGF0aDt3aGlsZSh0cnVlKXtpZihGUy5pc1Jvb3Qobm9kZSkpe3ZhciBtb3VudD1ub2RlLm1vdW50Lm1vdW50cG9pbnQ7aWYoIXBhdGgpcmV0dXJuIG1vdW50O3JldHVybiBtb3VudFttb3VudC5sZW5ndGgtMV0hPT1cIi9cIj9tb3VudCtcIi9cIitwYXRoOm1vdW50K3BhdGh9cGF0aD1wYXRoP25vZGUubmFtZStcIi9cIitwYXRoOm5vZGUubmFtZTtub2RlPW5vZGUucGFyZW50fX0saGFzaE5hbWU6KHBhcmVudGlkLG5hbWUpPT57dmFyIGhhc2g9MDtmb3IodmFyIGk9MDtpPG5hbWUubGVuZ3RoO2krKyl7aGFzaD0oaGFzaDw8NSktaGFzaCtuYW1lLmNoYXJDb2RlQXQoaSl8MH1yZXR1cm4ocGFyZW50aWQraGFzaD4+PjApJUZTLm5hbWVUYWJsZS5sZW5ndGh9LGhhc2hBZGROb2RlOm5vZGU9Pnt2YXIgaGFzaD1GUy5oYXNoTmFtZShub2RlLnBhcmVudC5pZCxub2RlLm5hbWUpO25vZGUubmFtZV9uZXh0PUZTLm5hbWVUYWJsZVtoYXNoXTtGUy5uYW1lVGFibGVbaGFzaF09bm9kZX0saGFzaFJlbW92ZU5vZGU6bm9kZT0+e3ZhciBoYXNoPUZTLmhhc2hOYW1lKG5vZGUucGFyZW50LmlkLG5vZGUubmFtZSk7aWYoRlMubmFtZVRhYmxlW2hhc2hdPT09bm9kZSl7RlMubmFtZVRhYmxlW2hhc2hdPW5vZGUubmFtZV9uZXh0fWVsc2V7dmFyIGN1cnJlbnQ9RlMubmFtZVRhYmxlW2hhc2hdO3doaWxlKGN1cnJlbnQpe2lmKGN1cnJlbnQubmFtZV9uZXh0PT09bm9kZSl7Y3VycmVudC5uYW1lX25leHQ9bm9kZS5uYW1lX25leHQ7YnJlYWt9Y3VycmVudD1jdXJyZW50Lm5hbWVfbmV4dH19fSxsb29rdXBOb2RlOihwYXJlbnQsbmFtZSk9Pnt2YXIgZXJyQ29kZT1GUy5tYXlMb29rdXAocGFyZW50KTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlLHBhcmVudCl9dmFyIGhhc2g9RlMuaGFzaE5hbWUocGFyZW50LmlkLG5hbWUpO2Zvcih2YXIgbm9kZT1GUy5uYW1lVGFibGVbaGFzaF07bm9kZTtub2RlPW5vZGUubmFtZV9uZXh0KXt2YXIgbm9kZU5hbWU9bm9kZS5uYW1lO2lmKG5vZGUucGFyZW50LmlkPT09cGFyZW50LmlkJiZub2RlTmFtZT09PW5hbWUpe3JldHVybiBub2RlfX1yZXR1cm4gRlMubG9va3VwKHBhcmVudCxuYW1lKX0sY3JlYXRlTm9kZToocGFyZW50LG5hbWUsbW9kZSxyZGV2KT0+e3ZhciBub2RlPW5ldyBGUy5GU05vZGUocGFyZW50LG5hbWUsbW9kZSxyZGV2KTtGUy5oYXNoQWRkTm9kZShub2RlKTtyZXR1cm4gbm9kZX0sZGVzdHJveU5vZGU6bm9kZT0+e0ZTLmhhc2hSZW1vdmVOb2RlKG5vZGUpfSxpc1Jvb3Q6bm9kZT0+e3JldHVybiBub2RlPT09bm9kZS5wYXJlbnR9LGlzTW91bnRwb2ludDpub2RlPT57cmV0dXJuISFub2RlLm1vdW50ZWR9LGlzRmlsZTptb2RlPT57cmV0dXJuKG1vZGUmNjE0NDApPT09MzI3Njh9LGlzRGlyOm1vZGU9PntyZXR1cm4obW9kZSY2MTQ0MCk9PT0xNjM4NH0saXNMaW5rOm1vZGU9PntyZXR1cm4obW9kZSY2MTQ0MCk9PT00MDk2MH0saXNDaHJkZXY6bW9kZT0+e3JldHVybihtb2RlJjYxNDQwKT09PTgxOTJ9LGlzQmxrZGV2Om1vZGU9PntyZXR1cm4obW9kZSY2MTQ0MCk9PT0yNDU3Nn0saXNGSUZPOm1vZGU9PntyZXR1cm4obW9kZSY2MTQ0MCk9PT00MDk2fSxpc1NvY2tldDptb2RlPT57cmV0dXJuKG1vZGUmNDkxNTIpPT09NDkxNTJ9LGZsYWdNb2Rlczp7XCJyXCI6MCxcInIrXCI6MixcIndcIjo1NzcsXCJ3K1wiOjU3OCxcImFcIjoxMDg5LFwiYStcIjoxMDkwfSxtb2RlU3RyaW5nVG9GbGFnczpzdHI9Pnt2YXIgZmxhZ3M9RlMuZmxhZ01vZGVzW3N0cl07aWYodHlwZW9mIGZsYWdzPT1cInVuZGVmaW5lZFwiKXt0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGZpbGUgb3BlbiBtb2RlOiBcIitzdHIpfXJldHVybiBmbGFnc30sZmxhZ3NUb1Blcm1pc3Npb25TdHJpbmc6ZmxhZz0+e3ZhciBwZXJtcz1bXCJyXCIsXCJ3XCIsXCJyd1wiXVtmbGFnJjNdO2lmKGZsYWcmNTEyKXtwZXJtcys9XCJ3XCJ9cmV0dXJuIHBlcm1zfSxub2RlUGVybWlzc2lvbnM6KG5vZGUscGVybXMpPT57aWYoRlMuaWdub3JlUGVybWlzc2lvbnMpe3JldHVybiAwfWlmKHBlcm1zLmluY2x1ZGVzKFwiclwiKSYmIShub2RlLm1vZGUmMjkyKSl7cmV0dXJuIDJ9ZWxzZSBpZihwZXJtcy5pbmNsdWRlcyhcIndcIikmJiEobm9kZS5tb2RlJjE0Nikpe3JldHVybiAyfWVsc2UgaWYocGVybXMuaW5jbHVkZXMoXCJ4XCIpJiYhKG5vZGUubW9kZSY3Mykpe3JldHVybiAyfXJldHVybiAwfSxtYXlMb29rdXA6ZGlyPT57dmFyIGVyckNvZGU9RlMubm9kZVBlcm1pc3Npb25zKGRpcixcInhcIik7aWYoZXJyQ29kZSlyZXR1cm4gZXJyQ29kZTtpZighZGlyLm5vZGVfb3BzLmxvb2t1cClyZXR1cm4gMjtyZXR1cm4gMH0sbWF5Q3JlYXRlOihkaXIsbmFtZSk9Pnt0cnl7dmFyIG5vZGU9RlMubG9va3VwTm9kZShkaXIsbmFtZSk7cmV0dXJuIDIwfWNhdGNoKGUpe31yZXR1cm4gRlMubm9kZVBlcm1pc3Npb25zKGRpcixcInd4XCIpfSxtYXlEZWxldGU6KGRpcixuYW1lLGlzZGlyKT0+e3ZhciBub2RlO3RyeXtub2RlPUZTLmxvb2t1cE5vZGUoZGlyLG5hbWUpfWNhdGNoKGUpe3JldHVybiBlLmVycm5vfXZhciBlcnJDb2RlPUZTLm5vZGVQZXJtaXNzaW9ucyhkaXIsXCJ3eFwiKTtpZihlcnJDb2RlKXtyZXR1cm4gZXJyQ29kZX1pZihpc2Rpcil7aWYoIUZTLmlzRGlyKG5vZGUubW9kZSkpe3JldHVybiA1NH1pZihGUy5pc1Jvb3Qobm9kZSl8fEZTLmdldFBhdGgobm9kZSk9PT1GUy5jd2QoKSl7cmV0dXJuIDEwfX1lbHNle2lmKEZTLmlzRGlyKG5vZGUubW9kZSkpe3JldHVybiAzMX19cmV0dXJuIDB9LG1heU9wZW46KG5vZGUsZmxhZ3MpPT57aWYoIW5vZGUpe3JldHVybiA0NH1pZihGUy5pc0xpbmsobm9kZS5tb2RlKSl7cmV0dXJuIDMyfWVsc2UgaWYoRlMuaXNEaXIobm9kZS5tb2RlKSl7aWYoRlMuZmxhZ3NUb1Blcm1pc3Npb25TdHJpbmcoZmxhZ3MpIT09XCJyXCJ8fGZsYWdzJjUxMil7cmV0dXJuIDMxfX1yZXR1cm4gRlMubm9kZVBlcm1pc3Npb25zKG5vZGUsRlMuZmxhZ3NUb1Blcm1pc3Npb25TdHJpbmcoZmxhZ3MpKX0sTUFYX09QRU5fRkRTOjQwOTYsbmV4dGZkOihmZF9zdGFydD0wLGZkX2VuZD1GUy5NQVhfT1BFTl9GRFMpPT57Zm9yKHZhciBmZD1mZF9zdGFydDtmZDw9ZmRfZW5kO2ZkKyspe2lmKCFGUy5zdHJlYW1zW2ZkXSl7cmV0dXJuIGZkfX10aHJvdyBuZXcgRlMuRXJybm9FcnJvcigzMyl9LGdldFN0cmVhbTpmZD0+RlMuc3RyZWFtc1tmZF0sY3JlYXRlU3RyZWFtOihzdHJlYW0sZmRfc3RhcnQsZmRfZW5kKT0+e2lmKCFGUy5GU1N0cmVhbSl7RlMuRlNTdHJlYW09ZnVuY3Rpb24oKXt0aGlzLnNoYXJlZD17fX07RlMuRlNTdHJlYW0ucHJvdG90eXBlPXtvYmplY3Q6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGV9LHNldDpmdW5jdGlvbih2YWwpe3RoaXMubm9kZT12YWx9fSxpc1JlYWQ6e2dldDpmdW5jdGlvbigpe3JldHVybih0aGlzLmZsYWdzJjIwOTcxNTUpIT09MX19LGlzV3JpdGU6e2dldDpmdW5jdGlvbigpe3JldHVybih0aGlzLmZsYWdzJjIwOTcxNTUpIT09MH19LGlzQXBwZW5kOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5mbGFncyYxMDI0fX0sZmxhZ3M6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNoYXJlZC5mbGFnc30sc2V0OmZ1bmN0aW9uKHZhbCl7dGhpcy5zaGFyZWQuZmxhZ3M9dmFsfX0scG9zaXRpb246e2dldCBmdW5jdGlvbigpe3JldHVybiB0aGlzLnNoYXJlZC5wb3NpdGlvbn0sc2V0OmZ1bmN0aW9uKHZhbCl7dGhpcy5zaGFyZWQucG9zaXRpb249dmFsfX19fXN0cmVhbT1PYmplY3QuYXNzaWduKG5ldyBGUy5GU1N0cmVhbSxzdHJlYW0pO3ZhciBmZD1GUy5uZXh0ZmQoZmRfc3RhcnQsZmRfZW5kKTtzdHJlYW0uZmQ9ZmQ7RlMuc3RyZWFtc1tmZF09c3RyZWFtO3JldHVybiBzdHJlYW19LGNsb3NlU3RyZWFtOmZkPT57RlMuc3RyZWFtc1tmZF09bnVsbH0sY2hyZGV2X3N0cmVhbV9vcHM6e29wZW46c3RyZWFtPT57dmFyIGRldmljZT1GUy5nZXREZXZpY2Uoc3RyZWFtLm5vZGUucmRldik7c3RyZWFtLnN0cmVhbV9vcHM9ZGV2aWNlLnN0cmVhbV9vcHM7aWYoc3RyZWFtLnN0cmVhbV9vcHMub3Blbil7c3RyZWFtLnN0cmVhbV9vcHMub3BlbihzdHJlYW0pfX0sbGxzZWVrOigpPT57dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNzApfX0sbWFqb3I6ZGV2PT5kZXY+PjgsbWlub3I6ZGV2PT5kZXYmMjU1LG1ha2VkZXY6KG1hLG1pKT0+bWE8PDh8bWkscmVnaXN0ZXJEZXZpY2U6KGRldixvcHMpPT57RlMuZGV2aWNlc1tkZXZdPXtzdHJlYW1fb3BzOm9wc319LGdldERldmljZTpkZXY9PkZTLmRldmljZXNbZGV2XSxnZXRNb3VudHM6bW91bnQ9Pnt2YXIgbW91bnRzPVtdO3ZhciBjaGVjaz1bbW91bnRdO3doaWxlKGNoZWNrLmxlbmd0aCl7dmFyIG09Y2hlY2sucG9wKCk7bW91bnRzLnB1c2gobSk7Y2hlY2sucHVzaC5hcHBseShjaGVjayxtLm1vdW50cyl9cmV0dXJuIG1vdW50c30sc3luY2ZzOihwb3B1bGF0ZSxjYWxsYmFjayk9PntpZih0eXBlb2YgcG9wdWxhdGU9PVwiZnVuY3Rpb25cIil7Y2FsbGJhY2s9cG9wdWxhdGU7cG9wdWxhdGU9ZmFsc2V9RlMuc3luY0ZTUmVxdWVzdHMrKztpZihGUy5zeW5jRlNSZXF1ZXN0cz4xKXtlcnIoXCJ3YXJuaW5nOiBcIitGUy5zeW5jRlNSZXF1ZXN0cytcIiBGUy5zeW5jZnMgb3BlcmF0aW9ucyBpbiBmbGlnaHQgYXQgb25jZSwgcHJvYmFibHkganVzdCBkb2luZyBleHRyYSB3b3JrXCIpfXZhciBtb3VudHM9RlMuZ2V0TW91bnRzKEZTLnJvb3QubW91bnQpO3ZhciBjb21wbGV0ZWQ9MDtmdW5jdGlvbiBkb0NhbGxiYWNrKGVyckNvZGUpe0ZTLnN5bmNGU1JlcXVlc3RzLS07cmV0dXJuIGNhbGxiYWNrKGVyckNvZGUpfWZ1bmN0aW9uIGRvbmUoZXJyQ29kZSl7aWYoZXJyQ29kZSl7aWYoIWRvbmUuZXJyb3JlZCl7ZG9uZS5lcnJvcmVkPXRydWU7cmV0dXJuIGRvQ2FsbGJhY2soZXJyQ29kZSl9cmV0dXJufWlmKCsrY29tcGxldGVkPj1tb3VudHMubGVuZ3RoKXtkb0NhbGxiYWNrKG51bGwpfX1tb3VudHMuZm9yRWFjaChtb3VudD0+e2lmKCFtb3VudC50eXBlLnN5bmNmcyl7cmV0dXJuIGRvbmUobnVsbCl9bW91bnQudHlwZS5zeW5jZnMobW91bnQscG9wdWxhdGUsZG9uZSl9KX0sbW91bnQ6KHR5cGUsb3B0cyxtb3VudHBvaW50KT0+e3ZhciByb290PW1vdW50cG9pbnQ9PT1cIi9cIjt2YXIgcHNldWRvPSFtb3VudHBvaW50O3ZhciBub2RlO2lmKHJvb3QmJkZTLnJvb3Qpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDEwKX1lbHNlIGlmKCFyb290JiYhcHNldWRvKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgobW91bnRwb2ludCx7Zm9sbG93X21vdW50OmZhbHNlfSk7bW91bnRwb2ludD1sb29rdXAucGF0aDtub2RlPWxvb2t1cC5ub2RlO2lmKEZTLmlzTW91bnRwb2ludChub2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMTApfWlmKCFGUy5pc0Rpcihub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig1NCl9fXZhciBtb3VudD17dHlwZTp0eXBlLG9wdHM6b3B0cyxtb3VudHBvaW50Om1vdW50cG9pbnQsbW91bnRzOltdfTt2YXIgbW91bnRSb290PXR5cGUubW91bnQobW91bnQpO21vdW50Um9vdC5tb3VudD1tb3VudDttb3VudC5yb290PW1vdW50Um9vdDtpZihyb290KXtGUy5yb290PW1vdW50Um9vdH1lbHNlIGlmKG5vZGUpe25vZGUubW91bnRlZD1tb3VudDtpZihub2RlLm1vdW50KXtub2RlLm1vdW50Lm1vdW50cy5wdXNoKG1vdW50KX19cmV0dXJuIG1vdW50Um9vdH0sdW5tb3VudDptb3VudHBvaW50PT57dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKG1vdW50cG9pbnQse2ZvbGxvd19tb3VudDpmYWxzZX0pO2lmKCFGUy5pc01vdW50cG9pbnQobG9va3VwLm5vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9dmFyIG5vZGU9bG9va3VwLm5vZGU7dmFyIG1vdW50PW5vZGUubW91bnRlZDt2YXIgbW91bnRzPUZTLmdldE1vdW50cyhtb3VudCk7T2JqZWN0LmtleXMoRlMubmFtZVRhYmxlKS5mb3JFYWNoKGhhc2g9Pnt2YXIgY3VycmVudD1GUy5uYW1lVGFibGVbaGFzaF07d2hpbGUoY3VycmVudCl7dmFyIG5leHQ9Y3VycmVudC5uYW1lX25leHQ7aWYobW91bnRzLmluY2x1ZGVzKGN1cnJlbnQubW91bnQpKXtGUy5kZXN0cm95Tm9kZShjdXJyZW50KX1jdXJyZW50PW5leHR9fSk7bm9kZS5tb3VudGVkPW51bGw7dmFyIGlkeD1ub2RlLm1vdW50Lm1vdW50cy5pbmRleE9mKG1vdW50KTtub2RlLm1vdW50Lm1vdW50cy5zcGxpY2UoaWR4LDEpfSxsb29rdXA6KHBhcmVudCxuYW1lKT0+e3JldHVybiBwYXJlbnQubm9kZV9vcHMubG9va3VwKHBhcmVudCxuYW1lKX0sbWtub2Q6KHBhdGgsbW9kZSxkZXYpPT57dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse3BhcmVudDp0cnVlfSk7dmFyIHBhcmVudD1sb29rdXAubm9kZTt2YXIgbmFtZT1QQVRILmJhc2VuYW1lKHBhdGgpO2lmKCFuYW1lfHxuYW1lPT09XCIuXCJ8fG5hbWU9PT1cIi4uXCIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX12YXIgZXJyQ29kZT1GUy5tYXlDcmVhdGUocGFyZW50LG5hbWUpO2lmKGVyckNvZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVyckNvZGUpfWlmKCFwYXJlbnQubm9kZV9vcHMubWtub2Qpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYzKX1yZXR1cm4gcGFyZW50Lm5vZGVfb3BzLm1rbm9kKHBhcmVudCxuYW1lLG1vZGUsZGV2KX0sY3JlYXRlOihwYXRoLG1vZGUpPT57bW9kZT1tb2RlIT09dW5kZWZpbmVkP21vZGU6NDM4O21vZGUmPTQwOTU7bW9kZXw9MzI3Njg7cmV0dXJuIEZTLm1rbm9kKHBhdGgsbW9kZSwwKX0sbWtkaXI6KHBhdGgsbW9kZSk9Pnttb2RlPW1vZGUhPT11bmRlZmluZWQ/bW9kZTo1MTE7bW9kZSY9NTExfDUxMjttb2RlfD0xNjM4NDtyZXR1cm4gRlMubWtub2QocGF0aCxtb2RlLDApfSxta2RpclRyZWU6KHBhdGgsbW9kZSk9Pnt2YXIgZGlycz1wYXRoLnNwbGl0KFwiL1wiKTt2YXIgZD1cIlwiO2Zvcih2YXIgaT0wO2k8ZGlycy5sZW5ndGg7KytpKXtpZighZGlyc1tpXSljb250aW51ZTtkKz1cIi9cIitkaXJzW2ldO3RyeXtGUy5ta2RpcihkLG1vZGUpfWNhdGNoKGUpe2lmKGUuZXJybm8hPTIwKXRocm93IGV9fX0sbWtkZXY6KHBhdGgsbW9kZSxkZXYpPT57aWYodHlwZW9mIGRldj09XCJ1bmRlZmluZWRcIil7ZGV2PW1vZGU7bW9kZT00Mzh9bW9kZXw9ODE5MjtyZXR1cm4gRlMubWtub2QocGF0aCxtb2RlLGRldil9LHN5bWxpbms6KG9sZHBhdGgsbmV3cGF0aCk9PntpZighUEFUSF9GUy5yZXNvbHZlKG9sZHBhdGgpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0NCl9dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKG5ld3BhdGgse3BhcmVudDp0cnVlfSk7dmFyIHBhcmVudD1sb29rdXAubm9kZTtpZighcGFyZW50KXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0NCl9dmFyIG5ld25hbWU9UEFUSC5iYXNlbmFtZShuZXdwYXRoKTt2YXIgZXJyQ29kZT1GUy5tYXlDcmVhdGUocGFyZW50LG5ld25hbWUpO2lmKGVyckNvZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVyckNvZGUpfWlmKCFwYXJlbnQubm9kZV9vcHMuc3ltbGluayl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjMpfXJldHVybiBwYXJlbnQubm9kZV9vcHMuc3ltbGluayhwYXJlbnQsbmV3bmFtZSxvbGRwYXRoKX0scmVuYW1lOihvbGRfcGF0aCxuZXdfcGF0aCk9Pnt2YXIgb2xkX2Rpcm5hbWU9UEFUSC5kaXJuYW1lKG9sZF9wYXRoKTt2YXIgbmV3X2Rpcm5hbWU9UEFUSC5kaXJuYW1lKG5ld19wYXRoKTt2YXIgb2xkX25hbWU9UEFUSC5iYXNlbmFtZShvbGRfcGF0aCk7dmFyIG5ld19uYW1lPVBBVEguYmFzZW5hbWUobmV3X3BhdGgpO3ZhciBsb29rdXAsb2xkX2RpcixuZXdfZGlyO2xvb2t1cD1GUy5sb29rdXBQYXRoKG9sZF9wYXRoLHtwYXJlbnQ6dHJ1ZX0pO29sZF9kaXI9bG9va3VwLm5vZGU7bG9va3VwPUZTLmxvb2t1cFBhdGgobmV3X3BhdGgse3BhcmVudDp0cnVlfSk7bmV3X2Rpcj1sb29rdXAubm9kZTtpZighb2xkX2Rpcnx8IW5ld19kaXIpdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDQpO2lmKG9sZF9kaXIubW91bnQhPT1uZXdfZGlyLm1vdW50KXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig3NSl9dmFyIG9sZF9ub2RlPUZTLmxvb2t1cE5vZGUob2xkX2RpcixvbGRfbmFtZSk7dmFyIHJlbGF0aXZlPVBBVEhfRlMucmVsYXRpdmUob2xkX3BhdGgsbmV3X2Rpcm5hbWUpO2lmKHJlbGF0aXZlLmNoYXJBdCgwKSE9PVwiLlwiKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9cmVsYXRpdmU9UEFUSF9GUy5yZWxhdGl2ZShuZXdfcGF0aCxvbGRfZGlybmFtZSk7aWYocmVsYXRpdmUuY2hhckF0KDApIT09XCIuXCIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDU1KX12YXIgbmV3X25vZGU7dHJ5e25ld19ub2RlPUZTLmxvb2t1cE5vZGUobmV3X2RpcixuZXdfbmFtZSl9Y2F0Y2goZSl7fWlmKG9sZF9ub2RlPT09bmV3X25vZGUpe3JldHVybn12YXIgaXNkaXI9RlMuaXNEaXIob2xkX25vZGUubW9kZSk7dmFyIGVyckNvZGU9RlMubWF5RGVsZXRlKG9sZF9kaXIsb2xkX25hbWUsaXNkaXIpO2lmKGVyckNvZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVyckNvZGUpfWVyckNvZGU9bmV3X25vZGU/RlMubWF5RGVsZXRlKG5ld19kaXIsbmV3X25hbWUsaXNkaXIpOkZTLm1heUNyZWF0ZShuZXdfZGlyLG5ld19uYW1lKTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlKX1pZighb2xkX2Rpci5ub2RlX29wcy5yZW5hbWUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYzKX1pZihGUy5pc01vdW50cG9pbnQob2xkX25vZGUpfHxuZXdfbm9kZSYmRlMuaXNNb3VudHBvaW50KG5ld19ub2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMTApfWlmKG5ld19kaXIhPT1vbGRfZGlyKXtlcnJDb2RlPUZTLm5vZGVQZXJtaXNzaW9ucyhvbGRfZGlyLFwid1wiKTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlKX19RlMuaGFzaFJlbW92ZU5vZGUob2xkX25vZGUpO3RyeXtvbGRfZGlyLm5vZGVfb3BzLnJlbmFtZShvbGRfbm9kZSxuZXdfZGlyLG5ld19uYW1lKX1jYXRjaChlKXt0aHJvdyBlfWZpbmFsbHl7RlMuaGFzaEFkZE5vZGUob2xkX25vZGUpfX0scm1kaXI6cGF0aD0+e3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtwYXJlbnQ6dHJ1ZX0pO3ZhciBwYXJlbnQ9bG9va3VwLm5vZGU7dmFyIG5hbWU9UEFUSC5iYXNlbmFtZShwYXRoKTt2YXIgbm9kZT1GUy5sb29rdXBOb2RlKHBhcmVudCxuYW1lKTt2YXIgZXJyQ29kZT1GUy5tYXlEZWxldGUocGFyZW50LG5hbWUsdHJ1ZSk7aWYoZXJyQ29kZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyQ29kZSl9aWYoIXBhcmVudC5ub2RlX29wcy5ybWRpcil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjMpfWlmKEZTLmlzTW91bnRwb2ludChub2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMTApfXBhcmVudC5ub2RlX29wcy5ybWRpcihwYXJlbnQsbmFtZSk7RlMuZGVzdHJveU5vZGUobm9kZSl9LHJlYWRkaXI6cGF0aD0+e3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtmb2xsb3c6dHJ1ZX0pO3ZhciBub2RlPWxvb2t1cC5ub2RlO2lmKCFub2RlLm5vZGVfb3BzLnJlYWRkaXIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDU0KX1yZXR1cm4gbm9kZS5ub2RlX29wcy5yZWFkZGlyKG5vZGUpfSx1bmxpbms6cGF0aD0+e3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtwYXJlbnQ6dHJ1ZX0pO3ZhciBwYXJlbnQ9bG9va3VwLm5vZGU7aWYoIXBhcmVudCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDQpfXZhciBuYW1lPVBBVEguYmFzZW5hbWUocGF0aCk7dmFyIG5vZGU9RlMubG9va3VwTm9kZShwYXJlbnQsbmFtZSk7dmFyIGVyckNvZGU9RlMubWF5RGVsZXRlKHBhcmVudCxuYW1lLGZhbHNlKTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlKX1pZighcGFyZW50Lm5vZGVfb3BzLnVubGluayl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjMpfWlmKEZTLmlzTW91bnRwb2ludChub2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMTApfXBhcmVudC5ub2RlX29wcy51bmxpbmsocGFyZW50LG5hbWUpO0ZTLmRlc3Ryb3lOb2RlKG5vZGUpfSxyZWFkbGluazpwYXRoPT57dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgpO3ZhciBsaW5rPWxvb2t1cC5ub2RlO2lmKCFsaW5rKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0NCl9aWYoIWxpbmsubm9kZV9vcHMucmVhZGxpbmspe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1yZXR1cm4gUEFUSF9GUy5yZXNvbHZlKEZTLmdldFBhdGgobGluay5wYXJlbnQpLGxpbmsubm9kZV9vcHMucmVhZGxpbmsobGluaykpfSxzdGF0OihwYXRoLGRvbnRGb2xsb3cpPT57dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzohZG9udEZvbGxvd30pO3ZhciBub2RlPWxvb2t1cC5ub2RlO2lmKCFub2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0NCl9aWYoIW5vZGUubm9kZV9vcHMuZ2V0YXR0cil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjMpfXJldHVybiBub2RlLm5vZGVfb3BzLmdldGF0dHIobm9kZSl9LGxzdGF0OnBhdGg9PntyZXR1cm4gRlMuc3RhdChwYXRoLHRydWUpfSxjaG1vZDoocGF0aCxtb2RlLGRvbnRGb2xsb3cpPT57dmFyIG5vZGU7aWYodHlwZW9mIHBhdGg9PVwic3RyaW5nXCIpe3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtmb2xsb3c6IWRvbnRGb2xsb3d9KTtub2RlPWxvb2t1cC5ub2RlfWVsc2V7bm9kZT1wYXRofWlmKCFub2RlLm5vZGVfb3BzLnNldGF0dHIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYzKX1ub2RlLm5vZGVfb3BzLnNldGF0dHIobm9kZSx7bW9kZTptb2RlJjQwOTV8bm9kZS5tb2RlJn40MDk1LHRpbWVzdGFtcDpEYXRlLm5vdygpfSl9LGxjaG1vZDoocGF0aCxtb2RlKT0+e0ZTLmNobW9kKHBhdGgsbW9kZSx0cnVlKX0sZmNobW9kOihmZCxtb2RlKT0+e3ZhciBzdHJlYW09RlMuZ2V0U3RyZWFtKGZkKTtpZighc3RyZWFtKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KX1GUy5jaG1vZChzdHJlYW0ubm9kZSxtb2RlKX0sY2hvd246KHBhdGgsdWlkLGdpZCxkb250Rm9sbG93KT0+e3ZhciBub2RlO2lmKHR5cGVvZiBwYXRoPT1cInN0cmluZ1wiKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OiFkb250Rm9sbG93fSk7bm9kZT1sb29rdXAubm9kZX1lbHNle25vZGU9cGF0aH1pZighbm9kZS5ub2RlX29wcy5zZXRhdHRyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig2Myl9bm9kZS5ub2RlX29wcy5zZXRhdHRyKG5vZGUse3RpbWVzdGFtcDpEYXRlLm5vdygpfSl9LGxjaG93bjoocGF0aCx1aWQsZ2lkKT0+e0ZTLmNob3duKHBhdGgsdWlkLGdpZCx0cnVlKX0sZmNob3duOihmZCx1aWQsZ2lkKT0+e3ZhciBzdHJlYW09RlMuZ2V0U3RyZWFtKGZkKTtpZighc3RyZWFtKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KX1GUy5jaG93bihzdHJlYW0ubm9kZSx1aWQsZ2lkKX0sdHJ1bmNhdGU6KHBhdGgsbGVuKT0+e2lmKGxlbjwwKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9dmFyIG5vZGU7aWYodHlwZW9mIHBhdGg9PVwic3RyaW5nXCIpe3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtmb2xsb3c6dHJ1ZX0pO25vZGU9bG9va3VwLm5vZGV9ZWxzZXtub2RlPXBhdGh9aWYoIW5vZGUubm9kZV9vcHMuc2V0YXR0cil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjMpfWlmKEZTLmlzRGlyKG5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDMxKX1pZighRlMuaXNGaWxlKG5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX12YXIgZXJyQ29kZT1GUy5ub2RlUGVybWlzc2lvbnMobm9kZSxcIndcIik7aWYoZXJyQ29kZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyQ29kZSl9bm9kZS5ub2RlX29wcy5zZXRhdHRyKG5vZGUse3NpemU6bGVuLHRpbWVzdGFtcDpEYXRlLm5vdygpfSl9LGZ0cnVuY2F0ZTooZmQsbGVuKT0+e3ZhciBzdHJlYW09RlMuZ2V0U3RyZWFtKGZkKTtpZighc3RyZWFtKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KX1pZigoc3RyZWFtLmZsYWdzJjIwOTcxNTUpPT09MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjgpfUZTLnRydW5jYXRlKHN0cmVhbS5ub2RlLGxlbil9LHV0aW1lOihwYXRoLGF0aW1lLG10aW1lKT0+e3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtmb2xsb3c6dHJ1ZX0pO3ZhciBub2RlPWxvb2t1cC5ub2RlO25vZGUubm9kZV9vcHMuc2V0YXR0cihub2RlLHt0aW1lc3RhbXA6TWF0aC5tYXgoYXRpbWUsbXRpbWUpfSl9LG9wZW46KHBhdGgsZmxhZ3MsbW9kZSxmZF9zdGFydCxmZF9lbmQpPT57aWYocGF0aD09PVwiXCIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQ0KX1mbGFncz10eXBlb2YgZmxhZ3M9PVwic3RyaW5nXCI/RlMubW9kZVN0cmluZ1RvRmxhZ3MoZmxhZ3MpOmZsYWdzO21vZGU9dHlwZW9mIG1vZGU9PVwidW5kZWZpbmVkXCI/NDM4Om1vZGU7aWYoZmxhZ3MmNjQpe21vZGU9bW9kZSY0MDk1fDMyNzY4fWVsc2V7bW9kZT0wfXZhciBub2RlO2lmKHR5cGVvZiBwYXRoPT1cIm9iamVjdFwiKXtub2RlPXBhdGh9ZWxzZXtwYXRoPVBBVEgubm9ybWFsaXplKHBhdGgpO3RyeXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OiEoZmxhZ3MmMTMxMDcyKX0pO25vZGU9bG9va3VwLm5vZGV9Y2F0Y2goZSl7fX12YXIgY3JlYXRlZD1mYWxzZTtpZihmbGFncyY2NCl7aWYobm9kZSl7aWYoZmxhZ3MmMTI4KXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyMCl9fWVsc2V7bm9kZT1GUy5ta25vZChwYXRoLG1vZGUsMCk7Y3JlYXRlZD10cnVlfX1pZighbm9kZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDQpfWlmKEZTLmlzQ2hyZGV2KG5vZGUubW9kZSkpe2ZsYWdzJj1+NTEyfWlmKGZsYWdzJjY1NTM2JiYhRlMuaXNEaXIobm9kZS5tb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNTQpfWlmKCFjcmVhdGVkKXt2YXIgZXJyQ29kZT1GUy5tYXlPcGVuKG5vZGUsZmxhZ3MpO2lmKGVyckNvZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVyckNvZGUpfX1pZihmbGFncyY1MTIpe0ZTLnRydW5jYXRlKG5vZGUsMCl9ZmxhZ3MmPX4oMTI4fDUxMnwxMzEwNzIpO3ZhciBzdHJlYW09RlMuY3JlYXRlU3RyZWFtKHtub2RlOm5vZGUscGF0aDpGUy5nZXRQYXRoKG5vZGUpLGZsYWdzOmZsYWdzLHNlZWthYmxlOnRydWUscG9zaXRpb246MCxzdHJlYW1fb3BzOm5vZGUuc3RyZWFtX29wcyx1bmdvdHRlbjpbXSxlcnJvcjpmYWxzZX0sZmRfc3RhcnQsZmRfZW5kKTtpZihzdHJlYW0uc3RyZWFtX29wcy5vcGVuKXtzdHJlYW0uc3RyZWFtX29wcy5vcGVuKHN0cmVhbSl9aWYoTW9kdWxlW1wibG9nUmVhZEZpbGVzXCJdJiYhKGZsYWdzJjEpKXtpZighRlMucmVhZEZpbGVzKUZTLnJlYWRGaWxlcz17fTtpZighKHBhdGggaW4gRlMucmVhZEZpbGVzKSl7RlMucmVhZEZpbGVzW3BhdGhdPTF9fXJldHVybiBzdHJlYW19LGNsb3NlOnN0cmVhbT0+e2lmKEZTLmlzQ2xvc2VkKHN0cmVhbSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpfWlmKHN0cmVhbS5nZXRkZW50cylzdHJlYW0uZ2V0ZGVudHM9bnVsbDt0cnl7aWYoc3RyZWFtLnN0cmVhbV9vcHMuY2xvc2Upe3N0cmVhbS5zdHJlYW1fb3BzLmNsb3NlKHN0cmVhbSl9fWNhdGNoKGUpe3Rocm93IGV9ZmluYWxseXtGUy5jbG9zZVN0cmVhbShzdHJlYW0uZmQpfXN0cmVhbS5mZD1udWxsfSxpc0Nsb3NlZDpzdHJlYW09PntyZXR1cm4gc3RyZWFtLmZkPT09bnVsbH0sbGxzZWVrOihzdHJlYW0sb2Zmc2V0LHdoZW5jZSk9PntpZihGUy5pc0Nsb3NlZChzdHJlYW0pKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KX1pZighc3RyZWFtLnNlZWthYmxlfHwhc3RyZWFtLnN0cmVhbV9vcHMubGxzZWVrKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig3MCl9aWYod2hlbmNlIT0wJiZ3aGVuY2UhPTEmJndoZW5jZSE9Mil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjgpfXN0cmVhbS5wb3NpdGlvbj1zdHJlYW0uc3RyZWFtX29wcy5sbHNlZWsoc3RyZWFtLG9mZnNldCx3aGVuY2UpO3N0cmVhbS51bmdvdHRlbj1bXTtyZXR1cm4gc3RyZWFtLnBvc2l0aW9ufSxyZWFkOihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zaXRpb24pPT57aWYobGVuZ3RoPDB8fHBvc2l0aW9uPDApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1pZihGUy5pc0Nsb3NlZChzdHJlYW0pKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KX1pZigoc3RyZWFtLmZsYWdzJjIwOTcxNTUpPT09MSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCl9aWYoRlMuaXNEaXIoc3RyZWFtLm5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDMxKX1pZighc3RyZWFtLnN0cmVhbV9vcHMucmVhZCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjgpfXZhciBzZWVraW5nPXR5cGVvZiBwb3NpdGlvbiE9XCJ1bmRlZmluZWRcIjtpZighc2Vla2luZyl7cG9zaXRpb249c3RyZWFtLnBvc2l0aW9ufWVsc2UgaWYoIXN0cmVhbS5zZWVrYWJsZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNzApfXZhciBieXRlc1JlYWQ9c3RyZWFtLnN0cmVhbV9vcHMucmVhZChzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zaXRpb24pO2lmKCFzZWVraW5nKXN0cmVhbS5wb3NpdGlvbis9Ynl0ZXNSZWFkO3JldHVybiBieXRlc1JlYWR9LHdyaXRlOihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zaXRpb24sY2FuT3duKT0+e2lmKGxlbmd0aDwwfHxwb3NpdGlvbjwwKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9aWYoRlMuaXNDbG9zZWQoc3RyZWFtKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCl9aWYoKHN0cmVhbS5mbGFncyYyMDk3MTU1KT09PTApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpfWlmKEZTLmlzRGlyKHN0cmVhbS5ub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigzMSl9aWYoIXN0cmVhbS5zdHJlYW1fb3BzLndyaXRlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9aWYoc3RyZWFtLnNlZWthYmxlJiZzdHJlYW0uZmxhZ3MmMTAyNCl7RlMubGxzZWVrKHN0cmVhbSwwLDIpfXZhciBzZWVraW5nPXR5cGVvZiBwb3NpdGlvbiE9XCJ1bmRlZmluZWRcIjtpZighc2Vla2luZyl7cG9zaXRpb249c3RyZWFtLnBvc2l0aW9ufWVsc2UgaWYoIXN0cmVhbS5zZWVrYWJsZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNzApfXZhciBieXRlc1dyaXR0ZW49c3RyZWFtLnN0cmVhbV9vcHMud3JpdGUoc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uLGNhbk93bik7aWYoIXNlZWtpbmcpc3RyZWFtLnBvc2l0aW9uKz1ieXRlc1dyaXR0ZW47cmV0dXJuIGJ5dGVzV3JpdHRlbn0sYWxsb2NhdGU6KHN0cmVhbSxvZmZzZXQsbGVuZ3RoKT0+e2lmKEZTLmlzQ2xvc2VkKHN0cmVhbSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpfWlmKG9mZnNldDwwfHxsZW5ndGg8PTApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1pZigoc3RyZWFtLmZsYWdzJjIwOTcxNTUpPT09MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCl9aWYoIUZTLmlzRmlsZShzdHJlYW0ubm9kZS5tb2RlKSYmIUZTLmlzRGlyKHN0cmVhbS5ub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0Myl9aWYoIXN0cmVhbS5zdHJlYW1fb3BzLmFsbG9jYXRlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigxMzgpfXN0cmVhbS5zdHJlYW1fb3BzLmFsbG9jYXRlKHN0cmVhbSxvZmZzZXQsbGVuZ3RoKX0sbW1hcDooc3RyZWFtLGFkZHJlc3MsbGVuZ3RoLHBvc2l0aW9uLHByb3QsZmxhZ3MpPT57aWYoKHByb3QmMikhPT0wJiYoZmxhZ3MmMik9PT0wJiYoc3RyZWFtLmZsYWdzJjIwOTcxNTUpIT09Mil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMil9aWYoKHN0cmVhbS5mbGFncyYyMDk3MTU1KT09PTEpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDIpfWlmKCFzdHJlYW0uc3RyZWFtX29wcy5tbWFwKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0Myl9cmV0dXJuIHN0cmVhbS5zdHJlYW1fb3BzLm1tYXAoc3RyZWFtLGFkZHJlc3MsbGVuZ3RoLHBvc2l0aW9uLHByb3QsZmxhZ3MpfSxtc3luYzooc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLG1tYXBGbGFncyk9PntpZighc3RyZWFtfHwhc3RyZWFtLnN0cmVhbV9vcHMubXN5bmMpe3JldHVybiAwfXJldHVybiBzdHJlYW0uc3RyZWFtX29wcy5tc3luYyhzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgsbW1hcEZsYWdzKX0sbXVubWFwOnN0cmVhbT0+MCxpb2N0bDooc3RyZWFtLGNtZCxhcmcpPT57aWYoIXN0cmVhbS5zdHJlYW1fb3BzLmlvY3RsKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig1OSl9cmV0dXJuIHN0cmVhbS5zdHJlYW1fb3BzLmlvY3RsKHN0cmVhbSxjbWQsYXJnKX0scmVhZEZpbGU6KHBhdGgsb3B0cz17fSk9PntvcHRzLmZsYWdzPW9wdHMuZmxhZ3N8fDA7b3B0cy5lbmNvZGluZz1vcHRzLmVuY29kaW5nfHxcImJpbmFyeVwiO2lmKG9wdHMuZW5jb2RpbmchPT1cInV0ZjhcIiYmb3B0cy5lbmNvZGluZyE9PVwiYmluYXJ5XCIpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCBlbmNvZGluZyB0eXBlIFwiJytvcHRzLmVuY29kaW5nKydcIicpfXZhciByZXQ7dmFyIHN0cmVhbT1GUy5vcGVuKHBhdGgsb3B0cy5mbGFncyk7dmFyIHN0YXQ9RlMuc3RhdChwYXRoKTt2YXIgbGVuZ3RoPXN0YXQuc2l6ZTt2YXIgYnVmPW5ldyBVaW50OEFycmF5KGxlbmd0aCk7RlMucmVhZChzdHJlYW0sYnVmLDAsbGVuZ3RoLDApO2lmKG9wdHMuZW5jb2Rpbmc9PT1cInV0ZjhcIil7cmV0PVVURjhBcnJheVRvU3RyaW5nKGJ1ZiwwKX1lbHNlIGlmKG9wdHMuZW5jb2Rpbmc9PT1cImJpbmFyeVwiKXtyZXQ9YnVmfUZTLmNsb3NlKHN0cmVhbSk7cmV0dXJuIHJldH0sd3JpdGVGaWxlOihwYXRoLGRhdGEsb3B0cz17fSk9PntvcHRzLmZsYWdzPW9wdHMuZmxhZ3N8fDU3Nzt2YXIgc3RyZWFtPUZTLm9wZW4ocGF0aCxvcHRzLmZsYWdzLG9wdHMubW9kZSk7aWYodHlwZW9mIGRhdGE9PVwic3RyaW5nXCIpe3ZhciBidWY9bmV3IFVpbnQ4QXJyYXkobGVuZ3RoQnl0ZXNVVEY4KGRhdGEpKzEpO3ZhciBhY3R1YWxOdW1CeXRlcz1zdHJpbmdUb1VURjhBcnJheShkYXRhLGJ1ZiwwLGJ1Zi5sZW5ndGgpO0ZTLndyaXRlKHN0cmVhbSxidWYsMCxhY3R1YWxOdW1CeXRlcyx1bmRlZmluZWQsb3B0cy5jYW5Pd24pfWVsc2UgaWYoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKXtGUy53cml0ZShzdHJlYW0sZGF0YSwwLGRhdGEuYnl0ZUxlbmd0aCx1bmRlZmluZWQsb3B0cy5jYW5Pd24pfWVsc2V7dGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZGF0YSB0eXBlXCIpfUZTLmNsb3NlKHN0cmVhbSl9LGN3ZDooKT0+RlMuY3VycmVudFBhdGgsY2hkaXI6cGF0aD0+e3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtmb2xsb3c6dHJ1ZX0pO2lmKGxvb2t1cC5ub2RlPT09bnVsbCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDQpfWlmKCFGUy5pc0Rpcihsb29rdXAubm9kZS5tb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNTQpfXZhciBlcnJDb2RlPUZTLm5vZGVQZXJtaXNzaW9ucyhsb29rdXAubm9kZSxcInhcIik7aWYoZXJyQ29kZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyQ29kZSl9RlMuY3VycmVudFBhdGg9bG9va3VwLnBhdGh9LGNyZWF0ZURlZmF1bHREaXJlY3RvcmllczooKT0+e0ZTLm1rZGlyKFwiL3RtcFwiKTtGUy5ta2RpcihcIi9ob21lXCIpO0ZTLm1rZGlyKFwiL2hvbWUvd2ViX3VzZXJcIil9LGNyZWF0ZURlZmF1bHREZXZpY2VzOigpPT57RlMubWtkaXIoXCIvZGV2XCIpO0ZTLnJlZ2lzdGVyRGV2aWNlKEZTLm1ha2VkZXYoMSwzKSx7cmVhZDooKT0+MCx3cml0ZTooc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvcyk9Pmxlbmd0aH0pO0ZTLm1rZGV2KFwiL2Rldi9udWxsXCIsRlMubWFrZWRldigxLDMpKTtUVFkucmVnaXN0ZXIoRlMubWFrZWRldig1LDApLFRUWS5kZWZhdWx0X3R0eV9vcHMpO1RUWS5yZWdpc3RlcihGUy5tYWtlZGV2KDYsMCksVFRZLmRlZmF1bHRfdHR5MV9vcHMpO0ZTLm1rZGV2KFwiL2Rldi90dHlcIixGUy5tYWtlZGV2KDUsMCkpO0ZTLm1rZGV2KFwiL2Rldi90dHkxXCIsRlMubWFrZWRldig2LDApKTt2YXIgcmFuZG9tX2RldmljZT1nZXRSYW5kb21EZXZpY2UoKTtGUy5jcmVhdGVEZXZpY2UoXCIvZGV2XCIsXCJyYW5kb21cIixyYW5kb21fZGV2aWNlKTtGUy5jcmVhdGVEZXZpY2UoXCIvZGV2XCIsXCJ1cmFuZG9tXCIscmFuZG9tX2RldmljZSk7RlMubWtkaXIoXCIvZGV2L3NobVwiKTtGUy5ta2RpcihcIi9kZXYvc2htL3RtcFwiKX0sY3JlYXRlU3BlY2lhbERpcmVjdG9yaWVzOigpPT57RlMubWtkaXIoXCIvcHJvY1wiKTt2YXIgcHJvY19zZWxmPUZTLm1rZGlyKFwiL3Byb2Mvc2VsZlwiKTtGUy5ta2RpcihcIi9wcm9jL3NlbGYvZmRcIik7RlMubW91bnQoe21vdW50OigpPT57dmFyIG5vZGU9RlMuY3JlYXRlTm9kZShwcm9jX3NlbGYsXCJmZFwiLDE2Mzg0fDUxMSw3Myk7bm9kZS5ub2RlX29wcz17bG9va3VwOihwYXJlbnQsbmFtZSk9Pnt2YXIgZmQ9K25hbWU7dmFyIHN0cmVhbT1GUy5nZXRTdHJlYW0oZmQpO2lmKCFzdHJlYW0pdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCk7dmFyIHJldD17cGFyZW50Om51bGwsbW91bnQ6e21vdW50cG9pbnQ6XCJmYWtlXCJ9LG5vZGVfb3BzOntyZWFkbGluazooKT0+c3RyZWFtLnBhdGh9fTtyZXQucGFyZW50PXJldDtyZXR1cm4gcmV0fX07cmV0dXJuIG5vZGV9fSx7fSxcIi9wcm9jL3NlbGYvZmRcIil9LGNyZWF0ZVN0YW5kYXJkU3RyZWFtczooKT0+e2lmKE1vZHVsZVtcInN0ZGluXCJdKXtGUy5jcmVhdGVEZXZpY2UoXCIvZGV2XCIsXCJzdGRpblwiLE1vZHVsZVtcInN0ZGluXCJdKX1lbHNle0ZTLnN5bWxpbmsoXCIvZGV2L3R0eVwiLFwiL2Rldi9zdGRpblwiKX1pZihNb2R1bGVbXCJzdGRvdXRcIl0pe0ZTLmNyZWF0ZURldmljZShcIi9kZXZcIixcInN0ZG91dFwiLG51bGwsTW9kdWxlW1wic3Rkb3V0XCJdKX1lbHNle0ZTLnN5bWxpbmsoXCIvZGV2L3R0eVwiLFwiL2Rldi9zdGRvdXRcIil9aWYoTW9kdWxlW1wic3RkZXJyXCJdKXtGUy5jcmVhdGVEZXZpY2UoXCIvZGV2XCIsXCJzdGRlcnJcIixudWxsLE1vZHVsZVtcInN0ZGVyclwiXSl9ZWxzZXtGUy5zeW1saW5rKFwiL2Rldi90dHkxXCIsXCIvZGV2L3N0ZGVyclwiKX12YXIgc3RkaW49RlMub3BlbihcIi9kZXYvc3RkaW5cIiwwKTt2YXIgc3Rkb3V0PUZTLm9wZW4oXCIvZGV2L3N0ZG91dFwiLDEpO3ZhciBzdGRlcnI9RlMub3BlbihcIi9kZXYvc3RkZXJyXCIsMSl9LGVuc3VyZUVycm5vRXJyb3I6KCk9PntpZihGUy5FcnJub0Vycm9yKXJldHVybjtGUy5FcnJub0Vycm9yPWZ1bmN0aW9uIEVycm5vRXJyb3IoZXJybm8sbm9kZSl7dGhpcy5ub2RlPW5vZGU7dGhpcy5zZXRFcnJubz1mdW5jdGlvbihlcnJubyl7dGhpcy5lcnJubz1lcnJub307dGhpcy5zZXRFcnJubyhlcnJubyk7dGhpcy5tZXNzYWdlPVwiRlMgZXJyb3JcIn07RlMuRXJybm9FcnJvci5wcm90b3R5cGU9bmV3IEVycm9yO0ZTLkVycm5vRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yPUZTLkVycm5vRXJyb3I7WzQ0XS5mb3JFYWNoKGNvZGU9PntGUy5nZW5lcmljRXJyb3JzW2NvZGVdPW5ldyBGUy5FcnJub0Vycm9yKGNvZGUpO0ZTLmdlbmVyaWNFcnJvcnNbY29kZV0uc3RhY2s9XCI8Z2VuZXJpYyBlcnJvciwgbm8gc3RhY2s+XCJ9KX0sc3RhdGljSW5pdDooKT0+e0ZTLmVuc3VyZUVycm5vRXJyb3IoKTtGUy5uYW1lVGFibGU9bmV3IEFycmF5KDQwOTYpO0ZTLm1vdW50KE1FTUZTLHt9LFwiL1wiKTtGUy5jcmVhdGVEZWZhdWx0RGlyZWN0b3JpZXMoKTtGUy5jcmVhdGVEZWZhdWx0RGV2aWNlcygpO0ZTLmNyZWF0ZVNwZWNpYWxEaXJlY3RvcmllcygpO0ZTLmZpbGVzeXN0ZW1zPXtcIk1FTUZTXCI6TUVNRlN9fSxpbml0OihpbnB1dCxvdXRwdXQsZXJyb3IpPT57RlMuaW5pdC5pbml0aWFsaXplZD10cnVlO0ZTLmVuc3VyZUVycm5vRXJyb3IoKTtNb2R1bGVbXCJzdGRpblwiXT1pbnB1dHx8TW9kdWxlW1wic3RkaW5cIl07TW9kdWxlW1wic3Rkb3V0XCJdPW91dHB1dHx8TW9kdWxlW1wic3Rkb3V0XCJdO01vZHVsZVtcInN0ZGVyclwiXT1lcnJvcnx8TW9kdWxlW1wic3RkZXJyXCJdO0ZTLmNyZWF0ZVN0YW5kYXJkU3RyZWFtcygpfSxxdWl0OigpPT57RlMuaW5pdC5pbml0aWFsaXplZD1mYWxzZTtmb3IodmFyIGk9MDtpPEZTLnN0cmVhbXMubGVuZ3RoO2krKyl7dmFyIHN0cmVhbT1GUy5zdHJlYW1zW2ldO2lmKCFzdHJlYW0pe2NvbnRpbnVlfUZTLmNsb3NlKHN0cmVhbSl9fSxnZXRNb2RlOihjYW5SZWFkLGNhbldyaXRlKT0+e3ZhciBtb2RlPTA7aWYoY2FuUmVhZCltb2RlfD0yOTJ8NzM7aWYoY2FuV3JpdGUpbW9kZXw9MTQ2O3JldHVybiBtb2RlfSxmaW5kT2JqZWN0OihwYXRoLGRvbnRSZXNvbHZlTGFzdExpbmspPT57dmFyIHJldD1GUy5hbmFseXplUGF0aChwYXRoLGRvbnRSZXNvbHZlTGFzdExpbmspO2lmKHJldC5leGlzdHMpe3JldHVybiByZXQub2JqZWN0fWVsc2V7cmV0dXJuIG51bGx9fSxhbmFseXplUGF0aDoocGF0aCxkb250UmVzb2x2ZUxhc3RMaW5rKT0+e3RyeXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OiFkb250UmVzb2x2ZUxhc3RMaW5rfSk7cGF0aD1sb29rdXAucGF0aH1jYXRjaChlKXt9dmFyIHJldD17aXNSb290OmZhbHNlLGV4aXN0czpmYWxzZSxlcnJvcjowLG5hbWU6bnVsbCxwYXRoOm51bGwsb2JqZWN0Om51bGwscGFyZW50RXhpc3RzOmZhbHNlLHBhcmVudFBhdGg6bnVsbCxwYXJlbnRPYmplY3Q6bnVsbH07dHJ5e3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtwYXJlbnQ6dHJ1ZX0pO3JldC5wYXJlbnRFeGlzdHM9dHJ1ZTtyZXQucGFyZW50UGF0aD1sb29rdXAucGF0aDtyZXQucGFyZW50T2JqZWN0PWxvb2t1cC5ub2RlO3JldC5uYW1lPVBBVEguYmFzZW5hbWUocGF0aCk7bG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OiFkb250UmVzb2x2ZUxhc3RMaW5rfSk7cmV0LmV4aXN0cz10cnVlO3JldC5wYXRoPWxvb2t1cC5wYXRoO3JldC5vYmplY3Q9bG9va3VwLm5vZGU7cmV0Lm5hbWU9bG9va3VwLm5vZGUubmFtZTtyZXQuaXNSb290PWxvb2t1cC5wYXRoPT09XCIvXCJ9Y2F0Y2goZSl7cmV0LmVycm9yPWUuZXJybm99cmV0dXJuIHJldH0sY3JlYXRlUGF0aDoocGFyZW50LHBhdGgsY2FuUmVhZCxjYW5Xcml0ZSk9PntwYXJlbnQ9dHlwZW9mIHBhcmVudD09XCJzdHJpbmdcIj9wYXJlbnQ6RlMuZ2V0UGF0aChwYXJlbnQpO3ZhciBwYXJ0cz1wYXRoLnNwbGl0KFwiL1wiKS5yZXZlcnNlKCk7d2hpbGUocGFydHMubGVuZ3RoKXt2YXIgcGFydD1wYXJ0cy5wb3AoKTtpZighcGFydCljb250aW51ZTt2YXIgY3VycmVudD1QQVRILmpvaW4yKHBhcmVudCxwYXJ0KTt0cnl7RlMubWtkaXIoY3VycmVudCl9Y2F0Y2goZSl7fXBhcmVudD1jdXJyZW50fXJldHVybiBjdXJyZW50fSxjcmVhdGVGaWxlOihwYXJlbnQsbmFtZSxwcm9wZXJ0aWVzLGNhblJlYWQsY2FuV3JpdGUpPT57dmFyIHBhdGg9UEFUSC5qb2luMih0eXBlb2YgcGFyZW50PT1cInN0cmluZ1wiP3BhcmVudDpGUy5nZXRQYXRoKHBhcmVudCksbmFtZSk7dmFyIG1vZGU9RlMuZ2V0TW9kZShjYW5SZWFkLGNhbldyaXRlKTtyZXR1cm4gRlMuY3JlYXRlKHBhdGgsbW9kZSl9LGNyZWF0ZURhdGFGaWxlOihwYXJlbnQsbmFtZSxkYXRhLGNhblJlYWQsY2FuV3JpdGUsY2FuT3duKT0+e3ZhciBwYXRoPW5hbWU7aWYocGFyZW50KXtwYXJlbnQ9dHlwZW9mIHBhcmVudD09XCJzdHJpbmdcIj9wYXJlbnQ6RlMuZ2V0UGF0aChwYXJlbnQpO3BhdGg9bmFtZT9QQVRILmpvaW4yKHBhcmVudCxuYW1lKTpwYXJlbnR9dmFyIG1vZGU9RlMuZ2V0TW9kZShjYW5SZWFkLGNhbldyaXRlKTt2YXIgbm9kZT1GUy5jcmVhdGUocGF0aCxtb2RlKTtpZihkYXRhKXtpZih0eXBlb2YgZGF0YT09XCJzdHJpbmdcIil7dmFyIGFycj1uZXcgQXJyYXkoZGF0YS5sZW5ndGgpO2Zvcih2YXIgaT0wLGxlbj1kYXRhLmxlbmd0aDtpPGxlbjsrK2kpYXJyW2ldPWRhdGEuY2hhckNvZGVBdChpKTtkYXRhPWFycn1GUy5jaG1vZChub2RlLG1vZGV8MTQ2KTt2YXIgc3RyZWFtPUZTLm9wZW4obm9kZSw1NzcpO0ZTLndyaXRlKHN0cmVhbSxkYXRhLDAsZGF0YS5sZW5ndGgsMCxjYW5Pd24pO0ZTLmNsb3NlKHN0cmVhbSk7RlMuY2htb2Qobm9kZSxtb2RlKX1yZXR1cm4gbm9kZX0sY3JlYXRlRGV2aWNlOihwYXJlbnQsbmFtZSxpbnB1dCxvdXRwdXQpPT57dmFyIHBhdGg9UEFUSC5qb2luMih0eXBlb2YgcGFyZW50PT1cInN0cmluZ1wiP3BhcmVudDpGUy5nZXRQYXRoKHBhcmVudCksbmFtZSk7dmFyIG1vZGU9RlMuZ2V0TW9kZSghIWlucHV0LCEhb3V0cHV0KTtpZighRlMuY3JlYXRlRGV2aWNlLm1ham9yKUZTLmNyZWF0ZURldmljZS5tYWpvcj02NDt2YXIgZGV2PUZTLm1ha2VkZXYoRlMuY3JlYXRlRGV2aWNlLm1ham9yKyssMCk7RlMucmVnaXN0ZXJEZXZpY2UoZGV2LHtvcGVuOnN0cmVhbT0+e3N0cmVhbS5zZWVrYWJsZT1mYWxzZX0sY2xvc2U6c3RyZWFtPT57aWYob3V0cHV0JiZvdXRwdXQuYnVmZmVyJiZvdXRwdXQuYnVmZmVyLmxlbmd0aCl7b3V0cHV0KDEwKX19LHJlYWQ6KHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3MpPT57dmFyIGJ5dGVzUmVhZD0wO2Zvcih2YXIgaT0wO2k8bGVuZ3RoO2krKyl7dmFyIHJlc3VsdDt0cnl7cmVzdWx0PWlucHV0KCl9Y2F0Y2goZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjkpfWlmKHJlc3VsdD09PXVuZGVmaW5lZCYmYnl0ZXNSZWFkPT09MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNil9aWYocmVzdWx0PT09bnVsbHx8cmVzdWx0PT09dW5kZWZpbmVkKWJyZWFrO2J5dGVzUmVhZCsrO2J1ZmZlcltvZmZzZXQraV09cmVzdWx0fWlmKGJ5dGVzUmVhZCl7c3RyZWFtLm5vZGUudGltZXN0YW1wPURhdGUubm93KCl9cmV0dXJuIGJ5dGVzUmVhZH0sd3JpdGU6KHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3MpPT57Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXt0cnl7b3V0cHV0KGJ1ZmZlcltvZmZzZXQraV0pfWNhdGNoKGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI5KX19aWYobGVuZ3RoKXtzdHJlYW0ubm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKX1yZXR1cm4gaX19KTtyZXR1cm4gRlMubWtkZXYocGF0aCxtb2RlLGRldil9LGZvcmNlTG9hZEZpbGU6b2JqPT57aWYob2JqLmlzRGV2aWNlfHxvYmouaXNGb2xkZXJ8fG9iai5saW5rfHxvYmouY29udGVudHMpcmV0dXJuIHRydWU7aWYodHlwZW9mIFhNTEh0dHBSZXF1ZXN0IT1cInVuZGVmaW5lZFwiKXt0aHJvdyBuZXcgRXJyb3IoXCJMYXp5IGxvYWRpbmcgc2hvdWxkIGhhdmUgYmVlbiBwZXJmb3JtZWQgKGNvbnRlbnRzIHNldCkgaW4gY3JlYXRlTGF6eUZpbGUsIGJ1dCBpdCB3YXMgbm90LiBMYXp5IGxvYWRpbmcgb25seSB3b3JrcyBpbiB3ZWIgd29ya2Vycy4gVXNlIC0tZW1iZWQtZmlsZSBvciAtLXByZWxvYWQtZmlsZSBpbiBlbWNjIG9uIHRoZSBtYWluIHRocmVhZC5cIil9ZWxzZSBpZihyZWFkXyl7dHJ5e29iai5jb250ZW50cz1pbnRBcnJheUZyb21TdHJpbmcocmVhZF8ob2JqLnVybCksdHJ1ZSk7b2JqLnVzZWRCeXRlcz1vYmouY29udGVudHMubGVuZ3RofWNhdGNoKGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI5KX19ZWxzZXt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgbG9hZCB3aXRob3V0IHJlYWQoKSBvciBYTUxIdHRwUmVxdWVzdC5cIil9fSxjcmVhdGVMYXp5RmlsZToocGFyZW50LG5hbWUsdXJsLGNhblJlYWQsY2FuV3JpdGUpPT57ZnVuY3Rpb24gTGF6eVVpbnQ4QXJyYXkoKXt0aGlzLmxlbmd0aEtub3duPWZhbHNlO3RoaXMuY2h1bmtzPVtdfUxhenlVaW50OEFycmF5LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24gTGF6eVVpbnQ4QXJyYXlfZ2V0KGlkeCl7aWYoaWR4PnRoaXMubGVuZ3RoLTF8fGlkeDwwKXtyZXR1cm4gdW5kZWZpbmVkfXZhciBjaHVua09mZnNldD1pZHgldGhpcy5jaHVua1NpemU7dmFyIGNodW5rTnVtPWlkeC90aGlzLmNodW5rU2l6ZXwwO3JldHVybiB0aGlzLmdldHRlcihjaHVua051bSlbY2h1bmtPZmZzZXRdfTtMYXp5VWludDhBcnJheS5wcm90b3R5cGUuc2V0RGF0YUdldHRlcj1mdW5jdGlvbiBMYXp5VWludDhBcnJheV9zZXREYXRhR2V0dGVyKGdldHRlcil7dGhpcy5nZXR0ZXI9Z2V0dGVyfTtMYXp5VWludDhBcnJheS5wcm90b3R5cGUuY2FjaGVMZW5ndGg9ZnVuY3Rpb24gTGF6eVVpbnQ4QXJyYXlfY2FjaGVMZW5ndGgoKXt2YXIgeGhyPW5ldyBYTUxIdHRwUmVxdWVzdDt4aHIub3BlbihcIkhFQURcIix1cmwsZmFsc2UpO3hoci5zZW5kKG51bGwpO2lmKCEoeGhyLnN0YXR1cz49MjAwJiZ4aHIuc3RhdHVzPDMwMHx8eGhyLnN0YXR1cz09PTMwNCkpdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgbG9hZCBcIit1cmwrXCIuIFN0YXR1czogXCIreGhyLnN0YXR1cyk7dmFyIGRhdGFsZW5ndGg9TnVtYmVyKHhoci5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtbGVuZ3RoXCIpKTt2YXIgaGVhZGVyO3ZhciBoYXNCeXRlU2VydmluZz0oaGVhZGVyPXhoci5nZXRSZXNwb25zZUhlYWRlcihcIkFjY2VwdC1SYW5nZXNcIikpJiZoZWFkZXI9PT1cImJ5dGVzXCI7dmFyIHVzZXNHemlwPShoZWFkZXI9eGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1FbmNvZGluZ1wiKSkmJmhlYWRlcj09PVwiZ3ppcFwiO3ZhciBjaHVua1NpemU9MTAyNCoxMDI0O2lmKCFoYXNCeXRlU2VydmluZyljaHVua1NpemU9ZGF0YWxlbmd0aDt2YXIgZG9YSFI9KGZyb20sdG8pPT57aWYoZnJvbT50byl0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHJhbmdlIChcIitmcm9tK1wiLCBcIit0bytcIikgb3Igbm8gYnl0ZXMgcmVxdWVzdGVkIVwiKTtpZih0bz5kYXRhbGVuZ3RoLTEpdGhyb3cgbmV3IEVycm9yKFwib25seSBcIitkYXRhbGVuZ3RoK1wiIGJ5dGVzIGF2YWlsYWJsZSEgcHJvZ3JhbW1lciBlcnJvciFcIik7dmFyIHhocj1uZXcgWE1MSHR0cFJlcXVlc3Q7eGhyLm9wZW4oXCJHRVRcIix1cmwsZmFsc2UpO2lmKGRhdGFsZW5ndGghPT1jaHVua1NpemUpeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJSYW5nZVwiLFwiYnl0ZXM9XCIrZnJvbStcIi1cIit0byk7eGhyLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7aWYoeGhyLm92ZXJyaWRlTWltZVR5cGUpe3hoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZFwiKX14aHIuc2VuZChudWxsKTtpZighKHhoci5zdGF0dXM+PTIwMCYmeGhyLnN0YXR1czwzMDB8fHhoci5zdGF0dXM9PT0zMDQpKXRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGxvYWQgXCIrdXJsK1wiLiBTdGF0dXM6IFwiK3hoci5zdGF0dXMpO2lmKHhoci5yZXNwb25zZSE9PXVuZGVmaW5lZCl7cmV0dXJuIG5ldyBVaW50OEFycmF5KHhoci5yZXNwb25zZXx8W10pfWVsc2V7cmV0dXJuIGludEFycmF5RnJvbVN0cmluZyh4aHIucmVzcG9uc2VUZXh0fHxcIlwiLHRydWUpfX07dmFyIGxhenlBcnJheT10aGlzO2xhenlBcnJheS5zZXREYXRhR2V0dGVyKGNodW5rTnVtPT57dmFyIHN0YXJ0PWNodW5rTnVtKmNodW5rU2l6ZTt2YXIgZW5kPShjaHVua051bSsxKSpjaHVua1NpemUtMTtlbmQ9TWF0aC5taW4oZW5kLGRhdGFsZW5ndGgtMSk7aWYodHlwZW9mIGxhenlBcnJheS5jaHVua3NbY2h1bmtOdW1dPT1cInVuZGVmaW5lZFwiKXtsYXp5QXJyYXkuY2h1bmtzW2NodW5rTnVtXT1kb1hIUihzdGFydCxlbmQpfWlmKHR5cGVvZiBsYXp5QXJyYXkuY2h1bmtzW2NodW5rTnVtXT09XCJ1bmRlZmluZWRcIil0aHJvdyBuZXcgRXJyb3IoXCJkb1hIUiBmYWlsZWQhXCIpO3JldHVybiBsYXp5QXJyYXkuY2h1bmtzW2NodW5rTnVtXX0pO2lmKHVzZXNHemlwfHwhZGF0YWxlbmd0aCl7Y2h1bmtTaXplPWRhdGFsZW5ndGg9MTtkYXRhbGVuZ3RoPXRoaXMuZ2V0dGVyKDApLmxlbmd0aDtjaHVua1NpemU9ZGF0YWxlbmd0aDtvdXQoXCJMYXp5RmlsZXMgb24gZ3ppcCBmb3JjZXMgZG93bmxvYWQgb2YgdGhlIHdob2xlIGZpbGUgd2hlbiBsZW5ndGggaXMgYWNjZXNzZWRcIil9dGhpcy5fbGVuZ3RoPWRhdGFsZW5ndGg7dGhpcy5fY2h1bmtTaXplPWNodW5rU2l6ZTt0aGlzLmxlbmd0aEtub3duPXRydWV9O2lmKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCE9XCJ1bmRlZmluZWRcIil7aWYoIUVOVklST05NRU5UX0lTX1dPUktFUil0aHJvd1wiQ2Fubm90IGRvIHN5bmNocm9ub3VzIGJpbmFyeSBYSFJzIG91dHNpZGUgd2Vid29ya2VycyBpbiBtb2Rlcm4gYnJvd3NlcnMuIFVzZSAtLWVtYmVkLWZpbGUgb3IgLS1wcmVsb2FkLWZpbGUgaW4gZW1jY1wiO3ZhciBsYXp5QXJyYXk9bmV3IExhenlVaW50OEFycmF5O09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGxhenlBcnJheSx7bGVuZ3RoOntnZXQ6ZnVuY3Rpb24oKXtpZighdGhpcy5sZW5ndGhLbm93bil7dGhpcy5jYWNoZUxlbmd0aCgpfXJldHVybiB0aGlzLl9sZW5ndGh9fSxjaHVua1NpemU6e2dldDpmdW5jdGlvbigpe2lmKCF0aGlzLmxlbmd0aEtub3duKXt0aGlzLmNhY2hlTGVuZ3RoKCl9cmV0dXJuIHRoaXMuX2NodW5rU2l6ZX19fSk7dmFyIHByb3BlcnRpZXM9e2lzRGV2aWNlOmZhbHNlLGNvbnRlbnRzOmxhenlBcnJheX19ZWxzZXt2YXIgcHJvcGVydGllcz17aXNEZXZpY2U6ZmFsc2UsdXJsOnVybH19dmFyIG5vZGU9RlMuY3JlYXRlRmlsZShwYXJlbnQsbmFtZSxwcm9wZXJ0aWVzLGNhblJlYWQsY2FuV3JpdGUpO2lmKHByb3BlcnRpZXMuY29udGVudHMpe25vZGUuY29udGVudHM9cHJvcGVydGllcy5jb250ZW50c31lbHNlIGlmKHByb3BlcnRpZXMudXJsKXtub2RlLmNvbnRlbnRzPW51bGw7bm9kZS51cmw9cHJvcGVydGllcy51cmx9T2JqZWN0LmRlZmluZVByb3BlcnRpZXMobm9kZSx7dXNlZEJ5dGVzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb250ZW50cy5sZW5ndGh9fX0pO3ZhciBzdHJlYW1fb3BzPXt9O3ZhciBrZXlzPU9iamVjdC5rZXlzKG5vZGUuc3RyZWFtX29wcyk7a2V5cy5mb3JFYWNoKGtleT0+e3ZhciBmbj1ub2RlLnN0cmVhbV9vcHNba2V5XTtzdHJlYW1fb3BzW2tleV09ZnVuY3Rpb24gZm9yY2VMb2FkTGF6eUZpbGUoKXtGUy5mb3JjZUxvYWRGaWxlKG5vZGUpO3JldHVybiBmbi5hcHBseShudWxsLGFyZ3VtZW50cyl9fSk7c3RyZWFtX29wcy5yZWFkPSgoc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uKT0+e0ZTLmZvcmNlTG9hZEZpbGUobm9kZSk7dmFyIGNvbnRlbnRzPXN0cmVhbS5ub2RlLmNvbnRlbnRzO2lmKHBvc2l0aW9uPj1jb250ZW50cy5sZW5ndGgpcmV0dXJuIDA7dmFyIHNpemU9TWF0aC5taW4oY29udGVudHMubGVuZ3RoLXBvc2l0aW9uLGxlbmd0aCk7aWYoY29udGVudHMuc2xpY2Upe2Zvcih2YXIgaT0wO2k8c2l6ZTtpKyspe2J1ZmZlcltvZmZzZXQraV09Y29udGVudHNbcG9zaXRpb24raV19fWVsc2V7Zm9yKHZhciBpPTA7aTxzaXplO2krKyl7YnVmZmVyW29mZnNldCtpXT1jb250ZW50cy5nZXQocG9zaXRpb24raSl9fXJldHVybiBzaXplfSk7bm9kZS5zdHJlYW1fb3BzPXN0cmVhbV9vcHM7cmV0dXJuIG5vZGV9LGNyZWF0ZVByZWxvYWRlZEZpbGU6KHBhcmVudCxuYW1lLHVybCxjYW5SZWFkLGNhbldyaXRlLG9ubG9hZCxvbmVycm9yLGRvbnRDcmVhdGVGaWxlLGNhbk93bixwcmVGaW5pc2gpPT57dmFyIGZ1bGxuYW1lPW5hbWU/UEFUSF9GUy5yZXNvbHZlKFBBVEguam9pbjIocGFyZW50LG5hbWUpKTpwYXJlbnQ7dmFyIGRlcD1nZXRVbmlxdWVSdW5EZXBlbmRlbmN5KFwiY3AgXCIrZnVsbG5hbWUpO2Z1bmN0aW9uIHByb2Nlc3NEYXRhKGJ5dGVBcnJheSl7ZnVuY3Rpb24gZmluaXNoKGJ5dGVBcnJheSl7aWYocHJlRmluaXNoKXByZUZpbmlzaCgpO2lmKCFkb250Q3JlYXRlRmlsZSl7RlMuY3JlYXRlRGF0YUZpbGUocGFyZW50LG5hbWUsYnl0ZUFycmF5LGNhblJlYWQsY2FuV3JpdGUsY2FuT3duKX1pZihvbmxvYWQpb25sb2FkKCk7cmVtb3ZlUnVuRGVwZW5kZW5jeShkZXApfWlmKEJyb3dzZXIuaGFuZGxlZEJ5UHJlbG9hZFBsdWdpbihieXRlQXJyYXksZnVsbG5hbWUsZmluaXNoLCgpPT57aWYob25lcnJvcilvbmVycm9yKCk7cmVtb3ZlUnVuRGVwZW5kZW5jeShkZXApfSkpe3JldHVybn1maW5pc2goYnl0ZUFycmF5KX1hZGRSdW5EZXBlbmRlbmN5KGRlcCk7aWYodHlwZW9mIHVybD09XCJzdHJpbmdcIil7YXN5bmNMb2FkKHVybCxieXRlQXJyYXk9PnByb2Nlc3NEYXRhKGJ5dGVBcnJheSksb25lcnJvcil9ZWxzZXtwcm9jZXNzRGF0YSh1cmwpfX0saW5kZXhlZERCOigpPT57cmV0dXJuIHdpbmRvdy5pbmRleGVkREJ8fHdpbmRvdy5tb3pJbmRleGVkREJ8fHdpbmRvdy53ZWJraXRJbmRleGVkREJ8fHdpbmRvdy5tc0luZGV4ZWREQn0sREJfTkFNRTooKT0+e3JldHVyblwiRU1fRlNfXCIrd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfSxEQl9WRVJTSU9OOjIwLERCX1NUT1JFX05BTUU6XCJGSUxFX0RBVEFcIixzYXZlRmlsZXNUb0RCOihwYXRocyxvbmxvYWQsb25lcnJvcik9PntvbmxvYWQ9b25sb2FkfHwoKCk9Pnt9KTtvbmVycm9yPW9uZXJyb3J8fCgoKT0+e30pO3ZhciBpbmRleGVkREI9RlMuaW5kZXhlZERCKCk7dHJ5e3ZhciBvcGVuUmVxdWVzdD1pbmRleGVkREIub3BlbihGUy5EQl9OQU1FKCksRlMuREJfVkVSU0lPTil9Y2F0Y2goZSl7cmV0dXJuIG9uZXJyb3IoZSl9b3BlblJlcXVlc3Qub251cGdyYWRlbmVlZGVkPSgoKT0+e291dChcImNyZWF0aW5nIGRiXCIpO3ZhciBkYj1vcGVuUmVxdWVzdC5yZXN1bHQ7ZGIuY3JlYXRlT2JqZWN0U3RvcmUoRlMuREJfU1RPUkVfTkFNRSl9KTtvcGVuUmVxdWVzdC5vbnN1Y2Nlc3M9KCgpPT57dmFyIGRiPW9wZW5SZXF1ZXN0LnJlc3VsdDt2YXIgdHJhbnNhY3Rpb249ZGIudHJhbnNhY3Rpb24oW0ZTLkRCX1NUT1JFX05BTUVdLFwicmVhZHdyaXRlXCIpO3ZhciBmaWxlcz10cmFuc2FjdGlvbi5vYmplY3RTdG9yZShGUy5EQl9TVE9SRV9OQU1FKTt2YXIgb2s9MCxmYWlsPTAsdG90YWw9cGF0aHMubGVuZ3RoO2Z1bmN0aW9uIGZpbmlzaCgpe2lmKGZhaWw9PTApb25sb2FkKCk7ZWxzZSBvbmVycm9yKCl9cGF0aHMuZm9yRWFjaChwYXRoPT57dmFyIHB1dFJlcXVlc3Q9ZmlsZXMucHV0KEZTLmFuYWx5emVQYXRoKHBhdGgpLm9iamVjdC5jb250ZW50cyxwYXRoKTtwdXRSZXF1ZXN0Lm9uc3VjY2Vzcz0oKCk9PntvaysrO2lmKG9rK2ZhaWw9PXRvdGFsKWZpbmlzaCgpfSk7cHV0UmVxdWVzdC5vbmVycm9yPSgoKT0+e2ZhaWwrKztpZihvaytmYWlsPT10b3RhbClmaW5pc2goKX0pfSk7dHJhbnNhY3Rpb24ub25lcnJvcj1vbmVycm9yfSk7b3BlblJlcXVlc3Qub25lcnJvcj1vbmVycm9yfSxsb2FkRmlsZXNGcm9tREI6KHBhdGhzLG9ubG9hZCxvbmVycm9yKT0+e29ubG9hZD1vbmxvYWR8fCgoKT0+e30pO29uZXJyb3I9b25lcnJvcnx8KCgpPT57fSk7dmFyIGluZGV4ZWREQj1GUy5pbmRleGVkREIoKTt0cnl7dmFyIG9wZW5SZXF1ZXN0PWluZGV4ZWREQi5vcGVuKEZTLkRCX05BTUUoKSxGUy5EQl9WRVJTSU9OKX1jYXRjaChlKXtyZXR1cm4gb25lcnJvcihlKX1vcGVuUmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQ9b25lcnJvcjtvcGVuUmVxdWVzdC5vbnN1Y2Nlc3M9KCgpPT57dmFyIGRiPW9wZW5SZXF1ZXN0LnJlc3VsdDt0cnl7dmFyIHRyYW5zYWN0aW9uPWRiLnRyYW5zYWN0aW9uKFtGUy5EQl9TVE9SRV9OQU1FXSxcInJlYWRvbmx5XCIpfWNhdGNoKGUpe29uZXJyb3IoZSk7cmV0dXJufXZhciBmaWxlcz10cmFuc2FjdGlvbi5vYmplY3RTdG9yZShGUy5EQl9TVE9SRV9OQU1FKTt2YXIgb2s9MCxmYWlsPTAsdG90YWw9cGF0aHMubGVuZ3RoO2Z1bmN0aW9uIGZpbmlzaCgpe2lmKGZhaWw9PTApb25sb2FkKCk7ZWxzZSBvbmVycm9yKCl9cGF0aHMuZm9yRWFjaChwYXRoPT57dmFyIGdldFJlcXVlc3Q9ZmlsZXMuZ2V0KHBhdGgpO2dldFJlcXVlc3Qub25zdWNjZXNzPSgoKT0+e2lmKEZTLmFuYWx5emVQYXRoKHBhdGgpLmV4aXN0cyl7RlMudW5saW5rKHBhdGgpfUZTLmNyZWF0ZURhdGFGaWxlKFBBVEguZGlybmFtZShwYXRoKSxQQVRILmJhc2VuYW1lKHBhdGgpLGdldFJlcXVlc3QucmVzdWx0LHRydWUsdHJ1ZSx0cnVlKTtvaysrO2lmKG9rK2ZhaWw9PXRvdGFsKWZpbmlzaCgpfSk7Z2V0UmVxdWVzdC5vbmVycm9yPSgoKT0+e2ZhaWwrKztpZihvaytmYWlsPT10b3RhbClmaW5pc2goKX0pfSk7dHJhbnNhY3Rpb24ub25lcnJvcj1vbmVycm9yfSk7b3BlblJlcXVlc3Qub25lcnJvcj1vbmVycm9yfX07dmFyIFNZU0NBTExTPXtERUZBVUxUX1BPTExNQVNLOjUsY2FsY3VsYXRlQXQ6ZnVuY3Rpb24oZGlyZmQscGF0aCxhbGxvd0VtcHR5KXtpZihQQVRILmlzQWJzKHBhdGgpKXtyZXR1cm4gcGF0aH12YXIgZGlyO2lmKGRpcmZkPT09LTEwMCl7ZGlyPUZTLmN3ZCgpfWVsc2V7dmFyIGRpcnN0cmVhbT1GUy5nZXRTdHJlYW0oZGlyZmQpO2lmKCFkaXJzdHJlYW0pdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCk7ZGlyPWRpcnN0cmVhbS5wYXRofWlmKHBhdGgubGVuZ3RoPT0wKXtpZighYWxsb3dFbXB0eSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDQpfXJldHVybiBkaXJ9cmV0dXJuIFBBVEguam9pbjIoZGlyLHBhdGgpfSxkb1N0YXQ6ZnVuY3Rpb24oZnVuYyxwYXRoLGJ1Zil7dHJ5e3ZhciBzdGF0PWZ1bmMocGF0aCl9Y2F0Y2goZSl7aWYoZSYmZS5ub2RlJiZQQVRILm5vcm1hbGl6ZShwYXRoKSE9PVBBVEgubm9ybWFsaXplKEZTLmdldFBhdGgoZS5ub2RlKSkpe3JldHVybi01NH10aHJvdyBlfUhFQVAzMltidWY+PjJdPXN0YXQuZGV2O0hFQVAzMltidWYrND4+Ml09MDtIRUFQMzJbYnVmKzg+PjJdPXN0YXQuaW5vO0hFQVAzMltidWYrMTI+PjJdPXN0YXQubW9kZTtIRUFQMzJbYnVmKzE2Pj4yXT1zdGF0Lm5saW5rO0hFQVAzMltidWYrMjA+PjJdPXN0YXQudWlkO0hFQVAzMltidWYrMjQ+PjJdPXN0YXQuZ2lkO0hFQVAzMltidWYrMjg+PjJdPXN0YXQucmRldjtIRUFQMzJbYnVmKzMyPj4yXT0wO3RlbXBJNjQ9W3N0YXQuc2l6ZT4+PjAsKHRlbXBEb3VibGU9c3RhdC5zaXplLCtNYXRoLmFicyh0ZW1wRG91YmxlKT49MT90ZW1wRG91YmxlPjA/KE1hdGgubWluKCtNYXRoLmZsb29yKHRlbXBEb3VibGUvNDI5NDk2NzI5NiksNDI5NDk2NzI5NSl8MCk+Pj4wOn5+K01hdGguY2VpbCgodGVtcERvdWJsZS0rKH5+dGVtcERvdWJsZT4+PjApKS80Mjk0OTY3Mjk2KT4+PjA6MCldLEhFQVAzMltidWYrNDA+PjJdPXRlbXBJNjRbMF0sSEVBUDMyW2J1Zis0ND4+Ml09dGVtcEk2NFsxXTtIRUFQMzJbYnVmKzQ4Pj4yXT00MDk2O0hFQVAzMltidWYrNTI+PjJdPXN0YXQuYmxvY2tzO0hFQVAzMltidWYrNTY+PjJdPXN0YXQuYXRpbWUuZ2V0VGltZSgpLzFlM3wwO0hFQVAzMltidWYrNjA+PjJdPTA7SEVBUDMyW2J1Zis2ND4+Ml09c3RhdC5tdGltZS5nZXRUaW1lKCkvMWUzfDA7SEVBUDMyW2J1Zis2OD4+Ml09MDtIRUFQMzJbYnVmKzcyPj4yXT1zdGF0LmN0aW1lLmdldFRpbWUoKS8xZTN8MDtIRUFQMzJbYnVmKzc2Pj4yXT0wO3RlbXBJNjQ9W3N0YXQuaW5vPj4+MCwodGVtcERvdWJsZT1zdGF0LmlubywrTWF0aC5hYnModGVtcERvdWJsZSk+PTE/dGVtcERvdWJsZT4wPyhNYXRoLm1pbigrTWF0aC5mbG9vcih0ZW1wRG91YmxlLzQyOTQ5NjcyOTYpLDQyOTQ5NjcyOTUpfDApPj4+MDp+fitNYXRoLmNlaWwoKHRlbXBEb3VibGUtKyh+fnRlbXBEb3VibGU+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApXSxIRUFQMzJbYnVmKzgwPj4yXT10ZW1wSTY0WzBdLEhFQVAzMltidWYrODQ+PjJdPXRlbXBJNjRbMV07cmV0dXJuIDB9LGRvTXN5bmM6ZnVuY3Rpb24oYWRkcixzdHJlYW0sbGVuLGZsYWdzLG9mZnNldCl7dmFyIGJ1ZmZlcj1IRUFQVTguc2xpY2UoYWRkcixhZGRyK2xlbik7RlMubXN5bmMoc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuLGZsYWdzKX0sZG9Na25vZDpmdW5jdGlvbihwYXRoLG1vZGUsZGV2KXtzd2l0Y2gobW9kZSY2MTQ0MCl7Y2FzZSAzMjc2ODpjYXNlIDgxOTI6Y2FzZSAyNDU3NjpjYXNlIDQwOTY6Y2FzZSA0OTE1MjpicmVhaztkZWZhdWx0OnJldHVybi0yOH1GUy5ta25vZChwYXRoLG1vZGUsZGV2KTtyZXR1cm4gMH0sZG9SZWFkbGluazpmdW5jdGlvbihwYXRoLGJ1ZixidWZzaXplKXtpZihidWZzaXplPD0wKXJldHVybi0yODt2YXIgcmV0PUZTLnJlYWRsaW5rKHBhdGgpO3ZhciBsZW49TWF0aC5taW4oYnVmc2l6ZSxsZW5ndGhCeXRlc1VURjgocmV0KSk7dmFyIGVuZENoYXI9SEVBUDhbYnVmK2xlbl07c3RyaW5nVG9VVEY4KHJldCxidWYsYnVmc2l6ZSsxKTtIRUFQOFtidWYrbGVuXT1lbmRDaGFyO3JldHVybiBsZW59LGRvQWNjZXNzOmZ1bmN0aW9uKHBhdGgsYW1vZGUpe2lmKGFtb2RlJn43KXtyZXR1cm4tMjh9dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzp0cnVlfSk7dmFyIG5vZGU9bG9va3VwLm5vZGU7aWYoIW5vZGUpe3JldHVybi00NH12YXIgcGVybXM9XCJcIjtpZihhbW9kZSY0KXBlcm1zKz1cInJcIjtpZihhbW9kZSYyKXBlcm1zKz1cIndcIjtpZihhbW9kZSYxKXBlcm1zKz1cInhcIjtpZihwZXJtcyYmRlMubm9kZVBlcm1pc3Npb25zKG5vZGUscGVybXMpKXtyZXR1cm4tMn1yZXR1cm4gMH0sZG9SZWFkdjpmdW5jdGlvbihzdHJlYW0saW92LGlvdmNudCxvZmZzZXQpe3ZhciByZXQ9MDtmb3IodmFyIGk9MDtpPGlvdmNudDtpKyspe3ZhciBwdHI9SEVBUDMyW2lvdj4+Ml07dmFyIGxlbj1IRUFQMzJbaW92KzQ+PjJdO2lvdis9ODt2YXIgY3Vycj1GUy5yZWFkKHN0cmVhbSxIRUFQOCxwdHIsbGVuLG9mZnNldCk7aWYoY3VycjwwKXJldHVybi0xO3JldCs9Y3VycjtpZihjdXJyPGxlbilicmVha31yZXR1cm4gcmV0fSxkb1dyaXRldjpmdW5jdGlvbihzdHJlYW0saW92LGlvdmNudCxvZmZzZXQpe3ZhciByZXQ9MDtmb3IodmFyIGk9MDtpPGlvdmNudDtpKyspe3ZhciBwdHI9SEVBUDMyW2lvdj4+Ml07dmFyIGxlbj1IRUFQMzJbaW92KzQ+PjJdO2lvdis9ODt2YXIgY3Vycj1GUy53cml0ZShzdHJlYW0sSEVBUDgscHRyLGxlbixvZmZzZXQpO2lmKGN1cnI8MClyZXR1cm4tMTtyZXQrPWN1cnJ9cmV0dXJuIHJldH0sdmFyYXJnczp1bmRlZmluZWQsZ2V0OmZ1bmN0aW9uKCl7U1lTQ0FMTFMudmFyYXJncys9NDt2YXIgcmV0PUhFQVAzMltTWVNDQUxMUy52YXJhcmdzLTQ+PjJdO3JldHVybiByZXR9LGdldFN0cjpmdW5jdGlvbihwdHIpe3ZhciByZXQ9VVRGOFRvU3RyaW5nKHB0cik7cmV0dXJuIHJldH0sZ2V0U3RyZWFtRnJvbUZEOmZ1bmN0aW9uKGZkKXt2YXIgc3RyZWFtPUZTLmdldFN0cmVhbShmZCk7aWYoIXN0cmVhbSl0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KTtyZXR1cm4gc3RyZWFtfX07ZnVuY3Rpb24gX19fc3lzY2FsbF9mY250bDY0KGZkLGNtZCx2YXJhcmdzKXtTWVNDQUxMUy52YXJhcmdzPXZhcmFyZ3M7dHJ5e3ZhciBzdHJlYW09U1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKGZkKTtzd2l0Y2goY21kKXtjYXNlIDA6e3ZhciBhcmc9U1lTQ0FMTFMuZ2V0KCk7aWYoYXJnPDApe3JldHVybi0yOH12YXIgbmV3U3RyZWFtO25ld1N0cmVhbT1GUy5jcmVhdGVTdHJlYW0oc3RyZWFtLGFyZyk7cmV0dXJuIG5ld1N0cmVhbS5mZH1jYXNlIDE6Y2FzZSAyOnJldHVybiAwO2Nhc2UgMzpyZXR1cm4gc3RyZWFtLmZsYWdzO2Nhc2UgNDp7dmFyIGFyZz1TWVNDQUxMUy5nZXQoKTtzdHJlYW0uZmxhZ3N8PWFyZztyZXR1cm4gMH1jYXNlIDU6e3ZhciBhcmc9U1lTQ0FMTFMuZ2V0KCk7dmFyIG9mZnNldD0wO0hFQVAxNlthcmcrb2Zmc2V0Pj4xXT0yO3JldHVybiAwfWNhc2UgNjpjYXNlIDc6cmV0dXJuIDA7Y2FzZSAxNjpjYXNlIDg6cmV0dXJuLTI4O2Nhc2UgOTpzZXRFcnJObygyOCk7cmV0dXJuLTE7ZGVmYXVsdDp7cmV0dXJuLTI4fX19Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT1cInVuZGVmaW5lZFwifHwhKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSl0aHJvdyBlO3JldHVybi1lLmVycm5vfX1mdW5jdGlvbiBfX19zeXNjYWxsX2lvY3RsKGZkLG9wLHZhcmFyZ3Mpe1NZU0NBTExTLnZhcmFyZ3M9dmFyYXJnczt0cnl7dmFyIHN0cmVhbT1TWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoZmQpO3N3aXRjaChvcCl7Y2FzZSAyMTUwOTpjYXNlIDIxNTA1OntpZighc3RyZWFtLnR0eSlyZXR1cm4tNTk7cmV0dXJuIDB9Y2FzZSAyMTUxMDpjYXNlIDIxNTExOmNhc2UgMjE1MTI6Y2FzZSAyMTUwNjpjYXNlIDIxNTA3OmNhc2UgMjE1MDg6e2lmKCFzdHJlYW0udHR5KXJldHVybi01OTtyZXR1cm4gMH1jYXNlIDIxNTE5OntpZighc3RyZWFtLnR0eSlyZXR1cm4tNTk7dmFyIGFyZ3A9U1lTQ0FMTFMuZ2V0KCk7SEVBUDMyW2FyZ3A+PjJdPTA7cmV0dXJuIDB9Y2FzZSAyMTUyMDp7aWYoIXN0cmVhbS50dHkpcmV0dXJuLTU5O3JldHVybi0yOH1jYXNlIDIxNTMxOnt2YXIgYXJncD1TWVNDQUxMUy5nZXQoKTtyZXR1cm4gRlMuaW9jdGwoc3RyZWFtLG9wLGFyZ3ApfWNhc2UgMjE1MjM6e2lmKCFzdHJlYW0udHR5KXJldHVybi01OTtyZXR1cm4gMH1jYXNlIDIxNTI0OntpZighc3RyZWFtLnR0eSlyZXR1cm4tNTk7cmV0dXJuIDB9ZGVmYXVsdDphYm9ydChcImJhZCBpb2N0bCBzeXNjYWxsIFwiK29wKX19Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT1cInVuZGVmaW5lZFwifHwhKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSl0aHJvdyBlO3JldHVybi1lLmVycm5vfX1mdW5jdGlvbiBfX19zeXNjYWxsX29wZW5hdChkaXJmZCxwYXRoLGZsYWdzLHZhcmFyZ3Mpe1NZU0NBTExTLnZhcmFyZ3M9dmFyYXJnczt0cnl7cGF0aD1TWVNDQUxMUy5nZXRTdHIocGF0aCk7cGF0aD1TWVNDQUxMUy5jYWxjdWxhdGVBdChkaXJmZCxwYXRoKTt2YXIgbW9kZT12YXJhcmdzP1NZU0NBTExTLmdldCgpOjA7cmV0dXJuIEZTLm9wZW4ocGF0aCxmbGFncyxtb2RlKS5mZH1jYXRjaChlKXtpZih0eXBlb2YgRlM9PVwidW5kZWZpbmVkXCJ8fCEoZSBpbnN0YW5jZW9mIEZTLkVycm5vRXJyb3IpKXRocm93IGU7cmV0dXJuLWUuZXJybm99fXZhciBzdHJ1Y3RSZWdpc3RyYXRpb25zPXt9O2Z1bmN0aW9uIHJ1bkRlc3RydWN0b3JzKGRlc3RydWN0b3JzKXt3aGlsZShkZXN0cnVjdG9ycy5sZW5ndGgpe3ZhciBwdHI9ZGVzdHJ1Y3RvcnMucG9wKCk7dmFyIGRlbD1kZXN0cnVjdG9ycy5wb3AoKTtkZWwocHRyKX19ZnVuY3Rpb24gc2ltcGxlUmVhZFZhbHVlRnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIHRoaXNbXCJmcm9tV2lyZVR5cGVcIl0oSEVBUFUzMltwb2ludGVyPj4yXSl9dmFyIGF3YWl0aW5nRGVwZW5kZW5jaWVzPXt9O3ZhciByZWdpc3RlcmVkVHlwZXM9e307dmFyIHR5cGVEZXBlbmRlbmNpZXM9e307dmFyIGNoYXJfMD00ODt2YXIgY2hhcl85PTU3O2Z1bmN0aW9uIG1ha2VMZWdhbEZ1bmN0aW9uTmFtZShuYW1lKXtpZih1bmRlZmluZWQ9PT1uYW1lKXtyZXR1cm5cIl91bmtub3duXCJ9bmFtZT1uYW1lLnJlcGxhY2UoL1teYS16QS1aMC05X10vZyxcIiRcIik7dmFyIGY9bmFtZS5jaGFyQ29kZUF0KDApO2lmKGY+PWNoYXJfMCYmZjw9Y2hhcl85KXtyZXR1cm5cIl9cIituYW1lfXJldHVybiBuYW1lfWZ1bmN0aW9uIGNyZWF0ZU5hbWVkRnVuY3Rpb24obmFtZSxib2R5KXtuYW1lPW1ha2VMZWdhbEZ1bmN0aW9uTmFtZShuYW1lKTtyZXR1cm4gbmV3IEZ1bmN0aW9uKFwiYm9keVwiLFwicmV0dXJuIGZ1bmN0aW9uIFwiK25hbWUrXCIoKSB7XFxuXCIrJyAgICBcInVzZSBzdHJpY3RcIjsnK1wiICAgIHJldHVybiBib2R5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuXCIrXCJ9O1xcblwiKShib2R5KX1mdW5jdGlvbiBleHRlbmRFcnJvcihiYXNlRXJyb3JUeXBlLGVycm9yTmFtZSl7dmFyIGVycm9yQ2xhc3M9Y3JlYXRlTmFtZWRGdW5jdGlvbihlcnJvck5hbWUsZnVuY3Rpb24obWVzc2FnZSl7dGhpcy5uYW1lPWVycm9yTmFtZTt0aGlzLm1lc3NhZ2U9bWVzc2FnZTt2YXIgc3RhY2s9bmV3IEVycm9yKG1lc3NhZ2UpLnN0YWNrO2lmKHN0YWNrIT09dW5kZWZpbmVkKXt0aGlzLnN0YWNrPXRoaXMudG9TdHJpbmcoKStcIlxcblwiK3N0YWNrLnJlcGxhY2UoL15FcnJvcig6W15cXG5dKik/XFxuLyxcIlwiKX19KTtlcnJvckNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGJhc2VFcnJvclR5cGUucHJvdG90eXBlKTtlcnJvckNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lcnJvckNsYXNzO2Vycm9yQ2xhc3MucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7aWYodGhpcy5tZXNzYWdlPT09dW5kZWZpbmVkKXtyZXR1cm4gdGhpcy5uYW1lfWVsc2V7cmV0dXJuIHRoaXMubmFtZStcIjogXCIrdGhpcy5tZXNzYWdlfX07cmV0dXJuIGVycm9yQ2xhc3N9dmFyIEludGVybmFsRXJyb3I9dW5kZWZpbmVkO2Z1bmN0aW9uIHRocm93SW50ZXJuYWxFcnJvcihtZXNzYWdlKXt0aHJvdyBuZXcgSW50ZXJuYWxFcnJvcihtZXNzYWdlKX1mdW5jdGlvbiB3aGVuRGVwZW5kZW50VHlwZXNBcmVSZXNvbHZlZChteVR5cGVzLGRlcGVuZGVudFR5cGVzLGdldFR5cGVDb252ZXJ0ZXJzKXtteVR5cGVzLmZvckVhY2goZnVuY3Rpb24odHlwZSl7dHlwZURlcGVuZGVuY2llc1t0eXBlXT1kZXBlbmRlbnRUeXBlc30pO2Z1bmN0aW9uIG9uQ29tcGxldGUodHlwZUNvbnZlcnRlcnMpe3ZhciBteVR5cGVDb252ZXJ0ZXJzPWdldFR5cGVDb252ZXJ0ZXJzKHR5cGVDb252ZXJ0ZXJzKTtpZihteVR5cGVDb252ZXJ0ZXJzLmxlbmd0aCE9PW15VHlwZXMubGVuZ3RoKXt0aHJvd0ludGVybmFsRXJyb3IoXCJNaXNtYXRjaGVkIHR5cGUgY29udmVydGVyIGNvdW50XCIpfWZvcih2YXIgaT0wO2k8bXlUeXBlcy5sZW5ndGg7KytpKXtyZWdpc3RlclR5cGUobXlUeXBlc1tpXSxteVR5cGVDb252ZXJ0ZXJzW2ldKX19dmFyIHR5cGVDb252ZXJ0ZXJzPW5ldyBBcnJheShkZXBlbmRlbnRUeXBlcy5sZW5ndGgpO3ZhciB1bnJlZ2lzdGVyZWRUeXBlcz1bXTt2YXIgcmVnaXN0ZXJlZD0wO2RlcGVuZGVudFR5cGVzLmZvckVhY2goKGR0LGkpPT57aWYocmVnaXN0ZXJlZFR5cGVzLmhhc093blByb3BlcnR5KGR0KSl7dHlwZUNvbnZlcnRlcnNbaV09cmVnaXN0ZXJlZFR5cGVzW2R0XX1lbHNle3VucmVnaXN0ZXJlZFR5cGVzLnB1c2goZHQpO2lmKCFhd2FpdGluZ0RlcGVuZGVuY2llcy5oYXNPd25Qcm9wZXJ0eShkdCkpe2F3YWl0aW5nRGVwZW5kZW5jaWVzW2R0XT1bXX1hd2FpdGluZ0RlcGVuZGVuY2llc1tkdF0ucHVzaCgoKT0+e3R5cGVDb252ZXJ0ZXJzW2ldPXJlZ2lzdGVyZWRUeXBlc1tkdF07KytyZWdpc3RlcmVkO2lmKHJlZ2lzdGVyZWQ9PT11bnJlZ2lzdGVyZWRUeXBlcy5sZW5ndGgpe29uQ29tcGxldGUodHlwZUNvbnZlcnRlcnMpfX0pfX0pO2lmKDA9PT11bnJlZ2lzdGVyZWRUeXBlcy5sZW5ndGgpe29uQ29tcGxldGUodHlwZUNvbnZlcnRlcnMpfX1mdW5jdGlvbiBfX2VtYmluZF9maW5hbGl6ZV92YWx1ZV9vYmplY3Qoc3RydWN0VHlwZSl7dmFyIHJlZz1zdHJ1Y3RSZWdpc3RyYXRpb25zW3N0cnVjdFR5cGVdO2RlbGV0ZSBzdHJ1Y3RSZWdpc3RyYXRpb25zW3N0cnVjdFR5cGVdO3ZhciByYXdDb25zdHJ1Y3Rvcj1yZWcucmF3Q29uc3RydWN0b3I7dmFyIHJhd0Rlc3RydWN0b3I9cmVnLnJhd0Rlc3RydWN0b3I7dmFyIGZpZWxkUmVjb3Jkcz1yZWcuZmllbGRzO3ZhciBmaWVsZFR5cGVzPWZpZWxkUmVjb3Jkcy5tYXAoZmllbGQ9PmZpZWxkLmdldHRlclJldHVyblR5cGUpLmNvbmNhdChmaWVsZFJlY29yZHMubWFwKGZpZWxkPT5maWVsZC5zZXR0ZXJBcmd1bWVudFR5cGUpKTt3aGVuRGVwZW5kZW50VHlwZXNBcmVSZXNvbHZlZChbc3RydWN0VHlwZV0sZmllbGRUeXBlcyxmaWVsZFR5cGVzPT57dmFyIGZpZWxkcz17fTtmaWVsZFJlY29yZHMuZm9yRWFjaCgoZmllbGQsaSk9Pnt2YXIgZmllbGROYW1lPWZpZWxkLmZpZWxkTmFtZTt2YXIgZ2V0dGVyUmV0dXJuVHlwZT1maWVsZFR5cGVzW2ldO3ZhciBnZXR0ZXI9ZmllbGQuZ2V0dGVyO3ZhciBnZXR0ZXJDb250ZXh0PWZpZWxkLmdldHRlckNvbnRleHQ7dmFyIHNldHRlckFyZ3VtZW50VHlwZT1maWVsZFR5cGVzW2krZmllbGRSZWNvcmRzLmxlbmd0aF07dmFyIHNldHRlcj1maWVsZC5zZXR0ZXI7dmFyIHNldHRlckNvbnRleHQ9ZmllbGQuc2V0dGVyQ29udGV4dDtmaWVsZHNbZmllbGROYW1lXT17cmVhZDpwdHI9PntyZXR1cm4gZ2V0dGVyUmV0dXJuVHlwZVtcImZyb21XaXJlVHlwZVwiXShnZXR0ZXIoZ2V0dGVyQ29udGV4dCxwdHIpKX0sd3JpdGU6KHB0cixvKT0+e3ZhciBkZXN0cnVjdG9ycz1bXTtzZXR0ZXIoc2V0dGVyQ29udGV4dCxwdHIsc2V0dGVyQXJndW1lbnRUeXBlW1widG9XaXJlVHlwZVwiXShkZXN0cnVjdG9ycyxvKSk7cnVuRGVzdHJ1Y3RvcnMoZGVzdHJ1Y3RvcnMpfX19KTtyZXR1cm5be25hbWU6cmVnLm5hbWUsXCJmcm9tV2lyZVR5cGVcIjpmdW5jdGlvbihwdHIpe3ZhciBydj17fTtmb3IodmFyIGkgaW4gZmllbGRzKXtydltpXT1maWVsZHNbaV0ucmVhZChwdHIpfXJhd0Rlc3RydWN0b3IocHRyKTtyZXR1cm4gcnZ9LFwidG9XaXJlVHlwZVwiOmZ1bmN0aW9uKGRlc3RydWN0b3JzLG8pe2Zvcih2YXIgZmllbGROYW1lIGluIGZpZWxkcyl7aWYoIShmaWVsZE5hbWUgaW4gbykpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ01pc3NpbmcgZmllbGQ6ICBcIicrZmllbGROYW1lKydcIicpfX12YXIgcHRyPXJhd0NvbnN0cnVjdG9yKCk7Zm9yKGZpZWxkTmFtZSBpbiBmaWVsZHMpe2ZpZWxkc1tmaWVsZE5hbWVdLndyaXRlKHB0cixvW2ZpZWxkTmFtZV0pfWlmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaChyYXdEZXN0cnVjdG9yLHB0cil9cmV0dXJuIHB0cn0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOnNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyLGRlc3RydWN0b3JGdW5jdGlvbjpyYXdEZXN0cnVjdG9yfV19KX1mdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9iaWdpbnQocHJpbWl0aXZlVHlwZSxuYW1lLHNpemUsbWluUmFuZ2UsbWF4UmFuZ2Upe31mdW5jdGlvbiBnZXRTaGlmdEZyb21TaXplKHNpemUpe3N3aXRjaChzaXplKXtjYXNlIDE6cmV0dXJuIDA7Y2FzZSAyOnJldHVybiAxO2Nhc2UgNDpyZXR1cm4gMjtjYXNlIDg6cmV0dXJuIDM7ZGVmYXVsdDp0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biB0eXBlIHNpemU6IFwiK3NpemUpfX1mdW5jdGlvbiBlbWJpbmRfaW5pdF9jaGFyQ29kZXMoKXt2YXIgY29kZXM9bmV3IEFycmF5KDI1Nik7Zm9yKHZhciBpPTA7aTwyNTY7KytpKXtjb2Rlc1tpXT1TdHJpbmcuZnJvbUNoYXJDb2RlKGkpfWVtYmluZF9jaGFyQ29kZXM9Y29kZXN9dmFyIGVtYmluZF9jaGFyQ29kZXM9dW5kZWZpbmVkO2Z1bmN0aW9uIHJlYWRMYXRpbjFTdHJpbmcocHRyKXt2YXIgcmV0PVwiXCI7dmFyIGM9cHRyO3doaWxlKEhFQVBVOFtjXSl7cmV0Kz1lbWJpbmRfY2hhckNvZGVzW0hFQVBVOFtjKytdXX1yZXR1cm4gcmV0fXZhciBCaW5kaW5nRXJyb3I9dW5kZWZpbmVkO2Z1bmN0aW9uIHRocm93QmluZGluZ0Vycm9yKG1lc3NhZ2Upe3Rocm93IG5ldyBCaW5kaW5nRXJyb3IobWVzc2FnZSl9ZnVuY3Rpb24gcmVnaXN0ZXJUeXBlKHJhd1R5cGUscmVnaXN0ZXJlZEluc3RhbmNlLG9wdGlvbnM9e30pe2lmKCEoXCJhcmdQYWNrQWR2YW5jZVwiaW4gcmVnaXN0ZXJlZEluc3RhbmNlKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcInJlZ2lzdGVyVHlwZSByZWdpc3RlcmVkSW5zdGFuY2UgcmVxdWlyZXMgYXJnUGFja0FkdmFuY2VcIil9dmFyIG5hbWU9cmVnaXN0ZXJlZEluc3RhbmNlLm5hbWU7aWYoIXJhd1R5cGUpe3Rocm93QmluZGluZ0Vycm9yKCd0eXBlIFwiJytuYW1lKydcIiBtdXN0IGhhdmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIHR5cGVpZCBwb2ludGVyJyl9aWYocmVnaXN0ZXJlZFR5cGVzLmhhc093blByb3BlcnR5KHJhd1R5cGUpKXtpZihvcHRpb25zLmlnbm9yZUR1cGxpY2F0ZVJlZ2lzdHJhdGlvbnMpe3JldHVybn1lbHNle3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IHJlZ2lzdGVyIHR5cGUgJ1wiK25hbWUrXCInIHR3aWNlXCIpfX1yZWdpc3RlcmVkVHlwZXNbcmF3VHlwZV09cmVnaXN0ZXJlZEluc3RhbmNlO2RlbGV0ZSB0eXBlRGVwZW5kZW5jaWVzW3Jhd1R5cGVdO2lmKGF3YWl0aW5nRGVwZW5kZW5jaWVzLmhhc093blByb3BlcnR5KHJhd1R5cGUpKXt2YXIgY2FsbGJhY2tzPWF3YWl0aW5nRGVwZW5kZW5jaWVzW3Jhd1R5cGVdO2RlbGV0ZSBhd2FpdGluZ0RlcGVuZGVuY2llc1tyYXdUeXBlXTtjYWxsYmFja3MuZm9yRWFjaChjYj0+Y2IoKSl9fWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2Jvb2wocmF3VHlwZSxuYW1lLHNpemUsdHJ1ZVZhbHVlLGZhbHNlVmFsdWUpe3ZhciBzaGlmdD1nZXRTaGlmdEZyb21TaXplKHNpemUpO25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZTpuYW1lLFwiZnJvbVdpcmVUeXBlXCI6ZnVuY3Rpb24od3Qpe3JldHVybiEhd3R9LFwidG9XaXJlVHlwZVwiOmZ1bmN0aW9uKGRlc3RydWN0b3JzLG8pe3JldHVybiBvP3RydWVWYWx1ZTpmYWxzZVZhbHVlfSxcImFyZ1BhY2tBZHZhbmNlXCI6OCxcInJlYWRWYWx1ZUZyb21Qb2ludGVyXCI6ZnVuY3Rpb24ocG9pbnRlcil7dmFyIGhlYXA7aWYoc2l6ZT09PTEpe2hlYXA9SEVBUDh9ZWxzZSBpZihzaXplPT09Mil7aGVhcD1IRUFQMTZ9ZWxzZSBpZihzaXplPT09NCl7aGVhcD1IRUFQMzJ9ZWxzZXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBib29sZWFuIHR5cGUgc2l6ZTogXCIrbmFtZSl9cmV0dXJuIHRoaXNbXCJmcm9tV2lyZVR5cGVcIl0oaGVhcFtwb2ludGVyPj5zaGlmdF0pfSxkZXN0cnVjdG9yRnVuY3Rpb246bnVsbH0pfWZ1bmN0aW9uIENsYXNzSGFuZGxlX2lzQWxpYXNPZihvdGhlcil7aWYoISh0aGlzIGluc3RhbmNlb2YgQ2xhc3NIYW5kbGUpKXtyZXR1cm4gZmFsc2V9aWYoIShvdGhlciBpbnN0YW5jZW9mIENsYXNzSGFuZGxlKSl7cmV0dXJuIGZhbHNlfXZhciBsZWZ0Q2xhc3M9dGhpcy4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzczt2YXIgbGVmdD10aGlzLiQkLnB0cjt2YXIgcmlnaHRDbGFzcz1vdGhlci4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzczt2YXIgcmlnaHQ9b3RoZXIuJCQucHRyO3doaWxlKGxlZnRDbGFzcy5iYXNlQ2xhc3Mpe2xlZnQ9bGVmdENsYXNzLnVwY2FzdChsZWZ0KTtsZWZ0Q2xhc3M9bGVmdENsYXNzLmJhc2VDbGFzc313aGlsZShyaWdodENsYXNzLmJhc2VDbGFzcyl7cmlnaHQ9cmlnaHRDbGFzcy51cGNhc3QocmlnaHQpO3JpZ2h0Q2xhc3M9cmlnaHRDbGFzcy5iYXNlQ2xhc3N9cmV0dXJuIGxlZnRDbGFzcz09PXJpZ2h0Q2xhc3MmJmxlZnQ9PT1yaWdodH1mdW5jdGlvbiBzaGFsbG93Q29weUludGVybmFsUG9pbnRlcihvKXtyZXR1cm57Y291bnQ6by5jb3VudCxkZWxldGVTY2hlZHVsZWQ6by5kZWxldGVTY2hlZHVsZWQscHJlc2VydmVQb2ludGVyT25EZWxldGU6by5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSxwdHI6by5wdHIscHRyVHlwZTpvLnB0clR5cGUsc21hcnRQdHI6by5zbWFydFB0cixzbWFydFB0clR5cGU6by5zbWFydFB0clR5cGV9fWZ1bmN0aW9uIHRocm93SW5zdGFuY2VBbHJlYWR5RGVsZXRlZChvYmope2Z1bmN0aW9uIGdldEluc3RhbmNlVHlwZU5hbWUoaGFuZGxlKXtyZXR1cm4gaGFuZGxlLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzLm5hbWV9dGhyb3dCaW5kaW5nRXJyb3IoZ2V0SW5zdGFuY2VUeXBlTmFtZShvYmopK1wiIGluc3RhbmNlIGFscmVhZHkgZGVsZXRlZFwiKX12YXIgZmluYWxpemF0aW9uUmVnaXN0cnk9ZmFsc2U7ZnVuY3Rpb24gZGV0YWNoRmluYWxpemVyKGhhbmRsZSl7fWZ1bmN0aW9uIHJ1bkRlc3RydWN0b3IoJCQpe2lmKCQkLnNtYXJ0UHRyKXskJC5zbWFydFB0clR5cGUucmF3RGVzdHJ1Y3RvcigkJC5zbWFydFB0cil9ZWxzZXskJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzcy5yYXdEZXN0cnVjdG9yKCQkLnB0cil9fWZ1bmN0aW9uIHJlbGVhc2VDbGFzc0hhbmRsZSgkJCl7JCQuY291bnQudmFsdWUtPTE7dmFyIHRvRGVsZXRlPTA9PT0kJC5jb3VudC52YWx1ZTtpZih0b0RlbGV0ZSl7cnVuRGVzdHJ1Y3RvcigkJCl9fWZ1bmN0aW9uIGRvd25jYXN0UG9pbnRlcihwdHIscHRyQ2xhc3MsZGVzaXJlZENsYXNzKXtpZihwdHJDbGFzcz09PWRlc2lyZWRDbGFzcyl7cmV0dXJuIHB0cn1pZih1bmRlZmluZWQ9PT1kZXNpcmVkQ2xhc3MuYmFzZUNsYXNzKXtyZXR1cm4gbnVsbH12YXIgcnY9ZG93bmNhc3RQb2ludGVyKHB0cixwdHJDbGFzcyxkZXNpcmVkQ2xhc3MuYmFzZUNsYXNzKTtpZihydj09PW51bGwpe3JldHVybiBudWxsfXJldHVybiBkZXNpcmVkQ2xhc3MuZG93bmNhc3QocnYpfXZhciByZWdpc3RlcmVkUG9pbnRlcnM9e307ZnVuY3Rpb24gZ2V0SW5oZXJpdGVkSW5zdGFuY2VDb3VudCgpe3JldHVybiBPYmplY3Qua2V5cyhyZWdpc3RlcmVkSW5zdGFuY2VzKS5sZW5ndGh9ZnVuY3Rpb24gZ2V0TGl2ZUluaGVyaXRlZEluc3RhbmNlcygpe3ZhciBydj1bXTtmb3IodmFyIGsgaW4gcmVnaXN0ZXJlZEluc3RhbmNlcyl7aWYocmVnaXN0ZXJlZEluc3RhbmNlcy5oYXNPd25Qcm9wZXJ0eShrKSl7cnYucHVzaChyZWdpc3RlcmVkSW5zdGFuY2VzW2tdKX19cmV0dXJuIHJ2fXZhciBkZWxldGlvblF1ZXVlPVtdO2Z1bmN0aW9uIGZsdXNoUGVuZGluZ0RlbGV0ZXMoKXt3aGlsZShkZWxldGlvblF1ZXVlLmxlbmd0aCl7dmFyIG9iaj1kZWxldGlvblF1ZXVlLnBvcCgpO29iai4kJC5kZWxldGVTY2hlZHVsZWQ9ZmFsc2U7b2JqW1wiZGVsZXRlXCJdKCl9fXZhciBkZWxheUZ1bmN0aW9uPXVuZGVmaW5lZDtmdW5jdGlvbiBzZXREZWxheUZ1bmN0aW9uKGZuKXtkZWxheUZ1bmN0aW9uPWZuO2lmKGRlbGV0aW9uUXVldWUubGVuZ3RoJiZkZWxheUZ1bmN0aW9uKXtkZWxheUZ1bmN0aW9uKGZsdXNoUGVuZGluZ0RlbGV0ZXMpfX1mdW5jdGlvbiBpbml0X2VtYmluZCgpe01vZHVsZVtcImdldEluaGVyaXRlZEluc3RhbmNlQ291bnRcIl09Z2V0SW5oZXJpdGVkSW5zdGFuY2VDb3VudDtNb2R1bGVbXCJnZXRMaXZlSW5oZXJpdGVkSW5zdGFuY2VzXCJdPWdldExpdmVJbmhlcml0ZWRJbnN0YW5jZXM7TW9kdWxlW1wiZmx1c2hQZW5kaW5nRGVsZXRlc1wiXT1mbHVzaFBlbmRpbmdEZWxldGVzO01vZHVsZVtcInNldERlbGF5RnVuY3Rpb25cIl09c2V0RGVsYXlGdW5jdGlvbn12YXIgcmVnaXN0ZXJlZEluc3RhbmNlcz17fTtmdW5jdGlvbiBnZXRCYXNlc3RQb2ludGVyKGNsYXNzXyxwdHIpe2lmKHB0cj09PXVuZGVmaW5lZCl7dGhyb3dCaW5kaW5nRXJyb3IoXCJwdHIgc2hvdWxkIG5vdCBiZSB1bmRlZmluZWRcIil9d2hpbGUoY2xhc3NfLmJhc2VDbGFzcyl7cHRyPWNsYXNzXy51cGNhc3QocHRyKTtjbGFzc189Y2xhc3NfLmJhc2VDbGFzc31yZXR1cm4gcHRyfWZ1bmN0aW9uIGdldEluaGVyaXRlZEluc3RhbmNlKGNsYXNzXyxwdHIpe3B0cj1nZXRCYXNlc3RQb2ludGVyKGNsYXNzXyxwdHIpO3JldHVybiByZWdpc3RlcmVkSW5zdGFuY2VzW3B0cl19ZnVuY3Rpb24gbWFrZUNsYXNzSGFuZGxlKHByb3RvdHlwZSxyZWNvcmQpe2lmKCFyZWNvcmQucHRyVHlwZXx8IXJlY29yZC5wdHIpe3Rocm93SW50ZXJuYWxFcnJvcihcIm1ha2VDbGFzc0hhbmRsZSByZXF1aXJlcyBwdHIgYW5kIHB0clR5cGVcIil9dmFyIGhhc1NtYXJ0UHRyVHlwZT0hIXJlY29yZC5zbWFydFB0clR5cGU7dmFyIGhhc1NtYXJ0UHRyPSEhcmVjb3JkLnNtYXJ0UHRyO2lmKGhhc1NtYXJ0UHRyVHlwZSE9PWhhc1NtYXJ0UHRyKXt0aHJvd0ludGVybmFsRXJyb3IoXCJCb3RoIHNtYXJ0UHRyVHlwZSBhbmQgc21hcnRQdHIgbXVzdCBiZSBzcGVjaWZpZWRcIil9cmVjb3JkLmNvdW50PXt2YWx1ZToxfTtyZXR1cm4gYXR0YWNoRmluYWxpemVyKE9iamVjdC5jcmVhdGUocHJvdG90eXBlLHskJDp7dmFsdWU6cmVjb3JkfX0pKX1mdW5jdGlvbiBSZWdpc3RlcmVkUG9pbnRlcl9mcm9tV2lyZVR5cGUocHRyKXt2YXIgcmF3UG9pbnRlcj10aGlzLmdldFBvaW50ZWUocHRyKTtpZighcmF3UG9pbnRlcil7dGhpcy5kZXN0cnVjdG9yKHB0cik7cmV0dXJuIG51bGx9dmFyIHJlZ2lzdGVyZWRJbnN0YW5jZT1nZXRJbmhlcml0ZWRJbnN0YW5jZSh0aGlzLnJlZ2lzdGVyZWRDbGFzcyxyYXdQb2ludGVyKTtpZih1bmRlZmluZWQhPT1yZWdpc3RlcmVkSW5zdGFuY2Upe2lmKDA9PT1yZWdpc3RlcmVkSW5zdGFuY2UuJCQuY291bnQudmFsdWUpe3JlZ2lzdGVyZWRJbnN0YW5jZS4kJC5wdHI9cmF3UG9pbnRlcjtyZWdpc3RlcmVkSW5zdGFuY2UuJCQuc21hcnRQdHI9cHRyO3JldHVybiByZWdpc3RlcmVkSW5zdGFuY2VbXCJjbG9uZVwiXSgpfWVsc2V7dmFyIHJ2PXJlZ2lzdGVyZWRJbnN0YW5jZVtcImNsb25lXCJdKCk7dGhpcy5kZXN0cnVjdG9yKHB0cik7cmV0dXJuIHJ2fX1mdW5jdGlvbiBtYWtlRGVmYXVsdEhhbmRsZSgpe2lmKHRoaXMuaXNTbWFydFBvaW50ZXIpe3JldHVybiBtYWtlQ2xhc3NIYW5kbGUodGhpcy5yZWdpc3RlcmVkQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGUse3B0clR5cGU6dGhpcy5wb2ludGVlVHlwZSxwdHI6cmF3UG9pbnRlcixzbWFydFB0clR5cGU6dGhpcyxzbWFydFB0cjpwdHJ9KX1lbHNle3JldHVybiBtYWtlQ2xhc3NIYW5kbGUodGhpcy5yZWdpc3RlcmVkQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGUse3B0clR5cGU6dGhpcyxwdHI6cHRyfSl9fXZhciBhY3R1YWxUeXBlPXRoaXMucmVnaXN0ZXJlZENsYXNzLmdldEFjdHVhbFR5cGUocmF3UG9pbnRlcik7dmFyIHJlZ2lzdGVyZWRQb2ludGVyUmVjb3JkPXJlZ2lzdGVyZWRQb2ludGVyc1thY3R1YWxUeXBlXTtpZighcmVnaXN0ZXJlZFBvaW50ZXJSZWNvcmQpe3JldHVybiBtYWtlRGVmYXVsdEhhbmRsZS5jYWxsKHRoaXMpfXZhciB0b1R5cGU7aWYodGhpcy5pc0NvbnN0KXt0b1R5cGU9cmVnaXN0ZXJlZFBvaW50ZXJSZWNvcmQuY29uc3RQb2ludGVyVHlwZX1lbHNle3RvVHlwZT1yZWdpc3RlcmVkUG9pbnRlclJlY29yZC5wb2ludGVyVHlwZX12YXIgZHA9ZG93bmNhc3RQb2ludGVyKHJhd1BvaW50ZXIsdGhpcy5yZWdpc3RlcmVkQ2xhc3MsdG9UeXBlLnJlZ2lzdGVyZWRDbGFzcyk7aWYoZHA9PT1udWxsKXtyZXR1cm4gbWFrZURlZmF1bHRIYW5kbGUuY2FsbCh0aGlzKX1pZih0aGlzLmlzU21hcnRQb2ludGVyKXtyZXR1cm4gbWFrZUNsYXNzSGFuZGxlKHRvVHlwZS5yZWdpc3RlcmVkQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGUse3B0clR5cGU6dG9UeXBlLHB0cjpkcCxzbWFydFB0clR5cGU6dGhpcyxzbWFydFB0cjpwdHJ9KX1lbHNle3JldHVybiBtYWtlQ2xhc3NIYW5kbGUodG9UeXBlLnJlZ2lzdGVyZWRDbGFzcy5pbnN0YW5jZVByb3RvdHlwZSx7cHRyVHlwZTp0b1R5cGUscHRyOmRwfSl9fWZ1bmN0aW9uIGF0dGFjaEZpbmFsaXplcihoYW5kbGUpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgRmluYWxpemF0aW9uUmVnaXN0cnkpe2F0dGFjaEZpbmFsaXplcj0oaGFuZGxlPT5oYW5kbGUpO3JldHVybiBoYW5kbGV9ZmluYWxpemF0aW9uUmVnaXN0cnk9bmV3IEZpbmFsaXphdGlvblJlZ2lzdHJ5KGluZm89PntyZWxlYXNlQ2xhc3NIYW5kbGUoaW5mby4kJCl9KTthdHRhY2hGaW5hbGl6ZXI9KGhhbmRsZT0+e3ZhciAkJD1oYW5kbGUuJCQ7dmFyIGhhc1NtYXJ0UHRyPSEhJCQuc21hcnRQdHI7aWYoaGFzU21hcnRQdHIpe3ZhciBpbmZvPXskJDokJH07ZmluYWxpemF0aW9uUmVnaXN0cnkucmVnaXN0ZXIoaGFuZGxlLGluZm8saGFuZGxlKX1yZXR1cm4gaGFuZGxlfSk7ZGV0YWNoRmluYWxpemVyPShoYW5kbGU9PmZpbmFsaXphdGlvblJlZ2lzdHJ5LnVucmVnaXN0ZXIoaGFuZGxlKSk7cmV0dXJuIGF0dGFjaEZpbmFsaXplcihoYW5kbGUpfWZ1bmN0aW9uIENsYXNzSGFuZGxlX2Nsb25lKCl7aWYoIXRoaXMuJCQucHRyKXt0aHJvd0luc3RhbmNlQWxyZWFkeURlbGV0ZWQodGhpcyl9aWYodGhpcy4kJC5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSl7dGhpcy4kJC5jb3VudC52YWx1ZSs9MTtyZXR1cm4gdGhpc31lbHNle3ZhciBjbG9uZT1hdHRhY2hGaW5hbGl6ZXIoT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykseyQkOnt2YWx1ZTpzaGFsbG93Q29weUludGVybmFsUG9pbnRlcih0aGlzLiQkKX19KSk7Y2xvbmUuJCQuY291bnQudmFsdWUrPTE7Y2xvbmUuJCQuZGVsZXRlU2NoZWR1bGVkPWZhbHNlO3JldHVybiBjbG9uZX19ZnVuY3Rpb24gQ2xhc3NIYW5kbGVfZGVsZXRlKCl7aWYoIXRoaXMuJCQucHRyKXt0aHJvd0luc3RhbmNlQWxyZWFkeURlbGV0ZWQodGhpcyl9aWYodGhpcy4kJC5kZWxldGVTY2hlZHVsZWQmJiF0aGlzLiQkLnByZXNlcnZlUG9pbnRlck9uRGVsZXRlKXt0aHJvd0JpbmRpbmdFcnJvcihcIk9iamVjdCBhbHJlYWR5IHNjaGVkdWxlZCBmb3IgZGVsZXRpb25cIil9ZGV0YWNoRmluYWxpemVyKHRoaXMpO3JlbGVhc2VDbGFzc0hhbmRsZSh0aGlzLiQkKTtpZighdGhpcy4kJC5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSl7dGhpcy4kJC5zbWFydFB0cj11bmRlZmluZWQ7dGhpcy4kJC5wdHI9dW5kZWZpbmVkfX1mdW5jdGlvbiBDbGFzc0hhbmRsZV9pc0RlbGV0ZWQoKXtyZXR1cm4hdGhpcy4kJC5wdHJ9ZnVuY3Rpb24gQ2xhc3NIYW5kbGVfZGVsZXRlTGF0ZXIoKXtpZighdGhpcy4kJC5wdHIpe3Rocm93SW5zdGFuY2VBbHJlYWR5RGVsZXRlZCh0aGlzKX1pZih0aGlzLiQkLmRlbGV0ZVNjaGVkdWxlZCYmIXRoaXMuJCQucHJlc2VydmVQb2ludGVyT25EZWxldGUpe3Rocm93QmluZGluZ0Vycm9yKFwiT2JqZWN0IGFscmVhZHkgc2NoZWR1bGVkIGZvciBkZWxldGlvblwiKX1kZWxldGlvblF1ZXVlLnB1c2godGhpcyk7aWYoZGVsZXRpb25RdWV1ZS5sZW5ndGg9PT0xJiZkZWxheUZ1bmN0aW9uKXtkZWxheUZ1bmN0aW9uKGZsdXNoUGVuZGluZ0RlbGV0ZXMpfXRoaXMuJCQuZGVsZXRlU2NoZWR1bGVkPXRydWU7cmV0dXJuIHRoaXN9ZnVuY3Rpb24gaW5pdF9DbGFzc0hhbmRsZSgpe0NsYXNzSGFuZGxlLnByb3RvdHlwZVtcImlzQWxpYXNPZlwiXT1DbGFzc0hhbmRsZV9pc0FsaWFzT2Y7Q2xhc3NIYW5kbGUucHJvdG90eXBlW1wiY2xvbmVcIl09Q2xhc3NIYW5kbGVfY2xvbmU7Q2xhc3NIYW5kbGUucHJvdG90eXBlW1wiZGVsZXRlXCJdPUNsYXNzSGFuZGxlX2RlbGV0ZTtDbGFzc0hhbmRsZS5wcm90b3R5cGVbXCJpc0RlbGV0ZWRcIl09Q2xhc3NIYW5kbGVfaXNEZWxldGVkO0NsYXNzSGFuZGxlLnByb3RvdHlwZVtcImRlbGV0ZUxhdGVyXCJdPUNsYXNzSGFuZGxlX2RlbGV0ZUxhdGVyfWZ1bmN0aW9uIENsYXNzSGFuZGxlKCl7fWZ1bmN0aW9uIGVuc3VyZU92ZXJsb2FkVGFibGUocHJvdG8sbWV0aG9kTmFtZSxodW1hbk5hbWUpe2lmKHVuZGVmaW5lZD09PXByb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGUpe3ZhciBwcmV2RnVuYz1wcm90b1ttZXRob2ROYW1lXTtwcm90b1ttZXRob2ROYW1lXT1mdW5jdGlvbigpe2lmKCFwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlLmhhc093blByb3BlcnR5KGFyZ3VtZW50cy5sZW5ndGgpKXt0aHJvd0JpbmRpbmdFcnJvcihcIkZ1bmN0aW9uICdcIitodW1hbk5hbWUrXCInIGNhbGxlZCB3aXRoIGFuIGludmFsaWQgbnVtYmVyIG9mIGFyZ3VtZW50cyAoXCIrYXJndW1lbnRzLmxlbmd0aCtcIikgLSBleHBlY3RzIG9uZSBvZiAoXCIrcHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZStcIikhXCIpfXJldHVybiBwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlW2FyZ3VtZW50cy5sZW5ndGhdLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07cHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZT1bXTtwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlW3ByZXZGdW5jLmFyZ0NvdW50XT1wcmV2RnVuY319ZnVuY3Rpb24gZXhwb3NlUHVibGljU3ltYm9sKG5hbWUsdmFsdWUsbnVtQXJndW1lbnRzKXtpZihNb2R1bGUuaGFzT3duUHJvcGVydHkobmFtZSkpe2lmKHVuZGVmaW5lZD09PW51bUFyZ3VtZW50c3x8dW5kZWZpbmVkIT09TW9kdWxlW25hbWVdLm92ZXJsb2FkVGFibGUmJnVuZGVmaW5lZCE9PU1vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlW251bUFyZ3VtZW50c10pe3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IHJlZ2lzdGVyIHB1YmxpYyBuYW1lICdcIituYW1lK1wiJyB0d2ljZVwiKX1lbnN1cmVPdmVybG9hZFRhYmxlKE1vZHVsZSxuYW1lLG5hbWUpO2lmKE1vZHVsZS5oYXNPd25Qcm9wZXJ0eShudW1Bcmd1bWVudHMpKXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCByZWdpc3RlciBtdWx0aXBsZSBvdmVybG9hZHMgb2YgYSBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIG51bWJlciBvZiBhcmd1bWVudHMgKFwiK251bUFyZ3VtZW50cytcIikhXCIpfU1vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlW251bUFyZ3VtZW50c109dmFsdWV9ZWxzZXtNb2R1bGVbbmFtZV09dmFsdWU7aWYodW5kZWZpbmVkIT09bnVtQXJndW1lbnRzKXtNb2R1bGVbbmFtZV0ubnVtQXJndW1lbnRzPW51bUFyZ3VtZW50c319fWZ1bmN0aW9uIFJlZ2lzdGVyZWRDbGFzcyhuYW1lLGNvbnN0cnVjdG9yLGluc3RhbmNlUHJvdG90eXBlLHJhd0Rlc3RydWN0b3IsYmFzZUNsYXNzLGdldEFjdHVhbFR5cGUsdXBjYXN0LGRvd25jYXN0KXt0aGlzLm5hbWU9bmFtZTt0aGlzLmNvbnN0cnVjdG9yPWNvbnN0cnVjdG9yO3RoaXMuaW5zdGFuY2VQcm90b3R5cGU9aW5zdGFuY2VQcm90b3R5cGU7dGhpcy5yYXdEZXN0cnVjdG9yPXJhd0Rlc3RydWN0b3I7dGhpcy5iYXNlQ2xhc3M9YmFzZUNsYXNzO3RoaXMuZ2V0QWN0dWFsVHlwZT1nZXRBY3R1YWxUeXBlO3RoaXMudXBjYXN0PXVwY2FzdDt0aGlzLmRvd25jYXN0PWRvd25jYXN0O3RoaXMucHVyZVZpcnR1YWxGdW5jdGlvbnM9W119ZnVuY3Rpb24gdXBjYXN0UG9pbnRlcihwdHIscHRyQ2xhc3MsZGVzaXJlZENsYXNzKXt3aGlsZShwdHJDbGFzcyE9PWRlc2lyZWRDbGFzcyl7aWYoIXB0ckNsYXNzLnVwY2FzdCl7dGhyb3dCaW5kaW5nRXJyb3IoXCJFeHBlY3RlZCBudWxsIG9yIGluc3RhbmNlIG9mIFwiK2Rlc2lyZWRDbGFzcy5uYW1lK1wiLCBnb3QgYW4gaW5zdGFuY2Ugb2YgXCIrcHRyQ2xhc3MubmFtZSl9cHRyPXB0ckNsYXNzLnVwY2FzdChwdHIpO3B0ckNsYXNzPXB0ckNsYXNzLmJhc2VDbGFzc31yZXR1cm4gcHRyfWZ1bmN0aW9uIGNvbnN0Tm9TbWFydFB0clJhd1BvaW50ZXJUb1dpcmVUeXBlKGRlc3RydWN0b3JzLGhhbmRsZSl7aWYoaGFuZGxlPT09bnVsbCl7aWYodGhpcy5pc1JlZmVyZW5jZSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJudWxsIGlzIG5vdCBhIHZhbGlkIFwiK3RoaXMubmFtZSl9cmV0dXJuIDB9aWYoIWhhbmRsZS4kJCl7dGhyb3dCaW5kaW5nRXJyb3IoJ0Nhbm5vdCBwYXNzIFwiJytfZW1iaW5kX3JlcHIoaGFuZGxlKSsnXCIgYXMgYSAnK3RoaXMubmFtZSl9aWYoIWhhbmRsZS4kJC5wdHIpe3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IHBhc3MgZGVsZXRlZCBvYmplY3QgYXMgYSBwb2ludGVyIG9mIHR5cGUgXCIrdGhpcy5uYW1lKX12YXIgaGFuZGxlQ2xhc3M9aGFuZGxlLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzO3ZhciBwdHI9dXBjYXN0UG9pbnRlcihoYW5kbGUuJCQucHRyLGhhbmRsZUNsYXNzLHRoaXMucmVnaXN0ZXJlZENsYXNzKTtyZXR1cm4gcHRyfWZ1bmN0aW9uIGdlbmVyaWNQb2ludGVyVG9XaXJlVHlwZShkZXN0cnVjdG9ycyxoYW5kbGUpe3ZhciBwdHI7aWYoaGFuZGxlPT09bnVsbCl7aWYodGhpcy5pc1JlZmVyZW5jZSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJudWxsIGlzIG5vdCBhIHZhbGlkIFwiK3RoaXMubmFtZSl9aWYodGhpcy5pc1NtYXJ0UG9pbnRlcil7cHRyPXRoaXMucmF3Q29uc3RydWN0b3IoKTtpZihkZXN0cnVjdG9ycyE9PW51bGwpe2Rlc3RydWN0b3JzLnB1c2godGhpcy5yYXdEZXN0cnVjdG9yLHB0cil9cmV0dXJuIHB0cn1lbHNle3JldHVybiAwfX1pZighaGFuZGxlLiQkKXt0aHJvd0JpbmRpbmdFcnJvcignQ2Fubm90IHBhc3MgXCInK19lbWJpbmRfcmVwcihoYW5kbGUpKydcIiBhcyBhICcrdGhpcy5uYW1lKX1pZighaGFuZGxlLiQkLnB0cil7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgcGFzcyBkZWxldGVkIG9iamVjdCBhcyBhIHBvaW50ZXIgb2YgdHlwZSBcIit0aGlzLm5hbWUpfWlmKCF0aGlzLmlzQ29uc3QmJmhhbmRsZS4kJC5wdHJUeXBlLmlzQ29uc3Qpe3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IGNvbnZlcnQgYXJndW1lbnQgb2YgdHlwZSBcIisoaGFuZGxlLiQkLnNtYXJ0UHRyVHlwZT9oYW5kbGUuJCQuc21hcnRQdHJUeXBlLm5hbWU6aGFuZGxlLiQkLnB0clR5cGUubmFtZSkrXCIgdG8gcGFyYW1ldGVyIHR5cGUgXCIrdGhpcy5uYW1lKX12YXIgaGFuZGxlQ2xhc3M9aGFuZGxlLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzO3B0cj11cGNhc3RQb2ludGVyKGhhbmRsZS4kJC5wdHIsaGFuZGxlQ2xhc3MsdGhpcy5yZWdpc3RlcmVkQ2xhc3MpO2lmKHRoaXMuaXNTbWFydFBvaW50ZXIpe2lmKHVuZGVmaW5lZD09PWhhbmRsZS4kJC5zbWFydFB0cil7dGhyb3dCaW5kaW5nRXJyb3IoXCJQYXNzaW5nIHJhdyBwb2ludGVyIHRvIHNtYXJ0IHBvaW50ZXIgaXMgaWxsZWdhbFwiKX1zd2l0Y2godGhpcy5zaGFyaW5nUG9saWN5KXtjYXNlIDA6aWYoaGFuZGxlLiQkLnNtYXJ0UHRyVHlwZT09PXRoaXMpe3B0cj1oYW5kbGUuJCQuc21hcnRQdHJ9ZWxzZXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCBjb252ZXJ0IGFyZ3VtZW50IG9mIHR5cGUgXCIrKGhhbmRsZS4kJC5zbWFydFB0clR5cGU/aGFuZGxlLiQkLnNtYXJ0UHRyVHlwZS5uYW1lOmhhbmRsZS4kJC5wdHJUeXBlLm5hbWUpK1wiIHRvIHBhcmFtZXRlciB0eXBlIFwiK3RoaXMubmFtZSl9YnJlYWs7Y2FzZSAxOnB0cj1oYW5kbGUuJCQuc21hcnRQdHI7YnJlYWs7Y2FzZSAyOmlmKGhhbmRsZS4kJC5zbWFydFB0clR5cGU9PT10aGlzKXtwdHI9aGFuZGxlLiQkLnNtYXJ0UHRyfWVsc2V7dmFyIGNsb25lZEhhbmRsZT1oYW5kbGVbXCJjbG9uZVwiXSgpO3B0cj10aGlzLnJhd1NoYXJlKHB0cixFbXZhbC50b0hhbmRsZShmdW5jdGlvbigpe2Nsb25lZEhhbmRsZVtcImRlbGV0ZVwiXSgpfSkpO2lmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaCh0aGlzLnJhd0Rlc3RydWN0b3IscHRyKX19YnJlYWs7ZGVmYXVsdDp0aHJvd0JpbmRpbmdFcnJvcihcIlVuc3VwcG9ydGluZyBzaGFyaW5nIHBvbGljeVwiKX19cmV0dXJuIHB0cn1mdW5jdGlvbiBub25Db25zdE5vU21hcnRQdHJSYXdQb2ludGVyVG9XaXJlVHlwZShkZXN0cnVjdG9ycyxoYW5kbGUpe2lmKGhhbmRsZT09PW51bGwpe2lmKHRoaXMuaXNSZWZlcmVuY2Upe3Rocm93QmluZGluZ0Vycm9yKFwibnVsbCBpcyBub3QgYSB2YWxpZCBcIit0aGlzLm5hbWUpfXJldHVybiAwfWlmKCFoYW5kbGUuJCQpe3Rocm93QmluZGluZ0Vycm9yKCdDYW5ub3QgcGFzcyBcIicrX2VtYmluZF9yZXByKGhhbmRsZSkrJ1wiIGFzIGEgJyt0aGlzLm5hbWUpfWlmKCFoYW5kbGUuJCQucHRyKXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCBwYXNzIGRlbGV0ZWQgb2JqZWN0IGFzIGEgcG9pbnRlciBvZiB0eXBlIFwiK3RoaXMubmFtZSl9aWYoaGFuZGxlLiQkLnB0clR5cGUuaXNDb25zdCl7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgY29udmVydCBhcmd1bWVudCBvZiB0eXBlIFwiK2hhbmRsZS4kJC5wdHJUeXBlLm5hbWUrXCIgdG8gcGFyYW1ldGVyIHR5cGUgXCIrdGhpcy5uYW1lKX12YXIgaGFuZGxlQ2xhc3M9aGFuZGxlLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzO3ZhciBwdHI9dXBjYXN0UG9pbnRlcihoYW5kbGUuJCQucHRyLGhhbmRsZUNsYXNzLHRoaXMucmVnaXN0ZXJlZENsYXNzKTtyZXR1cm4gcHRyfWZ1bmN0aW9uIFJlZ2lzdGVyZWRQb2ludGVyX2dldFBvaW50ZWUocHRyKXtpZih0aGlzLnJhd0dldFBvaW50ZWUpe3B0cj10aGlzLnJhd0dldFBvaW50ZWUocHRyKX1yZXR1cm4gcHRyfWZ1bmN0aW9uIFJlZ2lzdGVyZWRQb2ludGVyX2Rlc3RydWN0b3IocHRyKXtpZih0aGlzLnJhd0Rlc3RydWN0b3Ipe3RoaXMucmF3RGVzdHJ1Y3RvcihwdHIpfX1mdW5jdGlvbiBSZWdpc3RlcmVkUG9pbnRlcl9kZWxldGVPYmplY3QoaGFuZGxlKXtpZihoYW5kbGUhPT1udWxsKXtoYW5kbGVbXCJkZWxldGVcIl0oKX19ZnVuY3Rpb24gaW5pdF9SZWdpc3RlcmVkUG9pbnRlcigpe1JlZ2lzdGVyZWRQb2ludGVyLnByb3RvdHlwZS5nZXRQb2ludGVlPVJlZ2lzdGVyZWRQb2ludGVyX2dldFBvaW50ZWU7UmVnaXN0ZXJlZFBvaW50ZXIucHJvdG90eXBlLmRlc3RydWN0b3I9UmVnaXN0ZXJlZFBvaW50ZXJfZGVzdHJ1Y3RvcjtSZWdpc3RlcmVkUG9pbnRlci5wcm90b3R5cGVbXCJhcmdQYWNrQWR2YW5jZVwiXT04O1JlZ2lzdGVyZWRQb2ludGVyLnByb3RvdHlwZVtcInJlYWRWYWx1ZUZyb21Qb2ludGVyXCJdPXNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyO1JlZ2lzdGVyZWRQb2ludGVyLnByb3RvdHlwZVtcImRlbGV0ZU9iamVjdFwiXT1SZWdpc3RlcmVkUG9pbnRlcl9kZWxldGVPYmplY3Q7UmVnaXN0ZXJlZFBvaW50ZXIucHJvdG90eXBlW1wiZnJvbVdpcmVUeXBlXCJdPVJlZ2lzdGVyZWRQb2ludGVyX2Zyb21XaXJlVHlwZX1mdW5jdGlvbiBSZWdpc3RlcmVkUG9pbnRlcihuYW1lLHJlZ2lzdGVyZWRDbGFzcyxpc1JlZmVyZW5jZSxpc0NvbnN0LGlzU21hcnRQb2ludGVyLHBvaW50ZWVUeXBlLHNoYXJpbmdQb2xpY3kscmF3R2V0UG9pbnRlZSxyYXdDb25zdHJ1Y3RvcixyYXdTaGFyZSxyYXdEZXN0cnVjdG9yKXt0aGlzLm5hbWU9bmFtZTt0aGlzLnJlZ2lzdGVyZWRDbGFzcz1yZWdpc3RlcmVkQ2xhc3M7dGhpcy5pc1JlZmVyZW5jZT1pc1JlZmVyZW5jZTt0aGlzLmlzQ29uc3Q9aXNDb25zdDt0aGlzLmlzU21hcnRQb2ludGVyPWlzU21hcnRQb2ludGVyO3RoaXMucG9pbnRlZVR5cGU9cG9pbnRlZVR5cGU7dGhpcy5zaGFyaW5nUG9saWN5PXNoYXJpbmdQb2xpY3k7dGhpcy5yYXdHZXRQb2ludGVlPXJhd0dldFBvaW50ZWU7dGhpcy5yYXdDb25zdHJ1Y3Rvcj1yYXdDb25zdHJ1Y3Rvcjt0aGlzLnJhd1NoYXJlPXJhd1NoYXJlO3RoaXMucmF3RGVzdHJ1Y3Rvcj1yYXdEZXN0cnVjdG9yO2lmKCFpc1NtYXJ0UG9pbnRlciYmcmVnaXN0ZXJlZENsYXNzLmJhc2VDbGFzcz09PXVuZGVmaW5lZCl7aWYoaXNDb25zdCl7dGhpc1tcInRvV2lyZVR5cGVcIl09Y29uc3ROb1NtYXJ0UHRyUmF3UG9pbnRlclRvV2lyZVR5cGU7dGhpcy5kZXN0cnVjdG9yRnVuY3Rpb249bnVsbH1lbHNle3RoaXNbXCJ0b1dpcmVUeXBlXCJdPW5vbkNvbnN0Tm9TbWFydFB0clJhd1BvaW50ZXJUb1dpcmVUeXBlO3RoaXMuZGVzdHJ1Y3RvckZ1bmN0aW9uPW51bGx9fWVsc2V7dGhpc1tcInRvV2lyZVR5cGVcIl09Z2VuZXJpY1BvaW50ZXJUb1dpcmVUeXBlfX1mdW5jdGlvbiByZXBsYWNlUHVibGljU3ltYm9sKG5hbWUsdmFsdWUsbnVtQXJndW1lbnRzKXtpZighTW9kdWxlLmhhc093blByb3BlcnR5KG5hbWUpKXt0aHJvd0ludGVybmFsRXJyb3IoXCJSZXBsYWNpbmcgbm9uZXhpc3RhbnQgcHVibGljIHN5bWJvbFwiKX1pZih1bmRlZmluZWQhPT1Nb2R1bGVbbmFtZV0ub3ZlcmxvYWRUYWJsZSYmdW5kZWZpbmVkIT09bnVtQXJndW1lbnRzKXtNb2R1bGVbbmFtZV0ub3ZlcmxvYWRUYWJsZVtudW1Bcmd1bWVudHNdPXZhbHVlfWVsc2V7TW9kdWxlW25hbWVdPXZhbHVlO01vZHVsZVtuYW1lXS5hcmdDb3VudD1udW1Bcmd1bWVudHN9fWZ1bmN0aW9uIGR5bkNhbGxMZWdhY3koc2lnLHB0cixhcmdzKXt2YXIgZj1Nb2R1bGVbXCJkeW5DYWxsX1wiK3NpZ107cmV0dXJuIGFyZ3MmJmFyZ3MubGVuZ3RoP2YuYXBwbHkobnVsbCxbcHRyXS5jb25jYXQoYXJncykpOmYuY2FsbChudWxsLHB0cil9ZnVuY3Rpb24gZHluQ2FsbChzaWcscHRyLGFyZ3Mpe2lmKHNpZy5pbmNsdWRlcyhcImpcIikpe3JldHVybiBkeW5DYWxsTGVnYWN5KHNpZyxwdHIsYXJncyl9cmV0dXJuIGdldFdhc21UYWJsZUVudHJ5KHB0cikuYXBwbHkobnVsbCxhcmdzKX1mdW5jdGlvbiBnZXREeW5DYWxsZXIoc2lnLHB0cil7dmFyIGFyZ0NhY2hlPVtdO3JldHVybiBmdW5jdGlvbigpe2FyZ0NhY2hlLmxlbmd0aD0wO09iamVjdC5hc3NpZ24oYXJnQ2FjaGUsYXJndW1lbnRzKTtyZXR1cm4gZHluQ2FsbChzaWcscHRyLGFyZ0NhY2hlKX19ZnVuY3Rpb24gZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oc2lnbmF0dXJlLHJhd0Z1bmN0aW9uKXtzaWduYXR1cmU9cmVhZExhdGluMVN0cmluZyhzaWduYXR1cmUpO2Z1bmN0aW9uIG1ha2VEeW5DYWxsZXIoKXtpZihzaWduYXR1cmUuaW5jbHVkZXMoXCJqXCIpKXtyZXR1cm4gZ2V0RHluQ2FsbGVyKHNpZ25hdHVyZSxyYXdGdW5jdGlvbil9cmV0dXJuIGdldFdhc21UYWJsZUVudHJ5KHJhd0Z1bmN0aW9uKX12YXIgZnA9bWFrZUR5bkNhbGxlcigpO2lmKHR5cGVvZiBmcCE9XCJmdW5jdGlvblwiKXt0aHJvd0JpbmRpbmdFcnJvcihcInVua25vd24gZnVuY3Rpb24gcG9pbnRlciB3aXRoIHNpZ25hdHVyZSBcIitzaWduYXR1cmUrXCI6IFwiK3Jhd0Z1bmN0aW9uKX1yZXR1cm4gZnB9dmFyIFVuYm91bmRUeXBlRXJyb3I9dW5kZWZpbmVkO2Z1bmN0aW9uIGdldFR5cGVOYW1lKHR5cGUpe3ZhciBwdHI9X19fZ2V0VHlwZU5hbWUodHlwZSk7dmFyIHJ2PXJlYWRMYXRpbjFTdHJpbmcocHRyKTtfZnJlZShwdHIpO3JldHVybiBydn1mdW5jdGlvbiB0aHJvd1VuYm91bmRUeXBlRXJyb3IobWVzc2FnZSx0eXBlcyl7dmFyIHVuYm91bmRUeXBlcz1bXTt2YXIgc2Vlbj17fTtmdW5jdGlvbiB2aXNpdCh0eXBlKXtpZihzZWVuW3R5cGVdKXtyZXR1cm59aWYocmVnaXN0ZXJlZFR5cGVzW3R5cGVdKXtyZXR1cm59aWYodHlwZURlcGVuZGVuY2llc1t0eXBlXSl7dHlwZURlcGVuZGVuY2llc1t0eXBlXS5mb3JFYWNoKHZpc2l0KTtyZXR1cm59dW5ib3VuZFR5cGVzLnB1c2godHlwZSk7c2Vlblt0eXBlXT10cnVlfXR5cGVzLmZvckVhY2godmlzaXQpO3Rocm93IG5ldyBVbmJvdW5kVHlwZUVycm9yKG1lc3NhZ2UrXCI6IFwiK3VuYm91bmRUeXBlcy5tYXAoZ2V0VHlwZU5hbWUpLmpvaW4oW1wiLCBcIl0pKX1mdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9jbGFzcyhyYXdUeXBlLHJhd1BvaW50ZXJUeXBlLHJhd0NvbnN0UG9pbnRlclR5cGUsYmFzZUNsYXNzUmF3VHlwZSxnZXRBY3R1YWxUeXBlU2lnbmF0dXJlLGdldEFjdHVhbFR5cGUsdXBjYXN0U2lnbmF0dXJlLHVwY2FzdCxkb3duY2FzdFNpZ25hdHVyZSxkb3duY2FzdCxuYW1lLGRlc3RydWN0b3JTaWduYXR1cmUscmF3RGVzdHJ1Y3Rvcil7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO2dldEFjdHVhbFR5cGU9ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZ2V0QWN0dWFsVHlwZVNpZ25hdHVyZSxnZXRBY3R1YWxUeXBlKTtpZih1cGNhc3Qpe3VwY2FzdD1lbWJpbmRfX3JlcXVpcmVGdW5jdGlvbih1cGNhc3RTaWduYXR1cmUsdXBjYXN0KX1pZihkb3duY2FzdCl7ZG93bmNhc3Q9ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZG93bmNhc3RTaWduYXR1cmUsZG93bmNhc3QpfXJhd0Rlc3RydWN0b3I9ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZGVzdHJ1Y3RvclNpZ25hdHVyZSxyYXdEZXN0cnVjdG9yKTt2YXIgbGVnYWxGdW5jdGlvbk5hbWU9bWFrZUxlZ2FsRnVuY3Rpb25OYW1lKG5hbWUpO2V4cG9zZVB1YmxpY1N5bWJvbChsZWdhbEZ1bmN0aW9uTmFtZSxmdW5jdGlvbigpe3Rocm93VW5ib3VuZFR5cGVFcnJvcihcIkNhbm5vdCBjb25zdHJ1Y3QgXCIrbmFtZStcIiBkdWUgdG8gdW5ib3VuZCB0eXBlc1wiLFtiYXNlQ2xhc3NSYXdUeXBlXSl9KTt3aGVuRGVwZW5kZW50VHlwZXNBcmVSZXNvbHZlZChbcmF3VHlwZSxyYXdQb2ludGVyVHlwZSxyYXdDb25zdFBvaW50ZXJUeXBlXSxiYXNlQ2xhc3NSYXdUeXBlP1tiYXNlQ2xhc3NSYXdUeXBlXTpbXSxmdW5jdGlvbihiYXNlKXtiYXNlPWJhc2VbMF07dmFyIGJhc2VDbGFzczt2YXIgYmFzZVByb3RvdHlwZTtpZihiYXNlQ2xhc3NSYXdUeXBlKXtiYXNlQ2xhc3M9YmFzZS5yZWdpc3RlcmVkQ2xhc3M7YmFzZVByb3RvdHlwZT1iYXNlQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGV9ZWxzZXtiYXNlUHJvdG90eXBlPUNsYXNzSGFuZGxlLnByb3RvdHlwZX12YXIgY29uc3RydWN0b3I9Y3JlYXRlTmFtZWRGdW5jdGlvbihsZWdhbEZ1bmN0aW9uTmFtZSxmdW5jdGlvbigpe2lmKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSE9PWluc3RhbmNlUHJvdG90eXBlKXt0aHJvdyBuZXcgQmluZGluZ0Vycm9yKFwiVXNlICduZXcnIHRvIGNvbnN0cnVjdCBcIituYW1lKX1pZih1bmRlZmluZWQ9PT1yZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keSl7dGhyb3cgbmV3IEJpbmRpbmdFcnJvcihuYW1lK1wiIGhhcyBubyBhY2Nlc3NpYmxlIGNvbnN0cnVjdG9yXCIpfXZhciBib2R5PXJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5W2FyZ3VtZW50cy5sZW5ndGhdO2lmKHVuZGVmaW5lZD09PWJvZHkpe3Rocm93IG5ldyBCaW5kaW5nRXJyb3IoXCJUcmllZCB0byBpbnZva2UgY3RvciBvZiBcIituYW1lK1wiIHdpdGggaW52YWxpZCBudW1iZXIgb2YgcGFyYW1ldGVycyAoXCIrYXJndW1lbnRzLmxlbmd0aCtcIikgLSBleHBlY3RlZCAoXCIrT2JqZWN0LmtleXMocmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHkpLnRvU3RyaW5nKCkrXCIpIHBhcmFtZXRlcnMgaW5zdGVhZCFcIil9cmV0dXJuIGJvZHkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSk7dmFyIGluc3RhbmNlUHJvdG90eXBlPU9iamVjdC5jcmVhdGUoYmFzZVByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmNvbnN0cnVjdG9yfX0pO2NvbnN0cnVjdG9yLnByb3RvdHlwZT1pbnN0YW5jZVByb3RvdHlwZTt2YXIgcmVnaXN0ZXJlZENsYXNzPW5ldyBSZWdpc3RlcmVkQ2xhc3MobmFtZSxjb25zdHJ1Y3RvcixpbnN0YW5jZVByb3RvdHlwZSxyYXdEZXN0cnVjdG9yLGJhc2VDbGFzcyxnZXRBY3R1YWxUeXBlLHVwY2FzdCxkb3duY2FzdCk7dmFyIHJlZmVyZW5jZUNvbnZlcnRlcj1uZXcgUmVnaXN0ZXJlZFBvaW50ZXIobmFtZSxyZWdpc3RlcmVkQ2xhc3MsdHJ1ZSxmYWxzZSxmYWxzZSk7dmFyIHBvaW50ZXJDb252ZXJ0ZXI9bmV3IFJlZ2lzdGVyZWRQb2ludGVyKG5hbWUrXCIqXCIscmVnaXN0ZXJlZENsYXNzLGZhbHNlLGZhbHNlLGZhbHNlKTt2YXIgY29uc3RQb2ludGVyQ29udmVydGVyPW5ldyBSZWdpc3RlcmVkUG9pbnRlcihuYW1lK1wiIGNvbnN0KlwiLHJlZ2lzdGVyZWRDbGFzcyxmYWxzZSx0cnVlLGZhbHNlKTtyZWdpc3RlcmVkUG9pbnRlcnNbcmF3VHlwZV09e3BvaW50ZXJUeXBlOnBvaW50ZXJDb252ZXJ0ZXIsY29uc3RQb2ludGVyVHlwZTpjb25zdFBvaW50ZXJDb252ZXJ0ZXJ9O3JlcGxhY2VQdWJsaWNTeW1ib2wobGVnYWxGdW5jdGlvbk5hbWUsY29uc3RydWN0b3IpO3JldHVybltyZWZlcmVuY2VDb252ZXJ0ZXIscG9pbnRlckNvbnZlcnRlcixjb25zdFBvaW50ZXJDb252ZXJ0ZXJdfSl9ZnVuY3Rpb24gaGVhcDMyVmVjdG9yVG9BcnJheShjb3VudCxmaXJzdEVsZW1lbnQpe3ZhciBhcnJheT1bXTtmb3IodmFyIGk9MDtpPGNvdW50O2krKyl7YXJyYXkucHVzaChIRUFQMzJbKGZpcnN0RWxlbWVudD4+MikraV0pfXJldHVybiBhcnJheX1mdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19jb25zdHJ1Y3RvcihyYXdDbGFzc1R5cGUsYXJnQ291bnQscmF3QXJnVHlwZXNBZGRyLGludm9rZXJTaWduYXR1cmUsaW52b2tlcixyYXdDb25zdHJ1Y3Rvcil7YXNzZXJ0KGFyZ0NvdW50PjApO3ZhciByYXdBcmdUeXBlcz1oZWFwMzJWZWN0b3JUb0FycmF5KGFyZ0NvdW50LHJhd0FyZ1R5cGVzQWRkcik7aW52b2tlcj1lbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihpbnZva2VyU2lnbmF0dXJlLGludm9rZXIpO3doZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtdLFtyYXdDbGFzc1R5cGVdLGZ1bmN0aW9uKGNsYXNzVHlwZSl7Y2xhc3NUeXBlPWNsYXNzVHlwZVswXTt2YXIgaHVtYW5OYW1lPVwiY29uc3RydWN0b3IgXCIrY2xhc3NUeXBlLm5hbWU7aWYodW5kZWZpbmVkPT09Y2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5KXtjbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHk9W119aWYodW5kZWZpbmVkIT09Y2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5W2FyZ0NvdW50LTFdKXt0aHJvdyBuZXcgQmluZGluZ0Vycm9yKFwiQ2Fubm90IHJlZ2lzdGVyIG11bHRpcGxlIGNvbnN0cnVjdG9ycyB3aXRoIGlkZW50aWNhbCBudW1iZXIgb2YgcGFyYW1ldGVycyAoXCIrKGFyZ0NvdW50LTEpK1wiKSBmb3IgY2xhc3MgJ1wiK2NsYXNzVHlwZS5uYW1lK1wiJyEgT3ZlcmxvYWQgcmVzb2x1dGlvbiBpcyBjdXJyZW50bHkgb25seSBwZXJmb3JtZWQgdXNpbmcgdGhlIHBhcmFtZXRlciBjb3VudCwgbm90IGFjdHVhbCB0eXBlIGluZm8hXCIpfWNsYXNzVHlwZS5yZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keVthcmdDb3VudC0xXT0oKCk9Pnt0aHJvd1VuYm91bmRUeXBlRXJyb3IoXCJDYW5ub3QgY29uc3RydWN0IFwiK2NsYXNzVHlwZS5uYW1lK1wiIGR1ZSB0byB1bmJvdW5kIHR5cGVzXCIscmF3QXJnVHlwZXMpfSk7d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10scmF3QXJnVHlwZXMsZnVuY3Rpb24oYXJnVHlwZXMpe2FyZ1R5cGVzLnNwbGljZSgxLDAsbnVsbCk7Y2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5W2FyZ0NvdW50LTFdPWNyYWZ0SW52b2tlckZ1bmN0aW9uKGh1bWFuTmFtZSxhcmdUeXBlcyxudWxsLGludm9rZXIscmF3Q29uc3RydWN0b3IpO3JldHVybltdfSk7cmV0dXJuW119KX1mdW5jdGlvbiBuZXdfKGNvbnN0cnVjdG9yLGFyZ3VtZW50TGlzdCl7aWYoIShjb25zdHJ1Y3RvciBpbnN0YW5jZW9mIEZ1bmN0aW9uKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIm5ld18gY2FsbGVkIHdpdGggY29uc3RydWN0b3IgdHlwZSBcIit0eXBlb2YgY29uc3RydWN0b3IrXCIgd2hpY2ggaXMgbm90IGEgZnVuY3Rpb25cIil9dmFyIGR1bW15PWNyZWF0ZU5hbWVkRnVuY3Rpb24oY29uc3RydWN0b3IubmFtZXx8XCJ1bmtub3duRnVuY3Rpb25OYW1lXCIsZnVuY3Rpb24oKXt9KTtkdW1teS5wcm90b3R5cGU9Y29uc3RydWN0b3IucHJvdG90eXBlO3ZhciBvYmo9bmV3IGR1bW15O3ZhciByPWNvbnN0cnVjdG9yLmFwcGx5KG9iaixhcmd1bWVudExpc3QpO3JldHVybiByIGluc3RhbmNlb2YgT2JqZWN0P3I6b2JqfWZ1bmN0aW9uIGNyYWZ0SW52b2tlckZ1bmN0aW9uKGh1bWFuTmFtZSxhcmdUeXBlcyxjbGFzc1R5cGUsY3BwSW52b2tlckZ1bmMsY3BwVGFyZ2V0RnVuYyl7dmFyIGFyZ0NvdW50PWFyZ1R5cGVzLmxlbmd0aDtpZihhcmdDb3VudDwyKXt0aHJvd0JpbmRpbmdFcnJvcihcImFyZ1R5cGVzIGFycmF5IHNpemUgbWlzbWF0Y2ghIE11c3QgYXQgbGVhc3QgZ2V0IHJldHVybiB2YWx1ZSBhbmQgJ3RoaXMnIHR5cGVzIVwiKX12YXIgaXNDbGFzc01ldGhvZEZ1bmM9YXJnVHlwZXNbMV0hPT1udWxsJiZjbGFzc1R5cGUhPT1udWxsO3ZhciBuZWVkc0Rlc3RydWN0b3JTdGFjaz1mYWxzZTtmb3IodmFyIGk9MTtpPGFyZ1R5cGVzLmxlbmd0aDsrK2kpe2lmKGFyZ1R5cGVzW2ldIT09bnVsbCYmYXJnVHlwZXNbaV0uZGVzdHJ1Y3RvckZ1bmN0aW9uPT09dW5kZWZpbmVkKXtuZWVkc0Rlc3RydWN0b3JTdGFjaz10cnVlO2JyZWFrfX12YXIgcmV0dXJucz1hcmdUeXBlc1swXS5uYW1lIT09XCJ2b2lkXCI7dmFyIGFyZ3NMaXN0PVwiXCI7dmFyIGFyZ3NMaXN0V2lyZWQ9XCJcIjtmb3IodmFyIGk9MDtpPGFyZ0NvdW50LTI7KytpKXthcmdzTGlzdCs9KGkhPT0wP1wiLCBcIjpcIlwiKStcImFyZ1wiK2k7YXJnc0xpc3RXaXJlZCs9KGkhPT0wP1wiLCBcIjpcIlwiKStcImFyZ1wiK2krXCJXaXJlZFwifXZhciBpbnZva2VyRm5Cb2R5PVwicmV0dXJuIGZ1bmN0aW9uIFwiK21ha2VMZWdhbEZ1bmN0aW9uTmFtZShodW1hbk5hbWUpK1wiKFwiK2FyZ3NMaXN0K1wiKSB7XFxuXCIrXCJpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gXCIrKGFyZ0NvdW50LTIpK1wiKSB7XFxuXCIrXCJ0aHJvd0JpbmRpbmdFcnJvcignZnVuY3Rpb24gXCIraHVtYW5OYW1lK1wiIGNhbGxlZCB3aXRoICcgKyBhcmd1bWVudHMubGVuZ3RoICsgJyBhcmd1bWVudHMsIGV4cGVjdGVkIFwiKyhhcmdDb3VudC0yKStcIiBhcmdzIScpO1xcblwiK1wifVxcblwiO2lmKG5lZWRzRGVzdHJ1Y3RvclN0YWNrKXtpbnZva2VyRm5Cb2R5Kz1cInZhciBkZXN0cnVjdG9ycyA9IFtdO1xcblwifXZhciBkdG9yU3RhY2s9bmVlZHNEZXN0cnVjdG9yU3RhY2s/XCJkZXN0cnVjdG9yc1wiOlwibnVsbFwiO3ZhciBhcmdzMT1bXCJ0aHJvd0JpbmRpbmdFcnJvclwiLFwiaW52b2tlclwiLFwiZm5cIixcInJ1bkRlc3RydWN0b3JzXCIsXCJyZXRUeXBlXCIsXCJjbGFzc1BhcmFtXCJdO3ZhciBhcmdzMj1bdGhyb3dCaW5kaW5nRXJyb3IsY3BwSW52b2tlckZ1bmMsY3BwVGFyZ2V0RnVuYyxydW5EZXN0cnVjdG9ycyxhcmdUeXBlc1swXSxhcmdUeXBlc1sxXV07aWYoaXNDbGFzc01ldGhvZEZ1bmMpe2ludm9rZXJGbkJvZHkrPVwidmFyIHRoaXNXaXJlZCA9IGNsYXNzUGFyYW0udG9XaXJlVHlwZShcIitkdG9yU3RhY2srXCIsIHRoaXMpO1xcblwifWZvcih2YXIgaT0wO2k8YXJnQ291bnQtMjsrK2kpe2ludm9rZXJGbkJvZHkrPVwidmFyIGFyZ1wiK2krXCJXaXJlZCA9IGFyZ1R5cGVcIitpK1wiLnRvV2lyZVR5cGUoXCIrZHRvclN0YWNrK1wiLCBhcmdcIitpK1wiKTsgLy8gXCIrYXJnVHlwZXNbaSsyXS5uYW1lK1wiXFxuXCI7YXJnczEucHVzaChcImFyZ1R5cGVcIitpKTthcmdzMi5wdXNoKGFyZ1R5cGVzW2krMl0pfWlmKGlzQ2xhc3NNZXRob2RGdW5jKXthcmdzTGlzdFdpcmVkPVwidGhpc1dpcmVkXCIrKGFyZ3NMaXN0V2lyZWQubGVuZ3RoPjA/XCIsIFwiOlwiXCIpK2FyZ3NMaXN0V2lyZWR9aW52b2tlckZuQm9keSs9KHJldHVybnM/XCJ2YXIgcnYgPSBcIjpcIlwiKStcImludm9rZXIoZm5cIisoYXJnc0xpc3RXaXJlZC5sZW5ndGg+MD9cIiwgXCI6XCJcIikrYXJnc0xpc3RXaXJlZCtcIik7XFxuXCI7aWYobmVlZHNEZXN0cnVjdG9yU3RhY2spe2ludm9rZXJGbkJvZHkrPVwicnVuRGVzdHJ1Y3RvcnMoZGVzdHJ1Y3RvcnMpO1xcblwifWVsc2V7Zm9yKHZhciBpPWlzQ2xhc3NNZXRob2RGdW5jPzE6MjtpPGFyZ1R5cGVzLmxlbmd0aDsrK2kpe3ZhciBwYXJhbU5hbWU9aT09PTE/XCJ0aGlzV2lyZWRcIjpcImFyZ1wiKyhpLTIpK1wiV2lyZWRcIjtpZihhcmdUeXBlc1tpXS5kZXN0cnVjdG9yRnVuY3Rpb24hPT1udWxsKXtpbnZva2VyRm5Cb2R5Kz1wYXJhbU5hbWUrXCJfZHRvcihcIitwYXJhbU5hbWUrXCIpOyAvLyBcIithcmdUeXBlc1tpXS5uYW1lK1wiXFxuXCI7YXJnczEucHVzaChwYXJhbU5hbWUrXCJfZHRvclwiKTthcmdzMi5wdXNoKGFyZ1R5cGVzW2ldLmRlc3RydWN0b3JGdW5jdGlvbil9fX1pZihyZXR1cm5zKXtpbnZva2VyRm5Cb2R5Kz1cInZhciByZXQgPSByZXRUeXBlLmZyb21XaXJlVHlwZShydik7XFxuXCIrXCJyZXR1cm4gcmV0O1xcblwifWVsc2V7fWludm9rZXJGbkJvZHkrPVwifVxcblwiO2FyZ3MxLnB1c2goaW52b2tlckZuQm9keSk7dmFyIGludm9rZXJGdW5jdGlvbj1uZXdfKEZ1bmN0aW9uLGFyZ3MxKS5hcHBseShudWxsLGFyZ3MyKTtyZXR1cm4gaW52b2tlckZ1bmN0aW9ufWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX2Z1bmN0aW9uKHJhd0NsYXNzVHlwZSxtZXRob2ROYW1lLGFyZ0NvdW50LHJhd0FyZ1R5cGVzQWRkcixpbnZva2VyU2lnbmF0dXJlLHJhd0ludm9rZXIsY29udGV4dCxpc1B1cmVWaXJ0dWFsKXt2YXIgcmF3QXJnVHlwZXM9aGVhcDMyVmVjdG9yVG9BcnJheShhcmdDb3VudCxyYXdBcmdUeXBlc0FkZHIpO21ldGhvZE5hbWU9cmVhZExhdGluMVN0cmluZyhtZXRob2ROYW1lKTtyYXdJbnZva2VyPWVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKGludm9rZXJTaWduYXR1cmUscmF3SW52b2tlcik7d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10sW3Jhd0NsYXNzVHlwZV0sZnVuY3Rpb24oY2xhc3NUeXBlKXtjbGFzc1R5cGU9Y2xhc3NUeXBlWzBdO3ZhciBodW1hbk5hbWU9Y2xhc3NUeXBlLm5hbWUrXCIuXCIrbWV0aG9kTmFtZTtpZihtZXRob2ROYW1lLnN0YXJ0c1dpdGgoXCJAQFwiKSl7bWV0aG9kTmFtZT1TeW1ib2xbbWV0aG9kTmFtZS5zdWJzdHJpbmcoMildfWlmKGlzUHVyZVZpcnR1YWwpe2NsYXNzVHlwZS5yZWdpc3RlcmVkQ2xhc3MucHVyZVZpcnR1YWxGdW5jdGlvbnMucHVzaChtZXRob2ROYW1lKX1mdW5jdGlvbiB1bmJvdW5kVHlwZXNIYW5kbGVyKCl7dGhyb3dVbmJvdW5kVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgXCIraHVtYW5OYW1lK1wiIGR1ZSB0byB1bmJvdW5kIHR5cGVzXCIscmF3QXJnVHlwZXMpfXZhciBwcm90bz1jbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLmluc3RhbmNlUHJvdG90eXBlO3ZhciBtZXRob2Q9cHJvdG9bbWV0aG9kTmFtZV07aWYodW5kZWZpbmVkPT09bWV0aG9kfHx1bmRlZmluZWQ9PT1tZXRob2Qub3ZlcmxvYWRUYWJsZSYmbWV0aG9kLmNsYXNzTmFtZSE9PWNsYXNzVHlwZS5uYW1lJiZtZXRob2QuYXJnQ291bnQ9PT1hcmdDb3VudC0yKXt1bmJvdW5kVHlwZXNIYW5kbGVyLmFyZ0NvdW50PWFyZ0NvdW50LTI7dW5ib3VuZFR5cGVzSGFuZGxlci5jbGFzc05hbWU9Y2xhc3NUeXBlLm5hbWU7cHJvdG9bbWV0aG9kTmFtZV09dW5ib3VuZFR5cGVzSGFuZGxlcn1lbHNle2Vuc3VyZU92ZXJsb2FkVGFibGUocHJvdG8sbWV0aG9kTmFtZSxodW1hbk5hbWUpO3Byb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGVbYXJnQ291bnQtMl09dW5ib3VuZFR5cGVzSGFuZGxlcn13aGVuRGVwZW5kZW50VHlwZXNBcmVSZXNvbHZlZChbXSxyYXdBcmdUeXBlcyxmdW5jdGlvbihhcmdUeXBlcyl7dmFyIG1lbWJlckZ1bmN0aW9uPWNyYWZ0SW52b2tlckZ1bmN0aW9uKGh1bWFuTmFtZSxhcmdUeXBlcyxjbGFzc1R5cGUscmF3SW52b2tlcixjb250ZXh0KTtpZih1bmRlZmluZWQ9PT1wcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlKXttZW1iZXJGdW5jdGlvbi5hcmdDb3VudD1hcmdDb3VudC0yO3Byb3RvW21ldGhvZE5hbWVdPW1lbWJlckZ1bmN0aW9ufWVsc2V7cHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZVthcmdDb3VudC0yXT1tZW1iZXJGdW5jdGlvbn1yZXR1cm5bXX0pO3JldHVybltdfSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfY29uc3RhbnQobmFtZSx0eXBlLHZhbHVlKXtuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10sW3R5cGVdLGZ1bmN0aW9uKHR5cGUpe3R5cGU9dHlwZVswXTtNb2R1bGVbbmFtZV09dHlwZVtcImZyb21XaXJlVHlwZVwiXSh2YWx1ZSk7cmV0dXJuW119KX12YXIgZW12YWxfZnJlZV9saXN0PVtdO3ZhciBlbXZhbF9oYW5kbGVfYXJyYXk9W3t9LHt2YWx1ZTp1bmRlZmluZWR9LHt2YWx1ZTpudWxsfSx7dmFsdWU6dHJ1ZX0se3ZhbHVlOmZhbHNlfV07ZnVuY3Rpb24gX19lbXZhbF9kZWNyZWYoaGFuZGxlKXtpZihoYW5kbGU+NCYmMD09PS0tZW12YWxfaGFuZGxlX2FycmF5W2hhbmRsZV0ucmVmY291bnQpe2VtdmFsX2hhbmRsZV9hcnJheVtoYW5kbGVdPXVuZGVmaW5lZDtlbXZhbF9mcmVlX2xpc3QucHVzaChoYW5kbGUpfX1mdW5jdGlvbiBjb3VudF9lbXZhbF9oYW5kbGVzKCl7dmFyIGNvdW50PTA7Zm9yKHZhciBpPTU7aTxlbXZhbF9oYW5kbGVfYXJyYXkubGVuZ3RoOysraSl7aWYoZW12YWxfaGFuZGxlX2FycmF5W2ldIT09dW5kZWZpbmVkKXsrK2NvdW50fX1yZXR1cm4gY291bnR9ZnVuY3Rpb24gZ2V0X2ZpcnN0X2VtdmFsKCl7Zm9yKHZhciBpPTU7aTxlbXZhbF9oYW5kbGVfYXJyYXkubGVuZ3RoOysraSl7aWYoZW12YWxfaGFuZGxlX2FycmF5W2ldIT09dW5kZWZpbmVkKXtyZXR1cm4gZW12YWxfaGFuZGxlX2FycmF5W2ldfX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBpbml0X2VtdmFsKCl7TW9kdWxlW1wiY291bnRfZW12YWxfaGFuZGxlc1wiXT1jb3VudF9lbXZhbF9oYW5kbGVzO01vZHVsZVtcImdldF9maXJzdF9lbXZhbFwiXT1nZXRfZmlyc3RfZW12YWx9dmFyIEVtdmFsPXt0b1ZhbHVlOmhhbmRsZT0+e2lmKCFoYW5kbGUpe3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IHVzZSBkZWxldGVkIHZhbC4gaGFuZGxlID0gXCIraGFuZGxlKX1yZXR1cm4gZW12YWxfaGFuZGxlX2FycmF5W2hhbmRsZV0udmFsdWV9LHRvSGFuZGxlOnZhbHVlPT57c3dpdGNoKHZhbHVlKXtjYXNlIHVuZGVmaW5lZDpyZXR1cm4gMTtjYXNlIG51bGw6cmV0dXJuIDI7Y2FzZSB0cnVlOnJldHVybiAzO2Nhc2UgZmFsc2U6cmV0dXJuIDQ7ZGVmYXVsdDp7dmFyIGhhbmRsZT1lbXZhbF9mcmVlX2xpc3QubGVuZ3RoP2VtdmFsX2ZyZWVfbGlzdC5wb3AoKTplbXZhbF9oYW5kbGVfYXJyYXkubGVuZ3RoO2VtdmFsX2hhbmRsZV9hcnJheVtoYW5kbGVdPXtyZWZjb3VudDoxLHZhbHVlOnZhbHVlfTtyZXR1cm4gaGFuZGxlfX19fTtmdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9lbXZhbChyYXdUeXBlLG5hbWUpe25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZTpuYW1lLFwiZnJvbVdpcmVUeXBlXCI6ZnVuY3Rpb24oaGFuZGxlKXt2YXIgcnY9RW12YWwudG9WYWx1ZShoYW5kbGUpO19fZW12YWxfZGVjcmVmKGhhbmRsZSk7cmV0dXJuIHJ2fSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyx2YWx1ZSl7cmV0dXJuIEVtdmFsLnRvSGFuZGxlKHZhbHVlKX0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOnNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyLGRlc3RydWN0b3JGdW5jdGlvbjpudWxsfSl9ZnVuY3Rpb24gX2VtYmluZF9yZXByKHYpe2lmKHY9PT1udWxsKXtyZXR1cm5cIm51bGxcIn12YXIgdD10eXBlb2YgdjtpZih0PT09XCJvYmplY3RcInx8dD09PVwiYXJyYXlcInx8dD09PVwiZnVuY3Rpb25cIil7cmV0dXJuIHYudG9TdHJpbmcoKX1lbHNle3JldHVyblwiXCIrdn19ZnVuY3Rpb24gZmxvYXRSZWFkVmFsdWVGcm9tUG9pbnRlcihuYW1lLHNoaWZ0KXtzd2l0Y2goc2hpZnQpe2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24ocG9pbnRlcil7cmV0dXJuIHRoaXNbXCJmcm9tV2lyZVR5cGVcIl0oSEVBUEYzMltwb2ludGVyPj4yXSl9O2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24ocG9pbnRlcil7cmV0dXJuIHRoaXNbXCJmcm9tV2lyZVR5cGVcIl0oSEVBUEY2NFtwb2ludGVyPj4zXSl9O2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZmxvYXQgdHlwZTogXCIrbmFtZSl9fWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2Zsb2F0KHJhd1R5cGUsbmFtZSxzaXplKXt2YXIgc2hpZnQ9Z2V0U2hpZnRGcm9tU2l6ZShzaXplKTtuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4gdmFsdWV9LFwidG9XaXJlVHlwZVwiOmZ1bmN0aW9uKGRlc3RydWN0b3JzLHZhbHVlKXtyZXR1cm4gdmFsdWV9LFwiYXJnUGFja0FkdmFuY2VcIjo4LFwicmVhZFZhbHVlRnJvbVBvaW50ZXJcIjpmbG9hdFJlYWRWYWx1ZUZyb21Qb2ludGVyKG5hbWUsc2hpZnQpLGRlc3RydWN0b3JGdW5jdGlvbjpudWxsfSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfZnVuY3Rpb24obmFtZSxhcmdDb3VudCxyYXdBcmdUeXBlc0FkZHIsc2lnbmF0dXJlLHJhd0ludm9rZXIsZm4pe3ZhciBhcmdUeXBlcz1oZWFwMzJWZWN0b3JUb0FycmF5KGFyZ0NvdW50LHJhd0FyZ1R5cGVzQWRkcik7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3Jhd0ludm9rZXI9ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oc2lnbmF0dXJlLHJhd0ludm9rZXIpO2V4cG9zZVB1YmxpY1N5bWJvbChuYW1lLGZ1bmN0aW9uKCl7dGhyb3dVbmJvdW5kVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgXCIrbmFtZStcIiBkdWUgdG8gdW5ib3VuZCB0eXBlc1wiLGFyZ1R5cGVzKX0sYXJnQ291bnQtMSk7d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10sYXJnVHlwZXMsZnVuY3Rpb24oYXJnVHlwZXMpe3ZhciBpbnZva2VyQXJnc0FycmF5PVthcmdUeXBlc1swXSxudWxsXS5jb25jYXQoYXJnVHlwZXMuc2xpY2UoMSkpO3JlcGxhY2VQdWJsaWNTeW1ib2wobmFtZSxjcmFmdEludm9rZXJGdW5jdGlvbihuYW1lLGludm9rZXJBcmdzQXJyYXksbnVsbCxyYXdJbnZva2VyLGZuKSxhcmdDb3VudC0xKTtyZXR1cm5bXX0pfWZ1bmN0aW9uIGludGVnZXJSZWFkVmFsdWVGcm9tUG9pbnRlcihuYW1lLHNoaWZ0LHNpZ25lZCl7c3dpdGNoKHNoaWZ0KXtjYXNlIDA6cmV0dXJuIHNpZ25lZD9mdW5jdGlvbiByZWFkUzhGcm9tUG9pbnRlcihwb2ludGVyKXtyZXR1cm4gSEVBUDhbcG9pbnRlcl19OmZ1bmN0aW9uIHJlYWRVOEZyb21Qb2ludGVyKHBvaW50ZXIpe3JldHVybiBIRUFQVThbcG9pbnRlcl19O2Nhc2UgMTpyZXR1cm4gc2lnbmVkP2Z1bmN0aW9uIHJlYWRTMTZGcm9tUG9pbnRlcihwb2ludGVyKXtyZXR1cm4gSEVBUDE2W3BvaW50ZXI+PjFdfTpmdW5jdGlvbiByZWFkVTE2RnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIEhFQVBVMTZbcG9pbnRlcj4+MV19O2Nhc2UgMjpyZXR1cm4gc2lnbmVkP2Z1bmN0aW9uIHJlYWRTMzJGcm9tUG9pbnRlcihwb2ludGVyKXtyZXR1cm4gSEVBUDMyW3BvaW50ZXI+PjJdfTpmdW5jdGlvbiByZWFkVTMyRnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIEhFQVBVMzJbcG9pbnRlcj4+Ml19O2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gaW50ZWdlciB0eXBlOiBcIituYW1lKX19ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfaW50ZWdlcihwcmltaXRpdmVUeXBlLG5hbWUsc2l6ZSxtaW5SYW5nZSxtYXhSYW5nZSl7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO2lmKG1heFJhbmdlPT09LTEpe21heFJhbmdlPTQyOTQ5NjcyOTV9dmFyIHNoaWZ0PWdldFNoaWZ0RnJvbVNpemUoc2l6ZSk7dmFyIGZyb21XaXJlVHlwZT12YWx1ZT0+dmFsdWU7aWYobWluUmFuZ2U9PT0wKXt2YXIgYml0c2hpZnQ9MzItOCpzaXplO2Zyb21XaXJlVHlwZT0odmFsdWU9PnZhbHVlPDxiaXRzaGlmdD4+PmJpdHNoaWZ0KX12YXIgaXNVbnNpZ25lZFR5cGU9bmFtZS5pbmNsdWRlcyhcInVuc2lnbmVkXCIpO3ZhciBjaGVja0Fzc2VydGlvbnM9KHZhbHVlLHRvVHlwZU5hbWUpPT57fTt2YXIgdG9XaXJlVHlwZTtpZihpc1Vuc2lnbmVkVHlwZSl7dG9XaXJlVHlwZT1mdW5jdGlvbihkZXN0cnVjdG9ycyx2YWx1ZSl7Y2hlY2tBc3NlcnRpb25zKHZhbHVlLHRoaXMubmFtZSk7cmV0dXJuIHZhbHVlPj4+MH19ZWxzZXt0b1dpcmVUeXBlPWZ1bmN0aW9uKGRlc3RydWN0b3JzLHZhbHVlKXtjaGVja0Fzc2VydGlvbnModmFsdWUsdGhpcy5uYW1lKTtyZXR1cm4gdmFsdWV9fXJlZ2lzdGVyVHlwZShwcmltaXRpdmVUeXBlLHtuYW1lOm5hbWUsXCJmcm9tV2lyZVR5cGVcIjpmcm9tV2lyZVR5cGUsXCJ0b1dpcmVUeXBlXCI6dG9XaXJlVHlwZSxcImFyZ1BhY2tBZHZhbmNlXCI6OCxcInJlYWRWYWx1ZUZyb21Qb2ludGVyXCI6aW50ZWdlclJlYWRWYWx1ZUZyb21Qb2ludGVyKG5hbWUsc2hpZnQsbWluUmFuZ2UhPT0wKSxkZXN0cnVjdG9yRnVuY3Rpb246bnVsbH0pfWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX21lbW9yeV92aWV3KHJhd1R5cGUsZGF0YVR5cGVJbmRleCxuYW1lKXt2YXIgdHlwZU1hcHBpbmc9W0ludDhBcnJheSxVaW50OEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5XTt2YXIgVEE9dHlwZU1hcHBpbmdbZGF0YVR5cGVJbmRleF07ZnVuY3Rpb24gZGVjb2RlTWVtb3J5VmlldyhoYW5kbGUpe2hhbmRsZT1oYW5kbGU+PjI7dmFyIGhlYXA9SEVBUFUzMjt2YXIgc2l6ZT1oZWFwW2hhbmRsZV07dmFyIGRhdGE9aGVhcFtoYW5kbGUrMV07cmV0dXJuIG5ldyBUQShidWZmZXIsZGF0YSxzaXplKX1uYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmRlY29kZU1lbW9yeVZpZXcsXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOmRlY29kZU1lbW9yeVZpZXd9LHtpZ25vcmVEdXBsaWNhdGVSZWdpc3RyYXRpb25zOnRydWV9KX1mdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9zdGRfc3RyaW5nKHJhd1R5cGUsbmFtZSl7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3ZhciBzdGRTdHJpbmdJc1VURjg9bmFtZT09PVwic3RkOjpzdHJpbmdcIjtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZTpuYW1lLFwiZnJvbVdpcmVUeXBlXCI6ZnVuY3Rpb24odmFsdWUpe3ZhciBsZW5ndGg9SEVBUFUzMlt2YWx1ZT4+Ml07dmFyIHN0cjtpZihzdGRTdHJpbmdJc1VURjgpe3ZhciBkZWNvZGVTdGFydFB0cj12YWx1ZSs0O2Zvcih2YXIgaT0wO2k8PWxlbmd0aDsrK2kpe3ZhciBjdXJyZW50Qnl0ZVB0cj12YWx1ZSs0K2k7aWYoaT09bGVuZ3RofHxIRUFQVThbY3VycmVudEJ5dGVQdHJdPT0wKXt2YXIgbWF4UmVhZD1jdXJyZW50Qnl0ZVB0ci1kZWNvZGVTdGFydFB0cjt2YXIgc3RyaW5nU2VnbWVudD1VVEY4VG9TdHJpbmcoZGVjb2RlU3RhcnRQdHIsbWF4UmVhZCk7aWYoc3RyPT09dW5kZWZpbmVkKXtzdHI9c3RyaW5nU2VnbWVudH1lbHNle3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSgwKTtzdHIrPXN0cmluZ1NlZ21lbnR9ZGVjb2RlU3RhcnRQdHI9Y3VycmVudEJ5dGVQdHIrMX19fWVsc2V7dmFyIGE9bmV3IEFycmF5KGxlbmd0aCk7Zm9yKHZhciBpPTA7aTxsZW5ndGg7KytpKXthW2ldPVN0cmluZy5mcm9tQ2hhckNvZGUoSEVBUFU4W3ZhbHVlKzQraV0pfXN0cj1hLmpvaW4oXCJcIil9X2ZyZWUodmFsdWUpO3JldHVybiBzdHJ9LFwidG9XaXJlVHlwZVwiOmZ1bmN0aW9uKGRlc3RydWN0b3JzLHZhbHVlKXtpZih2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXt2YWx1ZT1uZXcgVWludDhBcnJheSh2YWx1ZSl9dmFyIGdldExlbmd0aDt2YXIgdmFsdWVJc09mVHlwZVN0cmluZz10eXBlb2YgdmFsdWU9PVwic3RyaW5nXCI7aWYoISh2YWx1ZUlzT2ZUeXBlU3RyaW5nfHx2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXl8fHZhbHVlIGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXl8fHZhbHVlIGluc3RhbmNlb2YgSW50OEFycmF5KSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgcGFzcyBub24tc3RyaW5nIHRvIHN0ZDo6c3RyaW5nXCIpfWlmKHN0ZFN0cmluZ0lzVVRGOCYmdmFsdWVJc09mVHlwZVN0cmluZyl7Z2V0TGVuZ3RoPSgoKT0+bGVuZ3RoQnl0ZXNVVEY4KHZhbHVlKSl9ZWxzZXtnZXRMZW5ndGg9KCgpPT52YWx1ZS5sZW5ndGgpfXZhciBsZW5ndGg9Z2V0TGVuZ3RoKCk7dmFyIHB0cj1fbWFsbG9jKDQrbGVuZ3RoKzEpO0hFQVBVMzJbcHRyPj4yXT1sZW5ndGg7aWYoc3RkU3RyaW5nSXNVVEY4JiZ2YWx1ZUlzT2ZUeXBlU3RyaW5nKXtzdHJpbmdUb1VURjgodmFsdWUscHRyKzQsbGVuZ3RoKzEpfWVsc2V7aWYodmFsdWVJc09mVHlwZVN0cmluZyl7Zm9yKHZhciBpPTA7aTxsZW5ndGg7KytpKXt2YXIgY2hhckNvZGU9dmFsdWUuY2hhckNvZGVBdChpKTtpZihjaGFyQ29kZT4yNTUpe19mcmVlKHB0cik7dGhyb3dCaW5kaW5nRXJyb3IoXCJTdHJpbmcgaGFzIFVURi0xNiBjb2RlIHVuaXRzIHRoYXQgZG8gbm90IGZpdCBpbiA4IGJpdHNcIil9SEVBUFU4W3B0cis0K2ldPWNoYXJDb2RlfX1lbHNle2Zvcih2YXIgaT0wO2k8bGVuZ3RoOysraSl7SEVBUFU4W3B0cis0K2ldPXZhbHVlW2ldfX19aWYoZGVzdHJ1Y3RvcnMhPT1udWxsKXtkZXN0cnVjdG9ycy5wdXNoKF9mcmVlLHB0cil9cmV0dXJuIHB0cn0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOnNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyLGRlc3RydWN0b3JGdW5jdGlvbjpmdW5jdGlvbihwdHIpe19mcmVlKHB0cil9fSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfc3RkX3dzdHJpbmcocmF3VHlwZSxjaGFyU2l6ZSxuYW1lKXtuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7dmFyIGRlY29kZVN0cmluZyxlbmNvZGVTdHJpbmcsZ2V0SGVhcCxsZW5ndGhCeXRlc1VURixzaGlmdDtpZihjaGFyU2l6ZT09PTIpe2RlY29kZVN0cmluZz1VVEYxNlRvU3RyaW5nO2VuY29kZVN0cmluZz1zdHJpbmdUb1VURjE2O2xlbmd0aEJ5dGVzVVRGPWxlbmd0aEJ5dGVzVVRGMTY7Z2V0SGVhcD0oKCk9PkhFQVBVMTYpO3NoaWZ0PTF9ZWxzZSBpZihjaGFyU2l6ZT09PTQpe2RlY29kZVN0cmluZz1VVEYzMlRvU3RyaW5nO2VuY29kZVN0cmluZz1zdHJpbmdUb1VURjMyO2xlbmd0aEJ5dGVzVVRGPWxlbmd0aEJ5dGVzVVRGMzI7Z2V0SGVhcD0oKCk9PkhFQVBVMzIpO3NoaWZ0PTJ9cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKHZhbHVlKXt2YXIgbGVuZ3RoPUhFQVBVMzJbdmFsdWU+PjJdO3ZhciBIRUFQPWdldEhlYXAoKTt2YXIgc3RyO3ZhciBkZWNvZGVTdGFydFB0cj12YWx1ZSs0O2Zvcih2YXIgaT0wO2k8PWxlbmd0aDsrK2kpe3ZhciBjdXJyZW50Qnl0ZVB0cj12YWx1ZSs0K2kqY2hhclNpemU7aWYoaT09bGVuZ3RofHxIRUFQW2N1cnJlbnRCeXRlUHRyPj5zaGlmdF09PTApe3ZhciBtYXhSZWFkQnl0ZXM9Y3VycmVudEJ5dGVQdHItZGVjb2RlU3RhcnRQdHI7dmFyIHN0cmluZ1NlZ21lbnQ9ZGVjb2RlU3RyaW5nKGRlY29kZVN0YXJ0UHRyLG1heFJlYWRCeXRlcyk7aWYoc3RyPT09dW5kZWZpbmVkKXtzdHI9c3RyaW5nU2VnbWVudH1lbHNle3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSgwKTtzdHIrPXN0cmluZ1NlZ21lbnR9ZGVjb2RlU3RhcnRQdHI9Y3VycmVudEJ5dGVQdHIrY2hhclNpemV9fV9mcmVlKHZhbHVlKTtyZXR1cm4gc3RyfSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyx2YWx1ZSl7aWYoISh0eXBlb2YgdmFsdWU9PVwic3RyaW5nXCIpKXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCBwYXNzIG5vbi1zdHJpbmcgdG8gQysrIHN0cmluZyB0eXBlIFwiK25hbWUpfXZhciBsZW5ndGg9bGVuZ3RoQnl0ZXNVVEYodmFsdWUpO3ZhciBwdHI9X21hbGxvYyg0K2xlbmd0aCtjaGFyU2l6ZSk7SEVBUFUzMltwdHI+PjJdPWxlbmd0aD4+c2hpZnQ7ZW5jb2RlU3RyaW5nKHZhbHVlLHB0cis0LGxlbmd0aCtjaGFyU2l6ZSk7aWYoZGVzdHJ1Y3RvcnMhPT1udWxsKXtkZXN0cnVjdG9ycy5wdXNoKF9mcmVlLHB0cil9cmV0dXJuIHB0cn0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOnNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyLGRlc3RydWN0b3JGdW5jdGlvbjpmdW5jdGlvbihwdHIpe19mcmVlKHB0cil9fSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0KHJhd1R5cGUsbmFtZSxjb25zdHJ1Y3RvclNpZ25hdHVyZSxyYXdDb25zdHJ1Y3RvcixkZXN0cnVjdG9yU2lnbmF0dXJlLHJhd0Rlc3RydWN0b3Ipe3N0cnVjdFJlZ2lzdHJhdGlvbnNbcmF3VHlwZV09e25hbWU6cmVhZExhdGluMVN0cmluZyhuYW1lKSxyYXdDb25zdHJ1Y3RvcjplbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihjb25zdHJ1Y3RvclNpZ25hdHVyZSxyYXdDb25zdHJ1Y3RvcikscmF3RGVzdHJ1Y3RvcjplbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihkZXN0cnVjdG9yU2lnbmF0dXJlLHJhd0Rlc3RydWN0b3IpLGZpZWxkczpbXX19ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0X2ZpZWxkKHN0cnVjdFR5cGUsZmllbGROYW1lLGdldHRlclJldHVyblR5cGUsZ2V0dGVyU2lnbmF0dXJlLGdldHRlcixnZXR0ZXJDb250ZXh0LHNldHRlckFyZ3VtZW50VHlwZSxzZXR0ZXJTaWduYXR1cmUsc2V0dGVyLHNldHRlckNvbnRleHQpe3N0cnVjdFJlZ2lzdHJhdGlvbnNbc3RydWN0VHlwZV0uZmllbGRzLnB1c2goe2ZpZWxkTmFtZTpyZWFkTGF0aW4xU3RyaW5nKGZpZWxkTmFtZSksZ2V0dGVyUmV0dXJuVHlwZTpnZXR0ZXJSZXR1cm5UeXBlLGdldHRlcjplbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihnZXR0ZXJTaWduYXR1cmUsZ2V0dGVyKSxnZXR0ZXJDb250ZXh0OmdldHRlckNvbnRleHQsc2V0dGVyQXJndW1lbnRUeXBlOnNldHRlckFyZ3VtZW50VHlwZSxzZXR0ZXI6ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oc2V0dGVyU2lnbmF0dXJlLHNldHRlciksc2V0dGVyQ29udGV4dDpzZXR0ZXJDb250ZXh0fSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfdm9pZChyYXdUeXBlLG5hbWUpe25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyZWdpc3RlclR5cGUocmF3VHlwZSx7aXNWb2lkOnRydWUsbmFtZTpuYW1lLFwiYXJnUGFja0FkdmFuY2VcIjowLFwiZnJvbVdpcmVUeXBlXCI6ZnVuY3Rpb24oKXtyZXR1cm4gdW5kZWZpbmVkfSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyxvKXtyZXR1cm4gdW5kZWZpbmVkfX0pfWZ1bmN0aW9uIF9fZW1zY3JpcHRlbl9kYXRlX25vdygpe3JldHVybiBEYXRlLm5vdygpfWZ1bmN0aW9uIF9fZW1zY3JpcHRlbl90aHJvd19sb25nam1wKCl7dGhyb3cgSW5maW5pdHl9ZnVuY3Rpb24gX19lbXZhbF9pbmNyZWYoaGFuZGxlKXtpZihoYW5kbGU+NCl7ZW12YWxfaGFuZGxlX2FycmF5W2hhbmRsZV0ucmVmY291bnQrPTF9fWZ1bmN0aW9uIHJlcXVpcmVSZWdpc3RlcmVkVHlwZShyYXdUeXBlLGh1bWFuTmFtZSl7dmFyIGltcGw9cmVnaXN0ZXJlZFR5cGVzW3Jhd1R5cGVdO2lmKHVuZGVmaW5lZD09PWltcGwpe3Rocm93QmluZGluZ0Vycm9yKGh1bWFuTmFtZStcIiBoYXMgdW5rbm93biB0eXBlIFwiK2dldFR5cGVOYW1lKHJhd1R5cGUpKX1yZXR1cm4gaW1wbH1mdW5jdGlvbiBfX2VtdmFsX3Rha2VfdmFsdWUodHlwZSxhcmd2KXt0eXBlPXJlcXVpcmVSZWdpc3RlcmVkVHlwZSh0eXBlLFwiX2VtdmFsX3Rha2VfdmFsdWVcIik7dmFyIHY9dHlwZVtcInJlYWRWYWx1ZUZyb21Qb2ludGVyXCJdKGFyZ3YpO3JldHVybiBFbXZhbC50b0hhbmRsZSh2KX1mdW5jdGlvbiBfX2xvY2FsdGltZV9qcyh0aW1lLHRtUHRyKXt2YXIgZGF0ZT1uZXcgRGF0ZShIRUFQMzJbdGltZT4+Ml0qMWUzKTtIRUFQMzJbdG1QdHI+PjJdPWRhdGUuZ2V0U2Vjb25kcygpO0hFQVAzMlt0bVB0cis0Pj4yXT1kYXRlLmdldE1pbnV0ZXMoKTtIRUFQMzJbdG1QdHIrOD4+Ml09ZGF0ZS5nZXRIb3VycygpO0hFQVAzMlt0bVB0cisxMj4+Ml09ZGF0ZS5nZXREYXRlKCk7SEVBUDMyW3RtUHRyKzE2Pj4yXT1kYXRlLmdldE1vbnRoKCk7SEVBUDMyW3RtUHRyKzIwPj4yXT1kYXRlLmdldEZ1bGxZZWFyKCktMTkwMDtIRUFQMzJbdG1QdHIrMjQ+PjJdPWRhdGUuZ2V0RGF5KCk7dmFyIHN0YXJ0PW5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwwLDEpO3ZhciB5ZGF5PShkYXRlLmdldFRpbWUoKS1zdGFydC5nZXRUaW1lKCkpLygxZTMqNjAqNjAqMjQpfDA7SEVBUDMyW3RtUHRyKzI4Pj4yXT15ZGF5O0hFQVAzMlt0bVB0ciszNj4+Ml09LShkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkqNjApO3ZhciBzdW1tZXJPZmZzZXQ9bmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLDYsMSkuZ2V0VGltZXpvbmVPZmZzZXQoKTt2YXIgd2ludGVyT2Zmc2V0PXN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIGRzdD0oc3VtbWVyT2Zmc2V0IT13aW50ZXJPZmZzZXQmJmRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKT09TWF0aC5taW4od2ludGVyT2Zmc2V0LHN1bW1lck9mZnNldCkpfDA7SEVBUDMyW3RtUHRyKzMyPj4yXT1kc3R9ZnVuY3Rpb24gX3R6c2V0X2ltcGwodGltZXpvbmUsZGF5bGlnaHQsdHpuYW1lKXt2YXIgY3VycmVudFllYXI9KG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpO3ZhciB3aW50ZXI9bmV3IERhdGUoY3VycmVudFllYXIsMCwxKTt2YXIgc3VtbWVyPW5ldyBEYXRlKGN1cnJlbnRZZWFyLDYsMSk7dmFyIHdpbnRlck9mZnNldD13aW50ZXIuZ2V0VGltZXpvbmVPZmZzZXQoKTt2YXIgc3VtbWVyT2Zmc2V0PXN1bW1lci5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciBzdGRUaW1lem9uZU9mZnNldD1NYXRoLm1heCh3aW50ZXJPZmZzZXQsc3VtbWVyT2Zmc2V0KTtIRUFQMzJbdGltZXpvbmU+PjJdPXN0ZFRpbWV6b25lT2Zmc2V0KjYwO0hFQVAzMltkYXlsaWdodD4+Ml09TnVtYmVyKHdpbnRlck9mZnNldCE9c3VtbWVyT2Zmc2V0KTtmdW5jdGlvbiBleHRyYWN0Wm9uZShkYXRlKXt2YXIgbWF0Y2g9ZGF0ZS50b1RpbWVTdHJpbmcoKS5tYXRjaCgvXFwoKFtBLVphLXogXSspXFwpJC8pO3JldHVybiBtYXRjaD9tYXRjaFsxXTpcIkdNVFwifXZhciB3aW50ZXJOYW1lPWV4dHJhY3Rab25lKHdpbnRlcik7dmFyIHN1bW1lck5hbWU9ZXh0cmFjdFpvbmUoc3VtbWVyKTt2YXIgd2ludGVyTmFtZVB0cj1hbGxvY2F0ZVVURjgod2ludGVyTmFtZSk7dmFyIHN1bW1lck5hbWVQdHI9YWxsb2NhdGVVVEY4KHN1bW1lck5hbWUpO2lmKHN1bW1lck9mZnNldDx3aW50ZXJPZmZzZXQpe0hFQVAzMlt0em5hbWU+PjJdPXdpbnRlck5hbWVQdHI7SEVBUDMyW3R6bmFtZSs0Pj4yXT1zdW1tZXJOYW1lUHRyfWVsc2V7SEVBUDMyW3R6bmFtZT4+Ml09c3VtbWVyTmFtZVB0cjtIRUFQMzJbdHpuYW1lKzQ+PjJdPXdpbnRlck5hbWVQdHJ9fWZ1bmN0aW9uIF9fdHpzZXRfanModGltZXpvbmUsZGF5bGlnaHQsdHpuYW1lKXtpZihfX3R6c2V0X2pzLmNhbGxlZClyZXR1cm47X190enNldF9qcy5jYWxsZWQ9dHJ1ZTtfdHpzZXRfaW1wbCh0aW1lem9uZSxkYXlsaWdodCx0em5hbWUpfWZ1bmN0aW9uIF9hYm9ydCgpe2Fib3J0KFwiXCIpfXZhciByZWFkQXNtQ29uc3RBcmdzQXJyYXk9W107ZnVuY3Rpb24gcmVhZEFzbUNvbnN0QXJncyhzaWdQdHIsYnVmKXtyZWFkQXNtQ29uc3RBcmdzQXJyYXkubGVuZ3RoPTA7dmFyIGNoO2J1Zj4+PTI7d2hpbGUoY2g9SEVBUFU4W3NpZ1B0cisrXSl7dmFyIHJlYWRBc21Db25zdEFyZ3NEb3VibGU9Y2g8MTA1O2lmKHJlYWRBc21Db25zdEFyZ3NEb3VibGUmJmJ1ZiYxKWJ1ZisrO3JlYWRBc21Db25zdEFyZ3NBcnJheS5wdXNoKHJlYWRBc21Db25zdEFyZ3NEb3VibGU/SEVBUEY2NFtidWYrKz4+MV06SEVBUDMyW2J1Zl0pOysrYnVmfXJldHVybiByZWFkQXNtQ29uc3RBcmdzQXJyYXl9ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fYXNtX2NvbnN0X2ludChjb2RlLHNpZ1B0cixhcmdidWYpe3ZhciBhcmdzPXJlYWRBc21Db25zdEFyZ3Moc2lnUHRyLGFyZ2J1Zik7cmV0dXJuIEFTTV9DT05TVFNbY29kZV0uYXBwbHkobnVsbCxhcmdzKX1mdW5jdGlvbiBfZW1zY3JpcHRlbl9nZXRfaGVhcF9tYXgoKXtyZXR1cm4gMjE0NzQ4MzY0OH1mdW5jdGlvbiBlbXNjcmlwdGVuX3JlYWxsb2NfYnVmZmVyKHNpemUpe3RyeXt3YXNtTWVtb3J5Lmdyb3coc2l6ZS1idWZmZXIuYnl0ZUxlbmd0aCs2NTUzNT4+PjE2KTt1cGRhdGVHbG9iYWxCdWZmZXJBbmRWaWV3cyh3YXNtTWVtb3J5LmJ1ZmZlcik7cmV0dXJuIDF9Y2F0Y2goZSl7fX1mdW5jdGlvbiBfZW1zY3JpcHRlbl9yZXNpemVfaGVhcChyZXF1ZXN0ZWRTaXplKXt2YXIgb2xkU2l6ZT1IRUFQVTgubGVuZ3RoO3JlcXVlc3RlZFNpemU9cmVxdWVzdGVkU2l6ZT4+PjA7dmFyIG1heEhlYXBTaXplPV9lbXNjcmlwdGVuX2dldF9oZWFwX21heCgpO2lmKHJlcXVlc3RlZFNpemU+bWF4SGVhcFNpemUpe3JldHVybiBmYWxzZX1sZXQgYWxpZ25VcD0oeCxtdWx0aXBsZSk9PngrKG11bHRpcGxlLXglbXVsdGlwbGUpJW11bHRpcGxlO2Zvcih2YXIgY3V0RG93bj0xO2N1dERvd248PTQ7Y3V0RG93bio9Mil7dmFyIG92ZXJHcm93bkhlYXBTaXplPW9sZFNpemUqKDErLjIvY3V0RG93bik7b3Zlckdyb3duSGVhcFNpemU9TWF0aC5taW4ob3Zlckdyb3duSGVhcFNpemUscmVxdWVzdGVkU2l6ZSsxMDA2NjMyOTYpO3ZhciBuZXdTaXplPU1hdGgubWluKG1heEhlYXBTaXplLGFsaWduVXAoTWF0aC5tYXgocmVxdWVzdGVkU2l6ZSxvdmVyR3Jvd25IZWFwU2l6ZSksNjU1MzYpKTt2YXIgcmVwbGFjZW1lbnQ9ZW1zY3JpcHRlbl9yZWFsbG9jX2J1ZmZlcihuZXdTaXplKTtpZihyZXBsYWNlbWVudCl7cmV0dXJuIHRydWV9fXJldHVybiBmYWxzZX12YXIgRU5WPXt9O2Z1bmN0aW9uIGdldEV4ZWN1dGFibGVOYW1lKCl7cmV0dXJuIHRoaXNQcm9ncmFtfHxcIi4vdGhpcy5wcm9ncmFtXCJ9ZnVuY3Rpb24gZ2V0RW52U3RyaW5ncygpe2lmKCFnZXRFbnZTdHJpbmdzLnN0cmluZ3Mpe3ZhciBsYW5nPSh0eXBlb2YgbmF2aWdhdG9yPT1cIm9iamVjdFwiJiZuYXZpZ2F0b3IubGFuZ3VhZ2VzJiZuYXZpZ2F0b3IubGFuZ3VhZ2VzWzBdfHxcIkNcIikucmVwbGFjZShcIi1cIixcIl9cIikrXCIuVVRGLThcIjt2YXIgZW52PXtcIlVTRVJcIjpcIndlYl91c2VyXCIsXCJMT0dOQU1FXCI6XCJ3ZWJfdXNlclwiLFwiUEFUSFwiOlwiL1wiLFwiUFdEXCI6XCIvXCIsXCJIT01FXCI6XCIvaG9tZS93ZWJfdXNlclwiLFwiTEFOR1wiOmxhbmcsXCJfXCI6Z2V0RXhlY3V0YWJsZU5hbWUoKX07Zm9yKHZhciB4IGluIEVOVil7aWYoRU5WW3hdPT09dW5kZWZpbmVkKWRlbGV0ZSBlbnZbeF07ZWxzZSBlbnZbeF09RU5WW3hdfXZhciBzdHJpbmdzPVtdO2Zvcih2YXIgeCBpbiBlbnYpe3N0cmluZ3MucHVzaCh4K1wiPVwiK2Vudlt4XSl9Z2V0RW52U3RyaW5ncy5zdHJpbmdzPXN0cmluZ3N9cmV0dXJuIGdldEVudlN0cmluZ3Muc3RyaW5nc31mdW5jdGlvbiBfZW52aXJvbl9nZXQoX19lbnZpcm9uLGVudmlyb25fYnVmKXt2YXIgYnVmU2l6ZT0wO2dldEVudlN0cmluZ3MoKS5mb3JFYWNoKGZ1bmN0aW9uKHN0cmluZyxpKXt2YXIgcHRyPWVudmlyb25fYnVmK2J1ZlNpemU7SEVBUDMyW19fZW52aXJvbitpKjQ+PjJdPXB0cjt3cml0ZUFzY2lpVG9NZW1vcnkoc3RyaW5nLHB0cik7YnVmU2l6ZSs9c3RyaW5nLmxlbmd0aCsxfSk7cmV0dXJuIDB9ZnVuY3Rpb24gX2Vudmlyb25fc2l6ZXNfZ2V0KHBlbnZpcm9uX2NvdW50LHBlbnZpcm9uX2J1Zl9zaXplKXt2YXIgc3RyaW5ncz1nZXRFbnZTdHJpbmdzKCk7SEVBUDMyW3BlbnZpcm9uX2NvdW50Pj4yXT1zdHJpbmdzLmxlbmd0aDt2YXIgYnVmU2l6ZT0wO3N0cmluZ3MuZm9yRWFjaChmdW5jdGlvbihzdHJpbmcpe2J1ZlNpemUrPXN0cmluZy5sZW5ndGgrMX0pO0hFQVAzMltwZW52aXJvbl9idWZfc2l6ZT4+Ml09YnVmU2l6ZTtyZXR1cm4gMH1mdW5jdGlvbiBfZXhpdChzdGF0dXMpe2V4aXQoc3RhdHVzKX1mdW5jdGlvbiBfZmRfY2xvc2UoZmQpe3RyeXt2YXIgc3RyZWFtPVNZU0NBTExTLmdldFN0cmVhbUZyb21GRChmZCk7RlMuY2xvc2Uoc3RyZWFtKTtyZXR1cm4gMH1jYXRjaChlKXtpZih0eXBlb2YgRlM9PVwidW5kZWZpbmVkXCJ8fCEoZSBpbnN0YW5jZW9mIEZTLkVycm5vRXJyb3IpKXRocm93IGU7cmV0dXJuIGUuZXJybm99fWZ1bmN0aW9uIF9mZF9yZWFkKGZkLGlvdixpb3ZjbnQscG51bSl7dHJ5e3ZhciBzdHJlYW09U1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKGZkKTt2YXIgbnVtPVNZU0NBTExTLmRvUmVhZHYoc3RyZWFtLGlvdixpb3ZjbnQpO0hFQVAzMltwbnVtPj4yXT1udW07cmV0dXJuIDB9Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT1cInVuZGVmaW5lZFwifHwhKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSl0aHJvdyBlO3JldHVybiBlLmVycm5vfX1mdW5jdGlvbiBfZmRfc2VlayhmZCxvZmZzZXRfbG93LG9mZnNldF9oaWdoLHdoZW5jZSxuZXdPZmZzZXQpe3RyeXt2YXIgc3RyZWFtPVNZU0NBTExTLmdldFN0cmVhbUZyb21GRChmZCk7dmFyIEhJR0hfT0ZGU0VUPTQyOTQ5NjcyOTY7dmFyIG9mZnNldD1vZmZzZXRfaGlnaCpISUdIX09GRlNFVCsob2Zmc2V0X2xvdz4+PjApO3ZhciBET1VCTEVfTElNSVQ9OTAwNzE5OTI1NDc0MDk5MjtpZihvZmZzZXQ8PS1ET1VCTEVfTElNSVR8fG9mZnNldD49RE9VQkxFX0xJTUlUKXtyZXR1cm4tNjF9RlMubGxzZWVrKHN0cmVhbSxvZmZzZXQsd2hlbmNlKTt0ZW1wSTY0PVtzdHJlYW0ucG9zaXRpb24+Pj4wLCh0ZW1wRG91YmxlPXN0cmVhbS5wb3NpdGlvbiwrTWF0aC5hYnModGVtcERvdWJsZSk+PTE/dGVtcERvdWJsZT4wPyhNYXRoLm1pbigrTWF0aC5mbG9vcih0ZW1wRG91YmxlLzQyOTQ5NjcyOTYpLDQyOTQ5NjcyOTUpfDApPj4+MDp+fitNYXRoLmNlaWwoKHRlbXBEb3VibGUtKyh+fnRlbXBEb3VibGU+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApXSxIRUFQMzJbbmV3T2Zmc2V0Pj4yXT10ZW1wSTY0WzBdLEhFQVAzMltuZXdPZmZzZXQrND4+Ml09dGVtcEk2NFsxXTtpZihzdHJlYW0uZ2V0ZGVudHMmJm9mZnNldD09PTAmJndoZW5jZT09PTApc3RyZWFtLmdldGRlbnRzPW51bGw7cmV0dXJuIDB9Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT1cInVuZGVmaW5lZFwifHwhKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSl0aHJvdyBlO3JldHVybiBlLmVycm5vfX1mdW5jdGlvbiBfZmRfd3JpdGUoZmQsaW92LGlvdmNudCxwbnVtKXt0cnl7dmFyIHN0cmVhbT1TWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoZmQpO3ZhciBudW09U1lTQ0FMTFMuZG9Xcml0ZXYoc3RyZWFtLGlvdixpb3ZjbnQpO0hFQVAzMltwbnVtPj4yXT1udW07cmV0dXJuIDB9Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT1cInVuZGVmaW5lZFwifHwhKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSl0aHJvdyBlO3JldHVybiBlLmVycm5vfX1mdW5jdGlvbiBfZ2V0VGVtcFJldDAoKXtyZXR1cm4gZ2V0VGVtcFJldDAoKX1mdW5jdGlvbiBfc2V0VGVtcFJldDAodmFsKXtzZXRUZW1wUmV0MCh2YWwpfWZ1bmN0aW9uIF9faXNMZWFwWWVhcih5ZWFyKXtyZXR1cm4geWVhciU0PT09MCYmKHllYXIlMTAwIT09MHx8eWVhciU0MDA9PT0wKX1mdW5jdGlvbiBfX2FycmF5U3VtKGFycmF5LGluZGV4KXt2YXIgc3VtPTA7Zm9yKHZhciBpPTA7aTw9aW5kZXg7c3VtKz1hcnJheVtpKytdKXt9cmV0dXJuIHN1bX12YXIgX19NT05USF9EQVlTX0xFQVA9WzMxLDI5LDMxLDMwLDMxLDMwLDMxLDMxLDMwLDMxLDMwLDMxXTt2YXIgX19NT05USF9EQVlTX1JFR1VMQVI9WzMxLDI4LDMxLDMwLDMxLDMwLDMxLDMxLDMwLDMxLDMwLDMxXTtmdW5jdGlvbiBfX2FkZERheXMoZGF0ZSxkYXlzKXt2YXIgbmV3RGF0ZT1uZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7d2hpbGUoZGF5cz4wKXt2YXIgbGVhcD1fX2lzTGVhcFllYXIobmV3RGF0ZS5nZXRGdWxsWWVhcigpKTt2YXIgY3VycmVudE1vbnRoPW5ld0RhdGUuZ2V0TW9udGgoKTt2YXIgZGF5c0luQ3VycmVudE1vbnRoPShsZWFwP19fTU9OVEhfREFZU19MRUFQOl9fTU9OVEhfREFZU19SRUdVTEFSKVtjdXJyZW50TW9udGhdO2lmKGRheXM+ZGF5c0luQ3VycmVudE1vbnRoLW5ld0RhdGUuZ2V0RGF0ZSgpKXtkYXlzLT1kYXlzSW5DdXJyZW50TW9udGgtbmV3RGF0ZS5nZXREYXRlKCkrMTtuZXdEYXRlLnNldERhdGUoMSk7aWYoY3VycmVudE1vbnRoPDExKXtuZXdEYXRlLnNldE1vbnRoKGN1cnJlbnRNb250aCsxKX1lbHNle25ld0RhdGUuc2V0TW9udGgoMCk7bmV3RGF0ZS5zZXRGdWxsWWVhcihuZXdEYXRlLmdldEZ1bGxZZWFyKCkrMSl9fWVsc2V7bmV3RGF0ZS5zZXREYXRlKG5ld0RhdGUuZ2V0RGF0ZSgpK2RheXMpO3JldHVybiBuZXdEYXRlfX1yZXR1cm4gbmV3RGF0ZX1mdW5jdGlvbiBfc3RyZnRpbWUocyxtYXhzaXplLGZvcm1hdCx0bSl7dmFyIHRtX3pvbmU9SEVBUDMyW3RtKzQwPj4yXTt2YXIgZGF0ZT17dG1fc2VjOkhFQVAzMlt0bT4+Ml0sdG1fbWluOkhFQVAzMlt0bSs0Pj4yXSx0bV9ob3VyOkhFQVAzMlt0bSs4Pj4yXSx0bV9tZGF5OkhFQVAzMlt0bSsxMj4+Ml0sdG1fbW9uOkhFQVAzMlt0bSsxNj4+Ml0sdG1feWVhcjpIRUFQMzJbdG0rMjA+PjJdLHRtX3dkYXk6SEVBUDMyW3RtKzI0Pj4yXSx0bV95ZGF5OkhFQVAzMlt0bSsyOD4+Ml0sdG1faXNkc3Q6SEVBUDMyW3RtKzMyPj4yXSx0bV9nbXRvZmY6SEVBUDMyW3RtKzM2Pj4yXSx0bV96b25lOnRtX3pvbmU/VVRGOFRvU3RyaW5nKHRtX3pvbmUpOlwiXCJ9O3ZhciBwYXR0ZXJuPVVURjhUb1N0cmluZyhmb3JtYXQpO3ZhciBFWFBBTlNJT05fUlVMRVNfMT17XCIlY1wiOlwiJWEgJWIgJWQgJUg6JU06JVMgJVlcIixcIiVEXCI6XCIlbS8lZC8leVwiLFwiJUZcIjpcIiVZLSVtLSVkXCIsXCIlaFwiOlwiJWJcIixcIiVyXCI6XCIlSTolTTolUyAlcFwiLFwiJVJcIjpcIiVIOiVNXCIsXCIlVFwiOlwiJUg6JU06JVNcIixcIiV4XCI6XCIlbS8lZC8leVwiLFwiJVhcIjpcIiVIOiVNOiVTXCIsXCIlRWNcIjpcIiVjXCIsXCIlRUNcIjpcIiVDXCIsXCIlRXhcIjpcIiVtLyVkLyV5XCIsXCIlRVhcIjpcIiVIOiVNOiVTXCIsXCIlRXlcIjpcIiV5XCIsXCIlRVlcIjpcIiVZXCIsXCIlT2RcIjpcIiVkXCIsXCIlT2VcIjpcIiVlXCIsXCIlT0hcIjpcIiVIXCIsXCIlT0lcIjpcIiVJXCIsXCIlT21cIjpcIiVtXCIsXCIlT01cIjpcIiVNXCIsXCIlT1NcIjpcIiVTXCIsXCIlT3VcIjpcIiV1XCIsXCIlT1VcIjpcIiVVXCIsXCIlT1ZcIjpcIiVWXCIsXCIlT3dcIjpcIiV3XCIsXCIlT1dcIjpcIiVXXCIsXCIlT3lcIjpcIiV5XCJ9O2Zvcih2YXIgcnVsZSBpbiBFWFBBTlNJT05fUlVMRVNfMSl7cGF0dGVybj1wYXR0ZXJuLnJlcGxhY2UobmV3IFJlZ0V4cChydWxlLFwiZ1wiKSxFWFBBTlNJT05fUlVMRVNfMVtydWxlXSl9dmFyIFdFRUtEQVlTPVtcIlN1bmRheVwiLFwiTW9uZGF5XCIsXCJUdWVzZGF5XCIsXCJXZWRuZXNkYXlcIixcIlRodXJzZGF5XCIsXCJGcmlkYXlcIixcIlNhdHVyZGF5XCJdO3ZhciBNT05USFM9W1wiSmFudWFyeVwiLFwiRmVicnVhcnlcIixcIk1hcmNoXCIsXCJBcHJpbFwiLFwiTWF5XCIsXCJKdW5lXCIsXCJKdWx5XCIsXCJBdWd1c3RcIixcIlNlcHRlbWJlclwiLFwiT2N0b2JlclwiLFwiTm92ZW1iZXJcIixcIkRlY2VtYmVyXCJdO2Z1bmN0aW9uIGxlYWRpbmdTb21ldGhpbmcodmFsdWUsZGlnaXRzLGNoYXJhY3Rlcil7dmFyIHN0cj10eXBlb2YgdmFsdWU9PVwibnVtYmVyXCI/dmFsdWUudG9TdHJpbmcoKTp2YWx1ZXx8XCJcIjt3aGlsZShzdHIubGVuZ3RoPGRpZ2l0cyl7c3RyPWNoYXJhY3RlclswXStzdHJ9cmV0dXJuIHN0cn1mdW5jdGlvbiBsZWFkaW5nTnVsbHModmFsdWUsZGlnaXRzKXtyZXR1cm4gbGVhZGluZ1NvbWV0aGluZyh2YWx1ZSxkaWdpdHMsXCIwXCIpfWZ1bmN0aW9uIGNvbXBhcmVCeURheShkYXRlMSxkYXRlMil7ZnVuY3Rpb24gc2duKHZhbHVlKXtyZXR1cm4gdmFsdWU8MD8tMTp2YWx1ZT4wPzE6MH12YXIgY29tcGFyZTtpZigoY29tcGFyZT1zZ24oZGF0ZTEuZ2V0RnVsbFllYXIoKS1kYXRlMi5nZXRGdWxsWWVhcigpKSk9PT0wKXtpZigoY29tcGFyZT1zZ24oZGF0ZTEuZ2V0TW9udGgoKS1kYXRlMi5nZXRNb250aCgpKSk9PT0wKXtjb21wYXJlPXNnbihkYXRlMS5nZXREYXRlKCktZGF0ZTIuZ2V0RGF0ZSgpKX19cmV0dXJuIGNvbXBhcmV9ZnVuY3Rpb24gZ2V0Rmlyc3RXZWVrU3RhcnREYXRlKGphbkZvdXJ0aCl7c3dpdGNoKGphbkZvdXJ0aC5nZXREYXkoKSl7Y2FzZSAwOnJldHVybiBuZXcgRGF0ZShqYW5Gb3VydGguZ2V0RnVsbFllYXIoKS0xLDExLDI5KTtjYXNlIDE6cmV0dXJuIGphbkZvdXJ0aDtjYXNlIDI6cmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpLDAsMyk7Y2FzZSAzOnJldHVybiBuZXcgRGF0ZShqYW5Gb3VydGguZ2V0RnVsbFllYXIoKSwwLDIpO2Nhc2UgNDpyZXR1cm4gbmV3IERhdGUoamFuRm91cnRoLmdldEZ1bGxZZWFyKCksMCwxKTtjYXNlIDU6cmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpLTEsMTEsMzEpO2Nhc2UgNjpyZXR1cm4gbmV3IERhdGUoamFuRm91cnRoLmdldEZ1bGxZZWFyKCktMSwxMSwzMCl9fWZ1bmN0aW9uIGdldFdlZWtCYXNlZFllYXIoZGF0ZSl7dmFyIHRoaXNEYXRlPV9fYWRkRGF5cyhuZXcgRGF0ZShkYXRlLnRtX3llYXIrMTkwMCwwLDEpLGRhdGUudG1feWRheSk7dmFyIGphbkZvdXJ0aFRoaXNZZWFyPW5ldyBEYXRlKHRoaXNEYXRlLmdldEZ1bGxZZWFyKCksMCw0KTt2YXIgamFuRm91cnRoTmV4dFllYXI9bmV3IERhdGUodGhpc0RhdGUuZ2V0RnVsbFllYXIoKSsxLDAsNCk7dmFyIGZpcnN0V2Vla1N0YXJ0VGhpc1llYXI9Z2V0Rmlyc3RXZWVrU3RhcnREYXRlKGphbkZvdXJ0aFRoaXNZZWFyKTt2YXIgZmlyc3RXZWVrU3RhcnROZXh0WWVhcj1nZXRGaXJzdFdlZWtTdGFydERhdGUoamFuRm91cnRoTmV4dFllYXIpO2lmKGNvbXBhcmVCeURheShmaXJzdFdlZWtTdGFydFRoaXNZZWFyLHRoaXNEYXRlKTw9MCl7aWYoY29tcGFyZUJ5RGF5KGZpcnN0V2Vla1N0YXJ0TmV4dFllYXIsdGhpc0RhdGUpPD0wKXtyZXR1cm4gdGhpc0RhdGUuZ2V0RnVsbFllYXIoKSsxfWVsc2V7cmV0dXJuIHRoaXNEYXRlLmdldEZ1bGxZZWFyKCl9fWVsc2V7cmV0dXJuIHRoaXNEYXRlLmdldEZ1bGxZZWFyKCktMX19dmFyIEVYUEFOU0lPTl9SVUxFU18yPXtcIiVhXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIFdFRUtEQVlTW2RhdGUudG1fd2RheV0uc3Vic3RyaW5nKDAsMyl9LFwiJUFcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gV0VFS0RBWVNbZGF0ZS50bV93ZGF5XX0sXCIlYlwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBNT05USFNbZGF0ZS50bV9tb25dLnN1YnN0cmluZygwLDMpfSxcIiVCXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIE1PTlRIU1tkYXRlLnRtX21vbl19LFwiJUNcIjpmdW5jdGlvbihkYXRlKXt2YXIgeWVhcj1kYXRlLnRtX3llYXIrMTkwMDtyZXR1cm4gbGVhZGluZ051bGxzKHllYXIvMTAwfDAsMil9LFwiJWRcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gbGVhZGluZ051bGxzKGRhdGUudG1fbWRheSwyKX0sXCIlZVwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nU29tZXRoaW5nKGRhdGUudG1fbWRheSwyLFwiIFwiKX0sXCIlZ1wiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBnZXRXZWVrQmFzZWRZZWFyKGRhdGUpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpfSxcIiVHXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGdldFdlZWtCYXNlZFllYXIoZGF0ZSl9LFwiJUhcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gbGVhZGluZ051bGxzKGRhdGUudG1faG91ciwyKX0sXCIlSVwiOmZ1bmN0aW9uKGRhdGUpe3ZhciB0d2VsdmVIb3VyPWRhdGUudG1faG91cjtpZih0d2VsdmVIb3VyPT0wKXR3ZWx2ZUhvdXI9MTI7ZWxzZSBpZih0d2VsdmVIb3VyPjEyKXR3ZWx2ZUhvdXItPTEyO3JldHVybiBsZWFkaW5nTnVsbHModHdlbHZlSG91ciwyKX0sXCIlalwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9tZGF5K19fYXJyYXlTdW0oX19pc0xlYXBZZWFyKGRhdGUudG1feWVhcisxOTAwKT9fX01PTlRIX0RBWVNfTEVBUDpfX01PTlRIX0RBWVNfUkVHVUxBUixkYXRlLnRtX21vbi0xKSwzKX0sXCIlbVwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9tb24rMSwyKX0sXCIlTVwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9taW4sMil9LFwiJW5cIjpmdW5jdGlvbigpe3JldHVyblwiXFxuXCJ9LFwiJXBcIjpmdW5jdGlvbihkYXRlKXtpZihkYXRlLnRtX2hvdXI+PTAmJmRhdGUudG1faG91cjwxMil7cmV0dXJuXCJBTVwifWVsc2V7cmV0dXJuXCJQTVwifX0sXCIlU1wiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9zZWMsMil9LFwiJXRcIjpmdW5jdGlvbigpe3JldHVyblwiXFx0XCJ9LFwiJXVcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gZGF0ZS50bV93ZGF5fHw3fSxcIiVVXCI6ZnVuY3Rpb24oZGF0ZSl7dmFyIGRheXM9ZGF0ZS50bV95ZGF5KzctZGF0ZS50bV93ZGF5O3JldHVybiBsZWFkaW5nTnVsbHMoTWF0aC5mbG9vcihkYXlzLzcpLDIpfSxcIiVWXCI6ZnVuY3Rpb24oZGF0ZSl7dmFyIHZhbD1NYXRoLmZsb29yKChkYXRlLnRtX3lkYXkrNy0oZGF0ZS50bV93ZGF5KzYpJTcpLzcpO2lmKChkYXRlLnRtX3dkYXkrMzcxLWRhdGUudG1feWRheS0yKSU3PD0yKXt2YWwrK31pZighdmFsKXt2YWw9NTI7dmFyIGRlYzMxPShkYXRlLnRtX3dkYXkrNy1kYXRlLnRtX3lkYXktMSklNztpZihkZWMzMT09NHx8ZGVjMzE9PTUmJl9faXNMZWFwWWVhcihkYXRlLnRtX3llYXIlNDAwLTEpKXt2YWwrK319ZWxzZSBpZih2YWw9PTUzKXt2YXIgamFuMT0oZGF0ZS50bV93ZGF5KzM3MS1kYXRlLnRtX3lkYXkpJTc7aWYoamFuMSE9NCYmKGphbjEhPTN8fCFfX2lzTGVhcFllYXIoZGF0ZS50bV95ZWFyKSkpdmFsPTF9cmV0dXJuIGxlYWRpbmdOdWxscyh2YWwsMil9LFwiJXdcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gZGF0ZS50bV93ZGF5fSxcIiVXXCI6ZnVuY3Rpb24oZGF0ZSl7dmFyIGRheXM9ZGF0ZS50bV95ZGF5KzctKGRhdGUudG1fd2RheSs2KSU3O3JldHVybiBsZWFkaW5nTnVsbHMoTWF0aC5mbG9vcihkYXlzLzcpLDIpfSxcIiV5XCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuKGRhdGUudG1feWVhcisxOTAwKS50b1N0cmluZygpLnN1YnN0cmluZygyKX0sXCIlWVwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBkYXRlLnRtX3llYXIrMTkwMH0sXCIlelwiOmZ1bmN0aW9uKGRhdGUpe3ZhciBvZmY9ZGF0ZS50bV9nbXRvZmY7dmFyIGFoZWFkPW9mZj49MDtvZmY9TWF0aC5hYnMob2ZmKS82MDtvZmY9b2ZmLzYwKjEwMCtvZmYlNjA7cmV0dXJuKGFoZWFkP1wiK1wiOlwiLVwiKStTdHJpbmcoXCIwMDAwXCIrb2ZmKS5zbGljZSgtNCl9LFwiJVpcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gZGF0ZS50bV96b25lfSxcIiUlXCI6ZnVuY3Rpb24oKXtyZXR1cm5cIiVcIn19O3BhdHRlcm49cGF0dGVybi5yZXBsYWNlKC8lJS9nLFwiXFwwXFwwXCIpO2Zvcih2YXIgcnVsZSBpbiBFWFBBTlNJT05fUlVMRVNfMil7aWYocGF0dGVybi5pbmNsdWRlcyhydWxlKSl7cGF0dGVybj1wYXR0ZXJuLnJlcGxhY2UobmV3IFJlZ0V4cChydWxlLFwiZ1wiKSxFWFBBTlNJT05fUlVMRVNfMltydWxlXShkYXRlKSl9fXBhdHRlcm49cGF0dGVybi5yZXBsYWNlKC9cXDBcXDAvZyxcIiVcIik7dmFyIGJ5dGVzPWludEFycmF5RnJvbVN0cmluZyhwYXR0ZXJuLGZhbHNlKTtpZihieXRlcy5sZW5ndGg+bWF4c2l6ZSl7cmV0dXJuIDB9d3JpdGVBcnJheVRvTWVtb3J5KGJ5dGVzLHMpO3JldHVybiBieXRlcy5sZW5ndGgtMX1mdW5jdGlvbiBfc3RyZnRpbWVfbChzLG1heHNpemUsZm9ybWF0LHRtKXtyZXR1cm4gX3N0cmZ0aW1lKHMsbWF4c2l6ZSxmb3JtYXQsdG0pfXZhciBGU05vZGU9ZnVuY3Rpb24ocGFyZW50LG5hbWUsbW9kZSxyZGV2KXtpZighcGFyZW50KXtwYXJlbnQ9dGhpc310aGlzLnBhcmVudD1wYXJlbnQ7dGhpcy5tb3VudD1wYXJlbnQubW91bnQ7dGhpcy5tb3VudGVkPW51bGw7dGhpcy5pZD1GUy5uZXh0SW5vZGUrKzt0aGlzLm5hbWU9bmFtZTt0aGlzLm1vZGU9bW9kZTt0aGlzLm5vZGVfb3BzPXt9O3RoaXMuc3RyZWFtX29wcz17fTt0aGlzLnJkZXY9cmRldn07dmFyIHJlYWRNb2RlPTI5Mnw3Mzt2YXIgd3JpdGVNb2RlPTE0NjtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhGU05vZGUucHJvdG90eXBlLHtyZWFkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5tb2RlJnJlYWRNb2RlKT09PXJlYWRNb2RlfSxzZXQ6ZnVuY3Rpb24odmFsKXt2YWw/dGhpcy5tb2RlfD1yZWFkTW9kZTp0aGlzLm1vZGUmPX5yZWFkTW9kZX19LHdyaXRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5tb2RlJndyaXRlTW9kZSk9PT13cml0ZU1vZGV9LHNldDpmdW5jdGlvbih2YWwpe3ZhbD90aGlzLm1vZGV8PXdyaXRlTW9kZTp0aGlzLm1vZGUmPX53cml0ZU1vZGV9fSxpc0ZvbGRlcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEZTLmlzRGlyKHRoaXMubW9kZSl9fSxpc0RldmljZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEZTLmlzQ2hyZGV2KHRoaXMubW9kZSl9fX0pO0ZTLkZTTm9kZT1GU05vZGU7RlMuc3RhdGljSW5pdCgpO0ludGVybmFsRXJyb3I9TW9kdWxlW1wiSW50ZXJuYWxFcnJvclwiXT1leHRlbmRFcnJvcihFcnJvcixcIkludGVybmFsRXJyb3JcIik7ZW1iaW5kX2luaXRfY2hhckNvZGVzKCk7QmluZGluZ0Vycm9yPU1vZHVsZVtcIkJpbmRpbmdFcnJvclwiXT1leHRlbmRFcnJvcihFcnJvcixcIkJpbmRpbmdFcnJvclwiKTtpbml0X0NsYXNzSGFuZGxlKCk7aW5pdF9lbWJpbmQoKTtpbml0X1JlZ2lzdGVyZWRQb2ludGVyKCk7VW5ib3VuZFR5cGVFcnJvcj1Nb2R1bGVbXCJVbmJvdW5kVHlwZUVycm9yXCJdPWV4dGVuZEVycm9yKEVycm9yLFwiVW5ib3VuZFR5cGVFcnJvclwiKTtpbml0X2VtdmFsKCk7dmFyIEFTU0VSVElPTlM9ZmFsc2U7ZnVuY3Rpb24gaW50QXJyYXlGcm9tU3RyaW5nKHN0cmluZ3ksZG9udEFkZE51bGwsbGVuZ3RoKXt2YXIgbGVuPWxlbmd0aD4wP2xlbmd0aDpsZW5ndGhCeXRlc1VURjgoc3RyaW5neSkrMTt2YXIgdThhcnJheT1uZXcgQXJyYXkobGVuKTt2YXIgbnVtQnl0ZXNXcml0dGVuPXN0cmluZ1RvVVRGOEFycmF5KHN0cmluZ3ksdThhcnJheSwwLHU4YXJyYXkubGVuZ3RoKTtpZihkb250QWRkTnVsbCl1OGFycmF5Lmxlbmd0aD1udW1CeXRlc1dyaXR0ZW47cmV0dXJuIHU4YXJyYXl9ZnVuY3Rpb24gaW50QXJyYXlUb1N0cmluZyhhcnJheSl7dmFyIHJldD1bXTtmb3IodmFyIGk9MDtpPGFycmF5Lmxlbmd0aDtpKyspe3ZhciBjaHI9YXJyYXlbaV07aWYoY2hyPjI1NSl7aWYoQVNTRVJUSU9OUyl7YXNzZXJ0KGZhbHNlLFwiQ2hhcmFjdGVyIGNvZGUgXCIrY2hyK1wiIChcIitTdHJpbmcuZnJvbUNoYXJDb2RlKGNocikrXCIpICBhdCBvZmZzZXQgXCIraStcIiBub3QgaW4gMHgwMC0weEZGLlwiKX1jaHImPTI1NX1yZXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNocikpfXJldHVybiByZXQuam9pbihcIlwiKX12YXIgZGVjb2RlQmFzZTY0PXR5cGVvZiBhdG9iPT1cImZ1bmN0aW9uXCI/YXRvYjpmdW5jdGlvbihpbnB1dCl7dmFyIGtleVN0cj1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCI7dmFyIG91dHB1dD1cIlwiO3ZhciBjaHIxLGNocjIsY2hyMzt2YXIgZW5jMSxlbmMyLGVuYzMsZW5jNDt2YXIgaT0wO2lucHV0PWlucHV0LnJlcGxhY2UoL1teQS1aYS16MC05XFwrXFwvXFw9XS9nLFwiXCIpO2Rve2VuYzE9a2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO2VuYzI9a2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO2VuYzM9a2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO2VuYzQ9a2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO2NocjE9ZW5jMTw8MnxlbmMyPj40O2NocjI9KGVuYzImMTUpPDw0fGVuYzM+PjI7Y2hyMz0oZW5jMyYzKTw8NnxlbmM0O291dHB1dD1vdXRwdXQrU3RyaW5nLmZyb21DaGFyQ29kZShjaHIxKTtpZihlbmMzIT09NjQpe291dHB1dD1vdXRwdXQrU3RyaW5nLmZyb21DaGFyQ29kZShjaHIyKX1pZihlbmM0IT09NjQpe291dHB1dD1vdXRwdXQrU3RyaW5nLmZyb21DaGFyQ29kZShjaHIzKX19d2hpbGUoaTxpbnB1dC5sZW5ndGgpO3JldHVybiBvdXRwdXR9O2Z1bmN0aW9uIGludEFycmF5RnJvbUJhc2U2NChzKXtpZih0eXBlb2YgRU5WSVJPTk1FTlRfSVNfTk9ERT09XCJib29sZWFuXCImJkVOVklST05NRU5UX0lTX05PREUpe3ZhciBidWY9QnVmZmVyLmZyb20ocyxcImJhc2U2NFwiKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmW1wiYnVmZmVyXCJdLGJ1ZltcImJ5dGVPZmZzZXRcIl0sYnVmW1wiYnl0ZUxlbmd0aFwiXSl9dHJ5e3ZhciBkZWNvZGVkPWRlY29kZUJhc2U2NChzKTt2YXIgYnl0ZXM9bmV3IFVpbnQ4QXJyYXkoZGVjb2RlZC5sZW5ndGgpO2Zvcih2YXIgaT0wO2k8ZGVjb2RlZC5sZW5ndGg7KytpKXtieXRlc1tpXT1kZWNvZGVkLmNoYXJDb2RlQXQoaSl9cmV0dXJuIGJ5dGVzfWNhdGNoKF8pe3Rocm93IG5ldyBFcnJvcihcIkNvbnZlcnRpbmcgYmFzZTY0IHN0cmluZyB0byBieXRlcyBmYWlsZWQuXCIpfX1mdW5jdGlvbiB0cnlQYXJzZUFzRGF0YVVSSShmaWxlbmFtZSl7aWYoIWlzRGF0YVVSSShmaWxlbmFtZSkpe3JldHVybn1yZXR1cm4gaW50QXJyYXlGcm9tQmFzZTY0KGZpbGVuYW1lLnNsaWNlKGRhdGFVUklQcmVmaXgubGVuZ3RoKSl9dmFyIGFzbUxpYnJhcnlBcmc9e1wia1wiOl9fX2N4YV9hbGxvY2F0ZV9leGNlcHRpb24sXCJqXCI6X19fY3hhX3Rocm93LFwidFwiOl9fX3N5c2NhbGxfZmNudGw2NCxcIkxcIjpfX19zeXNjYWxsX2lvY3RsLFwiTVwiOl9fX3N5c2NhbGxfb3BlbmF0LFwiVVwiOl9fZW1iaW5kX2ZpbmFsaXplX3ZhbHVlX29iamVjdCxcIkVcIjpfX2VtYmluZF9yZWdpc3Rlcl9iaWdpbnQsXCJRXCI6X19lbWJpbmRfcmVnaXN0ZXJfYm9vbCxcInFcIjpfX2VtYmluZF9yZWdpc3Rlcl9jbGFzcyxcInBcIjpfX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19jb25zdHJ1Y3RvcixcImZcIjpfX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19mdW5jdGlvbixcInhcIjpfX2VtYmluZF9yZWdpc3Rlcl9jb25zdGFudCxcIlBcIjpfX2VtYmluZF9yZWdpc3Rlcl9lbXZhbCxcIndcIjpfX2VtYmluZF9yZWdpc3Rlcl9mbG9hdCxcImdcIjpfX2VtYmluZF9yZWdpc3Rlcl9mdW5jdGlvbixcImhcIjpfX2VtYmluZF9yZWdpc3Rlcl9pbnRlZ2VyLFwiYlwiOl9fZW1iaW5kX3JlZ2lzdGVyX21lbW9yeV92aWV3LFwidlwiOl9fZW1iaW5kX3JlZ2lzdGVyX3N0ZF9zdHJpbmcsXCJuXCI6X19lbWJpbmRfcmVnaXN0ZXJfc3RkX3dzdHJpbmcsXCJXXCI6X19lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0LFwiVlwiOl9fZW1iaW5kX3JlZ2lzdGVyX3ZhbHVlX29iamVjdF9maWVsZCxcIlJcIjpfX2VtYmluZF9yZWdpc3Rlcl92b2lkLFwidVwiOl9fZW1zY3JpcHRlbl9kYXRlX25vdyxcIkdcIjpfX2Vtc2NyaXB0ZW5fdGhyb3dfbG9uZ2ptcCxcIlNcIjpfX2VtdmFsX2RlY3JlZixcIlRcIjpfX2VtdmFsX2luY3JlZixcIm9cIjpfX2VtdmFsX3Rha2VfdmFsdWUsXCJOXCI6X19sb2NhbHRpbWVfanMsXCJPXCI6X190enNldF9qcyxcImFcIjpfYWJvcnQsXCJpXCI6X2Vtc2NyaXB0ZW5fYXNtX2NvbnN0X2ludCxcIkhcIjpfZW1zY3JpcHRlbl9yZXNpemVfaGVhcCxcIklcIjpfZW52aXJvbl9nZXQsXCJKXCI6X2Vudmlyb25fc2l6ZXNfZ2V0LFwiZFwiOl9leGl0LFwiclwiOl9mZF9jbG9zZSxcIktcIjpfZmRfcmVhZCxcIkRcIjpfZmRfc2VlayxcInNcIjpfZmRfd3JpdGUsXCJlXCI6X2dldFRlbXBSZXQwLFwieVwiOmludm9rZV9paSxcIkFcIjppbnZva2VfaWlpLFwielwiOmludm9rZV9paWlpLFwibFwiOmludm9rZV92aSxcIkJcIjppbnZva2VfdmlpLFwiQ1wiOmludm9rZV92aWlpLFwibVwiOmludm9rZV92aWlpaSxcImNcIjpfc2V0VGVtcFJldDAsXCJYXCI6X3N0cmZ0aW1lLFwiRlwiOl9zdHJmdGltZV9sfTt2YXIgYXNtPWNyZWF0ZVdhc20oKTt2YXIgX19fd2FzbV9jYWxsX2N0b3JzPU1vZHVsZVtcIl9fX3dhc21fY2FsbF9jdG9yc1wiXT1mdW5jdGlvbigpe3JldHVybihfX193YXNtX2NhbGxfY3RvcnM9TW9kdWxlW1wiX19fd2FzbV9jYWxsX2N0b3JzXCJdPU1vZHVsZVtcImFzbVwiXVtcIlpcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9tYWxsb2M9TW9kdWxlW1wiX21hbGxvY1wiXT1mdW5jdGlvbigpe3JldHVybihfbWFsbG9jPU1vZHVsZVtcIl9tYWxsb2NcIl09TW9kdWxlW1wiYXNtXCJdW1wiX1wiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2ZyZWU9TW9kdWxlW1wiX2ZyZWVcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2ZyZWU9TW9kdWxlW1wiX2ZyZWVcIl09TW9kdWxlW1wiYXNtXCJdW1wiJFwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX19fZXJybm9fbG9jYXRpb249TW9kdWxlW1wiX19fZXJybm9fbG9jYXRpb25cIl09ZnVuY3Rpb24oKXtyZXR1cm4oX19fZXJybm9fbG9jYXRpb249TW9kdWxlW1wiX19fZXJybm9fbG9jYXRpb25cIl09TW9kdWxlW1wiYXNtXCJdW1wiYWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9fX2dldFR5cGVOYW1lPU1vZHVsZVtcIl9fX2dldFR5cGVOYW1lXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9fX2dldFR5cGVOYW1lPU1vZHVsZVtcIl9fX2dldFR5cGVOYW1lXCJdPU1vZHVsZVtcImFzbVwiXVtcImNhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfX19lbWJpbmRfcmVnaXN0ZXJfbmF0aXZlX2FuZF9idWlsdGluX3R5cGVzPU1vZHVsZVtcIl9fX2VtYmluZF9yZWdpc3Rlcl9uYXRpdmVfYW5kX2J1aWx0aW5fdHlwZXNcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX19fZW1iaW5kX3JlZ2lzdGVyX25hdGl2ZV9hbmRfYnVpbHRpbl90eXBlcz1Nb2R1bGVbXCJfX19lbWJpbmRfcmVnaXN0ZXJfbmF0aXZlX2FuZF9idWlsdGluX3R5cGVzXCJdPU1vZHVsZVtcImFzbVwiXVtcImRhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfc2V0VGhyZXc9TW9kdWxlW1wiX3NldFRocmV3XCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9zZXRUaHJldz1Nb2R1bGVbXCJfc2V0VGhyZXdcIl09TW9kdWxlW1wiYXNtXCJdW1wiZWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIHN0YWNrU2F2ZT1Nb2R1bGVbXCJzdGFja1NhdmVcIl09ZnVuY3Rpb24oKXtyZXR1cm4oc3RhY2tTYXZlPU1vZHVsZVtcInN0YWNrU2F2ZVwiXT1Nb2R1bGVbXCJhc21cIl1bXCJmYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgc3RhY2tSZXN0b3JlPU1vZHVsZVtcInN0YWNrUmVzdG9yZVwiXT1mdW5jdGlvbigpe3JldHVybihzdGFja1Jlc3RvcmU9TW9kdWxlW1wic3RhY2tSZXN0b3JlXCJdPU1vZHVsZVtcImFzbVwiXVtcImdhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfX19jeGFfaXNfcG9pbnRlcl90eXBlPU1vZHVsZVtcIl9fX2N4YV9pc19wb2ludGVyX3R5cGVcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX19fY3hhX2lzX3BvaW50ZXJfdHlwZT1Nb2R1bGVbXCJfX19jeGFfaXNfcG9pbnRlcl90eXBlXCJdPU1vZHVsZVtcImFzbVwiXVtcImhhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBkeW5DYWxsX2ppamk9TW9kdWxlW1wiZHluQ2FsbF9qaWppXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKGR5bkNhbGxfamlqaT1Nb2R1bGVbXCJkeW5DYWxsX2ppamlcIl09TW9kdWxlW1wiYXNtXCJdW1wiaWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIGR5bkNhbGxfdmlpamlpPU1vZHVsZVtcImR5bkNhbGxfdmlpamlpXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKGR5bkNhbGxfdmlpamlpPU1vZHVsZVtcImR5bkNhbGxfdmlpamlpXCJdPU1vZHVsZVtcImFzbVwiXVtcImphXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBkeW5DYWxsX2lpaWlpaj1Nb2R1bGVbXCJkeW5DYWxsX2lpaWlpalwiXT1mdW5jdGlvbigpe3JldHVybihkeW5DYWxsX2lpaWlpaj1Nb2R1bGVbXCJkeW5DYWxsX2lpaWlpalwiXT1Nb2R1bGVbXCJhc21cIl1bXCJrYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgZHluQ2FsbF9paWlpaWpqPU1vZHVsZVtcImR5bkNhbGxfaWlpaWlqalwiXT1mdW5jdGlvbigpe3JldHVybihkeW5DYWxsX2lpaWlpamo9TW9kdWxlW1wiZHluQ2FsbF9paWlpaWpqXCJdPU1vZHVsZVtcImFzbVwiXVtcImxhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBkeW5DYWxsX2lpaWlpaWpqPU1vZHVsZVtcImR5bkNhbGxfaWlpaWlpampcIl09ZnVuY3Rpb24oKXtyZXR1cm4oZHluQ2FsbF9paWlpaWlqaj1Nb2R1bGVbXCJkeW5DYWxsX2lpaWlpaWpqXCJdPU1vZHVsZVtcImFzbVwiXVtcIm1hXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O2Z1bmN0aW9uIGludm9rZV9paShpbmRleCxhMSl7dmFyIHNwPXN0YWNrU2F2ZSgpO3RyeXtyZXR1cm4gZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExKX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzApdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19ZnVuY3Rpb24gaW52b2tlX3ZpKGluZGV4LGExKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e2dldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSl9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswKXRocm93IGU7X3NldFRocmV3KDEsMCl9fWZ1bmN0aW9uIGludm9rZV92aWlpaShpbmRleCxhMSxhMixhMyxhNCl7dmFyIHNwPXN0YWNrU2F2ZSgpO3RyeXtnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsYTIsYTMsYTQpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCl0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfdmlpaShpbmRleCxhMSxhMixhMyl7dmFyIHNwPXN0YWNrU2F2ZSgpO3RyeXtnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsYTIsYTMpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCl0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfdmlpKGluZGV4LGExLGEyKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e2dldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSxhMil9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswKXRocm93IGU7X3NldFRocmV3KDEsMCl9fWZ1bmN0aW9uIGludm9rZV9paWkoaW5kZXgsYTEsYTIpe3ZhciBzcD1zdGFja1NhdmUoKTt0cnl7cmV0dXJuIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSxhMil9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswKXRocm93IGU7X3NldFRocmV3KDEsMCl9fWZ1bmN0aW9uIGludm9rZV9paWlpKGluZGV4LGExLGEyLGEzKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3JldHVybiBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsYTIsYTMpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCl0aHJvdyBlO19zZXRUaHJldygxLDApfX1Nb2R1bGVbXCJGU1wiXT1GUzt2YXIgY2FsbGVkUnVuO2Z1bmN0aW9uIEV4aXRTdGF0dXMoc3RhdHVzKXt0aGlzLm5hbWU9XCJFeGl0U3RhdHVzXCI7dGhpcy5tZXNzYWdlPVwiUHJvZ3JhbSB0ZXJtaW5hdGVkIHdpdGggZXhpdChcIitzdGF0dXMrXCIpXCI7dGhpcy5zdGF0dXM9c3RhdHVzfWRlcGVuZGVuY2llc0Z1bGZpbGxlZD1mdW5jdGlvbiBydW5DYWxsZXIoKXtpZighY2FsbGVkUnVuKXJ1bigpO2lmKCFjYWxsZWRSdW4pZGVwZW5kZW5jaWVzRnVsZmlsbGVkPXJ1bkNhbGxlcn07ZnVuY3Rpb24gcnVuKGFyZ3Mpe2FyZ3M9YXJnc3x8YXJndW1lbnRzXztpZihydW5EZXBlbmRlbmNpZXM+MCl7cmV0dXJufXByZVJ1bigpO2lmKHJ1bkRlcGVuZGVuY2llcz4wKXtyZXR1cm59ZnVuY3Rpb24gZG9SdW4oKXtpZihjYWxsZWRSdW4pcmV0dXJuO2NhbGxlZFJ1bj10cnVlO01vZHVsZVtcImNhbGxlZFJ1blwiXT10cnVlO2lmKEFCT1JUKXJldHVybjtpbml0UnVudGltZSgpO3JlYWR5UHJvbWlzZVJlc29sdmUoTW9kdWxlKTtpZihNb2R1bGVbXCJvblJ1bnRpbWVJbml0aWFsaXplZFwiXSlNb2R1bGVbXCJvblJ1bnRpbWVJbml0aWFsaXplZFwiXSgpO3Bvc3RSdW4oKX1pZihNb2R1bGVbXCJzZXRTdGF0dXNcIl0pe01vZHVsZVtcInNldFN0YXR1c1wiXShcIlJ1bm5pbmcuLi5cIik7c2V0VGltZW91dChmdW5jdGlvbigpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtNb2R1bGVbXCJzZXRTdGF0dXNcIl0oXCJcIil9LDEpO2RvUnVuKCl9LDEpfWVsc2V7ZG9SdW4oKX19TW9kdWxlW1wicnVuXCJdPXJ1bjtmdW5jdGlvbiBleGl0KHN0YXR1cyxpbXBsaWNpdCl7RVhJVFNUQVRVUz1zdGF0dXM7cHJvY0V4aXQoc3RhdHVzKX1mdW5jdGlvbiBwcm9jRXhpdChjb2RlKXtFWElUU1RBVFVTPWNvZGU7aWYoIWtlZXBSdW50aW1lQWxpdmUoKSl7aWYoTW9kdWxlW1wib25FeGl0XCJdKU1vZHVsZVtcIm9uRXhpdFwiXShjb2RlKTtBQk9SVD10cnVlfXF1aXRfKGNvZGUsbmV3IEV4aXRTdGF0dXMoY29kZSkpfWlmKE1vZHVsZVtcInByZUluaXRcIl0pe2lmKHR5cGVvZiBNb2R1bGVbXCJwcmVJbml0XCJdPT1cImZ1bmN0aW9uXCIpTW9kdWxlW1wicHJlSW5pdFwiXT1bTW9kdWxlW1wicHJlSW5pdFwiXV07d2hpbGUoTW9kdWxlW1wicHJlSW5pdFwiXS5sZW5ndGg+MCl7TW9kdWxlW1wicHJlSW5pdFwiXS5wb3AoKSgpfX1ydW4oKTtcblxuXG4gIHJldHVybiBNb2R1bGUucmVhZHlcbn1cbik7XG59KSgpO1xuZXhwb3J0IGRlZmF1bHQgTW9kdWxlOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG52YXIgdHJhbnNpdGlvbmFsRGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cy90cmFuc2l0aW9uYWwnKTtcbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvQ2FuY2VsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICB2YXIgcmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB2YXIgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgIHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKGZ1bmN0aW9uIF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCBmdW5jdGlvbiBfcmVqZWN0KGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXQgPyAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHRyYW5zaXRpb25hbC5jbGFyaWZ5VGltZW91dEVycm9yID8gJ0VUSU1FRE9VVCcgOiAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuIHx8IGNvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gZnVuY3Rpb24oY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoIWNhbmNlbCB8fCAoY2FuY2VsICYmIGNhbmNlbC50eXBlKSA/IG5ldyBDYW5jZWwoJ2NhbmNlbGVkJykgOiBjYW5jZWwpO1xuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuICYmIGNvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBjb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0RGF0YSkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5heGlvcy5WRVJTSU9OID0gcmVxdWlyZSgnLi9lbnYvZGF0YScpLnZlcnNpb247XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4vaGVscGVycy9pc0F4aW9zRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcblxuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbihmdW5jdGlvbihjYW5jZWwpIHtcbiAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgIHZhciBpO1xuICAgIHZhciBsID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgfVxuICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbiA9IGZ1bmN0aW9uKG9uZnVsZmlsbGVkKSB7XG4gICAgdmFyIF9yZXNvbHZlO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICB9XG59O1xuXG4vKipcbiAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAqL1xuXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZShsaXN0ZW5lcikge1xuICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG52YXIgdmFsaWRhdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy92YWxpZGF0b3InKTtcblxudmFyIHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgY29uZmlnLnVybCA9IGNvbmZpZ09yVXJsO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZ09yVXJsIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbDtcblxuICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgfSwgZmFsc2UpO1xuICB9XG5cbiAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICB2YXIgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdmFyIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcHJvbWlzZTtcblxuICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG5cbiAgICBBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgIGNoYWluID0gY2hhaW4uY29uY2F0KHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG5cbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG5cbiAgdmFyIG5ld0NvbmZpZyA9IGNvbmZpZztcbiAgd2hpbGUgKHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHZhciBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdmFyIG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHRyeSB7XG4gICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvblJlamVjdGVkKGVycm9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdChuZXdDb25maWcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH1cblxuICB3aGlsZSAocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCksIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkLFxuICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbCcpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbCgnY2FuY2VsZWQnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBtZXJnZU1hcCA9IHtcbiAgICAndXJsJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnbWV0aG9kJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnZGF0YSc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2Jhc2VVUkwnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXF1ZXN0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVzcG9uc2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdwYXJhbXNTZXJpYWxpemVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXRNZXNzYWdlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnd2l0aENyZWRlbnRpYWxzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnYWRhcHRlcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlVHlwZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZDb29raWVOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkhlYWRlck5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvblVwbG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25Eb3dubG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnZGVjb21wcmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhCb2R5TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNwb3J0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnaHR0cEFnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnaHR0cHNBZ2VudCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2NhbmNlbFRva2VuJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnc29ja2V0UGF0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlRW5jb2RpbmcnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd2YWxpZGF0ZVN0YXR1cyc6IG1lcmdlRGlyZWN0S2V5c1xuICB9O1xuXG4gIHV0aWxzLmZvckVhY2goT2JqZWN0LmtleXMoY29uZmlnMSkuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKSwgZnVuY3Rpb24gY29tcHV0ZUNvbmZpZ1ZhbHVlKHByb3ApIHtcbiAgICB2YXIgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIHZhciBjb25maWdWYWx1ZSA9IG1lcmdlKHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIHZhciBjb250ZXh0ID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb250ZXh0LCBkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2VuaGFuY2VFcnJvcicpO1xudmFyIHRyYW5zaXRpb25hbERlZmF1bHRzID0gcmVxdWlyZSgnLi90cmFuc2l0aW9uYWwnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpIHx8IChoZWFkZXJzICYmIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIHZhciBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgdmFyIGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICB2YXIgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChzdHJpY3RKU09OUGFyc2luZyB8fCAoZm9yY2VkSlNPTlBhcnNpbmcgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgZGF0YS5sZW5ndGgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgZW5oYW5jZUVycm9yKGUsIHRoaXMsICdFX0pTT05fUEFSU0UnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzaWxlbnRKU09OUGFyc2luZzogdHJ1ZSxcbiAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwidmVyc2lvblwiOiBcIjAuMjYuMVwiXG59OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2Vudi9kYXRhJykudmVyc2lvbjtcblxudmFyIHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUsIGkpIHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbnZhciBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG9wdCwgb3B0cykge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgdmFyIG9wdCA9IGtleXNbaV07XG4gICAgdmFyIHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXNzZXJ0T3B0aW9uczogYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yczogdmFsaWRhdG9yc1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZvcm1EYXRhXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBVUkxTZWFyY2hQYXJhbXNdJztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnRyaW0gPyBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuZnVuY3Rpb24gc3RyaXBCT00oY29udGVudCkge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW0sXG4gIHN0cmlwQk9NOiBzdHJpcEJPTVxufTtcbiIsIi8qXG4gKiAgQVJDb250cm9sbGVyTkZULnRzXG4gKiAgSlNBUlRvb2xLaXRORlRcbiAqXG4gKiAgVGhpcyBmaWxlIGlzIHBhcnQgb2YgSlNBUlRvb2xLaXRORlQgLSBXZWJBUktpdC5cbiAqXG4gKiAgSlNBUlRvb2xLaXRORlQgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiAgSlNBUlRvb2xLaXRORlQgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiAgYWxvbmcgd2l0aCBKU0FSVG9vbEtpdE5GVC4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiAgQXMgYSBzcGVjaWFsIGV4Y2VwdGlvbiwgdGhlIGNvcHlyaWdodCBob2xkZXJzIG9mIHRoaXMgbGlicmFyeSBnaXZlIHlvdVxuICogIHBlcm1pc3Npb24gdG8gbGluayB0aGlzIGxpYnJhcnkgd2l0aCBpbmRlcGVuZGVudCBtb2R1bGVzIHRvIHByb2R1Y2UgYW5cbiAqICBleGVjdXRhYmxlLCByZWdhcmRsZXNzIG9mIHRoZSBsaWNlbnNlIHRlcm1zIG9mIHRoZXNlIGluZGVwZW5kZW50IG1vZHVsZXMsIGFuZCB0b1xuICogIGNvcHkgYW5kIGRpc3RyaWJ1dGUgdGhlIHJlc3VsdGluZyBleGVjdXRhYmxlIHVuZGVyIHRlcm1zIG9mIHlvdXIgY2hvaWNlLFxuICogIHByb3ZpZGVkIHRoYXQgeW91IGFsc28gbWVldCwgZm9yIGVhY2ggbGlua2VkIGluZGVwZW5kZW50IG1vZHVsZSwgdGhlIHRlcm1zIGFuZFxuICogIGNvbmRpdGlvbnMgb2YgdGhlIGxpY2Vuc2Ugb2YgdGhhdCBtb2R1bGUuIEFuIGluZGVwZW5kZW50IG1vZHVsZSBpcyBhIG1vZHVsZVxuICogIHdoaWNoIGlzIG5laXRoZXIgZGVyaXZlZCBmcm9tIG5vciBiYXNlZCBvbiB0aGlzIGxpYnJhcnkuIElmIHlvdSBtb2RpZnkgdGhpc1xuICogIGxpYnJhcnksIHlvdSBtYXkgZXh0ZW5kIHRoaXMgZXhjZXB0aW9uIHRvIHlvdXIgdmVyc2lvbiBvZiB0aGUgbGlicmFyeSwgYnV0IHlvdVxuICogIGFyZSBub3Qgb2JsaWdhdGVkIHRvIGRvIHNvLiBJZiB5b3UgZG8gbm90IHdpc2ggdG8gZG8gc28sIGRlbGV0ZSB0aGlzIGV4Y2VwdGlvblxuICogIHN0YXRlbWVudCBmcm9tIHlvdXIgdmVyc2lvbi5cbiAqXG4gKiAgQ29weXJpZ2h0IDIwMjAgV2ViQVJLaXQuXG4gKlxuICogIEF1dGhvcihzKTogV2FsdGVyIFBlcmRhbiBAa2Fsd2FsdCBodHRwczovL2dpdGh1Yi5jb20va2Fsd2FsdFxuICpcbiAqL1xuaW1wb3J0IEFSVG9vbGtpdE5GVCBmcm9tIFwiLi9BUlRvb2xraXRORlRcIjtcblxuaW50ZXJmYWNlIEltYWdlT2JqIGV4dGVuZHMgSFRNTENhbnZhc0VsZW1lbnQge1xuICB2aWRlb1dpZHRoOiBudW1iZXI7XG4gIHdpZHRoOiBudW1iZXI7XG4gIHZpZGVvSGVpZ2h0OiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xuICBkYXRhOiBVaW50OENsYW1wZWRBcnJheTtcbn1cblxuaW50ZXJmYWNlIGRlbGVnYXRlTWV0aG9kcyB7XG4gIHNldHVwOiB7XG4gICAgKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBjYW1lcmFJZDogbnVtYmVyKTogbnVtYmVyO1xuICB9O1xuICBzZXR1cEFSMjoge1xuICAgIChpZDogbnVtYmVyKTogdm9pZDtcbiAgfTtcbiAgc2V0RGVidWdNb2RlOiAoaWQ6IG51bWJlciwgbW9kZTogYm9vbGVhbikgPT4gbnVtYmVyO1xuICBnZXREZWJ1Z01vZGU6IChpZDogbnVtYmVyKSA9PiBib29sZWFuO1xuICBnZXRQcm9jZXNzaW5nSW1hZ2U6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gIHNldExvZ0xldmVsOiAobW9kZTogYm9vbGVhbikgPT4gbnVtYmVyO1xuICBnZXRMb2dMZXZlbDogKCkgPT4gbnVtYmVyO1xuICBmcmFtZU1hbGxvYzoge1xuICAgIGZyYW1lcG9pbnRlcjogbnVtYmVyO1xuICAgIGZyYW1lc2l6ZTogbnVtYmVyO1xuICAgIHZpZGVvTHVtYVBvaW50ZXI6IG51bWJlcjtcbiAgICBjYW1lcmE6IG51bWJlcjtcbiAgICB0cmFuc2Zvcm06IG51bWJlcjtcbiAgfTtcbiAgaW5zdGFuY2U6IHtcbiAgICBmcmFtZU1hbGxvYzoge1xuICAgICAgZnJhbWVwb2ludGVyOiBudW1iZXI7XG4gICAgICBmcmFtZXNpemU6IG51bWJlcjtcbiAgICAgIHZpZGVvTHVtYVBvaW50ZXI6IG51bWJlcjtcbiAgICAgIGNhbWVyYTogbnVtYmVyO1xuICAgICAgdHJhbnNmb3JtOiBudW1iZXI7XG4gICAgfTtcbiAgICBORlRNYXJrZXJJbmZvOiB7XG4gICAgICBlcnJvcjogbnVtYmVyO1xuICAgICAgZm91bmQ6IG51bWJlcjtcbiAgICAgIGlkOiBudW1iZXI7XG4gICAgICBwb3NlOiBGbG9hdDY0QXJyYXk7XG4gICAgfTtcbiAgICBIRUFQVTg6IHtcbiAgICAgIGJ1ZmZlcjogVWludDhBcnJheTtcbiAgICB9O1xuICB9O1xuICBORlRNYXJrZXJJbmZvOiB7XG4gICAgZXJyb3I6IG51bWJlcjtcbiAgICBmb3VuZDogbnVtYmVyO1xuICAgIGlkOiBudW1iZXI7XG4gICAgcG9zZTogRmxvYXQ2NEFycmF5O1xuICB9O1xuICBsb2FkQ2FtZXJhOiAoY2FtZXJhUGFyYW06IHN0cmluZykgPT4gUHJvbWlzZTxudW1iZXI+O1xuICBzZXRQcm9qZWN0aW9uTmVhclBsYW5lOiB7XG4gICAgKGlkOiBudW1iZXIsIHZhbHVlOiBudW1iZXIpOiB2b2lkO1xuICB9O1xuICBnZXRQcm9qZWN0aW9uTmVhclBsYW5lOiAoaWQ6IG51bWJlcikgPT4gbnVtYmVyO1xuICBzZXRQcm9qZWN0aW9uRmFyUGxhbmU6IChpZDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyKSA9PiB2b2lkO1xuICBnZXRQcm9qZWN0aW9uRmFyUGxhbmU6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gIHNldFRocmVzaG9sZE1vZGU6IChpZDogbnVtYmVyLCBtb2RlOiBudW1iZXIpID0+IG51bWJlcjtcbiAgZ2V0VGhyZXNob2xkTW9kZTogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgc2V0VGhyZXNob2xkOiAoaWQ6IG51bWJlciwgdGhyZXNob2xkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgZ2V0VGhyZXNob2xkOiAoaWQ6IG51bWJlcikgPT4gbnVtYmVyO1xuICBhZGRORlRNYXJrZXJzOiAoXG4gICAgYXJJZDogbnVtYmVyLFxuICAgIHVybHM6IEFycmF5PHN0cmluZz4sXG4gICAgY2FsbGJhY2s6IChmaWxlbmFtZTogYW55KSA9PiB2b2lkLFxuICAgIG9uRXJyb3IyOiAoZXJyb3JOdW1iZXI6IGFueSkgPT4gdm9pZFxuICApID0+IFt7IGlkOiBudW1iZXIgfV07XG4gIGRldGVjdE1hcmtlcjogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgZGV0ZWN0TkZUTWFya2VyOiAoYXJJZDogbnVtYmVyKSA9PiB2b2lkO1xuICBnZXRORlRNYXJrZXI6IChpZDogbnVtYmVyLCBtYXJrZXJJbmRleDogbnVtYmVyKSA9PiBudW1iZXI7XG4gIGdldE5GVERhdGE6IChpZDogbnVtYmVyLCBpbmRleDogbnVtYmVyKSA9PiBvYmplY3Q7XG4gIHNldEltYWdlUHJvY01vZGU6IChpZDogbnVtYmVyLCBtb2RlOiBudW1iZXIpID0+IG51bWJlcjtcbiAgZ2V0SW1hZ2VQcm9jTW9kZTogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQVJDb250cm9sbGVyTkZUIHtcbiAgLy8gcHJpdmF0ZSBkZWNsYXJhdGlvbnNcbiAgcHJpdmF0ZSBpZDogbnVtYmVyO1xuICBwcml2YXRlIHdpZHRoOiBudW1iZXI7XG4gIHByaXZhdGUgaGVpZ2h0OiBudW1iZXI7XG4gIHByaXZhdGUgY2FtZXJhUGFyYW06IHN0cmluZztcbiAgcHJpdmF0ZSBjYW1lcmFJZDogbnVtYmVyO1xuICBwcml2YXRlIGNhbWVyYUxvYWRlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBhcnRvb2xraXRORlQ6IGRlbGVnYXRlTWV0aG9kcztcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IG9iamVjdDtcbiAgcHJpdmF0ZSBuZnRNYXJrZXJzOiBvYmplY3Q7XG4gIHByaXZhdGUgdHJhbnNmb3JtX21hdDogRmxvYXQ2NEFycmF5O1xuICBwcml2YXRlIG1hcmtlcl90cmFuc2Zvcm1fbWF0OiBGbG9hdDY0QXJyYXk7XG4gIHByaXZhdGUgdHJhbnNmb3JtR0xfUkg6IEZsb2F0NjRBcnJheTtcbiAgcHJpdmF0ZSB2aWRlb1dpZHRoOiBudW1iZXI7XG4gIHByaXZhdGUgdmlkZW9IZWlnaHQ6IG51bWJlcjtcbiAgcHJpdmF0ZSB2aWRlb1NpemU6IG51bWJlcjtcbiAgcHJpdmF0ZSBmcmFtZXBvaW50ZXI6IG51bWJlcjtcbiAgcHJpdmF0ZSBmcmFtZXNpemU6IG51bWJlcjtcbiAgcHJpdmF0ZSBkYXRhSGVhcDogVWludDhBcnJheTtcbiAgcHJpdmF0ZSB2aWRlb0x1bWE6IFVpbnQ4QXJyYXk7XG4gIHByaXZhdGUgY2FtZXJhX21hdDogRmxvYXQ2NEFycmF5O1xuICBwcml2YXRlIHZpZGVvTHVtYVBvaW50ZXI6IG51bWJlcjtcbiAgcHJpdmF0ZSBuZnRNYXJrZXJGb3VuZDogYm9vbGVhbjsgLy8gPSBmYWxzZVxuICBwcml2YXRlIG5mdE1hcmtlckZvdW5kVGltZTogbnVtYmVyO1xuICBwcml2YXRlIG5mdE1hcmtlckNvdW50OiBudW1iZXI7IC8vID0gMFxuICBwcml2YXRlIGRlZmF1bHRNYXJrZXJXaWR0aDogbnVtYmVyO1xuXG4gIHByaXZhdGUgX2J3cG9pbnRlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgQVJDb250cm9sbGVyTkZUIGNvbnN0cnVjdG9yLiBJdCBoYXMgNCBwYXJhbXMgKHNlZSBhYm92ZSkuXG4gICAqIFRoZXNlIHByb3BlcnRpZXMgYXJlIGluaXRpYWxpemVkOlxuICAgKiBpZCwgd2lkdGgsIGhlaWdodCwgY2FtZXJhUGFyYW0sIGNhbWVyYUlkLFxuICAgKiBjYW1lcmFMb2FkZWQsIGFydG9vbGtpdE5GVCwgbGlzdGVuZXJzLCBuZnRNYXJrZXJzLCB0cmFuc2Zvcm1fbWF0LFxuICAgKiB0cmFuc2Zvcm1HTF9SSCwgbWFya2VyX3RyYW5zZm9ybV9tYXQsIHZpZGVvV2lkdGgsIHZpZGVvSGVpZ2h0LCB2aWRlb1NpemUsXG4gICAqIGZyYW1lcG9pbnRlciwgZnJhbWVzaXplLCBkYXRhSGVhcCwgdmlkZW9MdW1hLCBjYW1lcmFfbWF0LCB2aWRlb0x1bWFQb2ludGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYW1lcmFQYXJhbVxuICAgKi9cbiAgY29uc3RydWN0b3Iod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGNhbWVyYVBhcmFtOiBzdHJpbmcpIHtcbiAgICAvLyBubyBwb2ludCBpbiBpbml0aWFsaXppbmcgYSBtZW1iZXIgYXMgXCJ1bmRlZmluZWRcIlxuICAgIC8vIHJlcGxhY2VkIGl0IHdpdGggLTFcbiAgICB0aGlzLmlkID0gLTE7XG5cbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAvLyB0aGlzIGlzIGEgcmVwbGFjZW1lbnQgZm9yIEFSQ2FtZXJhUGFyYW1cbiAgICB0aGlzLmNhbWVyYVBhcmFtID0gY2FtZXJhUGFyYW07XG4gICAgdGhpcy5jYW1lcmFJZCA9IC0xO1xuICAgIHRoaXMuY2FtZXJhTG9hZGVkID0gZmFsc2U7XG5cbiAgICAvLyB0b29sa2l0IGluc3RhbmNlXG4gICAgdGhpcy5hcnRvb2xraXRORlQ7XG5cbiAgICAvLyB0byByZWdpc3RlciBvYnNlcnZlcnMgYXMgZXZlbnQgbGlzdGVuZXJzXG4gICAgdGhpcy5saXN0ZW5lcnMgPSB7fTtcblxuICAgIHRoaXMubmZ0TWFya2VycyA9IHt9O1xuXG4gICAgdGhpcy50cmFuc2Zvcm1fbWF0ID0gbmV3IEZsb2F0NjRBcnJheSgxNik7XG4gICAgdGhpcy50cmFuc2Zvcm1HTF9SSCA9IG5ldyBGbG9hdDY0QXJyYXkoMTYpO1xuICAgIHRoaXMubWFya2VyX3RyYW5zZm9ybV9tYXQgPSBudWxsO1xuXG4gICAgdGhpcy52aWRlb1dpZHRoID0gd2lkdGg7XG4gICAgdGhpcy52aWRlb0hlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLnZpZGVvU2l6ZSA9IHRoaXMudmlkZW9XaWR0aCAqIHRoaXMudmlkZW9IZWlnaHQ7XG5cbiAgICB0aGlzLmZyYW1lcG9pbnRlciA9IG51bGw7XG4gICAgdGhpcy5mcmFtZXNpemUgPSBudWxsO1xuICAgIHRoaXMuZGF0YUhlYXAgPSBudWxsO1xuICAgIHRoaXMudmlkZW9MdW1hID0gbnVsbDtcbiAgICB0aGlzLmNhbWVyYV9tYXQgPSBudWxsO1xuICAgIHRoaXMudmlkZW9MdW1hUG9pbnRlciA9IG51bGw7XG5cbiAgICAvLyB0aGlzIGlzIHRvIHdvcmthcm91bmQgdGhlIGludHJvZHVjdGlvbiBvZiBcInNlbGZcIiB2YXJpYWJsZVxuICAgIHRoaXMubmZ0TWFya2VyRm91bmQgPSBmYWxzZTtcbiAgICB0aGlzLm5mdE1hcmtlckZvdW5kVGltZSA9IDA7XG4gICAgdGhpcy5uZnRNYXJrZXJDb3VudCA9IDA7XG5cbiAgICB0aGlzLl9id3BvaW50ZXIgPSBudWxsO1xuICAgIHRoaXMuZGVmYXVsdE1hcmtlcldpZHRoID0gMTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBpbml0V2l0aERpbWVuc2lvbnMoXG4gICAgd2lkdGg6IG51bWJlcixcbiAgICBoZWlnaHQ6IG51bWJlcixcbiAgICBjYW1lcmFQYXJhbTogc3RyaW5nXG4gICkge1xuICAgIC8vIGRpcmVjdGx5IGluaXQgd2l0aCBnaXZlbiB3aWR0aCAvIGhlaWdodFxuICAgIGNvbnN0IGFyQ29udHJvbGxlck5GVCA9IG5ldyBBUkNvbnRyb2xsZXJORlQod2lkdGgsIGhlaWdodCwgY2FtZXJhUGFyYW0pO1xuICAgIHJldHVybiBhd2FpdCBhckNvbnRyb2xsZXJORlQuX2luaXRpYWxpemUoKTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBpbml0V2l0aEltYWdlKGltYWdlOiBJbWFnZU9iaiwgY2FtZXJhUGFyYW06IHN0cmluZykge1xuICAgIGNvbnN0IHdpZHRoID0gaW1hZ2UudmlkZW9XaWR0aCB8fCBpbWFnZS53aWR0aDtcbiAgICBjb25zdCBoZWlnaHQgPSBpbWFnZS52aWRlb0hlaWdodCB8fCBpbWFnZS5oZWlnaHQ7XG4gICAgY29uc3QgYXJDb250cm9sbGVyTkZUID0gbmV3IEFSQ29udHJvbGxlck5GVCh3aWR0aCwgaGVpZ2h0LCBjYW1lcmFQYXJhbSk7XG4gICAgcmV0dXJuIGF3YWl0IGFyQ29udHJvbGxlck5GVC5faW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgb25lIG9mIHRoZSBtb3N0IGltcG9ydGFudCBtZXRob2QgaW5zaWRlIEFSQ29udHJvbGxlck5GVC4gSXQgZGV0ZWN0IHRoZSBtYXJrZXJcbiAgICogYW5kIGRpc3BhdGNoIGludGVybmFsbHkgd2l0aCB0aGUgZ2V0TkZUTWFya2VyIGV2ZW50IGxpc3RlbmVyIHRoZSBORlRNYXJrZXJJbmZvXG4gICAqIHN0cnVjdCBvYmplY3Qgb2YgdGhlIHRyYWNrZWQgTkZUIE1hcmtlcnMuXG4gICAqIEBwYXJhbSB7aW1hZ2V9IGltYWdlIGRhdGFcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHByb2Nlc3MoaW1hZ2U6IEltYWdlT2JqKSB7XG4gICAgbGV0IHJlc3VsdCA9IHRoaXMuZGV0ZWN0TWFya2VyKGltYWdlKTtcbiAgICBpZiAocmVzdWx0ICE9IDApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJbQVJDb250cm9sbGVyTkZUXVwiLCBcImRldGVjdE1hcmtlciBlcnJvcjpcIiwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICBsZXQgaywgbztcblxuICAgIC8vIGdldCBORlQgbWFya2Vyc1xuICAgIGZvciAoayBpbiB0aGlzLm5mdE1hcmtlcnMpIHtcbiAgICAgIG8gPSB0aGlzLmNvbnZlcnRlcigpLm5mdE1hcmtlcnNba107XG4gICAgICBvLmluUHJldmlvdXMgPSBvLmluQ3VycmVudDtcbiAgICAgIG8uaW5DdXJyZW50ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gZGV0ZWN0IE5GVCBtYXJrZXJzXG4gICAgbGV0IG5mdE1hcmtlckNvdW50ID0gdGhpcy5uZnRNYXJrZXJDb3VudDtcbiAgICB0aGlzLmRldGVjdE5GVE1hcmtlcigpO1xuXG4gICAgLy8gaW4gbXNcbiAgICBjb25zdCBNQVJLRVJfTE9TVF9USU1FID0gMjAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZnRNYXJrZXJDb3VudDsgaSsrKSB7XG4gICAgICBsZXQgbmZ0TWFya2VySW5mbzogZGVsZWdhdGVNZXRob2RzW1wiTkZUTWFya2VySW5mb1wiXSA9XG4gICAgICAgIHRoaXMuZ2V0TkZUTWFya2VyKGkpO1xuXG4gICAgICBsZXQgbWFya2VyVHlwZSA9IEFSVG9vbGtpdE5GVC5ORlRfTUFSS0VSO1xuXG4gICAgICBpZiAobmZ0TWFya2VySW5mby5mb3VuZCkge1xuICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5uZnRNYXJrZXJGb3VuZCA9IGk7XG4gICAgICAgIHRoaXMubmZ0TWFya2VyRm91bmRUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgICAgICBsZXQgdmlzaWJsZSA9IHRoaXMudHJhY2tORlRNYXJrZXJJZChpKTtcbiAgICAgICAgdmlzaWJsZS5tYXRyaXguc2V0KG5mdE1hcmtlckluZm8ucG9zZSk7XG4gICAgICAgIHZpc2libGUuaW5DdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50cmFuc01hdFRvR0xNYXQodmlzaWJsZS5tYXRyaXgsIHRoaXMudHJhbnNmb3JtX21hdCk7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtR0xfUkggPSB0aGlzLmFyZ2xDYW1lcmFWaWV3UkhmKHRoaXMudHJhbnNmb3JtX21hdCk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgbmFtZTogXCJnZXRORlRNYXJrZXJcIixcbiAgICAgICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgICB0eXBlOiBtYXJrZXJUeXBlLFxuICAgICAgICAgICAgbWFya2VyOiBuZnRNYXJrZXJJbmZvLFxuICAgICAgICAgICAgbWF0cml4OiB0aGlzLnRyYW5zZm9ybV9tYXQsXG4gICAgICAgICAgICBtYXRyaXhHTF9SSDogdGhpcy50cmFuc2Zvcm1HTF9SSCxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICB9IGVsc2UgaWYgKHNlbGYubmZ0TWFya2VyRm91bmQgPT09IGkpIHtcbiAgICAgICAgLy8gZm9yIG5vdyB0aGlzIG1hcmtlciBmb3VuZC9sb3N0IGV2ZW50cyBoYW5kbGluZyBpcyBmb3Igb25lIG1hcmtlciBhdCBhIHRpbWVcbiAgICAgICAgaWYgKERhdGUubm93KCkgLSB0aGlzLm5mdE1hcmtlckZvdW5kVGltZSA+IE1BUktFUl9MT1NUX1RJTUUpIHtcbiAgICAgICAgICB0aGlzLm5mdE1hcmtlckZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIG5hbWU6IFwibG9zdE5GVE1hcmtlclwiLFxuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgICAgdHlwZTogbWFya2VyVHlwZSxcbiAgICAgICAgICAgICAgbWFya2VyOiBuZnRNYXJrZXJJbmZvLFxuICAgICAgICAgICAgICBtYXRyaXg6IHRoaXMudHJhbnNmb3JtX21hdCxcbiAgICAgICAgICAgICAgbWF0cml4R0xfUkg6IHRoaXMudHJhbnNmb3JtR0xfUkgsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERldGVjdHMgdGhlIE5GVCBtYXJrZXJzIGluIHRoZSBwcm9jZXNzKCkgZnVuY3Rpb24sXG4gICAqIHdpdGggdGhlIGdpdmVuIHRyYWNrZWQgaWQuXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBkZXRlY3RORlRNYXJrZXIoKSB7XG4gICAgdGhpcy5hcnRvb2xraXRORlQuZGV0ZWN0TkZUTWFya2VyKHRoaXMuaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIGdpdmVuIE5GVCBtYXJrZXIgSUQgdG8gdGhlIGluZGV4IG9mIHRyYWNrZWQgSURzLlxuICAgKiBTZXRzIHRoZSBtYXJrZXJXaWR0aCBmb3IgdGhlIHBhdHRlcm4gbWFya2VyIHRvIG1hcmtlcldpZHRoLlxuICAgKiBVc2VkIGJ5IHByb2Nlc3MoKSB0byBpbXBsZW1lbnQgY29udGludW91cyB0cmFja2luZyxcbiAgICoga2VlcGluZyB0cmFjayBvZiB0aGUgbWFya2VyJ3MgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAqIGFuZCBjdXN0b21pemFibGUgbWFya2VyIHdpZHRocy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGlkIElEIG9mIHRoZSBORlQgbWFya2VyIHRvIHRyYWNrLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWFya2VyV2lkdGggVGhlIHdpZHRoIG9mIHRoZSBtYXJrZXIgdG8gdHJhY2suXG4gICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG1hcmtlciB0cmFja2luZyBvYmplY3QuXG4gICAqL1xuICB0cmFja05GVE1hcmtlcklkKGlkOiBudW1iZXIsIG1hcmtlcldpZHRoPzogbnVtYmVyKSB7XG4gICAgbGV0IG9iaiA9IHRoaXMuY29udmVydGVyKCkubmZ0TWFya2Vyc1tpZF07XG4gICAgaWYgKCFvYmopIHtcbiAgICAgIHRoaXMuY29udmVydGVyKCkubmZ0TWFya2Vyc1tpZF0gPSBvYmogPSB7XG4gICAgICAgIGluUHJldmlvdXM6IGZhbHNlLFxuICAgICAgICBpbkN1cnJlbnQ6IGZhbHNlLFxuICAgICAgICBtYXRyaXg6IG5ldyBGbG9hdDY0QXJyYXkoMTIpLFxuICAgICAgICBtYXRyaXhHTF9SSDogbmV3IEZsb2F0NjRBcnJheSgxMiksXG4gICAgICAgIG1hcmtlcldpZHRoOiBtYXJrZXJXaWR0aCB8fCB0aGlzLmRlZmF1bHRNYXJrZXJXaWR0aCxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChtYXJrZXJXaWR0aCkge1xuICAgICAgb2JqLm1hcmtlcldpZHRoID0gbWFya2VyV2lkdGg7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICAvLyBtYXJrZXIgZGV0ZWN0aW9uIHJvdXRpbmVzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgY29yZSBBUlRvb2xLaXQgbWFya2VyIGRldGVjdGlvbiBmdW5jdGlvbi4gSXQgY2FsbHMgdGhyb3VnaCB0byBhIHNldCBvZlxuICAgKiBpbnRlcm5hbCBmdW5jdGlvbnMgdG8gcGVyZm9ybSB0aGUga2V5IG1hcmtlciBkZXRlY3Rpb24gc3RlcHMgb2YgYmluYXJpemF0aW9uIGFuZFxuICAgKiBsYWJlbGxpbmcsIGNvbnRvdXIgZXh0cmFjdGlvbiwgYW5kIHRlbXBsYXRlIG1hdGNoaW5nIGFuZC9vciBtYXRyaXggY29kZSBleHRyYWN0aW9uLlxuICAgKiBUeXBpY2FsbHksIHRoZSByZXN1bHRpbmcgc2V0IG9mIGRldGVjdGVkIG1hcmtlcnMgaXMgcmV0cmlldmVkIGJ5IGNhbGxpbmcgYXJHZXRNYXJrZXJOdW1cbiAgICogdG8gZ2V0IHRoZSBudW1iZXIgb2YgbWFya2VycyBkZXRlY3RlZCBhbmQgYXJHZXRNYXJrZXIgdG8gZ2V0IGFuIGFycmF5IG9mIEFSTWFya2VySW5mb1xuICAgKiBzdHJ1Y3R1cmVzIHdpdGggaW5mb3JtYXRpb24gb24gZWFjaCBkZXRlY3RlZCBtYXJrZXIsIGZvbGxvd2VkIGJ5IGEgc3RlcCBpbiB3aGljaFxuICAgKiBkZXRlY3RlZCBtYXJrZXJzIGFyZSBwb3NzaWJseSBleGFtaW5lZCBmb3Igc29tZSBtZWFzdXJlIG9mIGdvb2RuZXNzIG9mIG1hdGNoIChlLmcuIGJ5XG4gICAqIGV4YW1pbmluZyB0aGUgbWF0Y2ggY29uZmlkZW5jZSB2YWx1ZSkgYW5kIHBvc2UgZXh0cmFjdGlvbi5cbiAgICogQHBhcmFtIHtpbWFnZX0gSW1hZ2UgZGF0YSB0byBiZSBwcm9jZXNzZWQgdG8gZGV0ZWN0IG1hcmtlcnMuXG4gICAqIEByZXR1cm4ge251bWJlcn0gMCBpZiB0aGUgZnVuY3Rpb24gcHJvY2VlZGVkIHdpdGhvdXQgZXJyb3IsIG9yIGEgdmFsdWUgbGVzcyB0aGFuIDAgaW4gY2FzZSBvZiBlcnJvci5cbiAgICogQSByZXN1bHQgb2YgMCBkb2VzIG5vdCBob3dldmVyLCBpbXBseSBhbnkgbWFya2VycyB3ZXJlIGRldGVjdGVkLlxuICAgKi9cbiAgZGV0ZWN0TWFya2VyKGltYWdlOiBhbnkpIHtcbiAgICBpZiAodGhpcy5fY29weUltYWdlVG9IZWFwKGltYWdlKSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmRldGVjdE1hcmtlcih0aGlzLmlkKTtcbiAgICB9XG4gICAgcmV0dXJuIC05OTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIE5GVCBtYXJrZXIgaW5mbyBzdHJ1Y3QgZm9yIHRoZSBnaXZlbiBORlQgbWFya2VyIGluZGV4IGluIGRldGVjdGVkIG1hcmtlcnMuXG4gICAqIFRoZSByZXR1cm5lZCBvYmplY3QgaXMgdGhlIGdsb2JhbCBhcnRvb2xraXRORlQuTkZUTWFya2VySW5mbyBvYmplY3QgYW5kIHdpbGwgYmUgb3ZlcndyaXR0ZW5cbiAgICogYnkgc3Vic2VxdWVudCBjYWxscy5cbiAgICogUmV0dXJucyB1bmRlZmluZWQgaWYgbm8gbWFya2VyIHdhcyBmb3VuZC5cbiAgICogQSBtYXJrZXJJbmRleCBvZiAtMSBpcyB1c2VkIHRvIGFjY2VzcyB0aGUgZ2xvYmFsIGN1c3RvbSBtYXJrZXIuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYXJrZXJJbmRleCBUaGUgaW5kZXggb2YgdGhlIE5GVCBtYXJrZXIgdG8gcXVlcnkuXG4gICAqIEByZXR1cm4ge09iamVjdH0gVGhlIE5GVG1hcmtlckluZm8gc3RydWN0LlxuICAgKi9cbiAgZ2V0TkZUTWFya2VyKG1hcmtlckluZGV4OiBudW1iZXIpIHtcbiAgICBpZiAoMCA9PT0gdGhpcy5hcnRvb2xraXRORlQuZ2V0TkZUTWFya2VyKHRoaXMuaWQsIG1hcmtlckluZGV4KSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULk5GVE1hcmtlckluZm87XG4gICAgfVxuICB9XG5cbiAgZ2V0TkZURGF0YShpZDogbnVtYmVyLCBpbmRleDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmdldE5GVERhdGEoaWQsIGluZGV4KTtcbiAgfVxuXG4gIC8vIGV2ZW50IGhhbmRsaW5nXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgb24gdGhpcyBBUkNvbnRyb2xsZXJORlQgZm9yIHRoZSBuYW1lZCBldmVudCwgY2FsbGluZyB0aGUgY2FsbGJhY2sgZnVuY3Rpb25cbiAgICogd2hlbmV2ZXIgdGhhdCBldmVudCBpcyBkaXNwYXRjaGVkLlxuICAgKiBQb3NzaWJsZSBldmVudHMgYXJlOlxuICAgKiAtIGdldE1hcmtlciAtIGRpc3BhdGNoZWQgd2hlbmV2ZXIgcHJvY2VzcygpIGZpbmRzIGEgc3F1YXJlIG1hcmtlclxuICAgKiAtIGdldE11bHRpTWFya2VyIC0gZGlzcGF0Y2hlZCB3aGVuZXZlciBwcm9jZXNzKCkgZmluZHMgYSB2aXNpYmxlIHJlZ2lzdGVyZWQgbXVsdGltYXJrZXJcbiAgICogLSBnZXRNdWx0aU1hcmtlclN1YiAtIGRpc3BhdGNoZWQgYnkgcHJvY2VzcygpIGZvciBlYWNoIG1hcmtlciBpbiBhIHZpc2libGUgbXVsdGltYXJrZXJcbiAgICogLSBsb2FkIC0gZGlzcGF0Y2hlZCB3aGVuIHRoZSBBUkNvbnRyb2xsZXJORlQgaXMgcmVhZHkgdG8gdXNlICh1c2VmdWwgaWYgcGFzc2luZyBpbiBhIGNhbWVyYSBVUkwgaW4gdGhlIGNvbnN0cnVjdG9yKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBldmVudCB0byBsaXN0ZW4gdG8uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBhbiBldmVudCB3aXRoIHRoZSBnaXZlbiBuYW1lIGlzIGRpc3BhdGNoZWQuXG4gICAqL1xuICBhZGRFdmVudExpc3RlbmVyKG5hbWU6IHN0cmluZywgY2FsbGJhY2s6IG9iamVjdCkge1xuICAgIGlmICghdGhpcy5jb252ZXJ0ZXIoKS5saXN0ZW5lcnNbbmFtZV0pIHtcbiAgICAgIHRoaXMuY29udmVydGVyKCkubGlzdGVuZXJzW25hbWVdID0gW107XG4gICAgfVxuICAgIHRoaXMuY29udmVydGVyKCkubGlzdGVuZXJzW25hbWVdLnB1c2goY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBldmVudCBsaXN0ZW5lciBmcm9tIHRoZSBuYW1lZCBldmVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgZXZlbnQgdG8gc3RvcCBsaXN0ZW5pbmcgdG8uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uIHRvIHJlbW92ZSBmcm9tIHRoZSBsaXN0ZW5lcnMgb2YgdGhlIG5hbWVkIGV2ZW50LlxuICAgKi9cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBvYmplY3QpIHtcbiAgICBpZiAodGhpcy5jb252ZXJ0ZXIoKS5saXN0ZW5lcnNbbmFtZV0pIHtcbiAgICAgIGxldCBpbmRleCA9IHRoaXMuY29udmVydGVyKCkubGlzdGVuZXJzW25hbWVdLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgdGhpcy5jb252ZXJ0ZXIoKS5saXN0ZW5lcnNbbmFtZV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2hlcyB0aGUgZ2l2ZW4gZXZlbnQgdG8gYWxsIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIG9uIGV2ZW50Lm5hbWUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBFdmVudCB0byBkaXNwYXRjaC5cbiAgICovXG4gIGRpc3BhdGNoRXZlbnQoZXZlbnQ6IHsgbmFtZTogc3RyaW5nOyB0YXJnZXQ6IGFueTsgZGF0YT86IG9iamVjdCB9KSB7XG4gICAgbGV0IGxpc3RlbmVycyA9IHRoaXMuY29udmVydGVyKCkubGlzdGVuZXJzW2V2ZW50Lm5hbWVdO1xuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBkZWJ1ZyBzdHVmZlxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogU2V0cyB1cCBmb3IgZGVidWdnaW5nIEFSIGRldGVjdGlvbi5cbiAgICovXG4gIGRlYnVnU2V0dXAoKSB7XG4gICAgdGhpcy5zZXREZWJ1Z01vZGUodHJ1ZSk7XG4gICAgdGhpcy5fYndwb2ludGVyID0gdGhpcy5nZXRQcm9jZXNzaW5nSW1hZ2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gM3g0IG1hcmtlciB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggaW4gdGhlIDEyLWVsZW1lbnQgdHJhbnNNYXQgYXJyYXlcbiAgICogaW50byBhIDR4NCBXZWJHTCBtYXRyaXggYW5kIHdyaXRlcyB0aGUgcmVzdWx0IGludG8gdGhlIDE2LWVsZW1lbnQgZ2xNYXQgYXJyYXkuXG4gICAqIElmIHNjYWxlIHBhcmFtZXRlciBpcyBnaXZlbiwgc2NhbGVzIHRoZSB0cmFuc2Zvcm0gb2YgdGhlIGdsTWF0IGJ5IHRoZSBzY2FsZSBwYXJhbWV0ZXIuXG4gICAqIEBwYXJhbSB7RmxvYXQ2NEFycmF5fSB0cmFuc01hdCBUaGUgM3g0IG1hcmtlciB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguXG4gICAqIEBwYXJhbSB7RmxvYXQ2NEFycmF5fSBnbE1hdCBUaGUgNHg0IEdMIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlIFRoZSBzY2FsZSBmb3IgdGhlIHRyYW5zZm9ybS5cbiAgICovXG4gIHRyYW5zTWF0VG9HTE1hdCh0cmFuc01hdDogRmxvYXQ2NEFycmF5LCBnbE1hdDogRmxvYXQ2NEFycmF5LCBzY2FsZT86IG51bWJlcikge1xuICAgIGlmIChnbE1hdCA9PSB1bmRlZmluZWQpIHtcbiAgICAgIGdsTWF0ID0gbmV3IEZsb2F0NjRBcnJheSgxNik7XG4gICAgfVxuXG4gICAgZ2xNYXRbMCArIDAgKiA0XSA9IHRyYW5zTWF0WzBdOyAvLyBSMUMxXG4gICAgZ2xNYXRbMCArIDEgKiA0XSA9IHRyYW5zTWF0WzFdOyAvLyBSMUMyXG4gICAgZ2xNYXRbMCArIDIgKiA0XSA9IHRyYW5zTWF0WzJdO1xuICAgIGdsTWF0WzAgKyAzICogNF0gPSB0cmFuc01hdFszXTtcbiAgICBnbE1hdFsxICsgMCAqIDRdID0gdHJhbnNNYXRbNF07IC8vIFIyXG4gICAgZ2xNYXRbMSArIDEgKiA0XSA9IHRyYW5zTWF0WzVdO1xuICAgIGdsTWF0WzEgKyAyICogNF0gPSB0cmFuc01hdFs2XTtcbiAgICBnbE1hdFsxICsgMyAqIDRdID0gdHJhbnNNYXRbN107XG4gICAgZ2xNYXRbMiArIDAgKiA0XSA9IHRyYW5zTWF0WzhdOyAvLyBSM1xuICAgIGdsTWF0WzIgKyAxICogNF0gPSB0cmFuc01hdFs5XTtcbiAgICBnbE1hdFsyICsgMiAqIDRdID0gdHJhbnNNYXRbMTBdO1xuICAgIGdsTWF0WzIgKyAzICogNF0gPSB0cmFuc01hdFsxMV07XG4gICAgZ2xNYXRbMyArIDAgKiA0XSA9IDAuMDtcbiAgICBnbE1hdFszICsgMSAqIDRdID0gMC4wO1xuICAgIGdsTWF0WzMgKyAyICogNF0gPSAwLjA7XG4gICAgZ2xNYXRbMyArIDMgKiA0XSA9IDEuMDtcblxuICAgIGlmIChzY2FsZSAhPSB1bmRlZmluZWQgJiYgc2NhbGUgIT09IDAuMCkge1xuICAgICAgZ2xNYXRbMTJdICo9IHNjYWxlO1xuICAgICAgZ2xNYXRbMTNdICo9IHNjYWxlO1xuICAgICAgZ2xNYXRbMTRdICo9IHNjYWxlO1xuICAgIH1cbiAgICByZXR1cm4gZ2xNYXQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGhlIGdpdmVuIDR4NCBvcGVuR0wgbWF0cml4IGluIHRoZSAxNi1lbGVtZW50IHRyYW5zTWF0IGFycmF5XG4gICAqIGludG8gYSA0eDQgT3BlbkdMIFJpZ2h0LUhhbmQtVmlldyBtYXRyaXggYW5kIHdyaXRlcyB0aGUgcmVzdWx0IGludG8gdGhlIDE2LWVsZW1lbnQgZ2xNYXQgYXJyYXkuXG4gICAqIElmIHNjYWxlIHBhcmFtZXRlciBpcyBnaXZlbiwgc2NhbGVzIHRoZSB0cmFuc2Zvcm0gb2YgdGhlIGdsTWF0IGJ5IHRoZSBzY2FsZSBwYXJhbWV0ZXIuXG4gICAqIEBwYXJhbSB7RmxvYXQ2NEFycmF5fSBnbE1hdHJpeCBUaGUgNHg0IG1hcmtlciB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguXG4gICAqIEBwYXJhbSB7RmxvYXQ2NEFycmF5fSBbZ2xSaE1hdHJpeF0gVGhlIDR4NCBHTCByaWdodCBoYW5kIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzY2FsZV0gVGhlIHNjYWxlIGZvciB0aGUgdHJhbnNmb3JtLlxuICAgKi9cbiAgYXJnbENhbWVyYVZpZXdSSGYoXG4gICAgZ2xNYXRyaXg6IEZsb2F0NjRBcnJheSxcbiAgICBnbFJoTWF0cml4PzogRmxvYXQ2NEFycmF5LFxuICAgIHNjYWxlPzogbnVtYmVyXG4gICkge1xuICAgIGxldCBtX21vZGVsdmlldztcbiAgICBpZiAoZ2xSaE1hdHJpeCA9PSB1bmRlZmluZWQpIHtcbiAgICAgIG1fbW9kZWx2aWV3ID0gbmV3IEZsb2F0NjRBcnJheSgxNik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1fbW9kZWx2aWV3ID0gZ2xSaE1hdHJpeDtcbiAgICB9XG5cbiAgICAvLyB4XG4gICAgbV9tb2RlbHZpZXdbMF0gPSBnbE1hdHJpeFswXTtcbiAgICBtX21vZGVsdmlld1s0XSA9IGdsTWF0cml4WzRdO1xuICAgIG1fbW9kZWx2aWV3WzhdID0gZ2xNYXRyaXhbOF07XG4gICAgbV9tb2RlbHZpZXdbMTJdID0gZ2xNYXRyaXhbMTJdO1xuICAgIC8vIHlcbiAgICBtX21vZGVsdmlld1sxXSA9IC1nbE1hdHJpeFsxXTtcbiAgICBtX21vZGVsdmlld1s1XSA9IC1nbE1hdHJpeFs1XTtcbiAgICBtX21vZGVsdmlld1s5XSA9IC1nbE1hdHJpeFs5XTtcbiAgICBtX21vZGVsdmlld1sxM10gPSAtZ2xNYXRyaXhbMTNdO1xuICAgIC8vIHpcbiAgICBtX21vZGVsdmlld1syXSA9IC1nbE1hdHJpeFsyXTtcbiAgICBtX21vZGVsdmlld1s2XSA9IC1nbE1hdHJpeFs2XTtcbiAgICBtX21vZGVsdmlld1sxMF0gPSAtZ2xNYXRyaXhbMTBdO1xuICAgIG1fbW9kZWx2aWV3WzE0XSA9IC1nbE1hdHJpeFsxNF07XG5cbiAgICAvLyAwIDAgMCAxXG4gICAgbV9tb2RlbHZpZXdbM10gPSAwO1xuICAgIG1fbW9kZWx2aWV3WzddID0gMDtcbiAgICBtX21vZGVsdmlld1sxMV0gPSAwO1xuICAgIG1fbW9kZWx2aWV3WzE1XSA9IDE7XG5cbiAgICBpZiAoc2NhbGUgIT0gdW5kZWZpbmVkICYmIHNjYWxlICE9PSAwLjApIHtcbiAgICAgIG1fbW9kZWx2aWV3WzEyXSAqPSBzY2FsZTtcbiAgICAgIG1fbW9kZWx2aWV3WzEzXSAqPSBzY2FsZTtcbiAgICAgIG1fbW9kZWx2aWV3WzE0XSAqPSBzY2FsZTtcbiAgICB9XG5cbiAgICBnbFJoTWF0cml4ID0gbV9tb2RlbHZpZXc7XG5cbiAgICByZXR1cm4gZ2xSaE1hdHJpeDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSAxNi1lbGVtZW50IFdlYkdMIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB1c2VkIGJ5IEFSQ29udHJvbGxlck5GVC5wcm9jZXNzIHRvXG4gICAqIHBhc3MgbWFya2VyIFdlYkdMIG1hdHJpY2VzIHRvIGV2ZW50IGxpc3RlbmVycy5cbiAgICogVW5pcXVlIHRvIGVhY2ggQVJDb250cm9sbGVyTkZULlxuICAgKiBAcmV0dXJuIHtGbG9hdDY0QXJyYXl9IFRoZSAxNi1lbGVtZW50IFdlYkdMIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB1c2VkIGJ5IHRoZSBBUkNvbnRyb2xsZXJORlQuXG4gICAqL1xuICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1fbWF0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHByb2plY3Rpb24gbWF0cml4IGNvbXB1dGVkIGZyb20gY2FtZXJhIHBhcmFtZXRlcnMgZm9yIHRoZSBBUkNvbnRyb2xsZXJORlQuXG4gICAqIEByZXR1cm4ge0Zsb2F0NjRBcnJheX0gVGhlIDE2LWVsZW1lbnQgV2ViR0wgY2FtZXJhIG1hdHJpeCBmb3IgdGhlIEFSQ29udHJvbGxlck5GVCBjYW1lcmEgcGFyYW1ldGVycy5cbiAgICovXG4gIGdldENhbWVyYU1hdHJpeCgpIHtcbiAgICByZXR1cm4gdGhpcy5jYW1lcmFfbWF0O1xuICB9XG5cbiAgLy8gU2V0dGVyIC8gR2V0dGVyIFByb3hpZXNcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgZGVidWcgbW9kZSBpbiB0aGUgdHJhY2tlci4gV2hlbiBlbmFibGVkLCBhIGJsYWNrIGFuZCB3aGl0ZSBkZWJ1Z1xuICAgKiBpbWFnZSBpcyBnZW5lcmF0ZWQgZHVyaW5nIG1hcmtlciBkZXRlY3Rpb24uIFRoZSBkZWJ1ZyBpbWFnZSBpcyB1c2VmdWwgZm9yIHZpc3VhbGlzaW5nXG4gICAqIHRoZSBiaW5hcml6YXRpb24gcHJvY2VzcyBhbmQgY2hvb3NpbmcgYSB0aHJlc2hvbGQgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gbW9kZSB0cnVlIHRvIGVuYWJsZSBkZWJ1ZyBtb2RlLCBmYWxzZSB0byBkaXNhYmxlIGRlYnVnIG1vZGVcbiAgICogQHNlZSBnZXREZWJ1Z01vZGUoKVxuICAgKi9cbiAgc2V0RGVidWdNb2RlKG1vZGU6IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuc2V0RGVidWdNb2RlKHRoaXMuaWQsIG1vZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciBkZWJ1ZyBtb2RlIGlzIGN1cnJlbnRseSBlbmFibGVkLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIHdoZW4gZGVidWcgbW9kZSBpcyBlbmFibGVkLCBmYWxzZSB3aGVuIGRlYnVnIG1vZGUgaXMgZGlzYWJsZWRcbiAgICogQHNlZSAgc2V0RGVidWdNb2RlKClcbiAgICovXG4gIGdldERlYnVnTW9kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuZ2V0RGVidWdNb2RlKHRoaXMuaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIEVtc2NyaXB0ZW4gSEVBUCBvZmZzZXQgdG8gdGhlIGRlYnVnIHByb2Nlc3NpbmcgaW1hZ2UgdXNlZCBieSBBUlRvb2xLaXQuXG4gICAqIEByZXR1cm4ge251bWJlcn0gSEVBUCBvZmZzZXQgdG8gdGhlIGRlYnVnIHByb2Nlc3NpbmcgaW1hZ2UuXG4gICAqL1xuICBnZXRQcm9jZXNzaW5nSW1hZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmdldFByb2Nlc3NpbmdJbWFnZSh0aGlzLmlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBsb2dnaW5nIGxldmVsIHRvIHVzZSBieSBBUlRvb2xLaXQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtb2RlIHR5cGUgZm9yIHRoZSBsb2cgbGV2ZWwuXG4gICAqL1xuICBzZXRMb2dMZXZlbChtb2RlOiBib29sZWFuKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULnNldExvZ0xldmVsKG1vZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGxvZ2dpbmcgbGV2ZWwgdXNlZCBieSBBUlRvb2xLaXQuXG4gICAqIEByZXR1cm4ge251bWJlcn0gcmV0dXJuIHRoZSBsb2cgbGV2ZWwgaW4gdXNlLlxuICAgKi9cbiAgZ2V0TG9nTGV2ZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmdldExvZ0xldmVsKCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdmFsdWUgb2YgdGhlIG5lYXIgcGxhbmUgb2YgdGhlIGNhbWVyYS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIHRoZSB2YWx1ZSBvZiB0aGUgbmVhciBwbGFuZVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IDAgKHZvaWQpXG4gICAqL1xuICBzZXRQcm9qZWN0aW9uTmVhclBsYW5lKHZhbHVlOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuc2V0UHJvamVjdGlvbk5lYXJQbGFuZSh0aGlzLmlkLCB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdmFsdWUgb2YgdGhlIG5lYXIgcGxhbmUgb2YgdGhlIGNhbWVyYSB3aXRoIHRoZSBnaXZlIGlkLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSB2YWx1ZSBvZiB0aGUgbmVhciBwbGFuZS5cbiAgICovXG4gIGdldFByb2plY3Rpb25OZWFyUGxhbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmdldFByb2plY3Rpb25OZWFyUGxhbmUodGhpcy5pZCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdmFsdWUgb2YgdGhlIGZhciBwbGFuZSBvZiB0aGUgY2FtZXJhLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgdGhlIHZhbHVlIG9mIHRoZSBmYXIgcGxhbmVcbiAgICogQHJldHVybiB7bnVtYmVyfSAwICh2b2lkKVxuICAgKi9cbiAgc2V0UHJvamVjdGlvbkZhclBsYW5lKHZhbHVlOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuc2V0UHJvamVjdGlvbkZhclBsYW5lKHRoaXMuaWQsIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBvZiB0aGUgZmFyIHBsYW5lIG9mIHRoZSBjYW1lcmEgd2l0aCB0aGUgZ2l2ZSBpZC5cbiAgICogQHJldHVybiB7bnVtYmVyfSB0aGUgdmFsdWUgb2YgdGhlIGZhciBwbGFuZS5cbiAgICovXG4gIGdldFByb2plY3Rpb25GYXJQbGFuZSgpIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuZ2V0UHJvamVjdGlvbkZhclBsYW5lKHRoaXMuaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgbGFiZWxpbmcgdGhyZXNob2xkIG1vZGUgKGF1dG8vbWFudWFsKS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1vZGUgQW4gaW50ZWdlciBzcGVjaWZ5aW5nIHRoZSBtb2RlLiBPbmUgb2Y6XG4gICAqIEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX01BTlVBTCxcbiAgICogQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19NRURJQU4sXG4gICAqIEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX0FVVE9fT1RTVSxcbiAgICogQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19BREFQVElWRSxcbiAgICogQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19CUkFDS0VUSU5HXG4gICAqL1xuICBzZXRUaHJlc2hvbGRNb2RlKG1vZGU6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5zZXRUaHJlc2hvbGRNb2RlKHRoaXMuaWQsIG1vZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGN1cnJlbnQgdGhyZXNob2xkIG1vZGUgdXNlZCBmb3IgaW1hZ2UgYmluYXJpemF0aW9uLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjdXJyZW50IHRocmVzaG9sZCBtb2RlXG4gICAqIEBzZWUgZ2V0VmlkZW9UaHJlc2hvbGRNb2RlKClcbiAgICovXG4gIGdldFRocmVzaG9sZE1vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmdldFRocmVzaG9sZE1vZGUodGhpcy5pZCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBsYWJlbGluZyB0aHJlc2hvbGQuXG4gICAqIFRoaXMgZnVuY3Rpb24gZm9yY2VzIHNldHMgdGhlIHRocmVzaG9sZCB2YWx1ZS5cbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgQVJfREVGQVVMVF9MQUJFTElOR19USFJFU0ggd2hpY2ggaXMgMTAwLlxuICAgKiBUaGUgY3VycmVudCB0aHJlc2hvbGQgbW9kZSBpcyBub3QgYWZmZWN0ZWQgYnkgdGhpcyBjYWxsLlxuICAgKiBUeXBpY2FsbHksIHRoaXMgZnVuY3Rpb24gaXMgdXNlZCB3aGVuIGxhYmVsaW5nIHRocmVzaG9sZCBtb2RlXG4gICAqIGlzIEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX01BTlVBTC5cbiAgICogVGhlIHRocmVzaG9sZCB2YWx1ZSBpcyBub3QgcmVsZXZhbnQgaWYgdGhyZXNob2xkIG1vZGUgaXNcbiAgICogQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19BREFQVElWRS5cbiAgICogQmFja2dyb3VuZDogVGhlIGxhYmVsaW5nIHRocmVzaG9sZCBpcyB0aGUgdmFsdWUgd2hpY2hcbiAgICogdGhlIEFSIGxpYnJhcnkgdXNlcyB0byBkaWZmZXJlbnRpYXRlIGJldHdlZW4gYmxhY2sgYW5kIHdoaXRlXG4gICAqIHBvcnRpb25zIG9mIGFuIEFSVG9vbEtpdCBtYXJrZXIuIFNpbmNlIHRoZSBhY3R1YWwgYnJpZ2h0bmVzcyxcbiAgICogY29udHJhc3QsIGFuZCBnYW1tYSBvZiBpbmNvbWluZyBpbWFnZXMgY2FuIHZhcnkgc2lnbmZpY2FudGx5XG4gICAqIGJldHdlZW4gZGlmZmVyZW50IGNhbWVyYXMgYW5kIGxpZ2h0aW5nIGNvbmRpdGlvbnMsIHRoaXNcbiAgICogdmFsdWUgdHlwaWNhbGx5IG5lZWRzIHRvIGJlIGFkanVzdGVkIGR5bmFtaWNhbGx5IHRvIGFcbiAgICogc3VpdGFibGUgbWlkcG9pbnQgYmV0d2VlbiB0aGUgb2JzZXJ2ZWQgdmFsdWVzIGZvciBibGFja1xuICAgKiBhbmQgd2hpdGUgcG9ydGlvbnMgb2YgdGhlIG1hcmtlcnMgaW4gdGhlIGltYWdlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdGhyZXNob2xkIEFuIGludGVnZXIgaW4gdGhlIHJhbmdlIFswLDI1NV0gKGluY2x1c2l2ZSkuXG4gICAqL1xuICBzZXRUaHJlc2hvbGQodGhyZXNob2xkOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuc2V0VGhyZXNob2xkKHRoaXMuaWQsIHRocmVzaG9sZCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IGxhYmVsaW5nIHRocmVzaG9sZC5cbiAgICogVGhpcyBmdW5jdGlvbiBxdWVyaWVzIHRoZSBjdXJyZW50IGxhYmVsaW5nIHRocmVzaG9sZC4gRm9yLFxuICAgKiBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX01FRElBTiwgQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19PVFNVLFxuICAgKiBhbmQgQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19CUkFDS0VUSU5HXG4gICAqIHRoZSB0aHJlc2hvbGQgdmFsdWUgaXMgb25seSB2YWxpZCB1bnRpbCB0aGUgbmV4dCBhdXRvLXVwZGF0ZS5cbiAgICogVGhlIGN1cnJlbnQgdGhyZXNob2xkIG1vZGUgaXMgbm90IGFmZmVjdGVkIGJ5IHRoaXMgY2FsbC5cbiAgICogVGhlIHRocmVzaG9sZCB2YWx1ZSBpcyBub3QgcmVsZXZhbnQgaWYgdGhyZXNob2xkIG1vZGUgaXNcbiAgICogQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19BREFQVElWRS5cbiAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgY3VycmVudCB0aHJlc2hvbGQgdmFsdWUuXG4gICAqL1xuICBnZXRUaHJlc2hvbGQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmdldFRocmVzaG9sZCh0aGlzLmlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyBhbiBORlQgbWFya2VyIGZyb20gdGhlIGdpdmVuIFVSTCBvciBkYXRhIHN0cmluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsT3JEYXRhIC0gVGhlIFVSTCBwcmVmaXggb3IgZGF0YSBvZiB0aGUgTkZUIG1hcmtlcnMgdG8gbG9hZC5cbiAgICovXG4gIGFzeW5jIGxvYWRORlRNYXJrZXIoXG4gICAgdXJsT3JEYXRhOiBzdHJpbmcsXG4gICAgb25TdWNjZXNzOiAoaWRzOiBudW1iZXIpID0+IHZvaWQsXG4gICAgb25FcnJvcjogKCkgPT4gdm9pZFxuICApIHtcbiAgICBsZXQgbmZ0ID0gYXdhaXQgdGhpcy5hcnRvb2xraXRORlQuYWRkTkZUTWFya2VycyhcbiAgICAgIHRoaXMuaWQsXG4gICAgICBbdXJsT3JEYXRhXSxcbiAgICAgIChpZHM6IGFueSkgPT4ge1xuICAgICAgICB0aGlzLm5mdE1hcmtlckNvdW50ICs9IGlkcy5sZW5ndGg7XG4gICAgICAgIG9uU3VjY2VzcyhpZHMpO1xuICAgICAgfSxcbiAgICAgIG9uRXJyb3JcbiAgICApO1xuICAgIHJldHVybiBuZnQ7XG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgYW4gYXJyYXkgb2YgTkZUIG1hcmtlcnMgZnJvbSB0aGUgZ2l2ZW4gVVJMcyBvciBkYXRhIHN0cmluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsT3JEYXRhIC0gVGhlIGFycmF5IG9mIFVSTHMgcHJlZml4IG9yIGRhdGEgb2YgdGhlIE5GVCBtYXJrZXJzIHRvIGxvYWQuXG4gICAqL1xuICBhc3luYyBsb2FkTkZUTWFya2VycyhcbiAgICB1cmxPckRhdGE6IEFycmF5PHN0cmluZz4sXG4gICAgb25TdWNjZXNzOiAoaWRzOiBudW1iZXIpID0+IHZvaWQsXG4gICAgb25FcnJvcjogKCkgPT4gdm9pZFxuICApIHtcbiAgICBsZXQgbmZ0ID0gYXdhaXQgdGhpcy5hcnRvb2xraXRORlQuYWRkTkZUTWFya2VycyhcbiAgICAgIHRoaXMuaWQsXG4gICAgICB1cmxPckRhdGEsXG4gICAgICAoaWRzOiBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5uZnRNYXJrZXJDb3VudCArPSBpZHMubGVuZ3RoO1xuICAgICAgICBvblN1Y2Nlc3MoaWRzKTtcbiAgICAgIH0sXG4gICAgICBvbkVycm9yXG4gICAgKTtcbiAgICByZXR1cm4gbmZ0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgaW1hZ2UgcHJvY2Vzc2luZyBtb2RlLlxuICAgKiBXaGVuIHRoZSBpbWFnZSBwcm9jZXNzaW5nIG1vZGUgaXMgQVJfSU1BR0VfUFJPQ19GUkFNRV9JTUFHRSxcbiAgICogQVJUb29sS2l0IHByb2Nlc3NlcyBhbGwgcGl4ZWxzIGluIGVhY2ggaW5jb21pbmcgaW1hZ2VcbiAgICogdG8gbG9jYXRlIG1hcmtlcnMuIFdoZW4gdGhlIG1vZGUgaXMgQVJfSU1BR0VfUFJPQ19GSUVMRF9JTUFHRSxcbiAgICogQVJUb29sS2l0IHByb2Nlc3NlcyBwaXhlbHMgaW4gb25seSBldmVyeSBzZWNvbmQgcGl4ZWwgcm93IGFuZFxuICAgKiBjb2x1bW4uIFRoaXMgaXMgdXNlZnVsIGJvdGggZm9yIGhhbmRsaW5nIGltYWdlcyBmcm9tIGludGVybGFjZWRcbiAgICogdmlkZW8gc291cmNlcyAod2hlcmUgYWx0ZXJuYXRlIGxpbmVzIGFyZSBhc3NlbWJsZWQgZnJvbSBhbHRlcm5hdGVcbiAgICogZmllbGRzIGFuZCB0aHVzIGhhdmUgb25lIGZpZWxkIHRpbWUtZGlmZmVyZW5jZSwgcmVzdWx0aW5nIGluIGFcbiAgICogXCJjb21iXCIgZWZmZWN0KSBzdWNoIGFzIERpZ2l0YWwgVmlkZW8gY2FtZXJhcy5cbiAgICogVGhlIGVmZmVjdGl2ZSByZWR1Y3Rpb24gYnkgNzUlIGluIHRoZSBwaXhlbHMgcHJvY2Vzc2VkIGFsc29cbiAgICogaGFzIHV0aWxpdHkgaW4gYWNjZWxlcmF0aW5nIHRyYWNraW5nIGJ5IGVmZmVjdGl2ZWx5IHJlZHVjaW5nXG4gICAqIHRoZSBpbWFnZSBzaXplIHRvIG9uZSBxdWFydGVyIHNpemUsIGF0IHRoZSBjb3N0IG9mIHBvc2UgYWNjdXJhY2N5LlxuICAgKiBAcGFyYW0ge251bWJlcn0gbW9kZVxuICAgKiBPcHRpb25zIGZvciB0aGlzIGZpZWxkIGFyZTpcbiAgICogQVJfSU1BR0VfUFJPQ19GUkFNRV9JTUFHRVxuICAgKiBBUl9JTUFHRV9QUk9DX0ZJRUxEX0lNQUdFXG4gICAqIFRoZSBkZWZhdWx0IG1vZGUgaXMgQVJfSU1BR0VfUFJPQ19GUkFNRV9JTUFHRS5cbiAgICovXG4gIHNldEltYWdlUHJvY01vZGUobW9kZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULnNldEltYWdlUHJvY01vZGUodGhpcy5pZCwgbW9kZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBpbWFnZSBwcm9jZXNzaW5nIG1vZGUuXG4gICAqIFNlZSBhclNldEltYWdlUHJvY01vZGUoKSBmb3IgYSBjb21wbGV0ZSBkZXNjcmlwdGlvbi5cbiAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgY3VycmVudCBpbWFnZSBwcm9jZXNzaW5nIG1vZGUuXG4gICAqL1xuICBnZXRJbWFnZVByb2NNb2RlKCkge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5nZXRJbWFnZVByb2NNb2RlKHRoaXMuaWQpO1xuICB9XG5cbiAgLy8gcHJpdmF0ZSBhY2Nlc3NvcnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogVXNlZCBpbnRlcm5hbGx5IGJ5IEFSQ29udHJvbGxlck5GVCwgaXQgcGVybWl0IHRvIGFkZCBtZXRob2RzIHRvIHRoaXMuXG4gICAqIEByZXR1cm4ge2FueX0gQVJDb250cm9sbGVyTkZUXG4gICAqL1xuICBwcml2YXRlIGNvbnZlcnRlcigpOiBhbnkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaW5pdCB0aGUgQVJDb250cm9sbGVyTkZUIHdpdGggdGhlIG5lY2Vzc2FyeSBwYXJtZXRlcnMgYW5kIHZhcmlhYmxlcy5cbiAgICogRG9uJ3QgY2FsbCBkaXJlY3RseSB0aGlzIGJ1dCBpbnN0ZWFkIGluc3RhbnRpYXRlIGEgbmV3IEFSQ29udHJvbGxlck5GVC5cbiAgICogQHJldHVybiB7QVJDb250cm9sbGVyTkZUfSBUaGUgaW5pdGlhbGl6ZWQgQVJDb250cm9sbGVyTkZUIGluc3RhbmNlXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIF9pbml0aWFsaXplKCkge1xuICAgIC8vIGluaXRpYWxpemUgdGhlIHRvb2xraXRcbiAgICB0aGlzLmFydG9vbGtpdE5GVCA9IGF3YWl0IG5ldyBBUlRvb2xraXRORlQoKS5pbml0KCk7XG4gICAgY29uc29sZS5sb2coXCJbQVJDb250cm9sbGVyTkZUXVwiLCBcIkFSVG9vbGtpdE5GVCBpbml0aWFsaXplZFwiKTtcblxuICAgIC8vIGxvYWQgdGhlIGNhbWVyYVxuICAgIHRoaXMuY2FtZXJhSWQgPSBhd2FpdCB0aGlzLmFydG9vbGtpdE5GVC5sb2FkQ2FtZXJhKHRoaXMuY2FtZXJhUGFyYW0pO1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgXCJbQVJDb250cm9sbGVyTkZUXVwiLFxuICAgICAgXCJDYW1lcmEgcGFyYW1zIGxvYWRlZCB3aXRoIElEXCIsXG4gICAgICB0aGlzLmNhbWVyYUlkXG4gICAgKTtcblxuICAgIC8vIHNldHVwXG4gICAgdGhpcy5pZCA9IHRoaXMuYXJ0b29sa2l0TkZULnNldHVwKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLmNhbWVyYUlkKTtcbiAgICBjb25zb2xlLmxvZyhcIltBUkNvbnRyb2xsZXJORlRdXCIsIFwiR290IElEIGZyb20gc2V0dXBcIiwgdGhpcy5pZCk7XG5cbiAgICB0aGlzLl9pbml0TkZUKCk7XG5cbiAgICBjb25zdCBwYXJhbXM6IGRlbGVnYXRlTWV0aG9kc1tcImZyYW1lTWFsbG9jXCJdID1cbiAgICAgIHRoaXMuYXJ0b29sa2l0TkZULmZyYW1lTWFsbG9jO1xuICAgIHRoaXMuZnJhbWVwb2ludGVyID0gcGFyYW1zLmZyYW1lcG9pbnRlcjtcbiAgICB0aGlzLmZyYW1lc2l6ZSA9IHBhcmFtcy5mcmFtZXNpemU7XG4gICAgdGhpcy52aWRlb0x1bWFQb2ludGVyID0gcGFyYW1zLnZpZGVvTHVtYVBvaW50ZXI7XG5cbiAgICB0aGlzLmRhdGFIZWFwID0gbmV3IFVpbnQ4QXJyYXkoXG4gICAgICB0aGlzLmFydG9vbGtpdE5GVC5pbnN0YW5jZS5IRUFQVTguYnVmZmVyLFxuICAgICAgdGhpcy5mcmFtZXBvaW50ZXIsXG4gICAgICB0aGlzLmZyYW1lc2l6ZVxuICAgICk7XG4gICAgdGhpcy52aWRlb0x1bWEgPSBuZXcgVWludDhBcnJheShcbiAgICAgIHRoaXMuYXJ0b29sa2l0TkZULmluc3RhbmNlLkhFQVBVOC5idWZmZXIsXG4gICAgICB0aGlzLnZpZGVvTHVtYVBvaW50ZXIsXG4gICAgICB0aGlzLmZyYW1lc2l6ZSAvIDRcbiAgICApO1xuXG4gICAgdGhpcy5jYW1lcmFfbWF0ID0gbmV3IEZsb2F0NjRBcnJheShcbiAgICAgIHRoaXMuYXJ0b29sa2l0TkZULmluc3RhbmNlLkhFQVBVOC5idWZmZXIsXG4gICAgICBwYXJhbXMuY2FtZXJhLFxuICAgICAgMTZcbiAgICApO1xuICAgIHRoaXMubWFya2VyX3RyYW5zZm9ybV9tYXQgPSBuZXcgRmxvYXQ2NEFycmF5KFxuICAgICAgdGhpcy5hcnRvb2xraXRORlQuaW5zdGFuY2UuSEVBUFU4LmJ1ZmZlcixcbiAgICAgIHBhcmFtcy50cmFuc2Zvcm0sXG4gICAgICAxMlxuICAgICk7XG5cbiAgICB0aGlzLnNldFByb2plY3Rpb25OZWFyUGxhbmUoMC4xKTtcbiAgICB0aGlzLnNldFByb2plY3Rpb25GYXJQbGFuZSgxMDAwKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgbmFtZTogXCJsb2FkXCIsXG4gICAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgIH0pO1xuICAgIH0sIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogSW5pdCB0aGUgbmVjZXNzYXJ5IGtwbSBoYW5kbGUgZm9yIE5GVCBhbmQgdGhlIHNldHRpbmdzIGZvciB0aGUgQ1BVLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IDAgKHZvaWQpXG4gICAqL1xuICBwcml2YXRlIF9pbml0TkZUKCkge1xuICAgIHRoaXMuYXJ0b29sa2l0TkZULnNldHVwQVIyKHRoaXMuaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvcHkgdGhlIEltYWdlIGRhdGEgdG8gdGhlIEhFQVAgZm9yIHRoZSBkZWJ1Z1NldHVwIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IDAgKHZvaWQpXG4gICAqL1xuICBwcml2YXRlIF9jb3B5SW1hZ2VUb0hlYXAoc291cmNlSW1hZ2U6IEltYWdlT2JqKSB7XG4gICAgaWYgKCFzb3VyY2VJbWFnZSkge1xuICAgICAgLy8gZGVmYXVsdCB0byBwcmVsb2FkZWQgaW1hZ2VcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjogbm8gcHJvdmlkZWQgaW1hZ2VEYXRhIHRvIEFSQ29udHJvbGxlck5GVFwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyB0aGlzIGlzIG9mIHR5cGUgVWludDhDbGFtcGVkQXJyYXk6XG4gICAgLy8gVGhlIFVpbnQ4Q2xhbXBlZEFycmF5IHR5cGVkIGFycmF5IHJlcHJlc2VudHMgYW4gYXJyYXkgb2YgOC1iaXQgdW5zaWduZWRcbiAgICAvLyBpbnRlZ2VycyBjbGFtcGVkIHRvIDAtMjU1XG4gICAgLy8gQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9VaW50OENsYW1wZWRBcnJheVxuICAgIGxldCBkYXRhOiBVaW50OENsYW1wZWRBcnJheTtcblxuICAgIGlmIChzb3VyY2VJbWFnZS5kYXRhKSB7XG4gICAgICAvLyBkaXJlY3RseSB1c2Ugc291cmNlIGltYWdlXG4gICAgICBkYXRhID0gc291cmNlSW1hZ2UuZGF0YTtcbiAgICB9XG5cbiAgICAvLyBIZXJlIHdlIGhhdmUgYWNjZXNzIHRvIHRoZSB1bm1vZGlmaWVkIHZpZGVvIGltYWdlLiBXZSBub3cgbmVlZCB0byBhZGQgdGhlIHZpZGVvTHVtYSBjaGFuZWwgdG8gYmUgYWJsZSB0byBzZXJ2ZSB0aGUgdW5kZXJseWluZyBBUlRLIEFQSVxuICAgIGlmICh0aGlzLnZpZGVvTHVtYSkge1xuICAgICAgbGV0IHEgPSAwO1xuXG4gICAgICAvLyBDcmVhdGUgbHVtYSBmcm9tIHZpZGVvIGRhdGEgYXNzdW1pbmcgUGl4ZWxmb3JtYXQgQVJfUElYRUxfRk9STUFUX1JHQkFcbiAgICAgIC8vIHNlZSAoQVJUb29sS2l0SlMuY3BwIEw6IDQzKVxuICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCB0aGlzLnZpZGVvU2l6ZTsgcCsrKSB7XG4gICAgICAgIGxldCByID0gZGF0YVtxICsgMF0sXG4gICAgICAgICAgZyA9IGRhdGFbcSArIDFdLFxuICAgICAgICAgIGIgPSBkYXRhW3EgKyAyXTtcbiAgICAgICAgLy8gQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTk2MjQxLzU4NDM2NDJcbiAgICAgICAgdGhpcy52aWRlb0x1bWFbcF0gPSAociArIHIgKyByICsgYiArIGcgKyBnICsgZyArIGcpID4+IDM7XG4gICAgICAgIHEgKz0gNDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5kYXRhSGVhcCkge1xuICAgICAgdGhpcy5kYXRhSGVhcC5zZXQoZGF0YSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsIi8qXG4gKiAgQVJUb29sa2l0TkZULnRzXG4gKiAgSlNBUlRvb2xLaXRORlRcbiAqXG4gKiAgVGhpcyBmaWxlIGlzIHBhcnQgb2YgSlNBUlRvb2xLaXRORlQgLSBXZWJBUktpdC5cbiAqXG4gKiAgSlNBUlRvb2xLaXRORlQgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiAgSlNBUlRvb2xLaXRORlQgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiAgYWxvbmcgd2l0aCBKU0FSVG9vbEtpdE5GVC4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiAgQXMgYSBzcGVjaWFsIGV4Y2VwdGlvbiwgdGhlIGNvcHlyaWdodCBob2xkZXJzIG9mIHRoaXMgbGlicmFyeSBnaXZlIHlvdVxuICogIHBlcm1pc3Npb24gdG8gbGluayB0aGlzIGxpYnJhcnkgd2l0aCBpbmRlcGVuZGVudCBtb2R1bGVzIHRvIHByb2R1Y2UgYW5cbiAqICBleGVjdXRhYmxlLCByZWdhcmRsZXNzIG9mIHRoZSBsaWNlbnNlIHRlcm1zIG9mIHRoZXNlIGluZGVwZW5kZW50IG1vZHVsZXMsIGFuZCB0b1xuICogIGNvcHkgYW5kIGRpc3RyaWJ1dGUgdGhlIHJlc3VsdGluZyBleGVjdXRhYmxlIHVuZGVyIHRlcm1zIG9mIHlvdXIgY2hvaWNlLFxuICogIHByb3ZpZGVkIHRoYXQgeW91IGFsc28gbWVldCwgZm9yIGVhY2ggbGlua2VkIGluZGVwZW5kZW50IG1vZHVsZSwgdGhlIHRlcm1zIGFuZFxuICogIGNvbmRpdGlvbnMgb2YgdGhlIGxpY2Vuc2Ugb2YgdGhhdCBtb2R1bGUuIEFuIGluZGVwZW5kZW50IG1vZHVsZSBpcyBhIG1vZHVsZVxuICogIHdoaWNoIGlzIG5laXRoZXIgZGVyaXZlZCBmcm9tIG5vciBiYXNlZCBvbiB0aGlzIGxpYnJhcnkuIElmIHlvdSBtb2RpZnkgdGhpc1xuICogIGxpYnJhcnksIHlvdSBtYXkgZXh0ZW5kIHRoaXMgZXhjZXB0aW9uIHRvIHlvdXIgdmVyc2lvbiBvZiB0aGUgbGlicmFyeSwgYnV0IHlvdVxuICogIGFyZSBub3Qgb2JsaWdhdGVkIHRvIGRvIHNvLiBJZiB5b3UgZG8gbm90IHdpc2ggdG8gZG8gc28sIGRlbGV0ZSB0aGlzIGV4Y2VwdGlvblxuICogIHN0YXRlbWVudCBmcm9tIHlvdXIgdmVyc2lvbi5cbiAqXG4gKiAgQ29weXJpZ2h0IDIwMjAgV2ViQVJLaXQuXG4gKlxuICogIEF1dGhvcihzKTogV2FsdGVyIFBlcmRhbiBAa2Fsd2FsdCBodHRwczovL2dpdGh1Yi5jb20va2Fsd2FsdFxuICpcbiAqL1xuaW1wb3J0IGFydG9vbGtpdE5GVCBmcm9tIFwiLi4vYnVpbGQvYXJ0b29sa2l0TkZUX0VTNl93YXNtXCI7XG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4vVXRpbHNcIjtcblxuY29uc3QgVU5LTk9XTl9NQVJLRVIgPSAtMTtcbmNvbnN0IE5GVF9NQVJLRVIgPSAwO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIG5hbWVzcGFjZSBOb2RlSlMge1xuICAgIGludGVyZmFjZSBHbG9iYWwge1xuICAgICAgYXJ0b29sa2l0TkZUOiBhbnk7XG4gICAgfVxuICB9XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIGFydG9vbGtpdE5GVDogYW55O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFSVG9vbGtpdE5GVCB7XG4gIHN0YXRpYyBnZXQgVU5LTk9XTl9NQVJLRVIoKSB7XG4gICAgcmV0dXJuIFVOS05PV05fTUFSS0VSO1xuICB9XG4gIHN0YXRpYyBnZXQgTkZUX01BUktFUigpIHtcbiAgICByZXR1cm4gTkZUX01BUktFUjtcbiAgfVxuXG4gIHB1YmxpYyBpbnN0YW5jZTogYW55O1xuICBwcml2YXRlIG1hcmtlck5GVENvdW50OiBudW1iZXI7XG4gIHByaXZhdGUgY2FtZXJhQ291bnQ6IG51bWJlcjtcbiAgcHJpdmF0ZSB2ZXJzaW9uOiBzdHJpbmc7XG4gIHB1YmxpYyBzZXR1cDogKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBjYW1lcmFJZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gIHB1YmxpYyB0ZWFyZG93bjogKCkgPT4gdm9pZDtcbiAgcHVibGljIHNldHVwQVIyOiAoaWQ6IG51bWJlcikgPT4gdm9pZDtcbiAgcHVibGljIHNldERlYnVnTW9kZTogKGlkOiBudW1iZXIsIG1vZGU6IGJvb2xlYW4pID0+IG51bWJlcjtcbiAgcHVibGljIGdldERlYnVnTW9kZTogKGlkOiBudW1iZXIpID0+IGJvb2xlYW47XG4gIHB1YmxpYyBnZXRQcm9jZXNzaW5nSW1hZ2U6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gIHB1YmxpYyBkZXRlY3RNYXJrZXI6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gIHB1YmxpYyBkZXRlY3RORlRNYXJrZXI6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gIHB1YmxpYyBnZXRORlRNYXJrZXI6IChpZDogbnVtYmVyLCBtYXJrZXJJbmRleDogbnVtYmVyKSA9PiBudW1iZXI7XG4gIHB1YmxpYyBnZXRORlREYXRhOiAoaWQ6IG51bWJlciwgaW5kZXg6IG51bWJlcikgPT4gb2JqZWN0O1xuICBwdWJsaWMgc2V0TG9nTGV2ZWw6IChtb2RlOiBib29sZWFuKSA9PiBudW1iZXI7XG4gIHB1YmxpYyBnZXRMb2dMZXZlbDogKCkgPT4gbnVtYmVyO1xuICBwdWJsaWMgZnJhbWVNYWxsb2M6IHtcbiAgICBmcmFtZXBvaW50ZXI6IG51bWJlcjtcbiAgICBmcmFtZXNpemU6IG51bWJlcjtcbiAgICB2aWRlb0x1bWFQb2ludGVyOiBudW1iZXI7XG4gICAgY2FtZXJhOiBudW1iZXI7XG4gICAgdHJhbnNmb3JtOiBudW1iZXI7XG4gIH07XG4gIHB1YmxpYyBORlRNYXJrZXJJbmZvOiB7XG4gICAgZXJyb3I6IG51bWJlcjtcbiAgICBmb3VuZDogbnVtYmVyO1xuICAgIGlkOiBudW1iZXI7XG4gICAgcG9zZTogRmxvYXQ2NEFycmF5O1xuICB9O1xuICBwdWJsaWMgc2V0UHJvamVjdGlvbk5lYXJQbGFuZTogKGlkOiBudW1iZXIsIHZhbHVlOiBudW1iZXIpID0+IHZvaWQ7XG4gIHB1YmxpYyBnZXRQcm9qZWN0aW9uTmVhclBsYW5lOiAoaWQ6IG51bWJlcikgPT4gbnVtYmVyO1xuICBwdWJsaWMgc2V0UHJvamVjdGlvbkZhclBsYW5lOiAoaWQ6IG51bWJlciwgdmFsdWU6IG51bWJlcikgPT4gdm9pZDtcbiAgcHVibGljIGdldFByb2plY3Rpb25GYXJQbGFuZTogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIHNldFRocmVzaG9sZE1vZGU6IChpZDogbnVtYmVyLCBtb2RlOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIGdldFRocmVzaG9sZE1vZGU6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gIHB1YmxpYyBzZXRUaHJlc2hvbGQ6IChpZDogbnVtYmVyLCB0aHJlc2hvbGQ6IG51bWJlcikgPT4gbnVtYmVyO1xuICBwdWJsaWMgZ2V0VGhyZXNob2xkOiAoaWQ6IG51bWJlcikgPT4gbnVtYmVyO1xuICBwdWJsaWMgc2V0SW1hZ2VQcm9jTW9kZTogKGlkOiBudW1iZXIsIG1vZGU6IG51bWJlcikgPT4gbnVtYmVyO1xuICBwdWJsaWMgZ2V0SW1hZ2VQcm9jTW9kZTogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcblxuICAvLyBjb25zdHJ1Y3Rpb25cbiAgLyoqXG4gICAqIFRoZSBBUlRvb2xraXRORlQgY29uc3RydWN0b3IuIEl0IGhhcyBubyBhcmd1bWVudHMuXG4gICAqIFRoZXNlIHByb3BlcnRpZXMgYXJlIGluaXRpYWxpemVkOlxuICAgKiAtIGluc3RhbmNlXG4gICAqIC0gbWFya2VyTkZUQ291bnRcbiAgICogLSBjYW1lcmFDb3VudFxuICAgKiAtIHZlcnNpb25cbiAgICogQSBtZXNzYWdlIGlzIGRpc3BsYXllZCBpbiB0aGUgYnJvd3NlciBjb25zb2xlIGR1cmluZyB0aGUgaW50aXRpYWxpemF0aW9uLCBmb3IgZXhhbXBsZTpcbiAgICogXCJBUlRvb2xraXRORlQgMS4xLjBcIlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gcmVmZXJlbmNlIHRvIFdBU00gbW9kdWxlXG4gICAgdGhpcy5pbnN0YW5jZTtcbiAgICB0aGlzLm1hcmtlck5GVENvdW50ID0gMDtcbiAgICB0aGlzLmNhbWVyYUNvdW50ID0gMDtcbiAgICB0aGlzLnZlcnNpb24gPSBcIjEuMS4xXCI7XG4gICAgY29uc29sZS5pbmZvKFwiQVJUb29sa2l0TkZUIFwiLCB0aGlzLnZlcnNpb24pO1xuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gaW5pdGlhbGl6YXRpb25cbiAgLyoqXG4gICAqIEluaXQgdGhlIGNsYXNzIGluamVjdGluZyB0aGUgV2FzbSBNb2R1bGUsIGxpbmsgdGhlIGluc3RhbmNlZCBtZXRob2RzIGFuZFxuICAgKiBjcmVhdGUgYSBnbG9iYWwgYXJ0b29sa2l0TkZUIHZhcmlhYmxlLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IHRoZSB0aGlzIG9iamVjdFxuICAgKi9cbiAgcHVibGljIGFzeW5jIGluaXQoKSB7XG4gICAgdGhpcy5pbnN0YW5jZSA9IGF3YWl0IGFydG9vbGtpdE5GVCgpO1xuXG4gICAgdGhpcy5fZGVjb3JhdGUoKTtcblxuICAgIGxldCBzY29wZSA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBnbG9iYWw7XG4gICAgc2NvcGUuYXJ0b29sa2l0TkZUID0gdGhpcztcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gcHJpdmF0ZSBtZXRob2RzXG4gIC8qKlxuICAgKiBVc2VkIGludGVybmFsbHkgdG8gbGluayB0aGUgaW5zdGFuY2UgaW4gdGhlIE1vZHVsZUxvYWRlciB0byB0aGVcbiAgICogQVJUb29sa2l0TkZUIGludGVybmFsIG1ldGhvZHMuXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBwcml2YXRlIF9kZWNvcmF0ZSgpIHtcbiAgICAvLyBhZGQgZGVsZWdhdGUgbWV0aG9kc1xuICAgIFtcbiAgICAgIFwic2V0dXBcIixcbiAgICAgIFwidGVhcmRvd25cIixcblxuICAgICAgXCJzZXR1cEFSMlwiLFxuXG4gICAgICBcInNldExvZ0xldmVsXCIsXG4gICAgICBcImdldExvZ0xldmVsXCIsXG5cbiAgICAgIFwic2V0RGVidWdNb2RlXCIsXG4gICAgICBcImdldERlYnVnTW9kZVwiLFxuXG4gICAgICBcImdldFByb2Nlc3NpbmdJbWFnZVwiLFxuXG4gICAgICBcImRldGVjdE1hcmtlclwiLFxuICAgICAgXCJkZXRlY3RORlRNYXJrZXJcIixcbiAgICAgIFwiZ2V0TkZUTWFya2VyXCIsXG4gICAgICBcImdldE5GVERhdGFcIixcblxuICAgICAgXCJmcmFtZU1hbGxvY1wiLFxuICAgICAgXCJORlRNYXJrZXJJbmZvXCIsXG5cbiAgICAgIFwic2V0UHJvamVjdGlvbk5lYXJQbGFuZVwiLFxuICAgICAgXCJnZXRQcm9qZWN0aW9uTmVhclBsYW5lXCIsXG5cbiAgICAgIFwic2V0UHJvamVjdGlvbkZhclBsYW5lXCIsXG4gICAgICBcImdldFByb2plY3Rpb25GYXJQbGFuZVwiLFxuXG4gICAgICBcInNldFRocmVzaG9sZE1vZGVcIixcbiAgICAgIFwiZ2V0VGhyZXNob2xkTW9kZVwiLFxuXG4gICAgICBcInNldFRocmVzaG9sZFwiLFxuICAgICAgXCJnZXRUaHJlc2hvbGRcIixcblxuICAgICAgXCJzZXRJbWFnZVByb2NNb2RlXCIsXG4gICAgICBcImdldEltYWdlUHJvY01vZGVcIixcblxuICAgICAgXCJTdHJpbmdMaXN0XCIsXG4gICAgXS5mb3JFYWNoKChtZXRob2QpID0+IHtcbiAgICAgIHRoaXMuY29udmVydGVyKClbbWV0aG9kXSA9IHRoaXMuaW5zdGFuY2VbbWV0aG9kXTtcbiAgICB9KTtcblxuICAgIC8vIGV4cG9zZSBjb25zdGFudHNcbiAgICBmb3IgKGNvbnN0IGNvIGluIHRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIGlmIChjby5tYXRjaCgvXkFSLykpIHtcbiAgICAgICAgdGhpcy5jb252ZXJ0ZXIoKVtjb10gPSB0aGlzLmluc3RhbmNlW2NvXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBpbnRlcm5hbGx5IHRvIGNvbnZlcnQgYW5kIGluamVjdCBjb2RlLlxuICAgKiBAcmV0dXJuIHt0aGlzfSB0aGUgdGhpcyBvYmplY3RcbiAgICovXG4gIHByaXZhdGUgY29udmVydGVyKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gcHVibGljIGFjY2Vzc29yc1xuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIExvYWQgdGhlIGNhbWVyYSwgdGhpcyBpcyBhbiBpbXBvcnRhbnQgYW5kIHJlcXVpcmVkIHN0ZXAsIEludGVybmFsbHkgZmlsbFxuICAgKiB0aGUgQVJQYXJhbSBzdHJ1Y3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxPckRhdGE6IHRoZSBjYW1lcmEgcGFyYW1ldGVyLCB1c3VhbGx5IGEgcGF0aCB0byBhIC5kYXQgZmlsZVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IGEgbnVtYmVyLCB0aGUgaW50ZXJuYWwgaWQuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgbG9hZENhbWVyYSh1cmxPckRhdGE6IGFueSk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgY29uc3QgdGFyZ2V0ID0gXCIvY2FtZXJhX3BhcmFtX1wiICsgdGhpcy5jYW1lcmFDb3VudCsrO1xuXG4gICAgbGV0IGRhdGE7XG5cbiAgICBpZiAodXJsT3JEYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgLy8gYXNzdW1lIHByZWxvYWRlZCBjYW1lcmEgcGFyYW1zXG4gICAgICBkYXRhID0gdXJsT3JEYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmZXRjaCBkYXRhIHZpYSBIVFRQXG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gYXdhaXQgVXRpbHMuZmV0Y2hSZW1vdGVEYXRhKHVybE9yRGF0YSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9zdG9yZURhdGFGaWxlKGRhdGEsIHRhcmdldCk7XG5cbiAgICAvLyByZXR1cm4gdGhlIGludGVybmFsIG1hcmtlciBJRFxuICAgIHJldHVybiB0aGlzLmluc3RhbmNlLl9sb2FkQ2FtZXJhKHRhcmdldCk7XG4gIH1cblxuICAvKipcbiAgICogTG9hZCB0aGUgTkZUIE1hcmtlcnMgKC5mc2V0LCAuaXNldCBhbmQgLmZzZXQzKSBpbiB0aGUgY29kZSwgTXVzdCBiZSBwcm92aWRlZFxuICAgKiB0aGUgdXJsIG9mIHRoZSBmaWxlIHdpdGhvdXQgdGhlIGV4dGVuc2lvbi4gSWYgZmFpbHMgdG8gbG9hZCBpdCByYWlzZSBhbiBlcnJvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGFySWQgaW50ZXJuYWwgaWRcbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSB1cmxzICBhcnJheSBvZiB1cmxzIG9mIHRoZSBkZXNjcmlwdG9ycyBmaWxlcyB3aXRob3V0IGV4dFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayB0aGUgY2FsbGJhY2sgdG8gcmV0cmlldmUgdGhlIGlkcy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gb25FcnJvcjIgdGhlIGVycm9yIGNhbGxiYWNrLlxuICAgKi9cbiAgcHVibGljIGFkZE5GVE1hcmtlcnMoXG4gICAgYXJJZDogbnVtYmVyLFxuICAgIHVybHM6IEFycmF5PHN0cmluZz4sXG4gICAgY2FsbGJhY2s6IChmaWxlbmFtZTogYW55KSA9PiB2b2lkLFxuICAgIG9uRXJyb3IyOiAoZXJyb3JOdW1iZXI6IGFueSkgPT4gdm9pZFxuICApOiBbeyBpZDogbnVtYmVyIH1dIHtcbiAgICB2YXIgcHJlZml4ZXM6IGFueSA9IFtdO1xuICAgIHZhciBwZW5kaW5nID0gdXJscy5sZW5ndGggKiAzO1xuICAgIHZhciBvblN1Y2Nlc3MgPSAoZmlsZW5hbWU6IGFueSkgPT4ge1xuICAgICAgcGVuZGluZyAtPSAxO1xuICAgICAgaWYgKHBlbmRpbmcgPT09IDApIHtcbiAgICAgICAgY29uc3QgdmVjID0gbmV3IHRoaXMuaW5zdGFuY2UuU3RyaW5nTGlzdCgpO1xuICAgICAgICBjb25zdCBtYXJrZXJJZHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZlYy5wdXNoX2JhY2socHJlZml4ZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXQgPSB0aGlzLmluc3RhbmNlLl9hZGRORlRNYXJrZXJzKGFySWQsIHZlYyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmV0LnNpemUoKTsgaSsrKSB7XG4gICAgICAgICAgbWFya2VySWRzLnB1c2gocmV0LmdldChpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZyhcImFkZCBuZnQgbWFya2VyIGlkczogXCIsIG1hcmtlcklkcyk7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2sobWFya2VySWRzKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvbkVycm9yID0gKGZpbGVuYW1lOiBhbnksIGVycm9yTnVtYmVyPzogYW55KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWxlZCB0byBsb2FkOiBcIiwgZmlsZW5hbWUpO1xuICAgICAgb25FcnJvcjIoZXJyb3JOdW1iZXIpO1xuICAgIH07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB1cmwgPSB1cmxzW2ldO1xuICAgICAgdmFyIHByZWZpeCA9IFwiL21hcmtlck5GVF9cIiArIHRoaXMubWFya2VyTkZUQ291bnQ7XG4gICAgICBwcmVmaXhlcy5wdXNoKHByZWZpeCk7XG4gICAgICB2YXIgZmlsZW5hbWUxID0gcHJlZml4ICsgXCIuZnNldFwiO1xuICAgICAgdmFyIGZpbGVuYW1lMiA9IHByZWZpeCArIFwiLmlzZXRcIjtcbiAgICAgIHZhciBmaWxlbmFtZTMgPSBwcmVmaXggKyBcIi5mc2V0M1wiO1xuXG4gICAgICB0aGlzLmFqYXgoXG4gICAgICAgIHVybCArIFwiLmZzZXRcIixcbiAgICAgICAgZmlsZW5hbWUxLFxuICAgICAgICBvblN1Y2Nlc3MuYmluZChmaWxlbmFtZTEpLFxuICAgICAgICBvbkVycm9yLmJpbmQoZmlsZW5hbWUxKVxuICAgICAgKTtcbiAgICAgIHRoaXMuYWpheChcbiAgICAgICAgdXJsICsgXCIuaXNldFwiLFxuICAgICAgICBmaWxlbmFtZTIsXG4gICAgICAgIG9uU3VjY2Vzcy5iaW5kKGZpbGVuYW1lMiksXG4gICAgICAgIG9uRXJyb3IuYmluZChmaWxlbmFtZTIpXG4gICAgICApO1xuICAgICAgdGhpcy5hamF4KFxuICAgICAgICB1cmwgKyBcIi5mc2V0M1wiLFxuICAgICAgICBmaWxlbmFtZTMsXG4gICAgICAgIG9uU3VjY2Vzcy5iaW5kKGZpbGVuYW1lMyksXG4gICAgICAgIG9uRXJyb3IuYmluZChmaWxlbmFtZTMpXG4gICAgICApO1xuICAgICAgdGhpcy5tYXJrZXJORlRDb3VudCArPSAxO1xuICAgIH1cbiAgICBsZXQgSWRzOiBhbnkgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXJscy5sZW5ndGg7ICsraSkge1xuICAgICAgSWRzLnB1c2goaSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIElkcztcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIGltcGxlbWVudGF0aW9uXG4gIC8qKlxuICAgKiBVc2VkIGludGVybmFsbHkgYnkgTG9hZENhbWVyYSBtZXRob2RcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHByaXZhdGUgX3N0b3JlRGF0YUZpbGUoZGF0YTogVWludDhBcnJheSwgdGFyZ2V0OiBzdHJpbmcpIHtcbiAgICAvLyBGUyBpcyBwcm92aWRlZCBieSBlbXNjcmlwdGVuXG4gICAgLy8gTm90ZTogdmFsaWQgZGF0YSBtdXN0IGJlIGluIGJpbmFyeSBmb3JtYXQgZW5jb2RlZCBhcyBVaW50OEFycmF5XG4gICAgdGhpcy5pbnN0YW5jZS5GUy53cml0ZUZpbGUodGFyZ2V0LCBkYXRhLCB7XG4gICAgICBlbmNvZGluZzogXCJiaW5hcnlcIixcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGludGVybmFsbHkgYnkgdGhlIGFkZE5GVE1hcmtlcnMgbWV0aG9kXG4gICAqIEBwYXJhbSB1cmwgdXJsIG9mIHRoZSBtYXJrZXIuXG4gICAqIEBwYXJhbSB0YXJnZXQgdGhlIHRhcmdldCBvZiB0aGUgbWFya2VyLlxuICAgKiBAcGFyYW0gY2FsbGJhY2sgY2FsbGJhY2sgIHRvIGdldCB0aGUgYmluYXJ5IGRhdGEuXG4gICAqIEBwYXJhbSBlcnJvckNhbGxiYWNrIHRoZSBlcnJvciBjYWxsYmFjay5cbiAgICovXG4gIHByaXZhdGUgYWpheChcbiAgICB1cmw6IHN0cmluZyxcbiAgICB0YXJnZXQ6IHN0cmluZyxcbiAgICBjYWxsYmFjazogKGJ5dGVBcnJheTogVWludDhBcnJheSkgPT4gdm9pZCxcbiAgICBlcnJvckNhbGxiYWNrOiAobWVzc2FnZTogYW55KSA9PiB2b2lkXG4gICkge1xuICAgIHZhciBvUmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgb1JlcS5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XG4gICAgb1JlcS5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7IC8vIGJsb2IgYXJyYXlidWZmZXJcbiAgICBjb25zdCB3cml0ZUJ5dGVBcnJheVRvRlMgPSAoXG4gICAgICB0YXJnZXQ6IHN0cmluZyxcbiAgICAgIGJ5dGVBcnJheTogVWludDhBcnJheSxcbiAgICAgIGNhbGxiYWNrOiAoYnl0ZUFycmF5OiBVaW50OEFycmF5KSA9PiB2b2lkXG4gICAgKSA9PiB7XG4gICAgICB0aGlzLmluc3RhbmNlLkZTLndyaXRlRmlsZSh0YXJnZXQsIGJ5dGVBcnJheSwgeyBlbmNvZGluZzogXCJiaW5hcnlcIiB9KTtcbiAgICAgIGNhbGxiYWNrKGJ5dGVBcnJheSk7XG4gICAgfTtcblxuICAgIG9SZXEub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMuc3RhdHVzID09IDIwMCkge1xuICAgICAgICB2YXIgYXJyYXlCdWZmZXIgPSBvUmVxLnJlc3BvbnNlO1xuICAgICAgICB2YXIgYnl0ZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpO1xuICAgICAgICB3cml0ZUJ5dGVBcnJheVRvRlModGFyZ2V0LCBieXRlQXJyYXksIGNhbGxiYWNrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVycm9yQ2FsbGJhY2sodGhpcy5zdGF0dXMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBvUmVxLnNlbmQoKTtcbiAgfVxufVxuIiwiLypcbiAqICBVdGlscy50c1xuICogIEpTQVJUb29sS2l0TkZUXG4gKlxuICogIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIEpTQVJUb29sS2l0TkZUIC0gV2ViQVJLaXQuXG4gKlxuICogIEpTQVJUb29sS2l0TkZUIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogIEpTQVJUb29sS2l0TkZUIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogIGFsb25nIHdpdGggSlNBUlRvb2xLaXRORlQuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogIEFzIGEgc3BlY2lhbCBleGNlcHRpb24sIHRoZSBjb3B5cmlnaHQgaG9sZGVycyBvZiB0aGlzIGxpYnJhcnkgZ2l2ZSB5b3VcbiAqICBwZXJtaXNzaW9uIHRvIGxpbmsgdGhpcyBsaWJyYXJ5IHdpdGggaW5kZXBlbmRlbnQgbW9kdWxlcyB0byBwcm9kdWNlIGFuXG4gKiAgZXhlY3V0YWJsZSwgcmVnYXJkbGVzcyBvZiB0aGUgbGljZW5zZSB0ZXJtcyBvZiB0aGVzZSBpbmRlcGVuZGVudCBtb2R1bGVzLCBhbmQgdG9cbiAqICBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSByZXN1bHRpbmcgZXhlY3V0YWJsZSB1bmRlciB0ZXJtcyBvZiB5b3VyIGNob2ljZSxcbiAqICBwcm92aWRlZCB0aGF0IHlvdSBhbHNvIG1lZXQsIGZvciBlYWNoIGxpbmtlZCBpbmRlcGVuZGVudCBtb2R1bGUsIHRoZSB0ZXJtcyBhbmRcbiAqICBjb25kaXRpb25zIG9mIHRoZSBsaWNlbnNlIG9mIHRoYXQgbW9kdWxlLiBBbiBpbmRlcGVuZGVudCBtb2R1bGUgaXMgYSBtb2R1bGVcbiAqICB3aGljaCBpcyBuZWl0aGVyIGRlcml2ZWQgZnJvbSBub3IgYmFzZWQgb24gdGhpcyBsaWJyYXJ5LiBJZiB5b3UgbW9kaWZ5IHRoaXNcbiAqICBsaWJyYXJ5LCB5b3UgbWF5IGV4dGVuZCB0aGlzIGV4Y2VwdGlvbiB0byB5b3VyIHZlcnNpb24gb2YgdGhlIGxpYnJhcnksIGJ1dCB5b3VcbiAqICBhcmUgbm90IG9ibGlnYXRlZCB0byBkbyBzby4gSWYgeW91IGRvIG5vdCB3aXNoIHRvIGRvIHNvLCBkZWxldGUgdGhpcyBleGNlcHRpb25cbiAqICBzdGF0ZW1lbnQgZnJvbSB5b3VyIHZlcnNpb24uXG4gKlxuICogIENvcHlyaWdodCAyMDIwIFdlYkFSS2l0LlxuICpcbiAqICBBdXRob3Iocyk6IFdhbHRlciBQZXJkYW4gQGthbHdhbHQgaHR0cHM6Ly9naXRodWIuY29tL2thbHdhbHRcbiAqXG4gKi9cbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXRpbHMge1xuICBzdGF0aWMgYXN5bmMgZmV0Y2hSZW1vdGVEYXRhKHVybDogc3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlOiBhbnkgPSBhd2FpdCBheGlvcy5nZXQodXJsLCB7XG4gICAgICAgIHJlc3BvbnNlVHlwZTogXCJhcnJheWJ1ZmZlclwiLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkocmVzcG9uc2UuZGF0YSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBmZXRjaFJlbW90ZURhdGFDYWxsYmFjayh1cmw6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZTogYW55ID0gYXdhaXQgYXhpb3NcbiAgICAgICAgLmdldCh1cmwsIHsgcmVzcG9uc2VUeXBlOiBcImFycmF5YnVmZmVyXCIgfSlcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgY2FsbGJhY2socmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHN0cmluZzJVaW50OERhdGEoc3RyaW5nOiBzdHJpbmcpIHtcbiAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoc3RyaW5nLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkYXRhW2ldID0gc3RyaW5nLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgZGVmaW5lKEl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBkZWZpbmUoR3AsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb24pO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYXN5bmNJdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBkZWZpbmUoR3AsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9KTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCBpbiBtb2Rlcm4gZW5naW5lc1xuICAvLyB3ZSBjYW4gZXhwbGljaXRseSBhY2Nlc3MgZ2xvYmFsVGhpcy4gSW4gb2xkZXIgZW5naW5lcyB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBnbG9iYWxUaGlzLnJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG4gIH0gZWxzZSB7XG4gICAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbiAgfVxufVxuIiwiLyogKGlnbm9yZWQpICovIiwiLyogKGlnbm9yZWQpICovIiwiLyogKGlnbm9yZWQpICovIiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn0iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvKlxuICogIGluZGV4LnRzXG4gKiAgSlNBUlRvb2xLaXRORlRcbiAqXG4gKiAgVGhpcyBmaWxlIGlzIHBhcnQgb2YgSlNBUlRvb2xLaXRORlQgLSBXZWJBUktpdC5cbiAqXG4gKiAgSlNBUlRvb2xLaXRORlQgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiAgSlNBUlRvb2xLaXRORlQgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiAgYWxvbmcgd2l0aCBKU0FSVG9vbEtpdE5GVC4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiAgQXMgYSBzcGVjaWFsIGV4Y2VwdGlvbiwgdGhlIGNvcHlyaWdodCBob2xkZXJzIG9mIHRoaXMgbGlicmFyeSBnaXZlIHlvdVxuICogIHBlcm1pc3Npb24gdG8gbGluayB0aGlzIGxpYnJhcnkgd2l0aCBpbmRlcGVuZGVudCBtb2R1bGVzIHRvIHByb2R1Y2UgYW5cbiAqICBleGVjdXRhYmxlLCByZWdhcmRsZXNzIG9mIHRoZSBsaWNlbnNlIHRlcm1zIG9mIHRoZXNlIGluZGVwZW5kZW50IG1vZHVsZXMsIGFuZCB0b1xuICogIGNvcHkgYW5kIGRpc3RyaWJ1dGUgdGhlIHJlc3VsdGluZyBleGVjdXRhYmxlIHVuZGVyIHRlcm1zIG9mIHlvdXIgY2hvaWNlLFxuICogIHByb3ZpZGVkIHRoYXQgeW91IGFsc28gbWVldCwgZm9yIGVhY2ggbGlua2VkIGluZGVwZW5kZW50IG1vZHVsZSwgdGhlIHRlcm1zIGFuZFxuICogIGNvbmRpdGlvbnMgb2YgdGhlIGxpY2Vuc2Ugb2YgdGhhdCBtb2R1bGUuIEFuIGluZGVwZW5kZW50IG1vZHVsZSBpcyBhIG1vZHVsZVxuICogIHdoaWNoIGlzIG5laXRoZXIgZGVyaXZlZCBmcm9tIG5vciBiYXNlZCBvbiB0aGlzIGxpYnJhcnkuIElmIHlvdSBtb2RpZnkgdGhpc1xuICogIGxpYnJhcnksIHlvdSBtYXkgZXh0ZW5kIHRoaXMgZXhjZXB0aW9uIHRvIHlvdXIgdmVyc2lvbiBvZiB0aGUgbGlicmFyeSwgYnV0IHlvdVxuICogIGFyZSBub3Qgb2JsaWdhdGVkIHRvIGRvIHNvLiBJZiB5b3UgZG8gbm90IHdpc2ggdG8gZG8gc28sIGRlbGV0ZSB0aGlzIGV4Y2VwdGlvblxuICogIHN0YXRlbWVudCBmcm9tIHlvdXIgdmVyc2lvbi5cbiAqXG4gKiAgQ29weXJpZ2h0IDIwMjAgV2ViQVJLaXQuXG4gKlxuICogIEF1dGhvcihzKTogV2FsdGVyIFBlcmRhbiBAa2Fsd2FsdCBodHRwczovL2dpdGh1Yi5jb20va2Fsd2FsdFxuICpcbiAqL1xuaW1wb3J0IEFSVG9vbGtpdE5GVCBmcm9tIFwiLi9BUlRvb2xraXRORlRcIjtcbmltcG9ydCBBUkNvbnRyb2xsZXJORlQgZnJvbSBcIi4vQVJDb250cm9sbGVyTkZUXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgQVJUb29sa2l0TkZULFxuICBBUkNvbnRyb2xsZXJORlQsXG59O1xuIl0sIm5hbWVzIjpbIkFSVG9vbGtpdE5GVCIsIkFSQ29udHJvbGxlck5GVCIsIndpZHRoIiwiaGVpZ2h0IiwiY2FtZXJhUGFyYW0iLCJpZCIsImNhbWVyYUlkIiwiY2FtZXJhTG9hZGVkIiwiYXJ0b29sa2l0TkZUIiwibGlzdGVuZXJzIiwibmZ0TWFya2VycyIsInRyYW5zZm9ybV9tYXQiLCJGbG9hdDY0QXJyYXkiLCJ0cmFuc2Zvcm1HTF9SSCIsIm1hcmtlcl90cmFuc2Zvcm1fbWF0IiwidmlkZW9XaWR0aCIsInZpZGVvSGVpZ2h0IiwidmlkZW9TaXplIiwiZnJhbWVwb2ludGVyIiwiZnJhbWVzaXplIiwiZGF0YUhlYXAiLCJ2aWRlb0x1bWEiLCJjYW1lcmFfbWF0IiwidmlkZW9MdW1hUG9pbnRlciIsIm5mdE1hcmtlckZvdW5kIiwibmZ0TWFya2VyRm91bmRUaW1lIiwibmZ0TWFya2VyQ291bnQiLCJfYndwb2ludGVyIiwiZGVmYXVsdE1hcmtlcldpZHRoIiwiaW1hZ2UiLCJyZXN1bHQiLCJkZXRlY3RNYXJrZXIiLCJjb25zb2xlIiwiZXJyb3IiLCJrIiwibyIsImNvbnZlcnRlciIsImluUHJldmlvdXMiLCJpbkN1cnJlbnQiLCJkZXRlY3RORlRNYXJrZXIiLCJNQVJLRVJfTE9TVF9USU1FIiwiaSIsIm5mdE1hcmtlckluZm8iLCJnZXRORlRNYXJrZXIiLCJtYXJrZXJUeXBlIiwiTkZUX01BUktFUiIsImZvdW5kIiwiRGF0ZSIsIm5vdyIsInZpc2libGUiLCJ0cmFja05GVE1hcmtlcklkIiwibWF0cml4Iiwic2V0IiwicG9zZSIsInRyYW5zTWF0VG9HTE1hdCIsImFyZ2xDYW1lcmFWaWV3UkhmIiwiZGlzcGF0Y2hFdmVudCIsIm5hbWUiLCJ0YXJnZXQiLCJkYXRhIiwiaW5kZXgiLCJ0eXBlIiwibWFya2VyIiwibWF0cml4R0xfUkgiLCJzZWxmIiwibWFya2VyV2lkdGgiLCJvYmoiLCJfY29weUltYWdlVG9IZWFwIiwibWFya2VySW5kZXgiLCJORlRNYXJrZXJJbmZvIiwiZ2V0TkZURGF0YSIsImNhbGxiYWNrIiwicHVzaCIsImluZGV4T2YiLCJzcGxpY2UiLCJldmVudCIsImxlbmd0aCIsImNhbGwiLCJzZXREZWJ1Z01vZGUiLCJnZXRQcm9jZXNzaW5nSW1hZ2UiLCJ0cmFuc01hdCIsImdsTWF0Iiwic2NhbGUiLCJ1bmRlZmluZWQiLCJnbE1hdHJpeCIsImdsUmhNYXRyaXgiLCJtX21vZGVsdmlldyIsIm1vZGUiLCJnZXREZWJ1Z01vZGUiLCJzZXRMb2dMZXZlbCIsImdldExvZ0xldmVsIiwidmFsdWUiLCJzZXRQcm9qZWN0aW9uTmVhclBsYW5lIiwiZ2V0UHJvamVjdGlvbk5lYXJQbGFuZSIsInNldFByb2plY3Rpb25GYXJQbGFuZSIsImdldFByb2plY3Rpb25GYXJQbGFuZSIsInNldFRocmVzaG9sZE1vZGUiLCJnZXRUaHJlc2hvbGRNb2RlIiwidGhyZXNob2xkIiwic2V0VGhyZXNob2xkIiwiZ2V0VGhyZXNob2xkIiwidXJsT3JEYXRhIiwib25TdWNjZXNzIiwib25FcnJvciIsImFkZE5GVE1hcmtlcnMiLCJpZHMiLCJuZnQiLCJzZXRJbWFnZVByb2NNb2RlIiwiZ2V0SW1hZ2VQcm9jTW9kZSIsImluaXQiLCJsb2ciLCJsb2FkQ2FtZXJhIiwic2V0dXAiLCJfaW5pdE5GVCIsInBhcmFtcyIsImZyYW1lTWFsbG9jIiwiVWludDhBcnJheSIsImluc3RhbmNlIiwiSEVBUFU4IiwiYnVmZmVyIiwiY2FtZXJhIiwidHJhbnNmb3JtIiwic2V0VGltZW91dCIsInNldHVwQVIyIiwic291cmNlSW1hZ2UiLCJxIiwicCIsInIiLCJnIiwiYiIsImFyQ29udHJvbGxlck5GVCIsIl9pbml0aWFsaXplIiwiVXRpbHMiLCJVTktOT1dOX01BUktFUiIsIm1hcmtlck5GVENvdW50IiwiY2FtZXJhQ291bnQiLCJ2ZXJzaW9uIiwiaW5mbyIsIl9kZWNvcmF0ZSIsInNjb3BlIiwid2luZG93IiwiZ2xvYmFsIiwiZm9yRWFjaCIsIm1ldGhvZCIsImNvIiwibWF0Y2giLCJmZXRjaFJlbW90ZURhdGEiLCJfc3RvcmVEYXRhRmlsZSIsIl9sb2FkQ2FtZXJhIiwiYXJJZCIsInVybHMiLCJvbkVycm9yMiIsInByZWZpeGVzIiwicGVuZGluZyIsImZpbGVuYW1lIiwidmVjIiwiU3RyaW5nTGlzdCIsIm1hcmtlcklkcyIsInB1c2hfYmFjayIsInJldCIsIl9hZGRORlRNYXJrZXJzIiwic2l6ZSIsImdldCIsImVycm9yTnVtYmVyIiwidXJsIiwicHJlZml4IiwiZmlsZW5hbWUxIiwiZmlsZW5hbWUyIiwiZmlsZW5hbWUzIiwiYWpheCIsImJpbmQiLCJJZHMiLCJGUyIsIndyaXRlRmlsZSIsImVuY29kaW5nIiwiZXJyb3JDYWxsYmFjayIsIm9SZXEiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJyZXNwb25zZVR5cGUiLCJ3cml0ZUJ5dGVBcnJheVRvRlMiLCJieXRlQXJyYXkiLCJvbmxvYWQiLCJzdGF0dXMiLCJhcnJheUJ1ZmZlciIsInJlc3BvbnNlIiwic2VuZCIsImF4aW9zIiwidGhlbiIsInN0cmluZyIsImNoYXJDb2RlQXQiXSwic291cmNlUm9vdCI6IiJ9